"""
Python model 'MEDEAS_eu_v1_2.py'
Translated using PySD
"""

from pathlib import Path
import numpy as np
import xarray as xr

from pysd.py_backend.functions import zidz, step, if_then_else, integer, xidz, sum
from pysd.py_backend.statefuls import DelayFixed, Integ, Smooth
from pysd.py_backend.external import ExtConstant, ExtData, ExtLookup
from pysd.py_backend.data import TabData
from pysd.py_backend.lookups import HardcodedLookups
from pysd import Component

__pysd_version__ = "3.10.0"

__data = {"scope": None, "time": lambda: 0}

_root = Path(__file__).parent


_subscript_dict = {
    "GHGs": [
        "CO2",
        "CH4",
        "N2O",
        "PFCs",
        "SF6",
        "HFC134a",
        "HFC23",
        "HFC32",
        "HFC125",
        "HFC143a",
        "HFC152a",
        "HFC227ea",
        "HFC245ca",
        "HFC4310mee",
    ],
    "primary sources": ["coal", "oil", "natural gas", "others"],
    "RCP Scenario": ["RCP26", "RCP45", "RCP60", "RCP85"],
    "HFC type": [
        "HFC134a",
        "HFC23",
        "HFC32",
        "HFC125",
        "HFC143a",
        "HFC152a",
        "HFC227ea",
        "HFC245ca",
        "HFC4310mee",
    ],
    "bottom": ["Layer4"],
    "Layers": ["Layer1", "Layer2", "Layer3", "Layer4"],
    "upper": ["Layer1", "Layer2", "Layer3"],
    "lower": ["Layer2", "Layer3", "Layer4"],
    "water": ["blue water", "green water", "gray water"],
    "Households vehicles": [
        "liq 4wheels",
        "hib 4wheels",
        "elec 4wheels",
        "gas 4wheels",
        "liq 2wheels",
        "elec 2wheels",
    ],
    "vehicleT": [
        "HV liq",
        "HV hib",
        "HV gas",
        "LV liq",
        "LV elec",
        "LV hib",
        "LV gas",
        "bus liq",
        "bus elec",
        "bus hib",
        "bus gas",
        "train liq",
        "train elec",
    ],
    "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    "water0": ['"clean, pumped water"', '"distilled, deionized water"'],
    "materials": [
        "Adhesive",
        "Aluminium",
        "Aluminium mirrors",
        "Cadmium",
        "Carbon fiber",
        "Cement",
        "Chromium",
        "Copper",
        "diesel",
        "Dy",
        '"Electric/electronic components"',
        "Evacuation lines",
        "Fiberglass",
        "Foam glass",
        "Galium",
        "Glass",
        "Glass reinforcing plastic",
        "gravel",
        "Indium",
        "Iron",
        "KNO3 mined",
        "Asphalt",
        "Lime",
        "Limestone",
        "Lithium",
        "Lubricant",
        "Magnesium",
        "Manganese",
        "Heavy equipment",
        "Concrete",
        "Molybdenum",
        "NaNO3 mined",
        "NaNO3 synthetic",
        "Neodymium",
        "Nickel",
        '"Over grid (15%)"',
        '"Over grid (5%)"',
        "Paint",
        "Lead",
        "Plastics",
        "Polypropylene",
        "Rock",
        "Rock wool",
        "Sand",
        "Silicon sand",
        "Silicon wafer modules",
        "Silver",
        "Site preparation",
        "Tin",
        "soda ash",
        "steel",
        "synthetic oil",
        "tellurium",
        "titanium",
        "titanium dioxide",
        "vanadium",
        "wires",
        "zinc",
    ],
    "RES heat": ['"solar-heat"', '"geot-heat"', '"solid bioE-heat"'],
    "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    "sectors1": [
        "Agriculture Hunting Forestry and Fishing",
        "Mining and Quarrying",
        "Food Beverages and Tobacco",
        "Textiles and Textile Products",
        "Leather Leather and Footwear",
        "Wood and Products of Woood and Cork",
        "Pulp Paper Printing and Publishing",
        "Coke Refined Petroleum and Nuclear Fuel",
        "Chemicals and Chemical products",
        "Rubber and Plastics",
        "Other Non Metalic Mineral",
        "Basic Metals and Fabricated Metal",
        "Machinery Nec",
        "Electrical and Optical Equipment",
        "Transport Equipment",
        "Manufacturing Nec Recycling",
        "Electricity Gas and Water Supply",
        "Construction",
        "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
        "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
        "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
        "Hotels and Restaurants",
        "Inland Transport",
        "Water Transport",
        "Air Transport",
        "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
        "Post and Telecommunications",
        "Financial Intermedation",
        "Real Estate Activities",
        "Renting od MEq and Other Business Activities",
        "Public Admin and Defence Compulsory Social Security",
        "Education",
        "Health and Social Work",
        "Other Community Social and Persona Services",
        "Private Households with Employed Persons",
    ],
    "sectors": [
        "Agriculture Hunting Forestry and Fishing",
        "Mining and Quarrying",
        "Food Beverages and Tobacco",
        "Textiles and Textile Products",
        "Leather Leather and Footwear",
        "Wood and Products of Woood and Cork",
        "Pulp Paper Printing and Publishing",
        "Coke Refined Petroleum and Nuclear Fuel",
        "Chemicals and Chemical products",
        "Rubber and Plastics",
        "Other Non Metalic Mineral",
        "Basic Metals and Fabricated Metal",
        "Machinery Nec",
        "Electrical and Optical Equipment",
        "Transport Equipment",
        "Manufacturing Nec Recycling",
        "Electricity Gas and Water Supply",
        "Construction",
        "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
        "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
        "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
        "Hotels and Restaurants",
        "Inland Transport",
        "Water Transport",
        "Air Transport",
        "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
        "Post and Telecommunications",
        "Financial Intermedation",
        "Real Estate Activities",
        "Renting od MEq and Other Business Activities",
        "Public Admin and Defence Compulsory Social Security",
        "Education",
        "Health and Social Work",
        "Other Community Social and Persona Services",
        "Private Households with Employed Persons",
    ],
    "RES elec": [
        "hydro",
        '"geot-elec"',
        '"solid bioE-elec"',
        "oceanic",
        "wind onshore",
        "wind offshore",
        "solar PV",
        "CSP",
    ],
    "scenarios": ["SCEN1", "SCEN2", "SCEN3", "SCEN4", "BAU", "User defined"],
    "primary sources1": ["coal", "oil", "natural gas", "others"],
}

component = Component()

#######################################################################
#                          CONTROL VARIABLES                          #
#######################################################################

_control_vars = {
    "initial_time": lambda: 1995,
    "final_time": lambda: 2050,
    "time_step": lambda: 0.03125,
    "saveper": lambda: time_step(),
}


def _init_outer_references(data):
    for key in data:
        __data[key] = data[key]


@component.add(name="Time")
def time():
    """
    Current time of the model.
    """
    return __data["time"]()


@component.add(
    name="FINAL TIME", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def final_time():
    """
    The final time for the simulation.
    """
    return __data["time"].final_time()


@component.add(
    name="INITIAL TIME", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def initial_time():
    """
    The initial time for the simulation.
    """
    return __data["time"].initial_time()


@component.add(
    name="SAVEPER",
    units="Year",
    limits=(0.0, np.nan),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time_step": 1},
)
def saveper():
    """
    The frequency with which output is stored.
    """
    return __data["time"].saveper()


@component.add(
    name="TIME STEP",
    units="Year",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def time_step():
    """
    The time step for the simulation.
    """
    return __data["time"].time_step()


#######################################################################
#                           MODEL VARIABLES                           #
#######################################################################


@component.add(
    name='"Historic share E industry own-use vs TFEC"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "fe_tot_generation_all_res_elec_ej": 1,
        "real_tfec": 1,
        "historic_energy_industry_ownuse": 1,
    },
)
def historic_share_e_industry_ownuse_vs_tfec():
    """
    Historic share of the energy industry own-energy use vs TFEC.
    """
    return if_then_else(
        time() < 2016,
        lambda: historic_energy_industry_ownuse(time())
        / (real_tfec() - fe_tot_generation_all_res_elec_ej()),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="inertial rate energy intensity TOP DOWN",
    units="EJ/Tdollars",
    subscripts=["scenarios", "sectors", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "historic_rate_final_energy_intensity": 1,
        "efficiency_energy_aceleration": 12,
        "initial_energy_intensity_by_fuel_and_sector_1995": 4,
        "available_improvement_efficiency": 4,
        "activate_bottom_up_method": 4,
        "historical_mean_rate_energy_intensity": 6,
        "evol_final_energy_intensity_by_sector_and_fuel": 4,
        "year_energy_intensity_target": 1,
        "variation_energy_intensity_target": 1,
        "rate_change_intensity_bottom_up": 4,
        "choose_final_sectoral_energy_intensities_evolution_method": 2,
    },
)
def inertial_rate_energy_intensity_top_down():
    """
    This variable models the variation of the energy intensity according to the historical trend and represents the variation of the technological energy efficiency in each economic sector for each type of energy. By default it will follow the historical trend but can be modified by policies or market conditions that accelerate change. IF THEN ELSE(Choose final sectoral energy intensities evolution method[scenarios]=3,IF THEN ELSE(Time<2009, historic rate final energy intensity[sectors,final sources],IF THEN ELSE(Time<2020,IF THEN ELSE(Activate BOTTOM UP method [scenarios,sectors]=0:OR:rate change intensity BOTTOM UP[ scenarios,sectors,final sources]=0, IF THEN ELSE((historical mean rate energy intensity[sectors,final sources]+Efficiency energy aceleration [scenarios,sectors,final sources])<0,Evol final energy intensity by sector and fuel [scenarios,sectors,final sources]*(historical mean rate energy intensity[sectors,final sources] +Efficiency energy aceleration[scenarios,sectors,final sources])*available improvement efficiency[scenarios,sectors],Initial energy intensity by fuel and sector 1995 [sectors,final sources] *(historical mean rate energy intensity[sectors,final sources]+Efficiency energy aceleration[scenarios ,sectors,final sources])),0), IF THEN ELSE (Activate BOTTOM UP method[scenarios,sectors]=0:OR:rate change intensity BOTTOM UP[ scenarios,sectors,final sources]=0, IF THEN ELSE((Efficiency energy aceleration [scenarios,sectors,final sources])<0,Evol final energy intensity by sector and fuel [scenarios,sectors,final sources]*(Efficiency energy aceleration[scenarios,sectors,final sources])*available improvement efficiency [scenarios,sectors],Initial energy intensity by fuel and sector 1995 [sectors,final sources] *(Efficiency energy aceleration[scenarios ,sectors,final sources])),0)))+variation energy intensity TARGET[scenarios,sectors,final sources],IF THEN ELSE(Time>2009, IF THEN ELSE(Activate BOTTOM UP method [scenarios,sectors]=0:OR:rate change intensity BOTTOM UP[ scenarios,sectors,final sources]=0, IF THEN ELSE((historical mean rate energy intensity[sectors,final sources]+Efficiency energy aceleration [scenarios,sectors,final sources])<0,Evol final energy intensity by sector and fuel [scenarios,sectors,final sources]*(historical mean rate energy intensity[sectors,final sources] +Efficiency energy aceleration[scenarios,sectors,final sources])*available improvement efficiency[scenarios,sectors],Initial energy intensity by fuel and sector 1995 [sectors,final sources] *(historical mean rate energy intensity[sectors,final sources]+Efficiency energy aceleration[scenarios ,sectors,final sources])),0), historic rate final energy intensity[sectors,final sources]))
    """
    return if_then_else(
        time() < 2009,
        lambda: historic_rate_final_energy_intensity().expand_dims(
            {"scenarios": _subscript_dict["scenarios"]}, 2
        ),
        lambda: if_then_else(
            (choose_final_sectoral_energy_intensities_evolution_method() == 1)
            .expand_dims({"sectors": _subscript_dict["sectors"]}, 1)
            .expand_dims({"final sources": _subscript_dict["final sources"]}, 2),
            lambda: if_then_else(
                np.logical_or(
                    (activate_bottom_up_method().rename({"sectors1": "sectors"}) == 0),
                    rate_change_intensity_bottom_up().rename({"sectors1": "sectors"})
                    == 0,
                ),
                lambda: if_then_else(
                    efficiency_energy_aceleration() < 0,
                    lambda: evol_final_energy_intensity_by_sector_and_fuel()
                    * efficiency_energy_aceleration()
                    * available_improvement_efficiency(),
                    lambda: (
                        initial_energy_intensity_by_fuel_and_sector_1995().rename(
                            {"sectors1": "sectors"}
                        )
                        * efficiency_energy_aceleration().transpose(
                            "sectors", "final sources", "scenarios"
                        )
                    ).transpose("scenarios", "sectors", "final sources"),
                ),
                lambda: xr.DataArray(
                    0,
                    {
                        "scenarios": _subscript_dict["scenarios"],
                        "sectors": _subscript_dict["sectors"],
                        "final sources": _subscript_dict["final sources"],
                    },
                    ["scenarios", "sectors", "final sources"],
                ),
            ),
            lambda: if_then_else(
                (time() < year_energy_intensity_target())
                .expand_dims({"sectors": _subscript_dict["sectors"]}, 1)
                .expand_dims({"final sources": _subscript_dict["final sources"]}, 2),
                lambda: if_then_else(
                    np.logical_or(
                        (
                            activate_bottom_up_method().rename({"sectors1": "sectors"})
                            == 0
                        ),
                        rate_change_intensity_bottom_up().rename(
                            {"sectors1": "sectors"}
                        )
                        == 0,
                    ),
                    lambda: if_then_else(
                        historical_mean_rate_energy_intensity().rename(
                            {"sectors1": "sectors"}
                        )
                        + efficiency_energy_aceleration().transpose(
                            "sectors", "final sources", "scenarios"
                        )
                        < 0,
                        lambda: (
                            evol_final_energy_intensity_by_sector_and_fuel()
                            * (
                                historical_mean_rate_energy_intensity().rename(
                                    {"sectors1": "sectors"}
                                )
                                + efficiency_energy_aceleration().transpose(
                                    "sectors", "final sources", "scenarios"
                                )
                            ).transpose("scenarios", "sectors", "final sources")
                            * available_improvement_efficiency()
                        ).transpose("sectors", "final sources", "scenarios"),
                        lambda: initial_energy_intensity_by_fuel_and_sector_1995().rename(
                            {"sectors1": "sectors"}
                        )
                        * (
                            historical_mean_rate_energy_intensity().rename(
                                {"sectors1": "sectors"}
                            )
                            + efficiency_energy_aceleration().transpose(
                                "sectors", "final sources", "scenarios"
                            )
                        ),
                    ).transpose("scenarios", "sectors", "final sources"),
                    lambda: xr.DataArray(
                        0,
                        {
                            "scenarios": _subscript_dict["scenarios"],
                            "sectors": _subscript_dict["sectors"],
                            "final sources": _subscript_dict["final sources"],
                        },
                        ["scenarios", "sectors", "final sources"],
                    ),
                ),
                lambda: if_then_else(
                    (choose_final_sectoral_energy_intensities_evolution_method() == 2)
                    .expand_dims({"sectors": _subscript_dict["sectors"]}, 1)
                    .expand_dims(
                        {"final sources": _subscript_dict["final sources"]}, 2
                    ),
                    lambda: if_then_else(
                        np.logical_or(
                            (
                                activate_bottom_up_method().rename(
                                    {"sectors1": "sectors"}
                                )
                                == 0
                            ),
                            rate_change_intensity_bottom_up().rename(
                                {"sectors1": "sectors"}
                            )
                            == 0,
                        ),
                        lambda: if_then_else(
                            historical_mean_rate_energy_intensity().rename(
                                {"sectors1": "sectors"}
                            )
                            + efficiency_energy_aceleration().transpose(
                                "sectors", "final sources", "scenarios"
                            )
                            < 0,
                            lambda: (
                                evol_final_energy_intensity_by_sector_and_fuel()
                                * (
                                    historical_mean_rate_energy_intensity().rename(
                                        {"sectors1": "sectors"}
                                    )
                                    + efficiency_energy_aceleration().transpose(
                                        "sectors", "final sources", "scenarios"
                                    )
                                ).transpose("scenarios", "sectors", "final sources")
                                * available_improvement_efficiency()
                            ).transpose("sectors", "final sources", "scenarios"),
                            lambda: initial_energy_intensity_by_fuel_and_sector_1995().rename(
                                {"sectors1": "sectors"}
                            )
                            * (
                                historical_mean_rate_energy_intensity().rename(
                                    {"sectors1": "sectors"}
                                )
                                + efficiency_energy_aceleration().transpose(
                                    "sectors", "final sources", "scenarios"
                                )
                            ),
                        ).transpose("scenarios", "sectors", "final sources"),
                        lambda: xr.DataArray(
                            0,
                            {
                                "scenarios": _subscript_dict["scenarios"],
                                "sectors": _subscript_dict["sectors"],
                                "final sources": _subscript_dict["final sources"],
                            },
                            ["scenarios", "sectors", "final sources"],
                        ),
                    ),
                    lambda: if_then_else(
                        np.logical_or(
                            (
                                activate_bottom_up_method().rename(
                                    {"sectors1": "sectors"}
                                )
                                == 0
                            ),
                            rate_change_intensity_bottom_up().rename(
                                {"sectors1": "sectors"}
                            )
                            == 0,
                        ),
                        lambda: if_then_else(
                            efficiency_energy_aceleration() < 0,
                            lambda: evol_final_energy_intensity_by_sector_and_fuel()
                            * efficiency_energy_aceleration()
                            * available_improvement_efficiency(),
                            lambda: (
                                initial_energy_intensity_by_fuel_and_sector_1995().rename(
                                    {"sectors1": "sectors"}
                                )
                                * efficiency_energy_aceleration().transpose(
                                    "sectors", "final sources", "scenarios"
                                )
                            ).transpose("scenarios", "sectors", "final sources"),
                        )
                        + variation_energy_intensity_target(),
                        lambda: xr.DataArray(
                            0,
                            {
                                "scenarios": _subscript_dict["scenarios"],
                                "sectors": _subscript_dict["sectors"],
                                "final sources": _subscript_dict["final sources"],
                            },
                            ["scenarios", "sectors", "final sources"],
                        ),
                    ),
                ),
            ),
        ).transpose("sectors", "final sources", "scenarios"),
    ).transpose("scenarios", "sectors", "final sources")


@component.add(
    name="Year policy to improve efficiency",
    units="Year",
    subscripts=["scenarios", "sectors", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "choose_policies_of_intensities_global_or_by_sector": 1,
        "year_policy_to_improve_efficiency_by_sector": 1,
        "year_policy_to_improve_efficiency_sectoruniform": 1,
    },
)
def year_policy_to_improve_efficiency():
    """
    Year when the policy to improve efficiency in sectors start. For each of five final energies.
    """
    return if_then_else(
        (choose_policies_of_intensities_global_or_by_sector() == 1)
        .expand_dims({"sectors": _subscript_dict["sectors"]}, 1)
        .expand_dims({"final sources": _subscript_dict["final sources"]}, 2),
        lambda: year_policy_to_improve_efficiency_by_sector().rename(
            {"sectors1": "sectors"}
        ),
        lambda: year_policy_to_improve_efficiency_sectoruniform().expand_dims(
            {"sectors": _subscript_dict["sectors"]}, 1
        ),
    )


@component.add(
    name="Policy change energy speed",
    units="Dmnl",
    subscripts=["scenarios", "sectors", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "choose_policies_of_intensities_global_or_by_sector": 1,
        "policy_change_energy_speed_by_sector": 1,
        "policy_change_energy_speed_sectoruniform": 1,
    },
)
def policy_change_energy_speed():
    """
    Selection of the speed of application of the different policies to change the final energy
    """
    return if_then_else(
        (choose_policies_of_intensities_global_or_by_sector() == 1)
        .expand_dims({"sectors": _subscript_dict["sectors"]}, 1)
        .expand_dims({"final sources": _subscript_dict["final sources"]}, 2),
        lambda: policy_change_energy_speed_by_sector().rename({"sectors1": "sectors"}),
        lambda: policy_change_energy_speed_sectoruniform().expand_dims(
            {"sectors": _subscript_dict["sectors"]}, 1
        ),
    )


@component.add(
    name="variation energy intensity TARGET",
    units="EJ/Tdollars",
    subscripts=["scenarios", "sectors", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "choose_energy_intensity_target_method": 1,
        "time": 4,
        "final_energy_intensity_2020": 3,
        "energy_intensity_target_by_sector_and_fuel": 1,
        "final_year_target": 4,
        "year_energy_intensity_target": 4,
        "pct_change_energy_intensity_target": 1,
    },
)
def variation_energy_intensity_target():
    """
    Variation in energy intensity by sector and final energy defined by user targets.
    """
    return if_then_else(
        (choose_energy_intensity_target_method() == 1)
        .expand_dims({"sectors": _subscript_dict["sectors"]}, 1)
        .expand_dims({"final sources": _subscript_dict["final sources"]}, 2),
        lambda: if_then_else(
            (time() > final_year_target())
            .expand_dims({"sectors": _subscript_dict["sectors"]}, 1)
            .expand_dims({"final sources": _subscript_dict["final sources"]}, 2),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "sectors": _subscript_dict["sectors"],
                    "final sources": _subscript_dict["final sources"],
                },
                ["scenarios", "sectors", "final sources"],
            ),
            lambda: if_then_else(
                (time() < year_energy_intensity_target())
                .expand_dims({"sectors": _subscript_dict["sectors"]}, 1)
                .expand_dims({"final sources": _subscript_dict["final sources"]}, 2),
                lambda: xr.DataArray(
                    0,
                    {
                        "scenarios": _subscript_dict["scenarios"],
                        "sectors": _subscript_dict["sectors"],
                        "final sources": _subscript_dict["final sources"],
                    },
                    ["scenarios", "sectors", "final sources"],
                ),
                lambda: (
                    energy_intensity_target_by_sector_and_fuel().rename(
                        {"sectors1": "sectors"}
                    )
                    - final_energy_intensity_2020().transpose(
                        "scenarios", "sectors", "final sources"
                    )
                )
                / (final_year_target() - year_energy_intensity_target()),
            ),
        ),
        lambda: if_then_else(
            (time() > final_year_target())
            .expand_dims({"final sources": _subscript_dict["final sources"]}, 1)
            .expand_dims({"sectors": _subscript_dict["sectors"]}, 2),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "final sources": _subscript_dict["final sources"],
                    "sectors": _subscript_dict["sectors"],
                },
                ["scenarios", "final sources", "sectors"],
            ),
            lambda: if_then_else(
                (time() < year_energy_intensity_target())
                .expand_dims({"final sources": _subscript_dict["final sources"]}, 1)
                .expand_dims({"sectors": _subscript_dict["sectors"]}, 2),
                lambda: xr.DataArray(
                    0,
                    {
                        "scenarios": _subscript_dict["scenarios"],
                        "final sources": _subscript_dict["final sources"],
                        "sectors": _subscript_dict["sectors"],
                    },
                    ["scenarios", "final sources", "sectors"],
                ),
                lambda: (
                    final_energy_intensity_2020()
                    * (1 + pct_change_energy_intensity_target())
                    - final_energy_intensity_2020()
                )
                / (final_year_target() - year_energy_intensity_target()),
            ),
        ).transpose("scenarios", "sectors", "final sources"),
    )


@component.add(
    name="Policy to improve efficiency speed",
    units="Dmnl",
    subscripts=["scenarios", "sectors", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "choose_policies_of_intensities_global_or_by_sector": 1,
        "policy_to_improve_efficiency_speed_by_sector": 1,
        "policy_to_improve_efficiency_speed_sectoruniform": 1,
    },
)
def policy_to_improve_efficiency_speed():
    """
    Selection of the speed of application of the different policies to improve the efficiency.
    """
    return if_then_else(
        (choose_policies_of_intensities_global_or_by_sector() == 1)
        .expand_dims({"sectors": _subscript_dict["sectors"]}, 1)
        .expand_dims({"final sources": _subscript_dict["final sources"]}, 2),
        lambda: policy_to_improve_efficiency_speed_by_sector().rename(
            {"sectors1": "sectors"}
        ),
        lambda: policy_to_improve_efficiency_speed_sectoruniform()
        .expand_dims({"sectors": _subscript_dict["sectors"]}, 1)
        .expand_dims({"final sources": _subscript_dict["final sources"]}, 2),
    )


@component.add(
    name="Year policy change energy",
    units="Year",
    subscripts=["scenarios", "sectors", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "choose_policies_of_intensities_global_or_by_sector": 1,
        "year_policy_change_energy_by_sector": 1,
        "year_policy_change_energy_sectoruniform": 1,
    },
)
def year_policy_change_energy():
    """
    Year when the policy to change final energy in the sectors start. For each of five final energies.
    """
    return if_then_else(
        (choose_policies_of_intensities_global_or_by_sector() == 1)
        .expand_dims({"sectors": _subscript_dict["sectors"]}, 1)
        .expand_dims({"final sources": _subscript_dict["final sources"]}, 2),
        lambda: year_policy_change_energy_by_sector().rename({"sectors1": "sectors"}),
        lambda: year_policy_change_energy_sectoruniform().expand_dims(
            {"sectors": _subscript_dict["sectors"]}, 1
        ),
    )


@component.add(
    name="efficiency rate of substitution",
    units="Dmnl",
    subscripts=["scenarios", "sectors", "final sources", "final sources1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "choose_policies_of_intensities_global_or_by_sector": 1,
        "efficiency_rate_of_substitution_by_sector": 1,
        "efficiency_rate_of_substitution_sectoruniform": 1,
    },
)
def efficiency_rate_of_substitution():
    """
    It is necessary to take into account that the energy efficiencies of the two technologies exchanged do not necessarily have to be the same. In other words, a decrease in the energy intensity of (a) will not imply the same increase in the energy intensity of (b). This possible difference is compensated through the parameter “Efficiency rate of substitution”.
    """
    return if_then_else(
        (choose_policies_of_intensities_global_or_by_sector() == 1)
        .expand_dims({"sectors": _subscript_dict["sectors"]}, 1)
        .expand_dims({"final sources": _subscript_dict["final sources"]}, 2)
        .expand_dims({"final sources1": _subscript_dict["final sources1"]}, 3),
        lambda: efficiency_rate_of_substitution_by_sector().rename(
            {"sectors1": "sectors"}
        ),
        lambda: efficiency_rate_of_substitution_sectoruniform().expand_dims(
            {"sectors": _subscript_dict["sectors"]}, 1
        ),
    )


@component.add(
    name="Final energy intensity 2020",
    units="EJ/Tdollars",
    subscripts=["scenarios", "final sources", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "year_energy_intensity_target": 1,
        "evol_final_energy_intensity_by_sector_and_fuel": 1,
        "aux20_0": 1,
    },
)
def final_energy_intensity_2020():
    """
    Energy intensity by sector and final source in 2009
    """
    return if_then_else(
        (time() < year_energy_intensity_target())
        .expand_dims({"sectors": _subscript_dict["sectors"]}, 1)
        .expand_dims({"final sources": _subscript_dict["final sources"]}, 2),
        lambda: evol_final_energy_intensity_by_sector_and_fuel(),
        lambda: aux20_0().transpose("scenarios", "sectors", "final sources"),
    ).transpose("scenarios", "final sources", "sectors")


@component.add(
    name="abundance coal World",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_coal": 1},
)
def abundance_coal_world():
    return abundance_coal()


@component.add(
    name='"abundance total nat. gas World"',
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_total_nat_gas": 1},
)
def abundance_total_nat_gas_world():
    return abundance_total_nat_gas()


@component.add(
    name='"abundance total nat. gas"',
    subscripts=["scenarios"],
    comp_type="Data",
    comp_subtype="Normal",
    depends_on={"time": 1, "__data__": "_data_abundance_total_nat_gas"},
)
def abundance_total_nat_gas():
    return _data_abundance_total_nat_gas(time())


_data_abundance_total_nat_gas = TabData(
    '"abundance total nat. gas"',
    "abundance_total_nat_gas",
    {"scenarios": _subscript_dict["scenarios"]},
    "interpolate",
)


@component.add(
    name="abundance total oil",
    subscripts=["scenarios"],
    comp_type="Data",
    comp_subtype="Normal",
    depends_on={"time": 1, "__data__": "_data_abundance_total_oil"},
)
def abundance_total_oil():
    return _data_abundance_total_oil(time())


_data_abundance_total_oil = TabData(
    "abundance total oil",
    "abundance_total_oil",
    {"scenarios": _subscript_dict["scenarios"]},
    "interpolate",
)


@component.add(
    name="abundance coal",
    subscripts=["scenarios"],
    comp_type="Data",
    comp_subtype="Normal",
    depends_on={"time": 1, "__data__": "_data_abundance_coal"},
)
def abundance_coal():
    return _data_abundance_coal(time())


_data_abundance_coal = TabData(
    "abundance coal",
    "abundance_coal",
    {"scenarios": _subscript_dict["scenarios"]},
    "interpolate",
)


@component.add(
    name="abundance total oil World",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_total_oil": 1},
)
def abundance_total_oil_world():
    return abundance_total_oil()


@component.add(
    name="Abundance primary sources",
    units="Dmnl",
    subscripts=["scenarios", "primary sources"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "abundance_coal_world": 1,
        "abundance_total_oil_world": 1,
        "abundance_total_nat_gas_world": 1,
    },
)
def abundance_primary_sources():
    """
    The parameter abundance varies between (1;0). Abundance=1 while the supply covers the demand; the closest to 0 indicates a higher divergence between supply and demand.
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "primary sources": _subscript_dict["primary sources"],
        },
        ["scenarios", "primary sources"],
    )
    value.loc[:, ["coal"]] = (
        abundance_coal_world().expand_dims({"primary sources": ["coal"]}, 1).values
    )
    value.loc[:, ["oil"]] = (
        abundance_total_oil_world().expand_dims({"primary sources": ["oil"]}, 1).values
    )
    value.loc[:, ["natural gas"]] = (
        abundance_total_nat_gas_world()
        .expand_dims({"primary sources": ["natural gas"]}, 1)
        .values
    )
    value.loc[:, ["others"]] = 1
    return value


@component.add(
    name="Pressure to change energy technology",
    subscripts=["scenarios", "sectors", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"implementatio_policy_to_change_final_energy": 1},
)
def pressure_to_change_energy_technology():
    """
    This variable represents the pressure in each economic sector for substituting a final energy source for another. This change depending on the sectors will have different technological difficulty and different cost. This pressure may be due to (1) energy policies, eg substitution of fossil fuels for electrical energy, or (2) by variations in the price of each type of final energy. This price variation will be related to the relative abundance of energy sources.
    """
    return np.minimum(np.maximum(implementatio_policy_to_change_final_energy(), 0), 1)


@component.add(
    name='"share gas/(coal +gas) for Elec"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "switch_scarcityps_elec_substit": 1,
        "hist_share_gascoal_gas_elec": 2,
        "future_share_gascoalgas_for_elec": 1,
        "time": 1,
    },
)
def share_gascoal_gas_for_elec():
    """
    Share of natural gas for electricity in relation to the total fossil fuels for electricity.
    """
    return if_then_else(
        switch_scarcityps_elec_substit() == 0,
        lambda: xr.DataArray(
            hist_share_gascoal_gas_elec(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            time() > 2014,
            lambda: future_share_gascoalgas_for_elec(),
            lambda: xr.DataArray(
                hist_share_gascoal_gas_elec(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
        ),
    )


@component.add(
    name='"share gas/(coal+gas) for Elec in 2014"',
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_gascoalgas_for_elec_in_2014"},
)
def share_gascoalgas_for_elec_in_2014():
    """
    Historic data
    """
    return _ext_constant_share_gascoalgas_for_elec_in_2014()


_ext_constant_share_gascoalgas_for_elec_in_2014 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "AA40",
    {},
    _root,
    {},
    "_ext_constant_share_gascoalgas_for_elec_in_2014",
)


@component.add(
    name='"perception of inter-fuel PS scarcity coal-gas"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"perception_of_interfuel_primary_sources_scarcity": 1},
)
def perception_of_interfuel_ps_scarcity_coalgas():
    """
    Socieconomic perception of final energy scarcity between fuels (gas-coal)
    """
    return np.maximum(
        0,
        perception_of_interfuel_primary_sources_scarcity()
        .loc[:, "coal", "natural gas"]
        .reset_coords(drop=True),
    )


@component.add(
    name='"perception of inter-fuel PS scarcity coal-oil"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"perception_of_interfuel_primary_sources_scarcity": 1},
)
def perception_of_interfuel_ps_scarcity_coaloil():
    """
    Socieconomic perception of final energy scarcity between fuels (oil-coal)
    """
    return np.maximum(
        0,
        perception_of_interfuel_primary_sources_scarcity()
        .loc[:, "coal", "oil"]
        .reset_coords(drop=True),
    )


@component.add(
    name='"perception of inter-fuel PS scarcity FF-oil"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "perception_of_interfuel_ps_scarcity_coaloil": 1,
        "perception_of_interfuel_ps_scarcity_nat_gasoil": 1,
    },
)
def perception_of_interfuel_ps_scarcity_ffoil():
    """
    Socieconomic perception of final energy scarcity between fuels (oil-fossil fuels)
    """
    return np.maximum(
        perception_of_interfuel_ps_scarcity_coaloil(),
        perception_of_interfuel_ps_scarcity_nat_gasoil(),
    )


@component.add(
    name='"perception of inter-fuel PS scarcity gas-coal"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"perception_of_interfuel_primary_sources_scarcity": 1},
)
def perception_of_interfuel_ps_scarcity_gascoal():
    """
    Socieconomic perception of final energy scarcity between fuels (gas-coal)
    """
    return np.maximum(
        0,
        perception_of_interfuel_primary_sources_scarcity()
        .loc[:, "natural gas", "coal"]
        .reset_coords(drop=True),
    )


@component.add(
    name='"perception of inter-fuel PS scarcity nat. gas-oil"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"perception_of_interfuel_primary_sources_scarcity": 1},
)
def perception_of_interfuel_ps_scarcity_nat_gasoil():
    """
    Socieconomic perception of final energy scarcity between fuels (oil-natural gas)
    """
    return np.maximum(
        0,
        perception_of_interfuel_primary_sources_scarcity()
        .loc[:, "natural gas", "oil"]
        .reset_coords(drop=True),
    )


@component.add(
    name="decrease share gas for Elec",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_auxiliar_elec": 1,
        "perception_of_interfuel_ps_scarcity_coalgas": 1,
        "future_share_gascoalgas_for_elec": 1,
    },
)
def decrease_share_gas_for_elec():
    """
    Decrease in future share of gas over coal+gas for electricity generation.
    """
    return (
        max_auxiliar_elec()
        * perception_of_interfuel_ps_scarcity_coalgas()
        * future_share_gascoalgas_for_elec()
    )


@component.add(
    name="decrease share oil for Elec",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_auxiliar_elec": 1,
        "perception_of_interfuel_ps_scarcity_ffoil": 1,
        "future_share_oilff_for_elec": 1,
    },
)
def decrease_share_oil_for_elec():
    """
    Decrease in future share of oil over (oil+coal+gas) for electricity generation.
    """
    return (
        max_auxiliar_elec()
        * perception_of_interfuel_ps_scarcity_ffoil()
        * future_share_oilff_for_elec()
    )


@component.add(
    name='"perception of inter-fuel PS scarcity oil-nat.gas"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"perception_of_interfuel_primary_sources_scarcity": 1},
)
def perception_of_interfuel_ps_scarcity_oilnatgas():
    """
    Socieconomic perception of final energy scarcity between fuels (oil-natural gas)
    """
    return np.maximum(
        0,
        perception_of_interfuel_primary_sources_scarcity()
        .loc[:, "oil", "natural gas"]
        .reset_coords(drop=True),
    )


@component.add(
    name="max auxiliar Elec", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def max_auxiliar_elec():
    """
    Auxiliarity variable that limit the interchange between fuels to cover electricity.
    """
    return 0.03


@component.add(
    name="increase share oil for Elec",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_auxiliar_elec": 1,
        "perception_of_interfuel_ps_scarcity_oilff": 1,
        "future_share_oilff_for_elec": 1,
    },
)
def increase_share_oil_for_elec():
    """
    Increase in future share of oil over (oil+coal+gas) for electricity generation.
    """
    return (
        max_auxiliar_elec()
        * perception_of_interfuel_ps_scarcity_oilff()
        * (1 - future_share_oilff_for_elec())
    )


@component.add(
    name='"Future share gas+coal/FF for elec"',
    units="Dnml",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"future_share_oilff_for_elec": 1},
)
def future_share_gascoalff_for_elec():
    return 1 - future_share_oilff_for_elec()


@component.add(
    name='"Future share gas/(coal+gas) for Elec"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_future_share_gascoalgas_for_elec": 1},
    other_deps={
        "_integ_future_share_gascoalgas_for_elec": {
            "initial": {"share_gascoalgas_for_elec_in_2014": 1},
            "step": {
                "increase_share_gas_for_elec": 1,
                "decrease_share_gas_for_elec": 1,
            },
        }
    },
)
def future_share_gascoalgas_for_elec():
    """
    Endogenous future share of gas over coal+gas for electricity generation.
    """
    return _integ_future_share_gascoalgas_for_elec()


_integ_future_share_gascoalgas_for_elec = Integ(
    lambda: increase_share_gas_for_elec() - decrease_share_gas_for_elec(),
    lambda: xr.DataArray(
        share_gascoalgas_for_elec_in_2014(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_future_share_gascoalgas_for_elec",
)


@component.add(
    name='"Future share oil/FF for Elec"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_future_share_oilff_for_elec": 1},
    other_deps={
        "_integ_future_share_oilff_for_elec": {
            "initial": {"share_oilff_for_elec_in_2015": 1},
            "step": {
                "increase_share_oil_for_elec": 1,
                "decrease_share_oil_for_elec": 1,
            },
        }
    },
)
def future_share_oilff_for_elec():
    """
    Endogenous future share of oil over (oil+coal+gas) for electricity generation.
    """
    return _integ_future_share_oilff_for_elec()


_integ_future_share_oilff_for_elec = Integ(
    lambda: increase_share_oil_for_elec() - decrease_share_oil_for_elec(),
    lambda: xr.DataArray(
        share_oilff_for_elec_in_2015(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_future_share_oilff_for_elec",
)


@component.add(
    name='"switch scarcity-PS elec substit"',
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def switch_scarcityps_elec_substit():
    """
    This swith allows the endogenous replacement of primary and final fuels depending on their relative abundance: =1: activated. =0: not activated
    """
    return 1


@component.add(
    name='"perception of inter-fuel PS scarcity oil-coal"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"perception_of_interfuel_primary_sources_scarcity": 1},
)
def perception_of_interfuel_ps_scarcity_oilcoal():
    """
    Socieconomic perception of final energy scarcity between fuels (oil-coal)
    """
    return np.maximum(
        0,
        perception_of_interfuel_primary_sources_scarcity()
        .loc[:, "oil", "coal"]
        .reset_coords(drop=True),
    )


@component.add(
    name='"perception of inter-fuel PS scarcity oil-FF"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "perception_of_interfuel_ps_scarcity_oilcoal": 1,
        "perception_of_interfuel_ps_scarcity_oilnatgas": 1,
    },
)
def perception_of_interfuel_ps_scarcity_oilff():
    """
    Socieconomic perception of final energy scarcity between fuels (oil-fossil fuels)
    """
    return np.maximum(
        perception_of_interfuel_ps_scarcity_oilcoal(),
        perception_of_interfuel_ps_scarcity_oilnatgas(),
    )


@component.add(
    name='"share oil/FF for Elec in 2015"',
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_oilff_for_elec_in_2015"},
)
def share_oilff_for_elec_in_2015():
    """
    Historic data
    """
    return _ext_constant_share_oilff_for_elec_in_2015()


_ext_constant_share_oilff_for_elec_in_2015 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "AB39",
    {},
    _root,
    {},
    "_ext_constant_share_oilff_for_elec_in_2015",
)


@component.add(
    name="increase share gas for Elec",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_auxiliar_elec": 1,
        "perception_of_interfuel_ps_scarcity_gascoal": 1,
        "future_share_gascoalgas_for_elec": 1,
    },
)
def increase_share_gas_for_elec():
    """
    Increase in future share of gas over coal+gas for electricity generation.
    """
    return (
        max_auxiliar_elec()
        * perception_of_interfuel_ps_scarcity_gascoal()
        * (1 - future_share_gascoalgas_for_elec())
    )


@component.add(
    name="perception in primary sources scarcity",
    units="Dmnl",
    subscripts=["scenarios", "primary sources"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_perception_in_primary_sources_scarcity": 1},
    other_deps={
        "_integ_perception_in_primary_sources_scarcity": {
            "initial": {},
            "step": {
                "increase_in_perception_ps_scarcity": 1,
                "reduction_in_perception_ps_scarcity": 1,
            },
        }
    },
)
def perception_in_primary_sources_scarcity():
    """
    Perception of primary sources scarcity of each fuel by economic sectors. This perception drives the fuel replacement for electriciy and heat.
    """
    return _integ_perception_in_primary_sources_scarcity()


_integ_perception_in_primary_sources_scarcity = Integ(
    lambda: increase_in_perception_ps_scarcity()
    - reduction_in_perception_ps_scarcity(),
    lambda: xr.DataArray(
        0,
        {
            "scenarios": _subscript_dict["scenarios"],
            "primary sources": _subscript_dict["primary sources"],
        },
        ["scenarios", "primary sources"],
    ),
    "_integ_perception_in_primary_sources_scarcity",
)


@component.add(
    name="Households total final energy demand",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"households_final_energy_demand": 1},
)
def households_total_final_energy_demand():
    """
    Total final energy demand of households.
    """
    return sum(
        households_final_energy_demand().rename({"final sources": "final sources!"}),
        dim=["final sources!"],
    )


@component.add(
    name="reduction in perception PS scarcity",
    units="Dmnl",
    subscripts=["scenarios", "primary sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "perception_in_primary_sources_scarcity": 1,
        "energy_scarcity_forgetting_time": 1,
    },
)
def reduction_in_perception_ps_scarcity():
    """
    Reduction of the perception of energy scarcity of economic sectors due to the "forgetting" effect.
    """
    return perception_in_primary_sources_scarcity() / energy_scarcity_forgetting_time()


@component.add(
    name="Fuel scarcity pressure",
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "activate_scarcity_feedback_final_fuel_replacement_0": 1,
        "perception_of_final_energy_scarcity": 1,
    },
)
def fuel_scarcity_pressure():
    """
    Pressure due significant variations in the fuel scarcity of each type of final energy.
    """
    return if_then_else(
        (activate_scarcity_feedback_final_fuel_replacement_0() == 1).expand_dims(
            {"final sources": _subscript_dict["final sources"]}, 1
        ),
        lambda: perception_of_final_energy_scarcity(),
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "final sources": _subscript_dict["final sources"],
            },
            ["scenarios", "final sources"],
        ),
    )


@component.add(
    name='"perception of inter-fuel primary sources scarcity"',
    units="Dmnl",
    subscripts=["scenarios", "primary sources1", "primary sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sensitivity_to_scarcity": 4,
        "perception_in_primary_sources_scarcity": 8,
    },
)
def perception_of_interfuel_primary_sources_scarcity():
    """
    Perception of primary energy scarcity between fuels. This perception drives the fuel replacement in electricity and heat sectors.
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "primary sources1": _subscript_dict["primary sources1"],
            "primary sources": _subscript_dict["primary sources"],
        },
        ["scenarios", "primary sources1", "primary sources"],
    )
    value.loc[:, ["coal"], :] = (
        if_then_else(
            (sensitivity_to_scarcity() == 0).expand_dims(
                {"primary sources": _subscript_dict["primary sources"]}, 1
            ),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "primary sources": _subscript_dict["primary sources"],
                },
                ["scenarios", "primary sources"],
            ),
            lambda: zidz(
                perception_in_primary_sources_scarcity()
                - perception_in_primary_sources_scarcity()
                .loc[:, "coal"]
                .reset_coords(drop=True),
                1,
            ),
        )
        .expand_dims({"primary sources1": ["coal"]}, 1)
        .values
    )
    value.loc[:, ["oil"], :] = (
        if_then_else(
            (sensitivity_to_scarcity() == 0).expand_dims(
                {"primary sources": _subscript_dict["primary sources"]}, 1
            ),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "primary sources": _subscript_dict["primary sources"],
                },
                ["scenarios", "primary sources"],
            ),
            lambda: zidz(
                perception_in_primary_sources_scarcity()
                - perception_in_primary_sources_scarcity()
                .loc[:, "oil"]
                .reset_coords(drop=True),
                1,
            ),
        )
        .expand_dims({"primary sources1": ["oil"]}, 1)
        .values
    )
    value.loc[:, ["natural gas"], :] = (
        if_then_else(
            (sensitivity_to_scarcity() == 0).expand_dims(
                {"primary sources": _subscript_dict["primary sources"]}, 1
            ),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "primary sources": _subscript_dict["primary sources"],
                },
                ["scenarios", "primary sources"],
            ),
            lambda: zidz(
                perception_in_primary_sources_scarcity()
                - perception_in_primary_sources_scarcity()
                .loc[:, "natural gas"]
                .reset_coords(drop=True),
                1,
            ),
        )
        .expand_dims({"primary sources1": ["natural gas"]}, 1)
        .values
    )
    value.loc[:, ["others"], :] = (
        if_then_else(
            (sensitivity_to_scarcity() == 0).expand_dims(
                {"primary sources": _subscript_dict["primary sources"]}, 1
            ),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "primary sources": _subscript_dict["primary sources"],
                },
                ["scenarios", "primary sources"],
            ),
            lambda: zidz(
                perception_in_primary_sources_scarcity()
                - perception_in_primary_sources_scarcity()
                .loc[:, "others"]
                .reset_coords(drop=True),
                1,
            ),
        )
        .expand_dims({"primary sources1": ["others"]}, 1)
        .values
    )
    return value


@component.add(
    name="scarcity primary sources",
    units="Dmnl",
    subscripts=["scenarios", "primary sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_primary_sources": 1},
)
def scarcity_primary_sources():
    """
    The parameter scarcity varies between (1;0). (Scarcity =1-Abundance) Scarcity=0 while the supply covers the demand; the closest to 1 indicates a higher divergence between supply and demand.
    """
    return 1 - abundance_primary_sources()


@component.add(
    name="increase in perception PS scarcity",
    units="Dmnl",
    subscripts=["scenarios", "primary sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "scarcity_primary_sources": 1,
        "sensitivity_to_scarcity": 1,
        "perception_in_primary_sources_scarcity": 1,
    },
)
def increase_in_perception_ps_scarcity():
    """
    Increase in socieconomic perception of primary sources scarcity of each fuel
    """
    return (
        scarcity_primary_sources()
        * sensitivity_to_scarcity()
        * (1 - perception_in_primary_sources_scarcity())
    )


@component.add(
    name='"Inter-fuel scarcity pressure"',
    units="Dmnl",
    subscripts=["scenarios", "final sources", "final sources1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "activate_scarcity_feedback_final_fuel_replacement_0": 1,
        "perception_of_interfuel_final_energy_scarcities": 1,
    },
)
def interfuel_scarcity_pressure():
    """
    Pressure due to variations in the inter-fuel scarcity of each final energy.
    """
    return if_then_else(
        (activate_scarcity_feedback_final_fuel_replacement_0() == 1)
        .expand_dims({"final sources": _subscript_dict["final sources"]}, 1)
        .expand_dims({"final sources1": _subscript_dict["final sources1"]}, 2),
        lambda: np.maximum(
            0,
            perception_of_interfuel_final_energy_scarcities().rename(
                {"final sources1": "final sources", "final sources": "final sources1"}
            ),
        ),
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "final sources": _subscript_dict["final sources"],
                "final sources1": _subscript_dict["final sources1"],
            },
            ["scenarios", "final sources", "final sources1"],
        ),
    )


@component.add(
    name="Fuel scarcity pressure H",
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "activate_scarcity_feedback_final_fuel_replacement": 1,
        "perception_of_final_energy_scarcity_h": 1,
    },
)
def fuel_scarcity_pressure_h():
    """
    Pressure due significant variations in the fuel scarcity of each type of final energy.
    """
    return if_then_else(
        (activate_scarcity_feedback_final_fuel_replacement() == 1).expand_dims(
            {"final sources": _subscript_dict["final sources"]}, 1
        ),
        lambda: perception_of_final_energy_scarcity_h(),
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "final sources": _subscript_dict["final sources"],
            },
            ["scenarios", "final sources"],
        ),
    )


@component.add(
    name='"Inter-fuel scarcity pressure H"',
    units="Dmnl",
    subscripts=["scenarios", "final sources", "final sources1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "activate_scarcity_feedback_final_fuel_replacement": 1,
        "perception_of_interfuel_final_energy_scarcities_h": 1,
    },
)
def interfuel_scarcity_pressure_h():
    """
    Pressure due to variations in the inter-fuel scarcity of each type of final energy.
    """
    return if_then_else(
        (activate_scarcity_feedback_final_fuel_replacement() == 1)
        .expand_dims({"final sources": _subscript_dict["final sources"]}, 1)
        .expand_dims({"final sources1": _subscript_dict["final sources1"]}, 2),
        lambda: np.maximum(
            0,
            perception_of_interfuel_final_energy_scarcities_h().rename(
                {"final sources1": "final sources", "final sources": "final sources1"}
            ),
        ),
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "final sources": _subscript_dict["final sources"],
                "final sources1": _subscript_dict["final sources1"],
            },
            ["scenarios", "final sources", "final sources1"],
        ),
    )


@component.add(
    name="sensitivity to scarcity option",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_sensitivity_to_scarcity_option"},
)
def sensitivity_to_scarcity_option():
    """
    Option defined by user about the sensitivity of economic sectors to energy scarcity: 1-Low 2-Medium 3-High
    """
    return _ext_constant_sensitivity_to_scarcity_option()


_ext_constant_sensitivity_to_scarcity_option = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C257",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_sensitivity_to_scarcity_option",
)

_ext_constant_sensitivity_to_scarcity_option.add(
    "inputs_EU.xlsx", "SCEN1", "C257", {"scenarios": ["SCEN1"]}
)

_ext_constant_sensitivity_to_scarcity_option.add(
    "inputs_EU.xlsx", "SCEN2", "C257", {"scenarios": ["SCEN2"]}
)

_ext_constant_sensitivity_to_scarcity_option.add(
    "inputs_EU.xlsx", "SCEN3", "C257", {"scenarios": ["SCEN3"]}
)

_ext_constant_sensitivity_to_scarcity_option.add(
    "inputs_EU.xlsx", "SCEN4", "C257", {"scenarios": ["SCEN4"]}
)

_ext_constant_sensitivity_to_scarcity_option.add(
    "inputs_EU.xlsx", "User defined", "C257", {"scenarios": ["User defined"]}
)


@component.add(
    name="perception of final energy scarcity",
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_perception_of_final_energy_scarcity": 1},
    other_deps={
        "_integ_perception_of_final_energy_scarcity": {
            "initial": {},
            "step": {
                "increase_in_perception_fe_scarcity": 1,
                "reduction_in_perception_fe_scarcity": 1,
            },
        }
    },
)
def perception_of_final_energy_scarcity():
    """
    Perception of final energy scarcity of each fuel by economic sectors. This perception drives the fuel replacement and efficiency improvement.
    """
    return _integ_perception_of_final_energy_scarcity()


_integ_perception_of_final_energy_scarcity = Integ(
    lambda: increase_in_perception_fe_scarcity()
    - reduction_in_perception_fe_scarcity(),
    lambda: xr.DataArray(
        0,
        {
            "scenarios": _subscript_dict["scenarios"],
            "final sources": _subscript_dict["final sources"],
        },
        ["scenarios", "final sources"],
    ),
    "_integ_perception_of_final_energy_scarcity",
)


@component.add(
    name="sensitivity to energy scarcity Medium",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_sensitivity_to_energy_scarcity_medium"},
)
def sensitivity_to_energy_scarcity_medium():
    """
    Medium value option of sensitivity to energy scarcity.
    """
    return _ext_constant_sensitivity_to_energy_scarcity_medium()


_ext_constant_sensitivity_to_energy_scarcity_medium = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "O47",
    {},
    _root,
    {},
    "_ext_constant_sensitivity_to_energy_scarcity_medium",
)


@component.add(
    name="scarcity final fuels",
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_final_fuels": 1},
)
def scarcity_final_fuels():
    """
    The parameter scarcity varies between (1;0). (Scarcity =1-Abundance) Scarcity=0 while the supply covers the demand; the closest to 1 indicates a higher divergence between supply and demand.
    """
    return 1 - abundance_final_fuels().rename({"final sources1": "final sources"})


@component.add(
    name="sensitivity to energy scarcity High",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_sensitivity_to_energy_scarcity_high"},
)
def sensitivity_to_energy_scarcity_high():
    """
    High value option of sensitivity to energy scarcity.
    """
    return _ext_constant_sensitivity_to_energy_scarcity_high()


_ext_constant_sensitivity_to_energy_scarcity_high = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "O46",
    {},
    _root,
    {},
    "_ext_constant_sensitivity_to_energy_scarcity_high",
)


@component.add(
    name="sensitivity to energy scarcity Low",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_sensitivity_to_energy_scarcity_low"},
)
def sensitivity_to_energy_scarcity_low():
    """
    Low value option of sensitivity to energy scarcity.
    """
    return _ext_constant_sensitivity_to_energy_scarcity_low()


_ext_constant_sensitivity_to_energy_scarcity_low = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "O48",
    {},
    _root,
    {},
    "_ext_constant_sensitivity_to_energy_scarcity_low",
)


@component.add(
    name="sensitivity to scarcity option H",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_sensitivity_to_scarcity_option_h"},
)
def sensitivity_to_scarcity_option_h():
    """
    Option defined by user about the sensitivity of households to the energy scarcity: 1-Low 2-Medium 3-High
    """
    return _ext_constant_sensitivity_to_scarcity_option_h()


_ext_constant_sensitivity_to_scarcity_option_h = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F257",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_sensitivity_to_scarcity_option_h",
)

_ext_constant_sensitivity_to_scarcity_option_h.add(
    "inputs_EU.xlsx", "SCEN1", "F257", {"scenarios": ["SCEN1"]}
)

_ext_constant_sensitivity_to_scarcity_option_h.add(
    "inputs_EU.xlsx", "SCEN2", "F257", {"scenarios": ["SCEN2"]}
)

_ext_constant_sensitivity_to_scarcity_option_h.add(
    "inputs_EU.xlsx", "SCEN3", "F257", {"scenarios": ["SCEN3"]}
)

_ext_constant_sensitivity_to_scarcity_option_h.add(
    "inputs_EU.xlsx", "SCEN4", "F257", {"scenarios": ["SCEN4"]}
)

_ext_constant_sensitivity_to_scarcity_option_h.add(
    "inputs_EU.xlsx", "User defined", "F257", {"scenarios": ["User defined"]}
)


@component.add(
    name="sensitivity to scarcity",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sensitivity_to_scarcity_option": 2,
        "sensitivity_to_energy_scarcity_low": 1,
        "sensitivity_to_energy_scarcity_high": 1,
        "sensitivity_to_energy_scarcity_medium": 1,
    },
)
def sensitivity_to_scarcity():
    """
    Sensitivity of the economic sectors to the energy scarcity. Value defined by user.
    """
    return if_then_else(
        sensitivity_to_scarcity_option() == 1,
        lambda: xr.DataArray(
            sensitivity_to_energy_scarcity_low(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            sensitivity_to_scarcity_option() == 2,
            lambda: xr.DataArray(
                sensitivity_to_energy_scarcity_medium(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: xr.DataArray(
                sensitivity_to_energy_scarcity_high(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
        ),
    )


@component.add(
    name="sensitivity to scarcity H",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sensitivity_to_scarcity_option_h": 2,
        "sensitivity_to_energy_scarcity_low": 1,
        "sensitivity_to_energy_scarcity_high": 1,
        "sensitivity_to_energy_scarcity_medium": 1,
    },
)
def sensitivity_to_scarcity_h():
    """
    Sensitivity of the households to the energy scarcity. Value defined by user.
    """
    return if_then_else(
        sensitivity_to_scarcity_option_h() == 1,
        lambda: xr.DataArray(
            sensitivity_to_energy_scarcity_low(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            sensitivity_to_scarcity_option_h() == 2,
            lambda: xr.DataArray(
                sensitivity_to_energy_scarcity_medium(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: xr.DataArray(
                sensitivity_to_energy_scarcity_high(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
        ),
    )


@component.add(
    name="reduction in perception FE scarcity H",
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "perception_of_final_energy_scarcity_h": 1,
        "energy_scarcity_forgetting_time_h": 1,
    },
)
def reduction_in_perception_fe_scarcity_h():
    """
    Reduction of the perception of energy scarcity of households due to the "forgetting" effect.
    """
    return perception_of_final_energy_scarcity_h() / energy_scarcity_forgetting_time_h()


@component.add(
    name='"perception of inter-fuel final energy scarcities H"',
    units="Dmnl",
    subscripts=["scenarios", "final sources1", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sensitivity_to_scarcity_h": 5,
        "perception_of_final_energy_scarcity_h": 10,
    },
)
def perception_of_interfuel_final_energy_scarcities_h():
    """
    Socieconomic perception of final energy scarcity between fuels for households. Matrix 5x5. This perception drives the fuel replacement and efficiency improvement.
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "final sources1": _subscript_dict["final sources1"],
            "final sources": _subscript_dict["final sources"],
        },
        ["scenarios", "final sources1", "final sources"],
    )
    value.loc[:, ["liquids"], :] = (
        if_then_else(
            (sensitivity_to_scarcity_h() == 0).expand_dims(
                {"final sources": _subscript_dict["final sources"]}, 1
            ),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "final sources": _subscript_dict["final sources"],
                },
                ["scenarios", "final sources"],
            ),
            lambda: zidz(
                perception_of_final_energy_scarcity_h()
                - perception_of_final_energy_scarcity_h()
                .loc[:, "liquids"]
                .reset_coords(drop=True),
                1,
            ),
        )
        .expand_dims({"final sources1": ["liquids"]}, 1)
        .values
    )
    value.loc[:, ["solids"], :] = (
        if_then_else(
            (sensitivity_to_scarcity_h() == 0).expand_dims(
                {"final sources": _subscript_dict["final sources"]}, 1
            ),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "final sources": _subscript_dict["final sources"],
                },
                ["scenarios", "final sources"],
            ),
            lambda: zidz(
                perception_of_final_energy_scarcity_h()
                - perception_of_final_energy_scarcity_h()
                .loc[:, "solids"]
                .reset_coords(drop=True),
                1,
            ),
        )
        .expand_dims({"final sources1": ["solids"]}, 1)
        .values
    )
    value.loc[:, ["gases"], :] = (
        if_then_else(
            (sensitivity_to_scarcity_h() == 0).expand_dims(
                {"final sources": _subscript_dict["final sources"]}, 1
            ),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "final sources": _subscript_dict["final sources"],
                },
                ["scenarios", "final sources"],
            ),
            lambda: zidz(
                perception_of_final_energy_scarcity_h()
                - perception_of_final_energy_scarcity_h()
                .loc[:, "gases"]
                .reset_coords(drop=True),
                1,
            ),
        )
        .expand_dims({"final sources1": ["gases"]}, 1)
        .values
    )
    value.loc[:, ["electricity"], :] = (
        if_then_else(
            (sensitivity_to_scarcity_h() == 0).expand_dims(
                {"final sources": _subscript_dict["final sources"]}, 1
            ),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "final sources": _subscript_dict["final sources"],
                },
                ["scenarios", "final sources"],
            ),
            lambda: zidz(
                perception_of_final_energy_scarcity_h()
                - perception_of_final_energy_scarcity_h()
                .loc[:, "electricity"]
                .reset_coords(drop=True),
                1,
            ),
        )
        .expand_dims({"final sources1": ["electricity"]}, 1)
        .values
    )
    value.loc[:, ["heat"], :] = (
        if_then_else(
            (sensitivity_to_scarcity_h() == 0).expand_dims(
                {"final sources": _subscript_dict["final sources"]}, 1
            ),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "final sources": _subscript_dict["final sources"],
                },
                ["scenarios", "final sources"],
            ),
            lambda: zidz(
                perception_of_final_energy_scarcity_h()
                - perception_of_final_energy_scarcity_h()
                .loc[:, "heat"]
                .reset_coords(drop=True),
                1,
            ),
        )
        .expand_dims({"final sources1": ["heat"]}, 1)
        .values
    )
    return value


@component.add(
    name="scarcity final fuels H",
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_final_fuels": 1},
)
def scarcity_final_fuels_h():
    """
    The parameter scarcity varies between (1;0). (Scarcity =1-Abundance) Scarcity=0 while the supply covers the demand; the closest to 1 indicates a higher divergence between supply and demand.
    """
    return 1 - abundance_final_fuels().rename({"final sources1": "final sources"})


@component.add(
    name="reduction in perception FE scarcity",
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "perception_of_final_energy_scarcity": 1,
        "energy_scarcity_forgetting_time": 1,
    },
)
def reduction_in_perception_fe_scarcity():
    """
    Reduction of the perception of energy scarcity of economic sectors due to the "forgetting" effect.
    """
    return perception_of_final_energy_scarcity() / energy_scarcity_forgetting_time()


@component.add(
    name="increase in perception FE scarcity",
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "scarcity_final_fuels": 1,
        "sensitivity_to_scarcity": 1,
        "perception_of_final_energy_scarcity": 1,
    },
)
def increase_in_perception_fe_scarcity():
    """
    Increase in the perception of economic sectors of final energy scarcity of each fuel
    """
    return (
        scarcity_final_fuels()
        * sensitivity_to_scarcity()
        * (1 - perception_of_final_energy_scarcity())
    )


@component.add(
    name='"perception of inter-fuel final energy scarcities"',
    units="Dmnl",
    subscripts=["scenarios", "final sources1", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sensitivity_to_scarcity": 5,
        "perception_of_final_energy_scarcity": 10,
    },
)
def perception_of_interfuel_final_energy_scarcities():
    """
    Perception of economic sectors of final energy scarcity between fuels. Matrix 5x5. This perception drives the fuel replacement and efficiency improvement.
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "final sources1": _subscript_dict["final sources1"],
            "final sources": _subscript_dict["final sources"],
        },
        ["scenarios", "final sources1", "final sources"],
    )
    value.loc[:, ["liquids"], :] = (
        if_then_else(
            (sensitivity_to_scarcity() == 0).expand_dims(
                {"final sources": _subscript_dict["final sources"]}, 1
            ),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "final sources": _subscript_dict["final sources"],
                },
                ["scenarios", "final sources"],
            ),
            lambda: zidz(
                perception_of_final_energy_scarcity()
                - perception_of_final_energy_scarcity()
                .loc[:, "liquids"]
                .reset_coords(drop=True),
                1,
            ),
        )
        .expand_dims({"final sources1": ["liquids"]}, 1)
        .values
    )
    value.loc[:, ["solids"], :] = (
        if_then_else(
            (sensitivity_to_scarcity() == 0).expand_dims(
                {"final sources": _subscript_dict["final sources"]}, 1
            ),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "final sources": _subscript_dict["final sources"],
                },
                ["scenarios", "final sources"],
            ),
            lambda: zidz(
                perception_of_final_energy_scarcity()
                - perception_of_final_energy_scarcity()
                .loc[:, "solids"]
                .reset_coords(drop=True),
                1,
            ),
        )
        .expand_dims({"final sources1": ["solids"]}, 1)
        .values
    )
    value.loc[:, ["gases"], :] = (
        if_then_else(
            (sensitivity_to_scarcity() == 0).expand_dims(
                {"final sources": _subscript_dict["final sources"]}, 1
            ),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "final sources": _subscript_dict["final sources"],
                },
                ["scenarios", "final sources"],
            ),
            lambda: zidz(
                perception_of_final_energy_scarcity()
                - perception_of_final_energy_scarcity()
                .loc[:, "gases"]
                .reset_coords(drop=True),
                1,
            ),
        )
        .expand_dims({"final sources1": ["gases"]}, 1)
        .values
    )
    value.loc[:, ["electricity"], :] = (
        if_then_else(
            (sensitivity_to_scarcity() == 0).expand_dims(
                {"final sources": _subscript_dict["final sources"]}, 1
            ),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "final sources": _subscript_dict["final sources"],
                },
                ["scenarios", "final sources"],
            ),
            lambda: zidz(
                perception_of_final_energy_scarcity()
                - perception_of_final_energy_scarcity()
                .loc[:, "electricity"]
                .reset_coords(drop=True),
                1,
            ),
        )
        .expand_dims({"final sources1": ["electricity"]}, 1)
        .values
    )
    value.loc[:, ["heat"], :] = (
        if_then_else(
            (sensitivity_to_scarcity() == 0).expand_dims(
                {"final sources": _subscript_dict["final sources"]}, 1
            ),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "final sources": _subscript_dict["final sources"],
                },
                ["scenarios", "final sources"],
            ),
            lambda: zidz(
                perception_of_final_energy_scarcity()
                - perception_of_final_energy_scarcity()
                .loc[:, "heat"]
                .reset_coords(drop=True),
                1,
            ),
        )
        .expand_dims({"final sources1": ["heat"]}, 1)
        .values
    )
    return value


@component.add(
    name="energy scarcity forgetting time H",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_energy_scarcity_forgetting_time_h"},
)
def energy_scarcity_forgetting_time_h():
    """
    Time in years that households take to forget the percepticon of scarcity.
    """
    return _ext_constant_energy_scarcity_forgetting_time_h()


_ext_constant_energy_scarcity_forgetting_time_h = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F260",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_energy_scarcity_forgetting_time_h",
)

_ext_constant_energy_scarcity_forgetting_time_h.add(
    "inputs_EU.xlsx", "SCEN1", "F260", {"scenarios": ["SCEN1"]}
)

_ext_constant_energy_scarcity_forgetting_time_h.add(
    "inputs_EU.xlsx", "SCEN2", "F260", {"scenarios": ["SCEN2"]}
)

_ext_constant_energy_scarcity_forgetting_time_h.add(
    "inputs_EU.xlsx", "SCEN3", "F260", {"scenarios": ["SCEN3"]}
)

_ext_constant_energy_scarcity_forgetting_time_h.add(
    "inputs_EU.xlsx", "SCEN4", "F260", {"scenarios": ["SCEN4"]}
)

_ext_constant_energy_scarcity_forgetting_time_h.add(
    "inputs_EU.xlsx", "User defined", "F260", {"scenarios": ["User defined"]}
)


@component.add(
    name="increase in perception FE scarcity H",
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "scarcity_final_fuels_h": 1,
        "sensitivity_to_scarcity_h": 1,
        "perception_of_final_energy_scarcity_h": 1,
    },
)
def increase_in_perception_fe_scarcity_h():
    """
    Increase in socieconomic perception of final energy scarcity of each fuel for households.
    """
    return (
        scarcity_final_fuels_h()
        * sensitivity_to_scarcity_h()
        * (1 - perception_of_final_energy_scarcity_h())
    )


@component.add(
    name="energy scarcity forgetting time",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_energy_scarcity_forgetting_time"},
)
def energy_scarcity_forgetting_time():
    """
    Time in years that society takes to forget the percepticon of scarcity for economic sectors.
    """
    return _ext_constant_energy_scarcity_forgetting_time()


_ext_constant_energy_scarcity_forgetting_time = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C260",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_energy_scarcity_forgetting_time",
)

_ext_constant_energy_scarcity_forgetting_time.add(
    "inputs_EU.xlsx", "SCEN1", "C260", {"scenarios": ["SCEN1"]}
)

_ext_constant_energy_scarcity_forgetting_time.add(
    "inputs_EU.xlsx", "SCEN2", "C260", {"scenarios": ["SCEN2"]}
)

_ext_constant_energy_scarcity_forgetting_time.add(
    "inputs_EU.xlsx", "SCEN3", "C260", {"scenarios": ["SCEN3"]}
)

_ext_constant_energy_scarcity_forgetting_time.add(
    "inputs_EU.xlsx", "SCEN4", "C260", {"scenarios": ["SCEN4"]}
)

_ext_constant_energy_scarcity_forgetting_time.add(
    "inputs_EU.xlsx", "User defined", "C260", {"scenarios": ["User defined"]}
)


@component.add(
    name="perception of final energy scarcity H",
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_perception_of_final_energy_scarcity_h": 1},
    other_deps={
        "_integ_perception_of_final_energy_scarcity_h": {
            "initial": {},
            "step": {
                "increase_in_perception_fe_scarcity_h": 1,
                "reduction_in_perception_fe_scarcity_h": 1,
            },
        }
    },
)
def perception_of_final_energy_scarcity_h():
    """
    Socieconomic perception of final energy scarcity of each fuel for households. This perception drives the fuel replacement and efficiency improvement.
    """
    return _integ_perception_of_final_energy_scarcity_h()


_integ_perception_of_final_energy_scarcity_h = Integ(
    lambda: increase_in_perception_fe_scarcity_h()
    - reduction_in_perception_fe_scarcity_h(),
    lambda: xr.DataArray(
        0,
        {
            "scenarios": _subscript_dict["scenarios"],
            "final sources": _subscript_dict["final sources"],
        },
        ["scenarios", "final sources"],
    ),
    "_integ_perception_of_final_energy_scarcity_h",
)


@component.add(
    name="Year to finish energy intensity policies H",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_year_to_finish_energy_intensity_policies_h"
    },
)
def year_to_finish_energy_intensity_policies_h():
    """
    Year when the policy to improve efficiency in households finish.
    """
    return _ext_constant_year_to_finish_energy_intensity_policies_h()


_ext_constant_year_to_finish_energy_intensity_policies_h = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C205",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_year_to_finish_energy_intensity_policies_h",
)

_ext_constant_year_to_finish_energy_intensity_policies_h.add(
    "inputs_EU.xlsx", "SCEN1", "C205", {"scenarios": ["SCEN1"]}
)

_ext_constant_year_to_finish_energy_intensity_policies_h.add(
    "inputs_EU.xlsx", "SCEN2", "C205", {"scenarios": ["SCEN2"]}
)

_ext_constant_year_to_finish_energy_intensity_policies_h.add(
    "inputs_EU.xlsx", "SCEN3", "C205", {"scenarios": ["SCEN3"]}
)

_ext_constant_year_to_finish_energy_intensity_policies_h.add(
    "inputs_EU.xlsx", "SCEN4", "C205", {"scenarios": ["SCEN4"]}
)

_ext_constant_year_to_finish_energy_intensity_policies_h.add(
    "inputs_EU.xlsx", "User defined", "C205", {"scenarios": ["User defined"]}
)


@component.add(
    name="minimum fraction H",
    units="Dmnl",
    subscripts=["final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_minimum_fraction_h"},
)
def minimum_fraction_h():
    """
    minimum energy of each type of energy that should be used in each sector because it is irreplaceable
    """
    return _ext_constant_minimum_fraction_h()


_ext_constant_minimum_fraction_h = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "FU856",
    {"final sources": _subscript_dict["final sources"]},
    _root,
    {"final sources": _subscript_dict["final sources"]},
    "_ext_constant_minimum_fraction_h",
)


@component.add(
    name="Efficiency energy aceleration H",
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "maximum_yearly_aceleration_of_intensity_improvement_pct_h": 1,
        "percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities_0": 1,
        "pressure_to_improve_energy_intensity_efficiency_h": 1,
    },
)
def efficiency_energy_aceleration_h():
    """
    This variable represents the acceleration of the process of variation of the energy intensity that can be produced by policies or scarcity pressures.
    """
    return (
        (
            (-maximum_yearly_aceleration_of_intensity_improvement_pct_h())
            * (
                1
                + percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities_0()
            )
        )
        * pressure_to_improve_energy_intensity_efficiency_h().transpose(
            "final sources", "scenarios"
        )
    ).transpose("scenarios", "final sources")


@component.add(
    name="inertial rate energy intensity H TOP DOWN",
    units="EJ/Tdollars",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "historic_rate_final_energy_intensity_h": 1,
        "efficiency_energy_aceleration_h": 12,
        "variation_energy_intensity_target_h": 1,
        "initial_energy_intensity_1995_h": 4,
        "evol_final_energy_intensity_h": 4,
        "available_improvement_efficiency_h": 4,
        "historical_mean_rate_energy_intensity_h": 6,
        "year_energy_intensity_target": 1,
        "choose_final_sectoral_energy_intensities_evolution_method": 2,
    },
)
def inertial_rate_energy_intensity_h_top_down():
    """
    This variable models the variation of the energy intensity according to the historical trend and represents the variation of the technological energy efficiency in households for each type of energy. By default it will follow the historical trend but can be modified by policies or market conditions that accelerate change.
    """
    return if_then_else(
        time() < 2009,
        lambda: historic_rate_final_energy_intensity_h().expand_dims(
            {"scenarios": _subscript_dict["scenarios"]}, 1
        ),
        lambda: if_then_else(
            (
                choose_final_sectoral_energy_intensities_evolution_method() == 1
            ).expand_dims({"final sources": _subscript_dict["final sources"]}, 1),
            lambda: if_then_else(
                efficiency_energy_aceleration_h() < 0,
                lambda: evol_final_energy_intensity_h()
                * efficiency_energy_aceleration_h()
                * available_improvement_efficiency_h(),
                lambda: (
                    initial_energy_intensity_1995_h()
                    * efficiency_energy_aceleration_h().transpose(
                        "final sources", "scenarios"
                    )
                ).transpose("scenarios", "final sources"),
            ),
            lambda: if_then_else(
                (time() < year_energy_intensity_target()).expand_dims(
                    {"final sources": _subscript_dict["final sources"]}, 1
                ),
                lambda: if_then_else(
                    historical_mean_rate_energy_intensity_h()
                    + efficiency_energy_aceleration_h().transpose(
                        "final sources", "scenarios"
                    )
                    < 0,
                    lambda: (
                        evol_final_energy_intensity_h()
                        * (
                            historical_mean_rate_energy_intensity_h()
                            + efficiency_energy_aceleration_h().transpose(
                                "final sources", "scenarios"
                            )
                        ).transpose("scenarios", "final sources")
                        * available_improvement_efficiency_h()
                    ).transpose("final sources", "scenarios"),
                    lambda: initial_energy_intensity_1995_h()
                    * (
                        historical_mean_rate_energy_intensity_h()
                        + efficiency_energy_aceleration_h().transpose(
                            "final sources", "scenarios"
                        )
                    ),
                ).transpose("scenarios", "final sources"),
                lambda: if_then_else(
                    (
                        choose_final_sectoral_energy_intensities_evolution_method() == 2
                    ).expand_dims(
                        {"final sources": _subscript_dict["final sources"]}, 1
                    ),
                    lambda: if_then_else(
                        historical_mean_rate_energy_intensity_h()
                        + efficiency_energy_aceleration_h().transpose(
                            "final sources", "scenarios"
                        )
                        < 0,
                        lambda: (
                            evol_final_energy_intensity_h()
                            * (
                                historical_mean_rate_energy_intensity_h()
                                + efficiency_energy_aceleration_h().transpose(
                                    "final sources", "scenarios"
                                )
                            ).transpose("scenarios", "final sources")
                            * available_improvement_efficiency_h()
                        ).transpose("final sources", "scenarios"),
                        lambda: initial_energy_intensity_1995_h()
                        * (
                            historical_mean_rate_energy_intensity_h()
                            + efficiency_energy_aceleration_h().transpose(
                                "final sources", "scenarios"
                            )
                        ),
                    ).transpose("scenarios", "final sources"),
                    lambda: if_then_else(
                        efficiency_energy_aceleration_h() < 0,
                        lambda: evol_final_energy_intensity_h()
                        * efficiency_energy_aceleration_h()
                        * available_improvement_efficiency_h(),
                        lambda: (
                            initial_energy_intensity_1995_h()
                            * efficiency_energy_aceleration_h().transpose(
                                "final sources", "scenarios"
                            )
                        ).transpose("scenarios", "final sources"),
                    )
                    + variation_energy_intensity_target_h(),
                ),
            ),
        ).transpose("final sources", "scenarios"),
    ).transpose("scenarios", "final sources")


@component.add(
    name="final year target H",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_final_year_target_h"},
)
def final_year_target_h():
    """
    Year defined by user in which the energy intensity targets are set.
    """
    return _ext_constant_final_year_target_h()


_ext_constant_final_year_target_h = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B243",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_final_year_target_h",
)

_ext_constant_final_year_target_h.add(
    "inputs_EU.xlsx", "SCEN1", "B243", {"scenarios": ["SCEN1"]}
)

_ext_constant_final_year_target_h.add(
    "inputs_EU.xlsx", "SCEN2", "B243", {"scenarios": ["SCEN2"]}
)

_ext_constant_final_year_target_h.add(
    "inputs_EU.xlsx", "SCEN3", "B243", {"scenarios": ["SCEN3"]}
)

_ext_constant_final_year_target_h.add(
    "inputs_EU.xlsx", "SCEN4", "B243", {"scenarios": ["SCEN4"]}
)

_ext_constant_final_year_target_h.add(
    "inputs_EU.xlsx", "User defined", "B243", {"scenarios": ["User defined"]}
)


@component.add(
    name="historical mean rate energy intensity H",
    units="Dmnl",
    subscripts=["final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_historical_mean_rate_energy_intensity_h"
    },
)
def historical_mean_rate_energy_intensity_h():
    """
    Historical trend of households energy intensity by final souerce (OLS method)
    """
    return _ext_constant_historical_mean_rate_energy_intensity_h()


_ext_constant_historical_mean_rate_energy_intensity_h = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "GM48",
    {"final sources": _subscript_dict["final sources"]},
    _root,
    {"final sources": _subscript_dict["final sources"]},
    "_ext_constant_historical_mean_rate_energy_intensity_h",
)


@component.add(
    name="available improvement efficiency H",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "global_energy_intensity_h": 1,
        "min_energy_intensity_vs_intial_h": 2,
        "initial_global_energy_intensity_2009_h": 2,
    },
)
def available_improvement_efficiency_h():
    """
    Remainig improvement of energy intensity respect to the minimum value.
    """
    return np.minimum(
        1,
        if_then_else(
            time() > 2009,
            lambda: zidz(
                global_energy_intensity_h()
                - min_energy_intensity_vs_intial_h()
                * initial_global_energy_intensity_2009_h(),
                (1 - min_energy_intensity_vs_intial_h())
                * initial_global_energy_intensity_2009_h(),
            ),
            lambda: xr.DataArray(
                1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        ),
    )


@component.add(
    name="aux19 0",
    units="EJ/Tdollars",
    subscripts=["scenarios", "final sources"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux19_0": 1},
    other_deps={
        "_delayfixed_aux19_0": {
            "initial": {"time_step": 1},
            "step": {"final_energy_intensity_2020_h": 1},
        }
    },
)
def aux19_0():
    """
    Auxiliarity variable to maintain constant the value of 2009
    """
    return _delayfixed_aux19_0()


_delayfixed_aux19_0 = DelayFixed(
    lambda: final_energy_intensity_2020_h(),
    lambda: time_step(),
    lambda: xr.DataArray(
        0,
        {
            "scenarios": _subscript_dict["scenarios"],
            "final sources": _subscript_dict["final sources"],
        },
        ["scenarios", "final sources"],
    ),
    time_step,
    "_delayfixed_aux19_0",
)


@component.add(
    name="Households final energy demand",
    units="EJ",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"household_demand_total": 1, "energy_intensity_of_households": 1},
)
def households_final_energy_demand():
    """
    Final energy demand of households
    """
    return household_demand_total() * energy_intensity_of_households() / 1000000.0


@component.add(
    name="Choose energy intensity target method",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_choose_energy_intensity_target_method"},
)
def choose_energy_intensity_target_method():
    """
    Choose energy intensity target method: 1- Energy intensity target defined by user 2- Variation in energy intensity over the intensity in defined year
    """
    return _ext_constant_choose_energy_intensity_target_method()


_ext_constant_choose_energy_intensity_target_method = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C241",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_choose_energy_intensity_target_method",
)

_ext_constant_choose_energy_intensity_target_method.add(
    "inputs_EU.xlsx", "SCEN1", "C241", {"scenarios": ["SCEN1"]}
)

_ext_constant_choose_energy_intensity_target_method.add(
    "inputs_EU.xlsx", "SCEN2", "C241", {"scenarios": ["SCEN2"]}
)

_ext_constant_choose_energy_intensity_target_method.add(
    "inputs_EU.xlsx", "SCEN3", "C241", {"scenarios": ["SCEN3"]}
)

_ext_constant_choose_energy_intensity_target_method.add(
    "inputs_EU.xlsx", "SCEN4", "C241", {"scenarios": ["SCEN4"]}
)

_ext_constant_choose_energy_intensity_target_method.add(
    "inputs_EU.xlsx", "User defined", "C241", {"scenarios": ["User defined"]}
)


@component.add(
    name="Decrease of intensity due to change energy technology H TOP DOWN",
    units="EJ/Tdollars",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "evol_final_energy_intensity_h": 2,
        "global_energy_intensity_h": 1,
        "minimum_fraction_h": 1,
        "max_yearly_change_h": 1,
        "percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities_0": 1,
        "pressure_to_change_energy_technology_h": 1,
    },
)
def decrease_of_intensity_due_to_change_energy_technology_h_top_down():
    """
    When in households, one type of energy (a) is replaced by another (b), the energy intensity of (b) will increase and the energy intensity of (a) will decrease. This flow represents the decrease of (a). IF THEN ELSE((ZIDZ(Evol final energy intensity H[scenarios,final sources], Global energy intensity H[scenarios])) >= minimum fraction H[scenarios,final sources] ,Max yearly change H[scenarios,final sources] *Evol final energy intensity H[scenarios,final sources] * Pressure to change energy technology H [scenarios,final sources] , 0 )
    """
    return if_then_else(
        zidz(
            evol_final_energy_intensity_h(),
            global_energy_intensity_h().expand_dims(
                {"final sources": _subscript_dict["final sources"]}, 1
            ),
        )
        >= minimum_fraction_h(),
        lambda: (
            (
                max_yearly_change_h()
                * (
                    1
                    + percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities_0()
                )
            )
            * evol_final_energy_intensity_h().transpose("final sources", "scenarios")
            * pressure_to_change_energy_technology_h().transpose(
                "final sources", "scenarios"
            )
        ).transpose("scenarios", "final sources"),
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "final sources": _subscript_dict["final sources"],
            },
            ["scenarios", "final sources"],
        ),
    )


@component.add(
    name="Implementatio policy to change final energy H",
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "year_policy_change_energy_h": 9,
        "year_to_finish_energy_intensity_policies_h": 5,
        "exp_slow_evolution_change_energy_h": 1,
        "policy_change_energy_speed_h": 3,
        "exp_rapid_evolution_change_energy_h": 1,
        "time": 5,
    },
)
def implementatio_policy_to_change_final_energy_h():
    """
    Pressure due to energy policies, eg incentives for change the final energy
    """
    return if_then_else(
        np.logical_or(
            year_policy_change_energy_h() < 2015,
            year_policy_change_energy_h()
            > year_to_finish_energy_intensity_policies_h(),
        ),
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "final sources": _subscript_dict["final sources"],
            },
            ["scenarios", "final sources"],
        ),
        lambda: if_then_else(
            time() < year_policy_change_energy_h(),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "final sources": _subscript_dict["final sources"],
                },
                ["scenarios", "final sources"],
            ),
            lambda: if_then_else(
                (time() > year_to_finish_energy_intensity_policies_h()).expand_dims(
                    {"final sources": _subscript_dict["final sources"]}, 1
                ),
                lambda: xr.DataArray(
                    1,
                    {
                        "scenarios": _subscript_dict["scenarios"],
                        "final sources": _subscript_dict["final sources"],
                    },
                    ["scenarios", "final sources"],
                ),
                lambda: if_then_else(
                    policy_change_energy_speed_h() == 1,
                    lambda: (
                        (time() - year_policy_change_energy_h())
                        / (
                            year_to_finish_energy_intensity_policies_h()
                            - year_policy_change_energy_h()
                        )
                    )
                    ** exp_rapid_evolution_change_energy_h(),
                    lambda: if_then_else(
                        policy_change_energy_speed_h() == 2,
                        lambda: (time() - year_policy_change_energy_h())
                        / (
                            year_to_finish_energy_intensity_policies_h()
                            - year_policy_change_energy_h()
                        ),
                        lambda: if_then_else(
                            policy_change_energy_speed_h() == 3,
                            lambda: (
                                (time() - year_policy_change_energy_h())
                                / (
                                    year_to_finish_energy_intensity_policies_h()
                                    - year_policy_change_energy_h()
                                )
                            )
                            ** exp_slow_evolution_change_energy_h(),
                            lambda: xr.DataArray(
                                0,
                                {
                                    "scenarios": _subscript_dict["scenarios"],
                                    "final sources": _subscript_dict["final sources"],
                                },
                                ["scenarios", "final sources"],
                            ),
                        ),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="Pressure to change energy technology H",
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pressure_to_change_energy_technology_by_fuel_h": 1},
)
def pressure_to_change_energy_technology_h():
    """
    This variable represents the pressure in households for substituting a final energy source for all the other energies.
    """
    return np.minimum(
        1,
        sum(
            pressure_to_change_energy_technology_by_fuel_h().rename(
                {"final sources": "final sources!", "final sources1": "final sources"}
            ),
            dim=["final sources!"],
        ),
    )


@component.add(
    name="Implementation policy to improve energy intensity efficiency H",
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "year_policy_to_improve_efficiency_h": 9,
        "year_to_finish_energy_intensity_policies_h": 5,
        "exp_slow_evolution_improve_efficiency_h": 1,
        "policy_to_improve_efficiency_speed_h": 3,
        "exp_rapid_evolution_improve_efficiency_h": 1,
        "time": 5,
    },
)
def implementation_policy_to_improve_energy_intensity_efficiency_h():
    """
    Pressure due to energy policies, eg incentives for energy efficiency,
    """
    return if_then_else(
        np.logical_or(
            year_policy_to_improve_efficiency_h() < 2015,
            year_policy_to_improve_efficiency_h()
            > year_to_finish_energy_intensity_policies_h(),
        ),
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "final sources": _subscript_dict["final sources"],
            },
            ["scenarios", "final sources"],
        ),
        lambda: if_then_else(
            time() < year_policy_to_improve_efficiency_h(),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "final sources": _subscript_dict["final sources"],
                },
                ["scenarios", "final sources"],
            ),
            lambda: if_then_else(
                (time() > year_to_finish_energy_intensity_policies_h()).expand_dims(
                    {"final sources": _subscript_dict["final sources"]}, 1
                ),
                lambda: xr.DataArray(
                    1,
                    {
                        "scenarios": _subscript_dict["scenarios"],
                        "final sources": _subscript_dict["final sources"],
                    },
                    ["scenarios", "final sources"],
                ),
                lambda: if_then_else(
                    policy_to_improve_efficiency_speed_h() == 1,
                    lambda: (
                        (time() - year_policy_to_improve_efficiency_h())
                        / (
                            year_to_finish_energy_intensity_policies_h()
                            - year_policy_to_improve_efficiency_h()
                        )
                    )
                    ** exp_rapid_evolution_improve_efficiency_h(),
                    lambda: if_then_else(
                        policy_to_improve_efficiency_speed_h() == 2,
                        lambda: (time() - year_policy_to_improve_efficiency_h())
                        / (
                            year_to_finish_energy_intensity_policies_h()
                            - year_policy_to_improve_efficiency_h()
                        ),
                        lambda: if_then_else(
                            policy_to_improve_efficiency_speed_h() == 3,
                            lambda: (
                                (time() - year_policy_to_improve_efficiency_h())
                                / (
                                    year_to_finish_energy_intensity_policies_h()
                                    - year_policy_to_improve_efficiency_h()
                                )
                            )
                            ** exp_slow_evolution_improve_efficiency_h(),
                            lambda: xr.DataArray(
                                0,
                                {
                                    "scenarios": _subscript_dict["scenarios"],
                                    "final sources": _subscript_dict["final sources"],
                                },
                                ["scenarios", "final sources"],
                            ),
                        ),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="Pressure to improve energy intensity efficiency H",
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fuel_scarcity_pressure_h": 1,
        "implementation_policy_to_improve_energy_intensity_efficiency_h": 1,
    },
)
def pressure_to_improve_energy_intensity_efficiency_h():
    """
    This variable represents the pressure in households to improve energy efficiency in the technology used. This pressure may be due to (1) energy policies, eg incentives for energy efficiency, or (2) significant variations in the scarcity of each type of final energy.
    """
    return np.minimum(
        1,
        fuel_scarcity_pressure_h()
        + implementation_policy_to_improve_energy_intensity_efficiency_h(),
    )


@component.add(
    name="Variation energy intensity TARGET H",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "choose_energy_intensity_target_method": 1,
        "final_year_target_h": 4,
        "final_energy_intensity_2020_h": 3,
        "time": 4,
        "energy_intensity_target_h": 1,
        "year_energy_intensity_target": 4,
        "pct_change_energy_intensity_target": 1,
    },
)
def variation_energy_intensity_target_h():
    """
    Variation in energy intensity of households by final energy defined by user targets.
    """
    return if_then_else(
        (choose_energy_intensity_target_method() == 1).expand_dims(
            {"final sources": _subscript_dict["final sources"]}, 1
        ),
        lambda: if_then_else(
            (time() > final_year_target_h()).expand_dims(
                {"final sources": _subscript_dict["final sources"]}, 1
            ),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "final sources": _subscript_dict["final sources"],
                },
                ["scenarios", "final sources"],
            ),
            lambda: if_then_else(
                (time() < year_energy_intensity_target()).expand_dims(
                    {"final sources": _subscript_dict["final sources"]}, 1
                ),
                lambda: xr.DataArray(
                    0,
                    {
                        "scenarios": _subscript_dict["scenarios"],
                        "final sources": _subscript_dict["final sources"],
                    },
                    ["scenarios", "final sources"],
                ),
                lambda: (energy_intensity_target_h() - final_energy_intensity_2020_h())
                / (final_year_target_h() - year_energy_intensity_target()),
            ),
        ),
        lambda: if_then_else(
            (time() > final_year_target_h()).expand_dims(
                {"final sources": _subscript_dict["final sources"]}, 1
            ),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "final sources": _subscript_dict["final sources"],
                },
                ["scenarios", "final sources"],
            ),
            lambda: if_then_else(
                (time() < year_energy_intensity_target()).expand_dims(
                    {"final sources": _subscript_dict["final sources"]}, 1
                ),
                lambda: xr.DataArray(
                    0,
                    {
                        "scenarios": _subscript_dict["scenarios"],
                        "final sources": _subscript_dict["final sources"],
                    },
                    ["scenarios", "final sources"],
                ),
                lambda: (
                    final_energy_intensity_2020_h()
                    * (1 + pct_change_energy_intensity_target())
                    - final_energy_intensity_2020_h()
                )
                / (final_year_target_h() - year_energy_intensity_target()),
            ),
        ),
    )


@component.add(
    name="Final energy intensity 2020 H",
    units="EJ/Tdollars",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "year_energy_intensity_target": 1,
        "evol_final_energy_intensity_h": 1,
        "aux19_0": 1,
    },
)
def final_energy_intensity_2020_h():
    """
    Energy intensity of households by final source in 2009
    """
    return if_then_else(
        (time() < year_energy_intensity_target()).expand_dims(
            {"final sources": _subscript_dict["final sources"]}, 1
        ),
        lambda: evol_final_energy_intensity_h(),
        lambda: aux19_0(),
    )


@component.add(
    name='"Activate scarcity feedback final fuel replacement?"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_activate_scarcity_feedback_final_fuel_replacement"
    },
)
def activate_scarcity_feedback_final_fuel_replacement():
    """
    Switch to (de)activate the scarcity feedback fuel replacement.
    """
    return _ext_constant_activate_scarcity_feedback_final_fuel_replacement()


_ext_constant_activate_scarcity_feedback_final_fuel_replacement = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B256",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_activate_scarcity_feedback_final_fuel_replacement",
)

_ext_constant_activate_scarcity_feedback_final_fuel_replacement.add(
    "inputs_EU.xlsx", "SCEN1", "B256", {"scenarios": ["SCEN1"]}
)

_ext_constant_activate_scarcity_feedback_final_fuel_replacement.add(
    "inputs_EU.xlsx", "SCEN2", "B256", {"scenarios": ["SCEN2"]}
)

_ext_constant_activate_scarcity_feedback_final_fuel_replacement.add(
    "inputs_EU.xlsx", "SCEN3", "B256", {"scenarios": ["SCEN3"]}
)

_ext_constant_activate_scarcity_feedback_final_fuel_replacement.add(
    "inputs_EU.xlsx", "SCEN4", "B256", {"scenarios": ["SCEN4"]}
)

_ext_constant_activate_scarcity_feedback_final_fuel_replacement.add(
    "inputs_EU.xlsx", "User defined", "B256", {"scenarios": ["User defined"]}
)


@component.add(
    name="Activate transport H BOTTOM UP method",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_activate_transport_h_bottom_up_method"},
)
def activate_transport_h_bottom_up_method():
    """
    0. Bottom-up NOT activated 1. Bottom-up activated
    """
    return _ext_constant_activate_transport_h_bottom_up_method()


_ext_constant_activate_transport_h_bottom_up_method = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "FY207",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_activate_transport_h_bottom_up_method",
)

_ext_constant_activate_transport_h_bottom_up_method.add(
    "inputs_EU.xlsx", "SCEN1", "FY207", {"scenarios": ["SCEN1"]}
)

_ext_constant_activate_transport_h_bottom_up_method.add(
    "inputs_EU.xlsx", "SCEN2", "FY207", {"scenarios": ["SCEN2"]}
)

_ext_constant_activate_transport_h_bottom_up_method.add(
    "inputs_EU.xlsx", "SCEN3", "FY207", {"scenarios": ["SCEN3"]}
)

_ext_constant_activate_transport_h_bottom_up_method.add(
    "inputs_EU.xlsx", "SCEN4", "FY207", {"scenarios": ["SCEN4"]}
)

_ext_constant_activate_transport_h_bottom_up_method.add(
    "inputs_EU.xlsx", "User defined", "FY207", {"scenarios": ["User defined"]}
)


@component.add(
    name="Percentage of change over the historic maximun variation of energy intensities 0",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities_0"
    },
)
def percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities_0():
    """
    From the available data, the maximum historical variations of the energy intensities have been statistically estimated. If in the future these maximum variations are different, this variable establishes the percentage of variation that can occur over the defined data.
    """
    return (
        _ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities_0()
    )


_ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities_0 = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C200",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities_0",
)

_ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities_0.add(
    "inputs_EU.xlsx", "SCEN1", "C200", {"scenarios": ["SCEN1"]}
)

_ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities_0.add(
    "inputs_EU.xlsx", "SCEN2", "C200", {"scenarios": ["SCEN2"]}
)

_ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities_0.add(
    "inputs_EU.xlsx", "SCEN3", "C200", {"scenarios": ["SCEN3"]}
)

_ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities_0.add(
    "inputs_EU.xlsx", "SCEN4", "C200", {"scenarios": ["SCEN4"]}
)

_ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities_0.add(
    "inputs_EU.xlsx", "User defined", "C200", {"scenarios": ["User defined"]}
)


@component.add(
    name="efficiency rate of substitution H by sector",
    units="Dmnl",
    subscripts=["scenarios", "final sources", "final sources1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_efficiency_rate_of_substitution_h_by_sector"
    },
)
def efficiency_rate_of_substitution_h_by_sector():
    """
    It is necessary to take into account that the energy efficiencies of the two technologies exchanged do not necessarily have to be the same. In other words, a decrease in the energy intensity of (a) will not imply the same increase in the energy intensity of (b). This possible difference is compensated through the parameter “Efficiency rate of substitution”.
    """
    return _ext_constant_efficiency_rate_of_substitution_h_by_sector()


_ext_constant_efficiency_rate_of_substitution_h_by_sector = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "FU216",
    {
        "scenarios": ["BAU"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
    "_ext_constant_efficiency_rate_of_substitution_h_by_sector",
)

_ext_constant_efficiency_rate_of_substitution_h_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FU216",
    {
        "scenarios": ["SCEN1"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_h_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FU216",
    {
        "scenarios": ["SCEN2"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_h_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FU216",
    {
        "scenarios": ["SCEN3"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_h_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FU216",
    {
        "scenarios": ["SCEN4"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_h_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FU216",
    {
        "scenarios": ["User defined"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)


@component.add(
    name='"efficiency rate of substitution H sector-uniform"',
    units="Dmnl",
    subscripts=["scenarios", "final sources", "final sources1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_efficiency_rate_of_substitution_h_sectoruniform"
    },
)
def efficiency_rate_of_substitution_h_sectoruniform():
    """
    It is necessary to take into account that the energy efficiencies of the two technologies exchanged do not necessarily have to be the same. In other words, a decrease in the energy intensity of (a) will not imply the same increase in the energy intensity of (b). This possible difference is compensated through the parameter “Efficiency rate of substitution”.
    """
    return _ext_constant_efficiency_rate_of_substitution_h_sectoruniform()


_ext_constant_efficiency_rate_of_substitution_h_sectoruniform = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "G233",
    {
        "scenarios": ["BAU"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
    "_ext_constant_efficiency_rate_of_substitution_h_sectoruniform",
)

_ext_constant_efficiency_rate_of_substitution_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "G233",
    {
        "scenarios": ["SCEN1"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "G233",
    {
        "scenarios": ["SCEN2"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "G233",
    {
        "scenarios": ["SCEN3"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "G233",
    {
        "scenarios": ["SCEN4"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "User defined",
    "G233",
    {
        "scenarios": ["User defined"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)


@component.add(
    name='"Year policy change energy H sector-uniform"',
    units="Year",
    subscripts=["scenarios", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_year_policy_change_energy_h_sectoruniform"
    },
)
def year_policy_change_energy_h_sectoruniform():
    """
    Year when the policy to change final energy in households start. For each of five final energies.
    """
    return _ext_constant_year_policy_change_energy_h_sectoruniform()


_ext_constant_year_policy_change_energy_h_sectoruniform = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "G230",
    {"scenarios": ["BAU"], "final sources": _subscript_dict["final sources"]},
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_year_policy_change_energy_h_sectoruniform",
)

_ext_constant_year_policy_change_energy_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "G230",
    {"scenarios": ["SCEN1"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_change_energy_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "G230",
    {"scenarios": ["SCEN2"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_change_energy_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "G230",
    {"scenarios": ["SCEN3"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_change_energy_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "G230",
    {"scenarios": ["SCEN4"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_change_energy_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "User defined",
    "G230",
    {"scenarios": ["User defined"], "final sources": _subscript_dict["final sources"]},
)


@component.add(
    name="Max yearly change H",
    units="Dmnl",
    subscripts=["final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_max_yearly_change_h"},
)
def max_yearly_change_h():
    """
    maximum annual change for one type of energy in a sector.
    """
    return _ext_constant_max_yearly_change_h()


_ext_constant_max_yearly_change_h = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "FU857",
    {"final sources": _subscript_dict["final sources"]},
    _root,
    {"final sources": _subscript_dict["final sources"]},
    "_ext_constant_max_yearly_change_h",
)


@component.add(
    name="Global energy intensity H",
    units="EJ/Tdollars",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"evol_final_energy_intensity_h": 1},
)
def global_energy_intensity_h():
    """
    Global energy intensity of households considering the energy intensity of five final fuels.
    """
    return sum(
        evol_final_energy_intensity_h().rename({"final sources": "final sources!"}),
        dim=["final sources!"],
    )


@component.add(
    name="Maximum yearly aceleration of intensity improvement pct H",
    units="Dmnl",
    subscripts=["final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct_h"
    },
)
def maximum_yearly_aceleration_of_intensity_improvement_pct_h():
    """
    Maximum feasible annual changes that could be sustained in the future in the energy intensity of each economic sector have been estimated based on the observation of trends and historical changes in the available data.
    """
    return _ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct_h()


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct_h = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "FU854",
    {"final sources": _subscript_dict["final sources"]},
    _root,
    {"final sources": _subscript_dict["final sources"]},
    "_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct_h",
)


@component.add(
    name="share tech change fuel H",
    units="Dmnl",
    subscripts=["scenarios", "final sources1", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pressure_to_change_energy_technology_by_fuel_h": 2},
)
def share_tech_change_fuel_h():
    """
    Share of the global pressure to change energy technology that corresponds to each fuel.
    """
    return zidz(
        pressure_to_change_energy_technology_by_fuel_h().rename(
            {"final sources": "final sources1", "final sources1": "final sources"}
        ),
        sum(
            pressure_to_change_energy_technology_by_fuel_h().rename(
                {"final sources": "final sources!", "final sources1": "final sources"}
            ),
            dim=["final sources!"],
        ).expand_dims({"final sources1": _subscript_dict["final sources1"]}, 1),
    )


@component.add(
    name='"Year policy to improve efficiency H sector-uniform"',
    units="Year",
    subscripts=["scenarios", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_year_policy_to_improve_efficiency_h_sectoruniform"
    },
)
def year_policy_to_improve_efficiency_h_sectoruniform():
    """
    Year when the policy to improve efficiency in households start. For each of five final energies. Global option.
    """
    return _ext_constant_year_policy_to_improve_efficiency_h_sectoruniform()


_ext_constant_year_policy_to_improve_efficiency_h_sectoruniform = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "G227",
    {"scenarios": ["BAU"], "final sources": _subscript_dict["final sources"]},
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_year_policy_to_improve_efficiency_h_sectoruniform",
)

_ext_constant_year_policy_to_improve_efficiency_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "G227",
    {"scenarios": ["SCEN1"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_to_improve_efficiency_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "G227",
    {"scenarios": ["SCEN2"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_to_improve_efficiency_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "G227",
    {"scenarios": ["SCEN3"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_to_improve_efficiency_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "G227",
    {"scenarios": ["SCEN4"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_to_improve_efficiency_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "User defined",
    "G227",
    {"scenarios": ["User defined"], "final sources": _subscript_dict["final sources"]},
)


@component.add(
    name="Increase of intensity due to change energy technology H TOP DOWN",
    units="EJ/Tdollars",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"increase_of_intensity_due_to_change_energy_technology_eff_h": 1},
)
def increase_of_intensity_due_to_change_energy_technology_h_top_down():
    """
    When in households, one type of energy (a) is replaced by another (b), the energy intensity of (b) will increase and the energy intensity of (a) will decrease. This flow represents the increase of (b). Decrease of intensity due to energy a technology change H TOP DOWN[scenarios,solids]*efficiency rate of substitution H[ scenarios,liquids,solids]+Decrease of intensity due to energy a technology change H TOP DOWN[scenarios,gases]*efficiency rate of substitution H [scenarios,liquids,gases]+Decrease of intensity due to energy a technology change H TOP DOWN[scenarios,electricity]*efficiency rate of substitution H [scenarios,liquids,electricity]+Decrease of intensity due to energy a technology change H TOP DOWN[scenarios,heat]*efficiency rate of substitution H [scenarios,liquids,heat] ------ Decrease of intensity due to energy a technology change H TOP DOWN[scenarios,solids]*efficiency rate of substitution H[ scenarios,gases,solids]+Decrease of intensity due to energy a technology change H TOP DOWN[scenarios,electricity]*efficiency rate of substitution H [scenarios,gases,electricity]+Decrease of intensity due to energy a technology change H TOP DOWN[scenarios,heat]*efficiency rate of substitution H [scenarios,gases,heat]+Decrease of intensity due to energy a technology change H TOP DOWN[scenarios,liquids]*efficiency rate of substitution H [scenarios,gases,liquids] ----- Decrease of intensity due to energy a technology change H TOP DOWN[scenarios,gases]*efficiency rate of substitution H[scenarios ,solids,gases]+Decrease of intensity due to energy a technology change H TOP DOWN[scenarios,electricity]*efficiency rate of substitution H [scenarios,solids,electricity]+Decrease of intensity due to energy a technology change H TOP DOWN[scenarios,heat]*efficiency rate of substitution H [scenarios,solids,heat]+Decrease of intensity due to energy a technology change H TOP DOWN[scenarios,liquids]*efficiency rate of substitution H [scenarios,solids,liquids] ---- Decrease of intensity due to energy a technology change H TOP DOWN[scenarios,solids]*efficiency rate of substitution H[ scenarios,electricity,solids]+Decrease of intensity due to energy a technology change H TOP DOWN[scenarios,gases]*efficiency rate of substitution H [scenarios,electricity,gases]+Decrease of intensity due to energy a technology change H TOP DOWN[scenarios,heat]*efficiency rate of substitution H [scenarios,electricity,heat]+Decrease of intensity due to energy a technology change H TOP DOWN[scenarios,liquids]*efficiency rate of substitution H [scenarios,electricity,liquids] -- Decrease of intensity due to energy a technology change H TOP DOWN[scenarios,solids]*efficiency rate of substitution H[ scenarios,heat,solids]+Decrease of intensity due to energy a technology change H TOP DOWN[scenarios,gases]*efficiency rate of substitution H [scenarios,heat,gases]+Decrease of intensity due to energy a technology change H TOP DOWN[scenarios,electricity]*efficiency rate of substitution H [scenarios,heat,electricity]+Decrease of intensity due to energy a technology change H TOP DOWN[scenarios,liquids]*efficiency rate of substitution H [scenarios,heat,liquids]
    """
    return sum(
        increase_of_intensity_due_to_change_energy_technology_eff_h().rename(
            {"final sources1": "final sources", "final sources": "final sources!"}
        ),
        dim=["final sources!"],
    )


@component.add(
    name="min energy intensity vs intial H",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_min_energy_intensity_vs_intial_h"},
)
def min_energy_intensity_vs_intial_h():
    """
    Minimum value that the energy intensity for each economic sector could reach, obviously always above zero. This minimum value is very difficult to estimate, but based on historical values it has been considered that it can reach 30% of the value of 2009. (Capellán-Pérez et al., 2014)
    """
    return _ext_constant_min_energy_intensity_vs_intial_h()


_ext_constant_min_energy_intensity_vs_intial_h = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C199",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_min_energy_intensity_vs_intial_h",
)

_ext_constant_min_energy_intensity_vs_intial_h.add(
    "inputs_EU.xlsx", "SCEN1", "C199", {"scenarios": ["SCEN1"]}
)

_ext_constant_min_energy_intensity_vs_intial_h.add(
    "inputs_EU.xlsx", "SCEN2", "C199", {"scenarios": ["SCEN2"]}
)

_ext_constant_min_energy_intensity_vs_intial_h.add(
    "inputs_EU.xlsx", "SCEN3", "C199", {"scenarios": ["SCEN3"]}
)

_ext_constant_min_energy_intensity_vs_intial_h.add(
    "inputs_EU.xlsx", "SCEN4", "C199", {"scenarios": ["SCEN4"]}
)

_ext_constant_min_energy_intensity_vs_intial_h.add(
    "inputs_EU.xlsx", "User defined", "C199", {"scenarios": ["User defined"]}
)


@component.add(
    name="Increase of intensity due to change energy technology net H",
    units="EJ/Tdollars",
    subscripts=["scenarios", "final sources1", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "decrease_of_intensity_due_to_change_energy_technology_h_top_down": 1,
        "share_tech_change_fuel_h": 1,
    },
)
def increase_of_intensity_due_to_change_energy_technology_net_h():
    """
    Increase of intensity due to change a energy technology without considering efficieny rate of susbsitution by fuel
    """
    return (
        decrease_of_intensity_due_to_change_energy_technology_h_top_down()
        * share_tech_change_fuel_h().transpose(
            "scenarios", "final sources", "final sources1"
        )
    ).transpose("scenarios", "final sources1", "final sources")


@component.add(
    name="historic rate final energy intensity H",
    units="EJ/Tdollars/Year",
    subscripts=["final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 2, "historic_final_energy_intensity_h": 2},
)
def historic_rate_final_energy_intensity_h():
    """
    Historic variation of final energy intensity by final souerce (WIOD data)
    """
    return historic_final_energy_intensity_h(integer(time() + 1)).rename(
        {"final sources1": "final sources"}
    ) - historic_final_energy_intensity_h(integer(time())).rename(
        {"final sources1": "final sources"}
    )


@component.add(
    name="Year policy to improve efficiency H",
    units="Year",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "choose_policies_of_intensities_global_or_by_sector": 1,
        "year_policy_to_improve_efficiency_h_by_sector": 1,
        "year_policy_to_improve_efficiency_h_sectoruniform": 1,
    },
)
def year_policy_to_improve_efficiency_h():
    """
    Year when the policy to improve efficiency in households start. For each of five final energies.
    """
    return if_then_else(
        (choose_policies_of_intensities_global_or_by_sector() == 1).expand_dims(
            {"final sources": _subscript_dict["final sources"]}, 1
        ),
        lambda: year_policy_to_improve_efficiency_h_by_sector(),
        lambda: year_policy_to_improve_efficiency_h_sectoruniform(),
    )


@component.add(
    name="Energy intensity target H",
    units="EJ/Tdollar",
    subscripts=["scenarios", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_energy_intensity_target_h"},
)
def energy_intensity_target_h():
    """
    Energy intensity targets by final energy defined by user
    """
    return _ext_constant_energy_intensity_target_h()


_ext_constant_energy_intensity_target_h = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "FU247",
    {"scenarios": ["BAU"], "final sources": _subscript_dict["final sources"]},
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_energy_intensity_target_h",
)

_ext_constant_energy_intensity_target_h.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FU247",
    {"scenarios": ["SCEN1"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_energy_intensity_target_h.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FU247",
    {"scenarios": ["SCEN2"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_energy_intensity_target_h.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FU247",
    {"scenarios": ["SCEN3"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_energy_intensity_target_h.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FU247",
    {"scenarios": ["SCEN4"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_energy_intensity_target_h.add(
    "inputs_EU.xlsx",
    "User defined",
    "FU247",
    {"scenarios": ["User defined"], "final sources": _subscript_dict["final sources"]},
)


@component.add(
    name="exp slow evolution improve efficiency H",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def exp_slow_evolution_improve_efficiency_h():
    """
    Parameter that define the speed of application of policies in the slow way.
    """
    return 2


@component.add(
    name="Year policy change energy H",
    units="Year",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "choose_policies_of_intensities_global_or_by_sector": 1,
        "year_policy_change_energy_h_by_sector": 1,
        "year_policy_change_energy_h_sectoruniform": 1,
    },
)
def year_policy_change_energy_h():
    """
    Year when the policy to change final energy in households start. For each of five final energies.
    """
    return if_then_else(
        (choose_policies_of_intensities_global_or_by_sector() == 1).expand_dims(
            {"final sources": _subscript_dict["final sources"]}, 1
        ),
        lambda: year_policy_change_energy_h_by_sector(),
        lambda: year_policy_change_energy_h_sectoruniform(),
    )


@component.add(
    name="Year policy change energy H by sector",
    units="Year",
    subscripts=["scenarios", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_year_policy_change_energy_h_by_sector"},
)
def year_policy_change_energy_h_by_sector():
    """
    Year when the policy to change final energy in households start. For each of five final energies.
    """
    return _ext_constant_year_policy_change_energy_h_by_sector()


_ext_constant_year_policy_change_energy_h_by_sector = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "FU213",
    {"scenarios": ["BAU"], "final sources": _subscript_dict["final sources"]},
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_year_policy_change_energy_h_by_sector",
)

_ext_constant_year_policy_change_energy_h_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FU213",
    {"scenarios": ["SCEN1"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_change_energy_h_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FU213",
    {"scenarios": ["SCEN2"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_change_energy_h_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FU213",
    {"scenarios": ["SCEN3"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_change_energy_h_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FU213",
    {"scenarios": ["SCEN4"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_change_energy_h_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FU213",
    {"scenarios": ["User defined"], "final sources": _subscript_dict["final sources"]},
)


@component.add(
    name="Choose policies of intensities global or by sector",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_choose_policies_of_intensities_global_or_by_sector"
    },
)
def choose_policies_of_intensities_global_or_by_sector():
    """
    Choose policies of intensities global or by sector 1- Sectors 0- Global
    """
    return _ext_constant_choose_policies_of_intensities_global_or_by_sector()


_ext_constant_choose_policies_of_intensities_global_or_by_sector = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B203",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_choose_policies_of_intensities_global_or_by_sector",
)

_ext_constant_choose_policies_of_intensities_global_or_by_sector.add(
    "inputs_EU.xlsx", "SCEN1", "B203", {"scenarios": ["SCEN1"]}
)

_ext_constant_choose_policies_of_intensities_global_or_by_sector.add(
    "inputs_EU.xlsx", "SCEN2", "B203", {"scenarios": ["SCEN2"]}
)

_ext_constant_choose_policies_of_intensities_global_or_by_sector.add(
    "inputs_EU.xlsx", "SCEN3", "B203", {"scenarios": ["SCEN3"]}
)

_ext_constant_choose_policies_of_intensities_global_or_by_sector.add(
    "inputs_EU.xlsx", "SCEN4", "B203", {"scenarios": ["SCEN4"]}
)

_ext_constant_choose_policies_of_intensities_global_or_by_sector.add(
    "inputs_EU.xlsx", "User defined", "B203", {"scenarios": ["User defined"]}
)


@component.add(
    name="year energy intensity target",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "choose_energy_intensity_target_method": 1,
        "year_change_pct_energy_intensity_target": 1,
    },
)
def year_energy_intensity_target():
    """
    Year over which the energy intensities target is calculated
    """
    return if_then_else(
        choose_energy_intensity_target_method() == 1,
        lambda: xr.DataArray(
            2020, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: year_change_pct_energy_intensity_target(),
    )


@component.add(
    name="Initial energy intensity 1995 H",
    units="EJ/Tdollars",
    subscripts=["final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_energy_intensity_1995_h"},
)
def initial_energy_intensity_1995_h():
    """
    Initial energy intensity for households in 1995
    """
    return _ext_constant_initial_energy_intensity_1995_h()


_ext_constant_initial_energy_intensity_1995_h = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "GM49",
    {"final sources": _subscript_dict["final sources"]},
    _root,
    {"final sources": _subscript_dict["final sources"]},
    "_ext_constant_initial_energy_intensity_1995_h",
)


@component.add(
    name="Policy to improve efficiency speed H",
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "choose_policies_of_intensities_global_or_by_sector": 1,
        "policy_to_improve_efficiency_speed_h_by_sector": 1,
        "policy_to_improve_efficiency_speed_h_sectoruniform": 1,
    },
)
def policy_to_improve_efficiency_speed_h():
    """
    Selection of the speed of application of the different policies to improve the efficiency.
    """
    return if_then_else(
        (choose_policies_of_intensities_global_or_by_sector() == 1).expand_dims(
            {"final sources": _subscript_dict["final sources"]}, 1
        ),
        lambda: policy_to_improve_efficiency_speed_h_by_sector(),
        lambda: policy_to_improve_efficiency_speed_h_sectoruniform(),
    )


@component.add(
    name="Policy to improve efficiency speed H by sector",
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_policy_to_improve_efficiency_speed_h_by_sector"
    },
)
def policy_to_improve_efficiency_speed_h_by_sector():
    """
    Selection of the speed of application of the different policies to improve the efficiency by sector
    """
    return _ext_constant_policy_to_improve_efficiency_speed_h_by_sector()


_ext_constant_policy_to_improve_efficiency_speed_h_by_sector = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "FU211",
    {"scenarios": ["BAU"], "final sources": _subscript_dict["final sources"]},
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_policy_to_improve_efficiency_speed_h_by_sector",
)

_ext_constant_policy_to_improve_efficiency_speed_h_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FU211",
    {"scenarios": ["SCEN1"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_policy_to_improve_efficiency_speed_h_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FU211",
    {"scenarios": ["SCEN2"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_policy_to_improve_efficiency_speed_h_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FU211",
    {"scenarios": ["SCEN3"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_policy_to_improve_efficiency_speed_h_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FU211",
    {"scenarios": ["SCEN4"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_policy_to_improve_efficiency_speed_h_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FU211",
    {"scenarios": ["User defined"], "final sources": _subscript_dict["final sources"]},
)


@component.add(
    name="Total FED households",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"households_final_energy_demand": 1},
)
def total_fed_households():
    """
    Final energy demand of households
    """
    return sum(
        households_final_energy_demand().rename({"final sources": "final sources!"}),
        dim=["final sources!"],
    )


@component.add(
    name="Year policy to improve efficiency H by sector",
    units="Year",
    subscripts=["scenarios", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_year_policy_to_improve_efficiency_h_by_sector"
    },
)
def year_policy_to_improve_efficiency_h_by_sector():
    """
    Year when the policy to improve efficiency in households start. For each of five final energies. By sector option.
    """
    return _ext_constant_year_policy_to_improve_efficiency_h_by_sector()


_ext_constant_year_policy_to_improve_efficiency_h_by_sector = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "FU210",
    {"scenarios": ["BAU"], "final sources": _subscript_dict["final sources"]},
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_year_policy_to_improve_efficiency_h_by_sector",
)

_ext_constant_year_policy_to_improve_efficiency_h_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FU210",
    {"scenarios": ["SCEN1"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_to_improve_efficiency_h_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FU210",
    {"scenarios": ["SCEN2"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_to_improve_efficiency_h_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FU210",
    {"scenarios": ["SCEN3"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_to_improve_efficiency_h_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FU210",
    {"scenarios": ["SCEN4"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_to_improve_efficiency_h_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FU210",
    {"scenarios": ["User defined"], "final sources": _subscript_dict["final sources"]},
)


@component.add(
    name="Total FED trasnport households",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"transport_households_final_energy_demand": 1},
)
def total_fed_trasnport_households():
    """
    Final energy in transport households
    """
    return sum(
        transport_households_final_energy_demand().rename(
            {"final sources": "final sources!"}
        ),
        dim=["final sources!"],
    )


@component.add(
    name="Historic final energy intensity H",
    units="EJ/Tdollars",
    subscripts=["final sources1"],
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_final_energy_intensity_h",
        "__lookup__": "_ext_lookup_historic_final_energy_intensity_h",
    },
)
def historic_final_energy_intensity_h(x, final_subs=None):
    """
    Historic final energy intensity by final souerce (WIOD data)
    """
    return _ext_lookup_historic_final_energy_intensity_h(x, final_subs)


_ext_lookup_historic_final_energy_intensity_h = ExtLookup(
    "inputs_EU.xlsx",
    "Economy",
    "47",
    "C83",
    {"final sources1": ["electricity"]},
    _root,
    {"final sources1": _subscript_dict["final sources1"]},
    "_ext_lookup_historic_final_energy_intensity_h",
)

_ext_lookup_historic_final_energy_intensity_h.add(
    "inputs_EU.xlsx", "Economy", "47", "C119", {"final sources1": ["heat"]}
)

_ext_lookup_historic_final_energy_intensity_h.add(
    "inputs_EU.xlsx", "Economy", "47", "C155", {"final sources1": ["liquids"]}
)

_ext_lookup_historic_final_energy_intensity_h.add(
    "inputs_EU.xlsx", "Economy", "47", "C227", {"final sources1": ["solids"]}
)

_ext_lookup_historic_final_energy_intensity_h.add(
    "inputs_EU.xlsx", "Economy", "47", "C191", {"final sources1": ["gases"]}
)


@component.add(
    name="Energy intensity of households",
    units="EJ/Tdollar",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "energy_intensity_of_households_rest": 3,
        "activate_transport_h_bottom_up_method": 1,
        "energy_intensity_of_households_transport": 1,
    },
)
def energy_intensity_of_households():
    """
    Energy intensity of households by final source
    """
    return if_then_else(
        time() < 2009,
        lambda: energy_intensity_of_households_rest().rename(
            {"final sources1": "final sources"}
        ),
        lambda: if_then_else(
            (activate_transport_h_bottom_up_method() == 0).expand_dims(
                {"final sources": _subscript_dict["final sources"]}, 1
            ),
            lambda: energy_intensity_of_households_rest().rename(
                {"final sources1": "final sources"}
            ),
            lambda: energy_intensity_of_households_transport()
            + energy_intensity_of_households_rest().rename(
                {"final sources1": "final sources"}
            ),
        ),
    )


@component.add(
    name="Energy intensity of households rest",
    units="EJ/Tdollar",
    subscripts=["scenarios", "final sources1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "activate_transport_h_bottom_up_method": 3,
        "evol_final_energy_intensity_h": 8,
        "change_total_intensity_to_rest": 3,
    },
)
def energy_intensity_of_households_rest():
    """
    Energy intensity of households by final source without considering the energy of transports for households
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "final sources1": _subscript_dict["final sources1"],
        },
        ["scenarios", "final sources1"],
    )
    value.loc[:, ["liquids"]] = (
        if_then_else(
            activate_transport_h_bottom_up_method() == 1,
            lambda: evol_final_energy_intensity_h()
            .loc[:, "liquids"]
            .reset_coords(drop=True)
            * change_total_intensity_to_rest()
            .loc[:, "liquids"]
            .reset_coords(drop=True),
            lambda: evol_final_energy_intensity_h()
            .loc[:, "liquids"]
            .reset_coords(drop=True),
        )
        .expand_dims({"final sources1": ["liquids"]}, 1)
        .values
    )
    value.loc[:, ["solids"]] = (
        evol_final_energy_intensity_h()
        .loc[:, "solids"]
        .reset_coords(drop=True)
        .expand_dims({"final sources1": ["solids"]}, 1)
        .values
    )
    value.loc[:, ["gases"]] = (
        if_then_else(
            activate_transport_h_bottom_up_method() == 1,
            lambda: evol_final_energy_intensity_h()
            .loc[:, "gases"]
            .reset_coords(drop=True)
            * change_total_intensity_to_rest().loc[:, "gases"].reset_coords(drop=True),
            lambda: evol_final_energy_intensity_h()
            .loc[:, "gases"]
            .reset_coords(drop=True),
        )
        .expand_dims({"final sources1": ["gases"]}, 1)
        .values
    )
    value.loc[:, ["electricity"]] = (
        if_then_else(
            activate_transport_h_bottom_up_method() == 1,
            lambda: evol_final_energy_intensity_h()
            .loc[:, "electricity"]
            .reset_coords(drop=True)
            * change_total_intensity_to_rest()
            .loc[:, "electricity"]
            .reset_coords(drop=True),
            lambda: evol_final_energy_intensity_h()
            .loc[:, "electricity"]
            .reset_coords(drop=True),
        )
        .expand_dims({"final sources1": ["electricity"]}, 1)
        .values
    )
    value.loc[:, ["heat"]] = (
        evol_final_energy_intensity_h()
        .loc[:, "heat"]
        .reset_coords(drop=True)
        .expand_dims({"final sources1": ["heat"]}, 1)
        .values
    )
    return value


@component.add(
    name="Increase of intensity due to change energy technology eff H",
    units="EJ/Tdollars",
    subscripts=["scenarios", "final sources1", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "efficiency_rate_of_substitution_h": 2,
        "increase_of_intensity_due_to_change_energy_technology_net_h": 2,
    },
)
def increase_of_intensity_due_to_change_energy_technology_eff_h():
    """
    Increase of intensity due to change a energy technology by fuel
    """
    return if_then_else(
        efficiency_rate_of_substitution_h().rename(
            {"final sources": "final sources1", "final sources1": "final sources"}
        )
        == 0,
        lambda: increase_of_intensity_due_to_change_energy_technology_net_h(),
        lambda: increase_of_intensity_due_to_change_energy_technology_net_h()
        * efficiency_rate_of_substitution_h().rename(
            {"final sources": "final sources1", "final sources1": "final sources"}
        ),
    )


@component.add(
    name='"Policy change energy speed H sector-uniform"',
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_policy_change_energy_speed_h_sectoruniform"
    },
)
def policy_change_energy_speed_h_sectoruniform():
    """
    Selection of the speed of application of the different policies to change the final energy global.
    """
    return _ext_constant_policy_change_energy_speed_h_sectoruniform()


_ext_constant_policy_change_energy_speed_h_sectoruniform = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "G231",
    {"scenarios": ["BAU"], "final sources": _subscript_dict["final sources"]},
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_policy_change_energy_speed_h_sectoruniform",
)

_ext_constant_policy_change_energy_speed_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "G231",
    {"scenarios": ["SCEN1"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_policy_change_energy_speed_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "G231",
    {"scenarios": ["SCEN2"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_policy_change_energy_speed_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "G231",
    {"scenarios": ["SCEN3"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_policy_change_energy_speed_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "G231",
    {"scenarios": ["SCEN4"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_policy_change_energy_speed_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "User defined",
    "G231",
    {"scenarios": ["User defined"], "final sources": _subscript_dict["final sources"]},
)


@component.add(
    name='"Policy to improve efficiency speed H sector-uniform"',
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_policy_to_improve_efficiency_speed_h_sectoruniform"
    },
)
def policy_to_improve_efficiency_speed_h_sectoruniform():
    """
    Selection of the speed of application of the different policies to improve the efficiency global
    """
    return _ext_constant_policy_to_improve_efficiency_speed_h_sectoruniform()


_ext_constant_policy_to_improve_efficiency_speed_h_sectoruniform = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "G228",
    {"scenarios": ["BAU"], "final sources": _subscript_dict["final sources"]},
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_policy_to_improve_efficiency_speed_h_sectoruniform",
)

_ext_constant_policy_to_improve_efficiency_speed_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "G228",
    {"scenarios": ["SCEN1"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_policy_to_improve_efficiency_speed_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "G228",
    {"scenarios": ["SCEN2"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_policy_to_improve_efficiency_speed_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "G228",
    {"scenarios": ["SCEN3"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_policy_to_improve_efficiency_speed_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "G228",
    {"scenarios": ["SCEN4"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_policy_to_improve_efficiency_speed_h_sectoruniform.add(
    "inputs_EU.xlsx",
    "User defined",
    "G228",
    {"scenarios": ["User defined"], "final sources": _subscript_dict["final sources"]},
)


@component.add(
    name="exp slow evolution change energy H",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def exp_slow_evolution_change_energy_h():
    """
    Parameter that define the speed of application of policies in the slow way.
    """
    return 2


@component.add(
    name="Transport households final energy demand",
    units="EJ",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "energy_intensity_of_households_transport": 1,
        "household_demand_total": 1,
    },
)
def transport_households_final_energy_demand():
    """
    Final energy in transport households
    """
    return (
        energy_intensity_of_households_transport()
        * household_demand_total()
        / 1000000.0
    )


@component.add(
    name="pct change energy intensity target",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_pct_change_energy_intensity_target"},
)
def pct_change_energy_intensity_target():
    """
    In energy intensity target method option 2, the percentage of change in energy intensities over the given year
    """
    return _ext_constant_pct_change_energy_intensity_target()


_ext_constant_pct_change_energy_intensity_target = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C250",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_pct_change_energy_intensity_target",
)

_ext_constant_pct_change_energy_intensity_target.add(
    "inputs_EU.xlsx", "SCEN1", "C250", {"scenarios": ["SCEN1"]}
)

_ext_constant_pct_change_energy_intensity_target.add(
    "inputs_EU.xlsx", "SCEN2", "C250", {"scenarios": ["SCEN2"]}
)

_ext_constant_pct_change_energy_intensity_target.add(
    "inputs_EU.xlsx", "SCEN3", "C250", {"scenarios": ["SCEN3"]}
)

_ext_constant_pct_change_energy_intensity_target.add(
    "inputs_EU.xlsx", "SCEN4", "C250", {"scenarios": ["SCEN4"]}
)

_ext_constant_pct_change_energy_intensity_target.add(
    "inputs_EU.xlsx", "User defined", "C250", {"scenarios": ["User defined"]}
)


@component.add(
    name="Policy change energy speed H",
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "choose_policies_of_intensities_global_or_by_sector": 1,
        "policy_change_energy_speed_h_by_sector": 1,
        "policy_change_energy_speed_h_sectoruniform": 1,
    },
)
def policy_change_energy_speed_h():
    """
    Selection of the speed of application of the different policies to change the final energy
    """
    return if_then_else(
        (choose_policies_of_intensities_global_or_by_sector() == 1).expand_dims(
            {"final sources": _subscript_dict["final sources"]}, 1
        ),
        lambda: policy_change_energy_speed_h_by_sector(),
        lambda: policy_change_energy_speed_h_sectoruniform(),
    )


@component.add(
    name="exp rapid evolution improve efficiency H",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def exp_rapid_evolution_improve_efficiency_h():
    """
    Parameter that define the speed of application of policies in the rapid way.
    """
    return 1 / 2


@component.add(
    name="Policy change energy speed H by sector",
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_policy_change_energy_speed_h_by_sector"},
)
def policy_change_energy_speed_h_by_sector():
    """
    Selection of the speed of application of the different policies to change the final energy by sector.
    """
    return _ext_constant_policy_change_energy_speed_h_by_sector()


_ext_constant_policy_change_energy_speed_h_by_sector = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "FU214",
    {"scenarios": ["BAU"], "final sources": _subscript_dict["final sources"]},
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_policy_change_energy_speed_h_by_sector",
)

_ext_constant_policy_change_energy_speed_h_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FU214",
    {"scenarios": ["SCEN1"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_policy_change_energy_speed_h_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FU214",
    {"scenarios": ["SCEN2"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_policy_change_energy_speed_h_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FU214",
    {"scenarios": ["SCEN3"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_policy_change_energy_speed_h_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FU214",
    {"scenarios": ["SCEN4"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_policy_change_energy_speed_h_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FU214",
    {"scenarios": ["User defined"], "final sources": _subscript_dict["final sources"]},
)


@component.add(
    name="change total intensity to rest",
    units="EJ/Tdollar",
    subscripts=["scenarios", "final sources1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 3},
)
def change_total_intensity_to_rest():
    """
    Adjust to separate in 2009 among transport households and the rest in households. We assume that in 2009, 78% of the households liquids are from transport. This data is from WIOD (Diesel & gasoline from households is for transport) 1,245=0.78*1.596 For other sources, we asume 0% of the energy is for transport
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "final sources1": _subscript_dict["final sources1"],
        },
        ["scenarios", "final sources1"],
    )
    value.loc[:, ["liquids"]] = 1 - step(__data["time"], 0.78, 2009)
    value.loc[:, ["gases"]] = 1 - step(__data["time"], 0.025, 2009)
    value.loc[:, ["electricity"]] = 1 - step(__data["time"], 0.007, 2009)
    return value


@component.add(
    name="Initial global energy intensity 2009 H",
    units="EJ/Tdollars",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_global_energy_intensity_2009_h"},
)
def initial_global_energy_intensity_2009_h():
    """
    Global energy intensity of households in 2009
    """
    return _ext_constant_initial_global_energy_intensity_2009_h()


_ext_constant_initial_global_energy_intensity_2009_h = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "AK230",
    {},
    _root,
    {},
    "_ext_constant_initial_global_energy_intensity_2009_h",
)


@component.add(
    name="Evol final energy intensity H",
    units="EJ/Tdollars",
    subscripts=["scenarios", "final sources"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_evol_final_energy_intensity_h": 1},
    other_deps={
        "_integ_evol_final_energy_intensity_h": {
            "initial": {"initial_energy_intensity_1995_h": 1},
            "step": {
                "increase_of_intensity_due_to_change_energy_technology_h_top_down": 1,
                "inertial_rate_energy_intensity_h_top_down": 1,
                "decrease_of_intensity_due_to_change_energy_technology_h_top_down": 1,
            },
        }
    },
)
def evol_final_energy_intensity_h():
    """
    Energy intensity of households by final source. This variable models the dynamic evolution of the vetor of final energy intensities of the 5 types of final energy. The evolution of the intensities is considered to be due to two main effects: (1) the variation of the energy efficiency (flow due to the variable inertial rate energy intensity) and (2) the change of one type of final energy by another, As a consequence of a technological change (flow due to the variables Increase / decrease of intensity due to energy to technology change), as for example the change due to the electrification of the transport.
    """
    return _integ_evol_final_energy_intensity_h()


_integ_evol_final_energy_intensity_h = Integ(
    lambda: increase_of_intensity_due_to_change_energy_technology_h_top_down()
    + inertial_rate_energy_intensity_h_top_down()
    - decrease_of_intensity_due_to_change_energy_technology_h_top_down(),
    lambda: initial_energy_intensity_1995_h().expand_dims(
        {"scenarios": _subscript_dict["scenarios"]}, 0
    ),
    "_integ_evol_final_energy_intensity_h",
)


@component.add(
    name="Pressure to change energy technology by fuel H",
    units="Dmnl",
    subscripts=["scenarios", "final sources", "final sources1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "efficiency_rate_of_substitution_h": 1,
        "interfuel_scarcity_pressure_h": 2,
        "implementatio_policy_to_change_final_energy_h": 1,
    },
)
def pressure_to_change_energy_technology_by_fuel_h():
    """
    This variable represents the pressure in households for substituting a final energy source for another. This pressure may be due to (1) energy policies, eg substitution of fossil fuels for electrical energy, or (2) by variations in the scarcity of each type of final energy.
    """
    return if_then_else(
        efficiency_rate_of_substitution_h() == 0,
        lambda: np.minimum(np.maximum(interfuel_scarcity_pressure_h(), 0), 1),
        lambda: np.minimum(
            np.maximum(
                interfuel_scarcity_pressure_h()
                + implementatio_policy_to_change_final_energy_h().rename(
                    {"final sources": "final sources1"}
                ),
                0,
            ),
            1,
        ),
    )


@component.add(
    name="exp rapid evolution change energy H",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def exp_rapid_evolution_change_energy_h():
    """
    Parameter that define the speed of application of policies in the rapid way.
    """
    return 1 / 2


@component.add(
    name="efficiency rate of substitution H",
    units="Dmnl",
    subscripts=["scenarios", "final sources", "final sources1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "choose_policies_of_intensities_global_or_by_sector": 1,
        "efficiency_rate_of_substitution_h_by_sector": 1,
        "efficiency_rate_of_substitution_h_sectoruniform": 1,
    },
)
def efficiency_rate_of_substitution_h():
    """
    It is necessary to take into account that the energy efficiencies of the two technologies exchanged do not necessarily have to be the same. In other words, a decrease in the energy intensity of (a) will not imply the same increase in the energy intensity of (b). This possible difference is compensated through the parameter “Efficiency rate of substitution”.
    """
    return if_then_else(
        (choose_policies_of_intensities_global_or_by_sector() == 1)
        .expand_dims({"final sources": _subscript_dict["final sources"]}, 1)
        .expand_dims({"final sources1": _subscript_dict["final sources1"]}, 2),
        lambda: efficiency_rate_of_substitution_h_by_sector(),
        lambda: efficiency_rate_of_substitution_h_sectoruniform(),
    )


@component.add(
    name="Year to finish policy change energy",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def year_to_finish_policy_change_energy():
    """
    Year when the policy to change final energy in the sectors finish.
    """
    return 2050


@component.add(
    name="final year target",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_final_year_target"},
)
def final_year_target():
    """
    Year defined by user in which the energy intensity targets are set.
    """
    return _ext_constant_final_year_target()


_ext_constant_final_year_target = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B243",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_final_year_target",
)

_ext_constant_final_year_target.add(
    "inputs_EU.xlsx", "SCEN1", "B243", {"scenarios": ["SCEN1"]}
)

_ext_constant_final_year_target.add(
    "inputs_EU.xlsx", "SCEN2", "B243", {"scenarios": ["SCEN2"]}
)

_ext_constant_final_year_target.add(
    "inputs_EU.xlsx", "SCEN3", "B243", {"scenarios": ["SCEN3"]}
)

_ext_constant_final_year_target.add(
    "inputs_EU.xlsx", "SCEN4", "B243", {"scenarios": ["SCEN4"]}
)

_ext_constant_final_year_target.add(
    "inputs_EU.xlsx", "User defined", "B243", {"scenarios": ["User defined"]}
)


@component.add(
    name="Maximum yearly aceleration of intensity improvement pct",
    units="Dmnl",
    subscripts=["sectors1", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct"
    },
)
def maximum_yearly_aceleration_of_intensity_improvement_pct():
    """
    Maximum feasible annual changes that could be sustained in the future in the energy intensity of each economic sector have been estimated based on the observation of trends and historical changes in the available data.
    """
    return _ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct()


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "B854",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
    _root,
    {
        "sectors1": _subscript_dict["sectors1"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct",
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "G854",
    {
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "L854",
    {
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "Q854",
    {
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "V854",
    {
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "AA854",
    {
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "AF854",
    {
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "AK854",
    {
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "AP854",
    {
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "AU854",
    {
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "AZ854",
    {
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "BE854",
    {
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "BJ854",
    {"sectors1": ["Machinery Nec"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "BO854",
    {
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "BT854",
    {
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "BY854",
    {
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "CD854",
    {
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "CI854",
    {"sectors1": ["Construction"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "CN854",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "CS854",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "CX854",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "DC854",
    {
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "DH854",
    {
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "DM854",
    {
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "DR854",
    {"sectors1": ["Air Transport"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "DW854",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "EB854",
    {
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "EG854",
    {
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "EL854",
    {
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "EQ854",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "EV854",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "FA854",
    {"sectors1": ["Education"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "FF854",
    {
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "FK854",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "inputs_EU.xlsx",
    "Economy",
    "FP854",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)


@component.add(
    name="Pressure to change energy technology 0",
    units="Dmnl",
    subscripts=["scenarios", "sectors", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pressure_to_change_energy_technology_by_fuel": 1},
)
def pressure_to_change_energy_technology_0():
    """
    This variable represents the pressure in one sector for substituting a final energy source for all the other energies.
    """
    return np.minimum(
        1,
        sum(
            pressure_to_change_energy_technology_by_fuel().rename(
                {"final sources": "final sources!", "final sources1": "final sources"}
            ),
            dim=["final sources!"],
        ),
    )


@component.add(
    name="Pressure to change energy technology by fuel",
    units="Dmnl",
    subscripts=["scenarios", "sectors", "final sources", "final sources1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "efficiency_rate_of_substitution": 1,
        "interfuel_scarcity_pressure": 2,
        "implementatio_policy_to_change_final_energy": 1,
    },
)
def pressure_to_change_energy_technology_by_fuel():
    """
    This variable represents the pressure in each economic sector for substituting a final energy source for another. This change depending on the sectors will have different technological difficulty and different cost. This pressure may be due to (1) energy policies, eg substitution of fossil fuels for electrical energy, or (2) by variations in the scarcity of each type of final energy.
    """
    return if_then_else(
        efficiency_rate_of_substitution() == 0,
        lambda: np.minimum(np.maximum(interfuel_scarcity_pressure(), 0), 1).expand_dims(
            {"sectors": _subscript_dict["sectors"]}, 1
        ),
        lambda: np.minimum(
            np.maximum(
                interfuel_scarcity_pressure()
                + implementatio_policy_to_change_final_energy()
                .rename({"final sources": "final sources1"})
                .transpose("scenarios", "final sources1", "sectors"),
                0,
            ),
            1,
        ).transpose("scenarios", "sectors", "final sources", "final sources1"),
    )


@component.add(
    name="Efficiency energy aceleration",
    units="Dmnl",
    subscripts=["scenarios", "sectors", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "maximum_yearly_aceleration_of_intensity_improvement_pct": 1,
        "percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities": 1,
        "pressure_to_improve_energy_intensity_efficiency": 1,
    },
)
def efficiency_energy_aceleration():
    """
    This variable represents the acceleration of the process of variation of the energy intensity that can be produced by polítcas or scarcity pressures.
    """
    return (
        (
            -maximum_yearly_aceleration_of_intensity_improvement_pct().rename(
                {"sectors1": "sectors"}
            )
        )
        * (
            1
            + percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities()
        )
        * pressure_to_improve_energy_intensity_efficiency().transpose(
            "sectors", "final sources", "scenarios"
        )
    ).transpose("scenarios", "sectors", "final sources")


@component.add(
    name="Pressure to improve energy intensity efficiency",
    units="Dmnl",
    subscripts=["scenarios", "sectors", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fuel_scarcity_pressure": 1,
        "implementation_policy_to_improve_energy_intensity_efficiency": 1,
    },
)
def pressure_to_improve_energy_intensity_efficiency():
    """
    This variable represents the pressure in each economic sector to improve energy efficiency in the technology used. This change according to the sectors will have different technological difficulty and different cost. This pressure may be due to (1) energy policies, eg incentives for energy efficiency, or (2) significant variations in the scarcity of each type of final energy.
    """
    return np.minimum(
        1,
        fuel_scarcity_pressure()
        + implementation_policy_to_improve_energy_intensity_efficiency().transpose(
            "scenarios", "final sources", "sectors"
        ),
    ).transpose("scenarios", "sectors", "final sources")


@component.add(
    name="Implementatio policy to change final energy",
    units="Dmnl",
    subscripts=["scenarios", "sectors", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "year_policy_change_energy": 9,
        "year_to_finish_energy_intensity_policies": 5,
        "exp_rapid_evol_change_energy": 1,
        "policy_change_energy_speed": 3,
        "exp_slow_evol_change_energy": 1,
        "time": 5,
    },
)
def implementatio_policy_to_change_final_energy():
    """
    Pressure due to energy policies, eg incentives for change the final energy
    """
    return if_then_else(
        np.logical_or(
            year_policy_change_energy() < 2015,
            year_policy_change_energy() > year_to_finish_energy_intensity_policies(),
        ),
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "sectors": _subscript_dict["sectors"],
                "final sources": _subscript_dict["final sources"],
            },
            ["scenarios", "sectors", "final sources"],
        ),
        lambda: if_then_else(
            time() < year_policy_change_energy(),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "sectors": _subscript_dict["sectors"],
                    "final sources": _subscript_dict["final sources"],
                },
                ["scenarios", "sectors", "final sources"],
            ),
            lambda: if_then_else(
                (time() > year_to_finish_energy_intensity_policies())
                .expand_dims({"sectors": _subscript_dict["sectors"]}, 1)
                .expand_dims({"final sources": _subscript_dict["final sources"]}, 2),
                lambda: xr.DataArray(
                    1,
                    {
                        "scenarios": _subscript_dict["scenarios"],
                        "sectors": _subscript_dict["sectors"],
                        "final sources": _subscript_dict["final sources"],
                    },
                    ["scenarios", "sectors", "final sources"],
                ),
                lambda: if_then_else(
                    policy_change_energy_speed() == 1,
                    lambda: (
                        (time() - year_policy_change_energy())
                        / (
                            year_to_finish_energy_intensity_policies()
                            - year_policy_change_energy()
                        )
                    )
                    ** exp_rapid_evol_change_energy(),
                    lambda: if_then_else(
                        policy_change_energy_speed() == 2,
                        lambda: (time() - year_policy_change_energy())
                        / (
                            year_to_finish_energy_intensity_policies()
                            - year_policy_change_energy()
                        ),
                        lambda: if_then_else(
                            policy_change_energy_speed() == 3,
                            lambda: (
                                (time() - year_policy_change_energy())
                                / (
                                    year_to_finish_energy_intensity_policies()
                                    - year_policy_change_energy()
                                )
                            )
                            ** exp_slow_evol_change_energy(),
                            lambda: xr.DataArray(
                                0,
                                {
                                    "scenarios": _subscript_dict["scenarios"],
                                    "sectors": _subscript_dict["sectors"],
                                    "final sources": _subscript_dict["final sources"],
                                },
                                ["scenarios", "sectors", "final sources"],
                            ),
                        ),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="Implementation policy to improve energy intensity efficiency",
    units="Dmnl",
    subscripts=["scenarios", "sectors", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "year_policy_to_improve_efficiency": 9,
        "year_to_finish_energy_intensity_policies": 5,
        "exp_rapid_evolution_improve_efficiency": 1,
        "policy_to_improve_efficiency_speed": 3,
        "exp_slow_evolution_improve_efficiency": 1,
        "time": 5,
    },
)
def implementation_policy_to_improve_energy_intensity_efficiency():
    """
    Pressure due to energy policies, eg incentives for energy efficiency,
    """
    return if_then_else(
        np.logical_or(
            year_policy_to_improve_efficiency() < 2015,
            year_policy_to_improve_efficiency()
            > year_to_finish_energy_intensity_policies(),
        ),
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "sectors": _subscript_dict["sectors"],
                "final sources": _subscript_dict["final sources"],
            },
            ["scenarios", "sectors", "final sources"],
        ),
        lambda: if_then_else(
            time() < year_policy_to_improve_efficiency(),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "sectors": _subscript_dict["sectors"],
                    "final sources": _subscript_dict["final sources"],
                },
                ["scenarios", "sectors", "final sources"],
            ),
            lambda: if_then_else(
                (time() > year_to_finish_energy_intensity_policies())
                .expand_dims({"sectors": _subscript_dict["sectors"]}, 1)
                .expand_dims({"final sources": _subscript_dict["final sources"]}, 2),
                lambda: xr.DataArray(
                    1,
                    {
                        "scenarios": _subscript_dict["scenarios"],
                        "sectors": _subscript_dict["sectors"],
                        "final sources": _subscript_dict["final sources"],
                    },
                    ["scenarios", "sectors", "final sources"],
                ),
                lambda: if_then_else(
                    policy_to_improve_efficiency_speed() == 1,
                    lambda: (
                        (time() - year_policy_to_improve_efficiency())
                        / (
                            year_to_finish_energy_intensity_policies()
                            - year_policy_to_improve_efficiency()
                        )
                    )
                    ** exp_rapid_evolution_improve_efficiency(),
                    lambda: if_then_else(
                        policy_to_improve_efficiency_speed() == 2,
                        lambda: (time() - year_policy_to_improve_efficiency())
                        / (
                            year_to_finish_energy_intensity_policies()
                            - year_policy_to_improve_efficiency()
                        ),
                        lambda: if_then_else(
                            policy_to_improve_efficiency_speed() == 3,
                            lambda: (
                                (time() - year_policy_to_improve_efficiency())
                                / (
                                    year_to_finish_energy_intensity_policies()
                                    - year_policy_to_improve_efficiency()
                                )
                            )
                            ** exp_slow_evolution_improve_efficiency(),
                            lambda: xr.DataArray(
                                0,
                                {
                                    "scenarios": _subscript_dict["scenarios"],
                                    "sectors": _subscript_dict["sectors"],
                                    "final sources": _subscript_dict["final sources"],
                                },
                                ["scenarios", "sectors", "final sources"],
                            ),
                        ),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="year change pct energy intensity target",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_year_change_pct_energy_intensity_target"
    },
)
def year_change_pct_energy_intensity_target():
    """
    In energy intensity target method option 2, the year over which the energy intensities target is calculated
    """
    return _ext_constant_year_change_pct_energy_intensity_target()


_ext_constant_year_change_pct_energy_intensity_target = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C249",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_year_change_pct_energy_intensity_target",
)

_ext_constant_year_change_pct_energy_intensity_target.add(
    "inputs_EU.xlsx", "SCEN1", "C249", {"scenarios": ["SCEN1"]}
)

_ext_constant_year_change_pct_energy_intensity_target.add(
    "inputs_EU.xlsx", "SCEN2", "C249", {"scenarios": ["SCEN2"]}
)

_ext_constant_year_change_pct_energy_intensity_target.add(
    "inputs_EU.xlsx", "SCEN3", "C249", {"scenarios": ["SCEN3"]}
)

_ext_constant_year_change_pct_energy_intensity_target.add(
    "inputs_EU.xlsx", "SCEN4", "C249", {"scenarios": ["SCEN4"]}
)

_ext_constant_year_change_pct_energy_intensity_target.add(
    "inputs_EU.xlsx", "User defined", "C249", {"scenarios": ["User defined"]}
)


@component.add(
    name="aux20 0",
    units="EJ/Tdollars",
    subscripts=["scenarios", "final sources", "sectors"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux20_0": 1},
    other_deps={
        "_delayfixed_aux20_0": {
            "initial": {"time_step": 1},
            "step": {"final_energy_intensity_2020": 1},
        }
    },
)
def aux20_0():
    """
    Auxiliarity variable to maintain constant the value of 2009
    """
    return _delayfixed_aux20_0()


_delayfixed_aux20_0 = DelayFixed(
    lambda: final_energy_intensity_2020(),
    lambda: time_step(),
    lambda: xr.DataArray(
        0,
        {
            "scenarios": _subscript_dict["scenarios"],
            "final sources": _subscript_dict["final sources"],
            "sectors": _subscript_dict["sectors"],
        },
        ["scenarios", "final sources", "sectors"],
    ),
    time_step,
    "_delayfixed_aux20_0",
)


@component.add(
    name="rate change intensity BOTTOM UP",
    units="EJ/Tdollars",
    subscripts=["scenarios", "sectors1", "final sources"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "activate_bottom_up_method": 1,
        "inland_transport_variation_intensity": 1,
    },
)
def rate_change_intensity_bottom_up():
    """
    Variation of the energy intensity of inland transport in BOTTOM UP method
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "sectors1": _subscript_dict["sectors1"],
            "final sources": _subscript_dict["final sources"],
        },
        ["scenarios", "sectors1", "final sources"],
    )
    value.loc[:, ["Agriculture Hunting Forestry and Fishing"], :] = 0
    value.loc[:, ["Mining and Quarrying"], :] = 0
    value.loc[:, ["Food Beverages and Tobacco"], :] = 0
    value.loc[:, ["Textiles and Textile Products"], :] = 0
    value.loc[:, ["Leather Leather and Footwear"], :] = 0
    value.loc[:, ["Wood and Products of Woood and Cork"], :] = 0
    value.loc[:, ["Pulp Paper Printing and Publishing"], :] = 0
    value.loc[:, ["Coke Refined Petroleum and Nuclear Fuel"], :] = 0
    value.loc[:, ["Chemicals and Chemical products"], :] = 0
    value.loc[:, ["Rubber and Plastics"], :] = 0
    value.loc[:, ["Other Non Metalic Mineral"], :] = 0
    value.loc[:, ["Basic Metals and Fabricated Metal"], :] = 0
    value.loc[:, ["Machinery Nec"], :] = 0
    value.loc[:, ["Electrical and Optical Equipment"], :] = 0
    value.loc[:, ["Transport Equipment"], :] = 0
    value.loc[:, ["Manufacturing Nec Recycling"], :] = 0
    value.loc[:, ["Electricity Gas and Water Supply"], :] = 0
    value.loc[:, ["Construction"], :] = 0
    value.loc[
        :,
        [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        :,
    ] = 0
    value.loc[
        :,
        [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        :,
    ] = 0
    value.loc[
        :,
        [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        :,
    ] = 0
    value.loc[:, ["Hotels and Restaurants"], :] = 0
    value.loc[:, ["Inland Transport"], :] = (
        if_then_else(
            (
                activate_bottom_up_method()
                .loc[:, "Inland Transport"]
                .reset_coords(drop=True)
                == 1
            ).expand_dims({"final sources": _subscript_dict["final sources"]}, 1),
            lambda: inland_transport_variation_intensity().rename(
                {"final sources1": "final sources"}
            ),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "final sources": _subscript_dict["final sources"],
                },
                ["scenarios", "final sources"],
            ),
        )
        .expand_dims({"sectors1": ["Inland Transport"]}, 1)
        .values
    )
    value.loc[:, ["Water Transport"], :] = 0
    value.loc[:, ["Air Transport"], :] = 0
    value.loc[
        :,
        [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        :,
    ] = 0
    value.loc[:, ["Post and Telecommunications"], :] = 0
    value.loc[:, ["Financial Intermedation"], :] = 0
    value.loc[:, ["Real Estate Activities"], :] = 0
    value.loc[:, ["Renting od MEq and Other Business Activities"], :] = 0
    value.loc[:, ["Public Admin and Defence Compulsory Social Security"], :] = 0
    value.loc[:, ["Education"], :] = 0
    value.loc[:, ["Health and Social Work"], :] = 0
    value.loc[:, ["Other Community Social and Persona Services"], :] = 0
    value.loc[:, ["Private Households with Employed Persons"], :] = 0
    return value


@component.add(
    name="Policy change energy speed by sector",
    units="Dmnl",
    subscripts=["scenarios", "sectors1", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_policy_change_energy_speed_by_sector"},
)
def policy_change_energy_speed_by_sector():
    """
    Selection of the speed of application of the different policies to change the final energy
    """
    return _ext_constant_policy_change_energy_speed_by_sector()


_ext_constant_policy_change_energy_speed_by_sector = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "sectors1": _subscript_dict["sectors1"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_policy_change_energy_speed_by_sector",
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "G214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "L214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "Q214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "V214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AA214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AF214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AK214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AP214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AU214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AZ214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BE214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BJ214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BO214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BT214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BY214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CD214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CI214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CN214",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CS214",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CX214",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DC214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DH214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DM214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DR214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DW214",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EB214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EG214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EL214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EQ214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EV214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "FA214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "FF214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "FK214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "FP214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "B214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "B214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "B214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "B214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "B214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "G214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "G214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "G214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "G214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "G214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "L214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "L214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "L214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "L214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "L214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "V214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "V214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "V214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "V214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "V214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AA214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AA214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AA214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AA214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AA214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AF214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AF214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AF214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AF214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AF214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AK214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AK214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AK214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AK214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AK214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AP214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AP214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AP214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AP214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AP214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AU214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AU214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AU214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AU214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AU214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AZ214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AZ214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AZ214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AZ214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AZ214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BE214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BE214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BE214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BE214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BE214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BJ214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BJ214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BJ214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BJ214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BJ214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BO214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BO214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BO214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BO214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BO214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BT214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BT214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BT214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BT214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BT214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BY214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BY214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BY214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BY214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BY214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CD214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CD214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CD214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CD214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CD214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CI214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CI214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CI214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CI214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CI214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CN214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CN214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CN214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CN214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CN214",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CS214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CS214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CS214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CS214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CS214",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CX214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CX214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CX214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CX214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CX214",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DC214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DC214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DC214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DC214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DC214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DH214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DH214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DH214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DH214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DH214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DM214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DM214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DM214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DM214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DM214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DR214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DR214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DR214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DR214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DR214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DW214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DW214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DW214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DW214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DW214",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EB214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EB214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EB214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EB214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EB214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EG214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EG214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EG214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EG214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EG214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EL214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EL214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EL214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EL214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EL214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EQ214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EQ214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EQ214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EQ214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EQ214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EV214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EV214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EV214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EV214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EV214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FA214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FA214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FA214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FA214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FA214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FF214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FF214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FF214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FF214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FF214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FK214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FK214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FK214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FK214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FK214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FP214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FP214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FP214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FP214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FP214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "Q214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "Q214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "Q214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "Q214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_change_energy_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "Q214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)


@component.add(
    name="Policy to improve efficiency speed by sector",
    units="Dmnl",
    subscripts=["scenarios", "sectors1", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_policy_to_improve_efficiency_speed_by_sector"
    },
)
def policy_to_improve_efficiency_speed_by_sector():
    """
    Selection of the speed of application of the different policies to improve the efficiency.
    """
    return _ext_constant_policy_to_improve_efficiency_speed_by_sector()


_ext_constant_policy_to_improve_efficiency_speed_by_sector = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "sectors1": _subscript_dict["sectors1"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_policy_to_improve_efficiency_speed_by_sector",
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "G211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "L211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "Q211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "V211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AA211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AF211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AK211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AP211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AU211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AZ211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BE211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BJ211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BO211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BT211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BY211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CD211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CI211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CN211",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CS211",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CX211",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DC211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DH211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DM211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DR211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DW211",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EB211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EG211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EL211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EQ211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EV211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "FA211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "FF211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "FK211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "FP211",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "B211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "B211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "B211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "B211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "B211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "G211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "G211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "G211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "G211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "G211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "L211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "L211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "L211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "L211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "L211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "V211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "V211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "V211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "V211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "V211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AA211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AA211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AA211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AA211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AA211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AF211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AF211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AF211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AF211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AF211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AK211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AK211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AK211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AK211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AK211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AP211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AP211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AP211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AP211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AP211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AU211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AU211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AU211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AU211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AU211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AZ211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AZ211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AZ211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AZ211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AZ211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BE211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BE211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BE211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BE211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BE211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BJ211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BJ211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BJ211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BJ211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BJ211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BO211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BO211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BO211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BO211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BO211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BT211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BT211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BT211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BT211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BT211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BY211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BY211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BY211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BY211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BY211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CD211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CD211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CD211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CD211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CD211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CI211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CI211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CI211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CI211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CI211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CN211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CN211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CN211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CN211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CN211",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CS211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CS211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CS211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CS211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CS211",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CX211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CX211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CX211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CX211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CX211",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DC211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DC211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DC211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DC211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DC211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DH211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DH211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DH211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DH211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DH211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DM211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DM211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DM211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DM211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DM211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DR211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DR211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DR211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DR211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DR211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DW211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DW211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DW211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DW211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DW211",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EB211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EB211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EB211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EB211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EB211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EG211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EG211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EG211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EG211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EG211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EL211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EL211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EL211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EL211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EL211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EQ211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EQ211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EQ211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EQ211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EQ211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EV211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EV211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EV211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EV211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EV211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FA211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FA211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FA211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FA211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FA211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FF211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FF211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FF211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FF211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FF211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FK211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FK211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FK211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FK211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FK211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FP211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FP211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FP211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FP211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FP211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "Q211",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "Q211",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "Q211",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "Q211",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "Q211",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)


@component.add(
    name="Percentage of change over the historic maximun variation of energy intensities",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities"
    },
)
def percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities():
    """
    From the available data, the maximum historical variations of the energy intensities have been statistically estimated. If in the future these maximum variations are different, this variable establishes the percentage of variation that can occur over the defined data.
    """
    return (
        _ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities()
    )


_ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C200",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities",
)

_ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities.add(
    "inputs_EU.xlsx", "SCEN1", "C200", {"scenarios": ["SCEN1"]}
)

_ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities.add(
    "inputs_EU.xlsx", "SCEN2", "C200", {"scenarios": ["SCEN2"]}
)

_ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities.add(
    "inputs_EU.xlsx", "SCEN3", "C200", {"scenarios": ["SCEN3"]}
)

_ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities.add(
    "inputs_EU.xlsx", "SCEN4", "C200", {"scenarios": ["SCEN4"]}
)

_ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities.add(
    "inputs_EU.xlsx", "User defined", "C200", {"scenarios": ["User defined"]}
)


@component.add(
    name="Max yearly change 0",
    units="Dmnl",
    subscripts=["sectors1", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_max_yearly_change_0"},
)
def max_yearly_change_0():
    """
    maximum annual change for one type of energy in a sector.
    """
    return _ext_constant_max_yearly_change_0()


_ext_constant_max_yearly_change_0 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "B857",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
    _root,
    {
        "sectors1": _subscript_dict["sectors1"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_max_yearly_change_0",
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "G857",
    {
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "L857",
    {
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "Q857",
    {
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "V857",
    {
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "AA857",
    {
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "AF857",
    {
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "AK857",
    {
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "AP857",
    {
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "AU857",
    {
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "AZ857",
    {
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "BE857",
    {
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "BJ857",
    {"sectors1": ["Machinery Nec"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "BO857",
    {
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "BT857",
    {
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "BY857",
    {
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "CD857",
    {
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "CI857",
    {"sectors1": ["Construction"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "CN857",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "CS857",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "CX857",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "DC857",
    {
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "DH857",
    {
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "DM857",
    {
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "DR857",
    {"sectors1": ["Air Transport"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "DW857",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "EB857",
    {
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "EG857",
    {
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "EL857",
    {
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "EQ857",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "EV857",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "FA857",
    {"sectors1": ["Education"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "FF857",
    {
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "FK857",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "FP857",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)


@component.add(
    name="Total transport FED by fuel",
    units="EJ/Year",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "required_final_energy_transport_iot_sectors": 1,
        "transport_households_final_energy_demand": 1,
    },
)
def total_transport_fed_by_fuel():
    """
    Total energy in transport. This model considers transport the four sector in WIOD related with transport and households transport.
    """
    return (
        required_final_energy_transport_iot_sectors()
        + transport_households_final_energy_demand()
    )


@component.add(
    name="efficiency rate of substitution by sector",
    units="Dmnl",
    subscripts=["scenarios", "sectors1", "final sources", "final sources1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_efficiency_rate_of_substitution_by_sector"
    },
)
def efficiency_rate_of_substitution_by_sector():
    """
    It is necessary to take into account that the energy efficiencies of the two technologies exchanged do not necessarily have to be the same. In other words, a decrease in the energy intensity of (a) will not imply the same increase in the energy intensity of (b). This possible difference is compensated through the parameter “Efficiency rate of substitution”.
    """
    return _ext_constant_efficiency_rate_of_substitution_by_sector()


_ext_constant_efficiency_rate_of_substitution_by_sector = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "sectors1": _subscript_dict["sectors1"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
    "_ext_constant_efficiency_rate_of_substitution_by_sector",
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "G216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "L216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "Q216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "V216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AA216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AF216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AK216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AP216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AU216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AZ216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BE216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BJ216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BO216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BT216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BY216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CD216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CI216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CN216",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CS216",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CX216",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DC216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DH216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DM216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DR216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DW216",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EB216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EG216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EL216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EQ216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EV216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "FA216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "FF216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "FK216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "FP216",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "B216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "B216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "B216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "B216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "B216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "G216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "G216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "G216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "G216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "G216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "L216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "L216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "L216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "L216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "L216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "V216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "V216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "V216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "V216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "V216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AA216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AA216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AA216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AA216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AA216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AF216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AF216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AF216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AF216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AF216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AK216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AK216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AK216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AK216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AK216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AP216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AP216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AP216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AP216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AP216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AU216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AU216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AU216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AU216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AU216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AZ216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AZ216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AZ216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AZ216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AZ216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BE216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BE216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BE216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BE216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BE216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BJ216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BJ216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BJ216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BJ216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BJ216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BO216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BO216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BO216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BO216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BO216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BT216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BT216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BT216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BT216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BT216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BY216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BY216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BY216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BY216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BY216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CD216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CD216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CD216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CD216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CD216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CI216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CI216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CI216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CI216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CI216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CN216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CN216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CN216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CN216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CN216",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CS216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CS216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CS216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CS216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CS216",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CX216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CX216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CX216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CX216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CX216",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DC216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DC216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DC216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DC216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DC216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DH216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DH216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DH216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DH216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DH216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DM216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DM216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DM216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DM216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DM216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DR216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DR216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DR216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DR216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DR216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DW216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DW216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DW216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DW216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DW216",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EB216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EB216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EB216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EB216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EB216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EG216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EG216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EG216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EG216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EG216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EL216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EL216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EL216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EL216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EL216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EQ216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EQ216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EQ216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EQ216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EQ216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EV216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EV216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EV216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EV216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EV216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FA216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FA216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FA216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FA216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FA216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FF216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FF216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FF216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FF216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FF216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FK216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FK216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FK216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FK216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FK216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FP216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FP216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FP216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FP216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FP216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "Q216",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "Q216",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "Q216",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "Q216",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "Q216",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)


@component.add(
    name='"efficiency rate of substitution sector-uniform"',
    units="Dmnl",
    subscripts=["scenarios", "final sources", "final sources1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_efficiency_rate_of_substitution_sectoruniform"
    },
)
def efficiency_rate_of_substitution_sectoruniform():
    """
    It is necessary to take into account that the energy efficiencies of the two technologies exchanged do not necessarily have to be the same. In other words, a decrease in the energy intensity of (a) will not imply the same increase in the energy intensity of (b). This possible difference is compensated through the parameter “Efficiency rate of substitution”.
    """
    return _ext_constant_efficiency_rate_of_substitution_sectoruniform()


_ext_constant_efficiency_rate_of_substitution_sectoruniform = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B233",
    {
        "scenarios": ["BAU"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
    "_ext_constant_efficiency_rate_of_substitution_sectoruniform",
)

_ext_constant_efficiency_rate_of_substitution_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "B233",
    {
        "scenarios": ["SCEN1"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "B233",
    {
        "scenarios": ["SCEN2"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "B233",
    {
        "scenarios": ["SCEN3"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "B233",
    {
        "scenarios": ["SCEN4"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)

_ext_constant_efficiency_rate_of_substitution_sectoruniform.add(
    "inputs_EU.xlsx",
    "User defined",
    "B233",
    {
        "scenarios": ["User defined"],
        "final sources": _subscript_dict["final sources"],
        "final sources1": _subscript_dict["final sources1"],
    },
)


@component.add(
    name='"Year policy change energy sector-uniform"',
    units="Year",
    subscripts=["scenarios", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_year_policy_change_energy_sectoruniform"
    },
)
def year_policy_change_energy_sectoruniform():
    """
    Year when the policy to change final energy in the sectors start. For each of five final energies.
    """
    return _ext_constant_year_policy_change_energy_sectoruniform()


_ext_constant_year_policy_change_energy_sectoruniform = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B230",
    {"scenarios": ["BAU"], "final sources": _subscript_dict["final sources"]},
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_year_policy_change_energy_sectoruniform",
)

_ext_constant_year_policy_change_energy_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "B230",
    {"scenarios": ["SCEN1"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_change_energy_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "B230",
    {"scenarios": ["SCEN2"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_change_energy_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "B230",
    {"scenarios": ["SCEN3"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_change_energy_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "B230",
    {"scenarios": ["SCEN4"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_change_energy_sectoruniform.add(
    "inputs_EU.xlsx",
    "User defined",
    "B230",
    {"scenarios": ["User defined"], "final sources": _subscript_dict["final sources"]},
)


@component.add(
    name="min energy intensity vs intial",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_min_energy_intensity_vs_intial"},
)
def min_energy_intensity_vs_intial():
    """
    Minimum value that the energy intensity for each economic sector could reach, obviously always above zero. This minimum value is very difficult to estimate, but based on historical values it has been considered that it can reach 30% of the value of 2009. (Capellán-Pérez et al., 2014)
    """
    return _ext_constant_min_energy_intensity_vs_intial()


_ext_constant_min_energy_intensity_vs_intial = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C199",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_min_energy_intensity_vs_intial",
)

_ext_constant_min_energy_intensity_vs_intial.add(
    "inputs_EU.xlsx", "SCEN1", "C199", {"scenarios": ["SCEN1"]}
)

_ext_constant_min_energy_intensity_vs_intial.add(
    "inputs_EU.xlsx", "SCEN2", "C199", {"scenarios": ["SCEN2"]}
)

_ext_constant_min_energy_intensity_vs_intial.add(
    "inputs_EU.xlsx", "SCEN3", "C199", {"scenarios": ["SCEN3"]}
)

_ext_constant_min_energy_intensity_vs_intial.add(
    "inputs_EU.xlsx", "SCEN4", "C199", {"scenarios": ["SCEN4"]}
)

_ext_constant_min_energy_intensity_vs_intial.add(
    "inputs_EU.xlsx", "User defined", "C199", {"scenarios": ["User defined"]}
)


@component.add(
    name="Increase of intensity due to energy a technology net",
    units="EJ/Tdollars",
    subscripts=["scenarios", "sectors", "final sources1", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "decrease_of_intensity_due_to_energy_a_technology_change_top_down": 1,
        "share_tech_change_fuel": 1,
    },
)
def increase_of_intensity_due_to_energy_a_technology_net():
    """
    Increase of intensity due to change a energy technology without considering efficieny rate of susbsitution by fuel
    """
    return (
        decrease_of_intensity_due_to_energy_a_technology_change_top_down()
        * share_tech_change_fuel().transpose(
            "scenarios", "sectors", "final sources", "final sources1"
        )
    ).transpose("scenarios", "sectors", "final sources1", "final sources")


@component.add(
    name="Increase of intensity due to energy a technology eff",
    units="EJ/Tdollars",
    subscripts=["scenarios", "sectors", "final sources1", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "efficiency_rate_of_substitution": 2,
        "increase_of_intensity_due_to_energy_a_technology_net": 2,
    },
)
def increase_of_intensity_due_to_energy_a_technology_eff():
    """
    Increase of intensity due to change a energy technology by fuel
    """
    return if_then_else(
        efficiency_rate_of_substitution().rename(
            {"final sources": "final sources1", "final sources1": "final sources"}
        )
        == 0,
        lambda: increase_of_intensity_due_to_energy_a_technology_net(),
        lambda: increase_of_intensity_due_to_energy_a_technology_net()
        * efficiency_rate_of_substitution().rename(
            {"final sources": "final sources1", "final sources1": "final sources"}
        ),
    )


@component.add(
    name="minimum fraction 0",
    units="Dmnl",
    subscripts=["sectors1", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_minimum_fraction_0"},
)
def minimum_fraction_0():
    """
    minimum energy of each type of energy that should be used in each sector because it is irreplaceable
    """
    return _ext_constant_minimum_fraction_0()


_ext_constant_minimum_fraction_0 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "B856",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
    _root,
    {
        "sectors1": _subscript_dict["sectors1"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_minimum_fraction_0",
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "G856",
    {
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "L856",
    {
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "Q856",
    {
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "V856",
    {
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "AA856",
    {
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "AF856",
    {
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "AK856",
    {
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "AP856",
    {
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "AU856",
    {
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "AZ856",
    {
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "BE856",
    {
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "BJ856",
    {"sectors1": ["Machinery Nec"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "BO856",
    {
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "BT856",
    {
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "BY856",
    {
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "CD856",
    {
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "CI856",
    {"sectors1": ["Construction"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "CN856",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "CS856",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "CX856",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "DC856",
    {
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "DH856",
    {
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "DM856",
    {
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "DR856",
    {"sectors1": ["Air Transport"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "DW856",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "EB856",
    {
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "EG856",
    {
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "EL856",
    {
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "EQ856",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "EV856",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "FA856",
    {"sectors1": ["Education"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "FF856",
    {
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "FK856",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction_0.add(
    "inputs_EU.xlsx",
    "Economy",
    "FP856",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)


@component.add(
    name="Final energy footprint by fuel",
    units="EJ",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "households_final_energy_demand": 1,
        "required_fed_sectors_by_fuel": 1,
        "total_energy_embedded_in_eu28_imports": 1,
        "total_energy_embedded_in_eu28_exports": 1,
    },
)
def final_energy_footprint_by_fuel():
    """
    Final energy consumption to satisfy EU28 domestic final demand by sector
    """
    return (
        households_final_energy_demand()
        + required_fed_sectors_by_fuel()
        + total_energy_embedded_in_eu28_imports()
        - total_energy_embedded_in_eu28_exports()
    )


@component.add(
    name="modern solids BioE demand households",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "households_final_energy_demand": 1,
        "pe_traditional_biomass_demand_ej": 1,
    },
)
def modern_solids_bioe_demand_households():
    """
    Demand of modern solids bioenergy in households.
    """
    return (
        households_final_energy_demand().loc[:, "solids"].reset_coords(drop=True)
        - pe_traditional_biomass_demand_ej()
    )


@component.add(
    name="Initial energy intensity by fuel and sector 1995",
    units="EJ/Tdollars",
    subscripts=["sectors1", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995"
    },
)
def initial_energy_intensity_by_fuel_and_sector_1995():
    """
    Initial energy intensity by sector and fuel in 1995
    """
    return _ext_constant_initial_energy_intensity_by_fuel_and_sector_1995()


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "T49",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
    _root,
    {
        "sectors1": _subscript_dict["sectors1"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995",
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "Y49",
    {
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "AD49",
    {
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "AI49",
    {
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "AN49",
    {
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "AS49",
    {
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "AX49",
    {
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "BC49",
    {
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "BH49",
    {
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "BM49",
    {
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "BR49",
    {
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "BW49",
    {
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "CB49",
    {"sectors1": ["Machinery Nec"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "CG49",
    {
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "CL49",
    {
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "CQ49",
    {
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "CV49",
    {
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "DA49",
    {"sectors1": ["Construction"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "DF49",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "DK49",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "DP49",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "DU49",
    {
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "DZ49",
    {
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "EE49",
    {
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "EJ49",
    {"sectors1": ["Air Transport"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "EO49",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "ET49",
    {
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "EY49",
    {
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "FD49",
    {
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "FI49",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "FN49",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "FS49",
    {"sectors1": ["Education"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "FX49",
    {
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "GC49",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "inputs_EU.xlsx",
    "Economy",
    "GH49",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)


@component.add(
    name="Energy intensity target by sector and fuel",
    units="EJ/Tdollars",
    subscripts=["scenarios", "sectors1", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_energy_intensity_target_by_sector_and_fuel"
    },
)
def energy_intensity_target_by_sector_and_fuel():
    """
    Energy intensity targets by sector and final energy defined by user
    """
    return _ext_constant_energy_intensity_target_by_sector_and_fuel()


_ext_constant_energy_intensity_target_by_sector_and_fuel = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "sectors1": _subscript_dict["sectors1"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_energy_intensity_target_by_sector_and_fuel",
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "G247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "L247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "Q247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "V247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "AA247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "AF247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "AK247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "AP247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "AU247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "AZ247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "BE247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "BJ247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "BO247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "BT247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "BY247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "CD247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "CI247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "CN247",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "CS247",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "CX247",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "DC247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "DH247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "DM247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "DR247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "DW247",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "EB247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "EG247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "EL247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "EQ247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "EV247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "FA247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "FF247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "FK247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "BAU",
    "FP247",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "B247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "B247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "B247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "B247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "B247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "G247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "G247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "G247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "G247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "G247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "L247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "L247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "L247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "L247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "L247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "V247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "V247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "V247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "V247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "V247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AA247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AA247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AA247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AA247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "AA247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AF247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AF247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AF247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AF247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "AF247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AK247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AK247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AK247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AK247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "AK247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AP247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AP247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AP247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AP247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "AP247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AU247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AU247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AU247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AU247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "AU247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AZ247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AZ247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AZ247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AZ247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "AZ247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BE247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BE247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BE247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BE247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "BE247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BJ247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BJ247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BJ247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BJ247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "BJ247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BO247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BO247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BO247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BO247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "BO247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BT247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BT247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BT247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BT247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "BT247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BY247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BY247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BY247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BY247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "BY247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CD247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CD247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CD247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CD247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "CD247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CI247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CI247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CI247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CI247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "CI247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CN247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CN247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CN247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CN247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "CN247",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CS247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CS247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CS247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CS247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "CS247",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CX247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CX247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CX247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CX247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "CX247",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DC247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DC247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DC247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DC247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "DC247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DH247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DH247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DH247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DH247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "DH247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DM247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DM247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DM247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DM247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "DM247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DR247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DR247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DR247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DR247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "DR247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DW247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DW247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DW247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DW247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "DW247",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EB247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EB247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EB247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EB247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "EB247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EG247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EG247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EG247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EG247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "EG247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EL247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EL247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EL247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EL247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "EL247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EQ247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EQ247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EQ247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EQ247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "EQ247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EV247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EV247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EV247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EV247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "EV247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FA247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FA247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FA247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FA247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "FA247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FF247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FF247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FF247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FF247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "FF247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FK247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FK247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FK247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FK247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "FK247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FP247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FP247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FP247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FP247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "FP247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "Q247",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "Q247",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "Q247",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "Q247",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "User defined",
    "Q247",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)


@component.add(
    name="historical mean rate energy intensity",
    units="Dmnl",
    subscripts=["sectors1", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_historical_mean_rate_energy_intensity"},
)
def historical_mean_rate_energy_intensity():
    """
    Historical trend of sectors energy intensity by final souerce (OLS method)
    """
    return _ext_constant_historical_mean_rate_energy_intensity()


_ext_constant_historical_mean_rate_energy_intensity = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "T48",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
    _root,
    {
        "sectors1": _subscript_dict["sectors1"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_historical_mean_rate_energy_intensity",
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "Y48",
    {
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "AD48",
    {
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "AI48",
    {
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "AN48",
    {
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "AS48",
    {
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "AX48",
    {
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "BC48",
    {
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "BH48",
    {
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "BM48",
    {
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "BR48",
    {
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "BW48",
    {
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "CB48",
    {"sectors1": ["Machinery Nec"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "CG48",
    {
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "CL48",
    {
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "CQ48",
    {
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "CV48",
    {
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "DA48",
    {"sectors1": ["Construction"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "DF48",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "DK48",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "DP48",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "DU48",
    {
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "DZ48",
    {
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "EE48",
    {
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "EJ48",
    {"sectors1": ["Air Transport"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "EO48",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "ET48",
    {
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "EY48",
    {
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "FD48",
    {
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "FI48",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "FN48",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "FS48",
    {"sectors1": ["Education"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "FX48",
    {
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "GC48",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_historical_mean_rate_energy_intensity.add(
    "inputs_EU.xlsx",
    "Economy",
    "GH48",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)


@component.add(
    name='"Policy to improve efficiency speed sector-uniform"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_policy_to_improve_efficiency_speed_sectoruniform"
    },
)
def policy_to_improve_efficiency_speed_sectoruniform():
    """
    Selection of the speed of application of the different policies to improve the efficiency.
    """
    return _ext_constant_policy_to_improve_efficiency_speed_sectoruniform()


_ext_constant_policy_to_improve_efficiency_speed_sectoruniform = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B228",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_policy_to_improve_efficiency_speed_sectoruniform",
)

_ext_constant_policy_to_improve_efficiency_speed_sectoruniform.add(
    "inputs_EU.xlsx", "SCEN1", "B228", {"scenarios": ["SCEN1"]}
)

_ext_constant_policy_to_improve_efficiency_speed_sectoruniform.add(
    "inputs_EU.xlsx", "SCEN2", "B228", {"scenarios": ["SCEN2"]}
)

_ext_constant_policy_to_improve_efficiency_speed_sectoruniform.add(
    "inputs_EU.xlsx", "SCEN3", "B228", {"scenarios": ["SCEN3"]}
)

_ext_constant_policy_to_improve_efficiency_speed_sectoruniform.add(
    "inputs_EU.xlsx", "SCEN4", "B228", {"scenarios": ["SCEN4"]}
)

_ext_constant_policy_to_improve_efficiency_speed_sectoruniform.add(
    "inputs_EU.xlsx", "User defined", "B228", {"scenarios": ["User defined"]}
)


@component.add(
    name='"Activate scarcity feedback final fuel replacement? 0"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_activate_scarcity_feedback_final_fuel_replacement_0"
    },
)
def activate_scarcity_feedback_final_fuel_replacement_0():
    """
    Switch to (de)activate the scarcity feedback fuel replacement.
    """
    return _ext_constant_activate_scarcity_feedback_final_fuel_replacement_0()


_ext_constant_activate_scarcity_feedback_final_fuel_replacement_0 = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B256",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_activate_scarcity_feedback_final_fuel_replacement_0",
)

_ext_constant_activate_scarcity_feedback_final_fuel_replacement_0.add(
    "inputs_EU.xlsx", "SCEN1", "B256", {"scenarios": ["SCEN1"]}
)

_ext_constant_activate_scarcity_feedback_final_fuel_replacement_0.add(
    "inputs_EU.xlsx", "SCEN2", "B256", {"scenarios": ["SCEN2"]}
)

_ext_constant_activate_scarcity_feedback_final_fuel_replacement_0.add(
    "inputs_EU.xlsx", "SCEN3", "B256", {"scenarios": ["SCEN3"]}
)

_ext_constant_activate_scarcity_feedback_final_fuel_replacement_0.add(
    "inputs_EU.xlsx", "SCEN4", "B256", {"scenarios": ["SCEN4"]}
)

_ext_constant_activate_scarcity_feedback_final_fuel_replacement_0.add(
    "inputs_EU.xlsx", "User defined", "B256", {"scenarios": ["User defined"]}
)


@component.add(
    name="Initial global energy intensity by sector 2009",
    subscripts=["sectors"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_initial_global_energy_intensity_by_sector_2009"
    },
)
def initial_global_energy_intensity_by_sector_2009():
    """
    Initial global energy intensity by sector 2009
    """
    return _ext_constant_initial_global_energy_intensity_by_sector_2009()


_ext_constant_initial_global_energy_intensity_by_sector_2009 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "B230",
    {"sectors": _subscript_dict["sectors"]},
    _root,
    {"sectors": _subscript_dict["sectors"]},
    "_ext_constant_initial_global_energy_intensity_by_sector_2009",
)


@component.add(
    name="exp slow evol change energy",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def exp_slow_evol_change_energy():
    """
    Parameter that define the speed of application of policies in the slow way.
    """
    return 2


@component.add(
    name="Historic final energy intensity by sector and fuel",
    units="EJ/Tdollars",
    subscripts=["final sources1", "sectors"],
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_final_energy_intensity_by_sector_and_fuel",
        "__lookup__": "_ext_lookup_historic_final_energy_intensity_by_sector_and_fuel",
    },
)
def historic_final_energy_intensity_by_sector_and_fuel(x, final_subs=None):
    """
    Energy intensity. (35 WIOD sectors & final sources). US$1995
    """
    return _ext_lookup_historic_final_energy_intensity_by_sector_and_fuel(x, final_subs)


_ext_lookup_historic_final_energy_intensity_by_sector_and_fuel = ExtLookup(
    "inputs_EU.xlsx",
    "Economy",
    "47",
    "C48",
    {"final sources1": ["electricity"], "sectors": _subscript_dict["sectors"]},
    _root,
    {
        "final sources1": _subscript_dict["final sources1"],
        "sectors": _subscript_dict["sectors"],
    },
    "_ext_lookup_historic_final_energy_intensity_by_sector_and_fuel",
)

_ext_lookup_historic_final_energy_intensity_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "Economy",
    "47",
    "C84",
    {"final sources1": ["heat"], "sectors": _subscript_dict["sectors"]},
)

_ext_lookup_historic_final_energy_intensity_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "Economy",
    "47",
    "C120",
    {"final sources1": ["liquids"], "sectors": _subscript_dict["sectors"]},
)

_ext_lookup_historic_final_energy_intensity_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "Economy",
    "47",
    "C156",
    {"final sources1": ["gases"], "sectors": _subscript_dict["sectors"]},
)

_ext_lookup_historic_final_energy_intensity_by_sector_and_fuel.add(
    "inputs_EU.xlsx",
    "Economy",
    "47",
    "C192",
    {"final sources1": ["solids"], "sectors": _subscript_dict["sectors"]},
)


@component.add(
    name='"Year policy to improve efficiency sector-uniform"',
    units="Year",
    subscripts=["scenarios", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_year_policy_to_improve_efficiency_sectoruniform"
    },
)
def year_policy_to_improve_efficiency_sectoruniform():
    """
    Year when the policy to improve efficiency in sectors start. For each of five final energies.
    """
    return _ext_constant_year_policy_to_improve_efficiency_sectoruniform()


_ext_constant_year_policy_to_improve_efficiency_sectoruniform = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B227",
    {"scenarios": ["BAU"], "final sources": _subscript_dict["final sources"]},
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_year_policy_to_improve_efficiency_sectoruniform",
)

_ext_constant_year_policy_to_improve_efficiency_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "B227",
    {"scenarios": ["SCEN1"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_to_improve_efficiency_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "B227",
    {"scenarios": ["SCEN2"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_to_improve_efficiency_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "B227",
    {"scenarios": ["SCEN3"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_to_improve_efficiency_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "B227",
    {"scenarios": ["SCEN4"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_year_policy_to_improve_efficiency_sectoruniform.add(
    "inputs_EU.xlsx",
    "User defined",
    "B227",
    {"scenarios": ["User defined"], "final sources": _subscript_dict["final sources"]},
)


@component.add(
    name="Evol final energy intensity by sector and fuel",
    units="EJ/Tdollars",
    subscripts=["scenarios", "sectors", "final sources"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_evol_final_energy_intensity_by_sector_and_fuel": 1},
    other_deps={
        "_integ_evol_final_energy_intensity_by_sector_and_fuel": {
            "initial": {"initial_energy_intensity_by_fuel_and_sector_1995": 1},
            "step": {
                "increase_of_intensity_due_to_energy_a_technology_change_top_down": 1,
                "inertial_rate_energy_intensity_top_down": 1,
                "rate_change_intensity_bottom_up": 1,
                "decrease_of_intensity_due_to_energy_a_technology_change_top_down": 1,
            },
        }
    },
)
def evol_final_energy_intensity_by_sector_and_fuel():
    """
    This variable models the dynamic evolution of the matrix of energy intensities of the 35 economic sectors and the 5 types of final energy. It is a 35x5 matrix. The evolution of the intensities is considered to be due to two main effects: (1) the variation of the energy efficiency (flow due to the variable inertial rate energy intensity) and (2) the change of one type of final energy by another, As a consequence of a technological change (flow due to the variables Increase / decrease of intensity due to energy to technology change), as for example the change due to the electrification of the transport.
    """
    return _integ_evol_final_energy_intensity_by_sector_and_fuel()


_integ_evol_final_energy_intensity_by_sector_and_fuel = Integ(
    lambda: increase_of_intensity_due_to_energy_a_technology_change_top_down()
    + inertial_rate_energy_intensity_top_down()
    + rate_change_intensity_bottom_up().rename({"sectors1": "sectors"})
    - decrease_of_intensity_due_to_energy_a_technology_change_top_down(),
    lambda: initial_energy_intensity_by_fuel_and_sector_1995()
    .rename({"sectors1": "sectors"})
    .expand_dims({"scenarios": _subscript_dict["scenarios"]}, 0),
    "_integ_evol_final_energy_intensity_by_sector_and_fuel",
)


@component.add(
    name="PE traditional biomass demand EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "households_final_energy_demand": 1,
        "share_trad_biomass_vs_solids_in_households": 1,
    },
)
def pe_traditional_biomass_demand_ej():
    """
    Annual primary energy demand of traditional biomass driven by population and energy intensity evolution. It also includes charcoal and biosolids for solids.
    """
    return (
        households_final_energy_demand().loc[:, "solids"].reset_coords(drop=True)
        * share_trad_biomass_vs_solids_in_households()
    )


@component.add(
    name="historic rate final energy intensity",
    units="EJ/Tdollars",
    subscripts=["sectors", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 2, "historic_final_energy_intensity_by_sector_and_fuel": 2},
)
def historic_rate_final_energy_intensity():
    """
    Historic variation of final energy intensity by final souerce (WIOD data)
    """
    return (
        historic_final_energy_intensity_by_sector_and_fuel(integer(time() + 1)).rename(
            {"final sources1": "final sources"}
        )
        - historic_final_energy_intensity_by_sector_and_fuel(integer(time())).rename(
            {"final sources1": "final sources"}
        )
    ).transpose("sectors", "final sources")


@component.add(
    name="Decrease of intensity due to energy a technology change TOP DOWN",
    units="EJ/Tdollars",
    subscripts=["scenarios", "sectors", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "activate_bottom_up_method": 1,
        "pressure_to_change_energy_technology_0": 1,
        "percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities": 1,
        "minimum_fraction_0": 1,
        "evol_final_energy_intensity_by_sector_and_fuel": 2,
        "global_energy_intensity_by_sector": 1,
        "max_yearly_change_0": 1,
    },
)
def decrease_of_intensity_due_to_energy_a_technology_change_top_down():
    """
    When in one economic sector, one type of energy (a) is replaced by another (b), the energy intensity of (b) will increase and the energy intensity of (a) will decrease. This flow represents the decrease of (a).
    """
    return if_then_else(
        (activate_bottom_up_method().rename({"sectors1": "sectors"}) == 0).expand_dims(
            {"final sources": _subscript_dict["final sources"]}, 2
        ),
        lambda: if_then_else(
            zidz(
                evol_final_energy_intensity_by_sector_and_fuel(),
                global_energy_intensity_by_sector().expand_dims(
                    {"final sources": _subscript_dict["final sources"]}, 2
                ),
            )
            >= minimum_fraction_0().rename({"sectors1": "sectors"}),
            lambda: (
                (
                    max_yearly_change_0().rename({"sectors1": "sectors"})
                    * (
                        1
                        + percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities()
                    )
                )
                * evol_final_energy_intensity_by_sector_and_fuel().transpose(
                    "sectors", "final sources", "scenarios"
                )
                * pressure_to_change_energy_technology_0().transpose(
                    "sectors", "final sources", "scenarios"
                )
            ).transpose("scenarios", "sectors", "final sources"),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "sectors": _subscript_dict["sectors"],
                    "final sources": _subscript_dict["final sources"],
                },
                ["scenarios", "sectors", "final sources"],
            ),
        ),
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "sectors": _subscript_dict["sectors"],
                "final sources": _subscript_dict["final sources"],
            },
            ["scenarios", "sectors", "final sources"],
        ),
    )


@component.add(
    name="Year to finish energy intensity policies",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_year_to_finish_energy_intensity_policies"
    },
)
def year_to_finish_energy_intensity_policies():
    """
    Year when the policy to improve efficiency in sectors finish.
    """
    return _ext_constant_year_to_finish_energy_intensity_policies()


_ext_constant_year_to_finish_energy_intensity_policies = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C204",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_year_to_finish_energy_intensity_policies",
)

_ext_constant_year_to_finish_energy_intensity_policies.add(
    "inputs_EU.xlsx", "SCEN1", "C204", {"scenarios": ["SCEN1"]}
)

_ext_constant_year_to_finish_energy_intensity_policies.add(
    "inputs_EU.xlsx", "SCEN2", "C204", {"scenarios": ["SCEN2"]}
)

_ext_constant_year_to_finish_energy_intensity_policies.add(
    "inputs_EU.xlsx", "SCEN3", "C204", {"scenarios": ["SCEN3"]}
)

_ext_constant_year_to_finish_energy_intensity_policies.add(
    "inputs_EU.xlsx", "SCEN4", "C204", {"scenarios": ["SCEN4"]}
)

_ext_constant_year_to_finish_energy_intensity_policies.add(
    "inputs_EU.xlsx", "User defined", "C204", {"scenarios": ["User defined"]}
)


@component.add(
    name="exp rapid evol change energy",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def exp_rapid_evol_change_energy():
    """
    Parameter that define the speed of application of policies in the rapid way.
    """
    return 1 / 2


@component.add(
    name="Choose final sectoral energy intensities evolution method",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_choose_final_sectoral_energy_intensities_evolution_method"
    },
)
def choose_final_sectoral_energy_intensities_evolution_method():
    """
    0- Dynamic evolution with policies and feedback of final fuel scarcity 1- Constant at 2009 levels 2- Sectoral energy intensity targets defined by user
    """
    return _ext_constant_choose_final_sectoral_energy_intensities_evolution_method()


_ext_constant_choose_final_sectoral_energy_intensities_evolution_method = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C195",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_choose_final_sectoral_energy_intensities_evolution_method",
)

_ext_constant_choose_final_sectoral_energy_intensities_evolution_method.add(
    "inputs_EU.xlsx", "SCEN1", "C195", {"scenarios": ["SCEN1"]}
)

_ext_constant_choose_final_sectoral_energy_intensities_evolution_method.add(
    "inputs_EU.xlsx", "SCEN2", "C195", {"scenarios": ["SCEN2"]}
)

_ext_constant_choose_final_sectoral_energy_intensities_evolution_method.add(
    "inputs_EU.xlsx", "SCEN3", "C195", {"scenarios": ["SCEN3"]}
)

_ext_constant_choose_final_sectoral_energy_intensities_evolution_method.add(
    "inputs_EU.xlsx", "SCEN4", "C195", {"scenarios": ["SCEN4"]}
)

_ext_constant_choose_final_sectoral_energy_intensities_evolution_method.add(
    "inputs_EU.xlsx", "User defined", "C195", {"scenarios": ["User defined"]}
)


@component.add(
    name='"Policy change energy speed sector-uniform"',
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_policy_change_energy_speed_sectoruniform"
    },
)
def policy_change_energy_speed_sectoruniform():
    """
    Selection of the speed of application of the different policies to change the final energy
    """
    return _ext_constant_policy_change_energy_speed_sectoruniform()


_ext_constant_policy_change_energy_speed_sectoruniform = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B231",
    {"scenarios": ["BAU"], "final sources": _subscript_dict["final sources"]},
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_policy_change_energy_speed_sectoruniform",
)

_ext_constant_policy_change_energy_speed_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "B231",
    {"scenarios": ["SCEN1"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_policy_change_energy_speed_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "B231",
    {"scenarios": ["SCEN2"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_policy_change_energy_speed_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "B231",
    {"scenarios": ["SCEN3"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_policy_change_energy_speed_sectoruniform.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "B231",
    {"scenarios": ["SCEN4"], "final sources": _subscript_dict["final sources"]},
)

_ext_constant_policy_change_energy_speed_sectoruniform.add(
    "inputs_EU.xlsx",
    "User defined",
    "B231",
    {"scenarios": ["User defined"], "final sources": _subscript_dict["final sources"]},
)


@component.add(
    name="Year policy to improve efficiency by sector",
    subscripts=["scenarios", "sectors1", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_year_policy_to_improve_efficiency_by_sector"
    },
)
def year_policy_to_improve_efficiency_by_sector():
    """
    Year when the policy to improve efficiency in sectors start. For each of five final energies.
    """
    return _ext_constant_year_policy_to_improve_efficiency_by_sector()


_ext_constant_year_policy_to_improve_efficiency_by_sector = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "sectors1": _subscript_dict["sectors1"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_year_policy_to_improve_efficiency_by_sector",
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "G210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "L210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "Q210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "V210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AA210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AF210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AK210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AP210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AU210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AZ210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BE210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BJ210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BO210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BT210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BY210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CD210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CI210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CN210",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CS210",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CX210",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DC210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DH210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DM210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DR210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DW210",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EB210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EG210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EL210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EQ210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EV210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "FA210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "FF210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "FK210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "FP210",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "B210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "B210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "B210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "B210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "B210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "G210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "G210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "G210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "G210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "G210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "L210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "L210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "L210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "L210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "L210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "V210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "V210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "V210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "V210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "V210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AA210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AA210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AA210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AA210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AA210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AF210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AF210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AF210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AF210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AF210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AK210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AK210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AK210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AK210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AK210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AP210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AP210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AP210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AP210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AP210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AU210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AU210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AU210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AU210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AU210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AZ210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AZ210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AZ210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AZ210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AZ210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BE210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BE210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BE210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BE210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BE210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BJ210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BJ210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BJ210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BJ210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BJ210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BO210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BO210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BO210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BO210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BO210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BT210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BT210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BT210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BT210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BT210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BY210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BY210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BY210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BY210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BY210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CD210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CD210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CD210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CD210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CD210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CI210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CI210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CI210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CI210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CI210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CN210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CN210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CN210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CN210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CN210",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CS210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CS210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CS210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CS210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CS210",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CX210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CX210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CX210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CX210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CX210",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DC210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DC210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DC210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DC210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DC210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DH210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DH210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DH210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DH210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DH210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DM210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DM210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DM210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DM210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DM210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DR210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DR210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DR210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DR210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DR210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DW210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DW210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DW210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DW210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DW210",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EB210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EB210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EB210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EB210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EB210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EG210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EG210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EG210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EG210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EG210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EL210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EL210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EL210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EL210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EL210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EQ210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EQ210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EQ210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EQ210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EQ210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EV210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EV210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EV210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EV210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EV210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FA210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FA210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FA210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FA210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FA210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FF210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FF210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FF210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FF210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FF210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FK210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FK210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FK210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FK210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FK210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FP210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FP210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FP210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FP210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FP210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "Q210",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "Q210",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "Q210",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "Q210",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "Q210",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)


@component.add(
    name="Year policy change energy by sector",
    units="Year",
    subscripts=["scenarios", "sectors1", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_year_policy_change_energy_by_sector"},
)
def year_policy_change_energy_by_sector():
    """
    Year when the policy to change final energy in the sectors start. For each of five final energies.
    """
    return _ext_constant_year_policy_change_energy_by_sector()


_ext_constant_year_policy_change_energy_by_sector = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "sectors1": _subscript_dict["sectors1"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_year_policy_change_energy_by_sector",
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "G213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "L213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "Q213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "V213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AA213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AF213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AK213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AP213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AU213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "AZ213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BE213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BJ213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BO213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BT213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "BY213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CD213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CI213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CN213",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CS213",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "CX213",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DC213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DH213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DM213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DR213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "DW213",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EB213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EG213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EL213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EQ213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "EV213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "FA213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "FF213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "FK213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "BAU",
    "FP213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "B213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "B213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "B213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "B213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "B213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "G213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "G213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "G213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "G213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "G213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "L213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "L213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "L213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "L213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "L213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "V213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "V213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "V213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "V213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "V213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AA213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AA213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AA213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AA213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AA213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AF213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AF213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AF213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AF213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AF213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AK213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AK213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AK213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AK213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AK213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AP213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AP213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AP213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AP213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AP213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AU213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AU213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AU213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AU213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AU213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AZ213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AZ213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AZ213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AZ213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "AZ213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BE213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BE213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BE213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BE213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BE213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BJ213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BJ213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BJ213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BJ213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BJ213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BO213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BO213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BO213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BO213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BO213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BT213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BT213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BT213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BT213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BT213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BY213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BY213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BY213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BY213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "BY213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CD213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CD213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CD213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CD213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CD213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CI213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CI213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CI213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CI213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CI213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CN213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CN213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CN213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CN213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CN213",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CS213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CS213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CS213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CS213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CS213",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CX213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CX213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CX213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CX213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "CX213",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DC213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DC213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DC213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DC213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DC213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DH213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DH213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DH213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DH213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DH213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DM213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DM213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DM213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DM213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DM213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DR213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DR213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DR213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DR213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DR213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DW213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DW213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DW213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DW213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "DW213",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EB213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EB213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EB213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EB213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EB213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EG213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EG213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EG213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EG213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EG213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EL213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EL213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EL213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EL213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EL213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EQ213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EQ213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EQ213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EQ213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EQ213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EV213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EV213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EV213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EV213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "EV213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FA213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FA213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FA213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FA213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FA213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FF213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FF213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FF213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FF213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FF213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FK213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FK213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FK213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FK213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FK213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FP213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FP213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FP213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FP213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "FP213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "Q213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "Q213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "Q213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "Q213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_year_policy_change_energy_by_sector.add(
    "inputs_EU.xlsx",
    "User defined",
    "Q213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)


@component.add(
    name="share tech change fuel",
    units="Dmnl",
    subscripts=["scenarios", "sectors", "final sources1", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pressure_to_change_energy_technology_by_fuel": 2},
)
def share_tech_change_fuel():
    """
    Share of the global pressure to change energy technology that corresponds to each fuel.
    """
    return zidz(
        pressure_to_change_energy_technology_by_fuel().rename(
            {"final sources": "final sources1", "final sources1": "final sources"}
        ),
        sum(
            pressure_to_change_energy_technology_by_fuel().rename(
                {"final sources": "final sources!", "final sources1": "final sources"}
            ),
            dim=["final sources!"],
        ).expand_dims({"final sources1": _subscript_dict["final sources1"]}, 2),
    )


@component.add(
    name="Increase of intensity due to energy a technology change TOP DOWN",
    units="EJ/Tdollars",
    subscripts=["scenarios", "sectors", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"increase_of_intensity_due_to_energy_a_technology_eff": 1},
)
def increase_of_intensity_due_to_energy_a_technology_change_top_down():
    """
    When in one economic sector, one type of energy (a) is replaced by another (b), the energy intensity of (b) will increase and the energy intensity of (a) will decrease. This flow represents the increase of (b).
    """
    return sum(
        increase_of_intensity_due_to_energy_a_technology_eff().rename(
            {"final sources1": "final sources", "final sources": "final sources!"}
        ),
        dim=["final sources!"],
    )


@component.add(
    name="exp slow evolution improve efficiency",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def exp_slow_evolution_improve_efficiency():
    """
    Parameter that define the speed of application of policies in the slow way.
    """
    return 2


@component.add(
    name="Activate BOTTOM UP method",
    units="Dmnl",
    subscripts=["scenarios", "sectors1"],
    comp_type="Constant",
    comp_subtype="Normal, External",
    depends_on={"__external__": "_ext_constant_activate_bottom_up_method"},
)
def activate_bottom_up_method():
    """
    Activate BOTTOM UP method or maintain TOP DOWN method. Activate for each sector (by default, only inland transport sector) 0. Bottom-up NOT activated 1. Bottom-up activated
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "sectors1": _subscript_dict["sectors1"],
        },
        ["scenarios", "sectors1"],
    )
    value.loc[:, ["Agriculture Hunting Forestry and Fishing"]] = 0
    value.loc[:, ["Mining and Quarrying"]] = 0
    value.loc[:, ["Food Beverages and Tobacco"]] = 0
    value.loc[:, ["Textiles and Textile Products"]] = 0
    value.loc[:, ["Leather Leather and Footwear"]] = 0
    value.loc[:, ["Wood and Products of Woood and Cork"]] = 0
    value.loc[:, ["Pulp Paper Printing and Publishing"]] = 0
    value.loc[:, ["Coke Refined Petroleum and Nuclear Fuel"]] = 0
    value.loc[:, ["Chemicals and Chemical products"]] = 0
    value.loc[:, ["Rubber and Plastics"]] = 0
    value.loc[:, ["Other Non Metalic Mineral"]] = 0
    value.loc[:, ["Basic Metals and Fabricated Metal"]] = 0
    value.loc[:, ["Machinery Nec"]] = 0
    value.loc[:, ["Electrical and Optical Equipment"]] = 0
    value.loc[:, ["Transport Equipment"]] = 0
    value.loc[:, ["Manufacturing Nec Recycling"]] = 0
    value.loc[:, ["Electricity Gas and Water Supply"]] = 0
    value.loc[:, ["Construction"]] = 0
    value.loc[
        :,
        [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
    ] = 0
    value.loc[
        :,
        [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
    ] = 0
    value.loc[
        :,
        [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
    ] = 0
    value.loc[:, ["Hotels and Restaurants"]] = 0
    def_subs = xr.zeros_like(value, dtype=bool)
    def_subs.loc[["BAU"], ["Inland Transport"]] = True
    def_subs.loc[["SCEN1"], ["Inland Transport"]] = True
    def_subs.loc[["SCEN2"], ["Inland Transport"]] = True
    def_subs.loc[["SCEN3"], ["Inland Transport"]] = True
    def_subs.loc[["SCEN4"], ["Inland Transport"]] = True
    def_subs.loc[["User defined"], ["Inland Transport"]] = True
    value.values[def_subs.values] = _ext_constant_activate_bottom_up_method().values[
        def_subs.values
    ]
    value.loc[:, ["Water Transport"]] = 0
    value.loc[:, ["Air Transport"]] = 0
    value.loc[
        :,
        [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
    ] = 0
    value.loc[:, ["Post and Telecommunications"]] = 0
    value.loc[:, ["Financial Intermedation"]] = 0
    value.loc[:, ["Real Estate Activities"]] = 0
    value.loc[:, ["Renting od MEq and Other Business Activities"]] = 0
    value.loc[:, ["Public Admin and Defence Compulsory Social Security"]] = 0
    value.loc[:, ["Education"]] = 0
    value.loc[:, ["Health and Social Work"]] = 0
    value.loc[:, ["Other Community Social and Persona Services"]] = 0
    value.loc[:, ["Private Households with Employed Persons"]] = 0
    return value


_ext_constant_activate_bottom_up_method = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "DL207",
    {"scenarios": ["BAU"], "sectors1": ["Inland Transport"]},
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "sectors1": _subscript_dict["sectors1"],
    },
    "_ext_constant_activate_bottom_up_method",
)

_ext_constant_activate_bottom_up_method.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DL207",
    {"scenarios": ["SCEN1"], "sectors1": ["Inland Transport"]},
)

_ext_constant_activate_bottom_up_method.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DL207",
    {"scenarios": ["SCEN2"], "sectors1": ["Inland Transport"]},
)

_ext_constant_activate_bottom_up_method.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DL207",
    {"scenarios": ["SCEN3"], "sectors1": ["Inland Transport"]},
)

_ext_constant_activate_bottom_up_method.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DL207",
    {"scenarios": ["SCEN4"], "sectors1": ["Inland Transport"]},
)

_ext_constant_activate_bottom_up_method.add(
    "inputs_EU.xlsx",
    "User defined",
    "DL207",
    {"scenarios": ["User defined"], "sectors1": ["Inland Transport"]},
)


@component.add(
    name="Global energy intensity by sector",
    units="EJ/Tdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"evol_final_energy_intensity_by_sector_and_fuel": 1},
)
def global_energy_intensity_by_sector():
    """
    Global energy intensity of one sector considering the energy intensity of five final fuels.
    """
    return sum(
        evol_final_energy_intensity_by_sector_and_fuel().rename(
            {"final sources": "final sources!"}
        ),
        dim=["final sources!"],
    )


@component.add(
    name="Required FED by fuel before heat correction",
    units="EJ",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "required_fed_sectors_by_fuel": 1,
        "households_final_energy_demand": 1,
        "eroi_fc_system_from_2015": 1,
    },
)
def required_fed_by_fuel_before_heat_correction():
    """
    Required final energy demand by fuel before heat demand correction. The final energy demand is modified with the feedback from the change of the EROEI.
    """
    return (
        required_fed_sectors_by_fuel() + households_final_energy_demand()
    ) * eroi_fc_system_from_2015()


@component.add(
    name="available improvement efficiency",
    units="Dmnl",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "global_energy_intensity_by_sector": 1,
        "min_energy_intensity_vs_intial": 2,
        "initial_global_energy_intensity_by_sector_2009": 2,
    },
)
def available_improvement_efficiency():
    """
    Remainig improvement of energy intensity respect to the minimum value.
    """
    return np.minimum(
        1,
        if_then_else(
            time() > 2009,
            lambda: zidz(
                global_energy_intensity_by_sector()
                - min_energy_intensity_vs_intial()
                * initial_global_energy_intensity_by_sector_2009(),
                (1 - min_energy_intensity_vs_intial())
                * initial_global_energy_intensity_by_sector_2009(),
            ),
            lambda: xr.DataArray(
                1,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "sectors": _subscript_dict["sectors"],
                },
                ["scenarios", "sectors"],
            ),
        ),
    )


@component.add(
    name="exp rapid evolution improve efficiency",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def exp_rapid_evolution_improve_efficiency():
    """
    Parameter that define the speed of application of policies in the rapid way.
    """
    return 1 / 2


@component.add(
    name="Final energy intensity by sector and fuel EU",
    units="EJ/Tdollars",
    subscripts=["scenarios", "final sources", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"evol_final_energy_intensity_by_sector_and_fuel": 1},
)
def final_energy_intensity_by_sector_and_fuel_eu():
    """
    Evolution of final energy intensity by sector and fuel.
    """
    return evol_final_energy_intensity_by_sector_and_fuel().transpose(
        "scenarios", "final sources", "sectors"
    )


@component.add(
    name="adapt max share imports oil UE",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 3,
        "historic_share_net_imports_oil_until_2016": 3,
        "max_share_imports_oil_ue": 2,
    },
)
def adapt_max_share_imports_oil_ue():
    return if_then_else(
        time() < 2016,
        lambda: historic_share_net_imports_oil_until_2016(),
        lambda: if_then_else(
            time() < 2021,
            lambda: historic_share_net_imports_oil_until_2016()
            + (max_share_imports_oil_ue() - historic_share_net_imports_oil_until_2016())
            * ((time() - 2016) / (2021 - 2016)),
            lambda: max_share_imports_oil_ue(),
        ),
    )


@component.add(
    name="imports EU coal from RoW EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "ped_eu_coal_from_row": 5,
        "historic_share_net_imports_coal_eu_until_2016": 1,
        "extraction_coal_ej_world": 2,
        "limited_coal_imports_from_row": 3,
        "adapt_max_share_import_coal_ue": 1,
    },
)
def imports_eu_coal_from_row_ej():
    """
    IF THEN ELSE(Time<2016, Historic share net imports coal EU until 2016[scenarios]*extraction coal EJ World[scenarios], IF THEN ELSE("Limited coal imports from RoW?"=0, PED EU coal from RoW[scenarios], IF THEN ELSE ("Limited coal imports from RoW?"=1, MIN(PED EU coal from RoW[scenarios], Historic share net imports coal EU until 2016[scenarios]*extraction coal EJ World[scenarios]), PED EU coal from RoW[scenarios]))) IF THEN ELSE(Time<2016, PED EU coal from RoW[scenarios], IF THEN ELSE("Limited coal imports from RoW?"=0, PED EU coal from RoW[scenarios], IF THEN ELSE ("Limited coal imports from RoW?"=1, MIN(PED EU coal from RoW[scenarios], Historic share net imports coal EU until 2016[scenarios]*extraction coal EJ World[scenarios]), PED EU coal from RoW[scenarios])))
    """
    return if_then_else(
        time() < 2016,
        lambda: ped_eu_coal_from_row(),
        lambda: if_then_else(
            limited_coal_imports_from_row() == 1,
            lambda: ped_eu_coal_from_row(),
            lambda: if_then_else(
                limited_coal_imports_from_row() == 2,
                lambda: np.minimum(
                    ped_eu_coal_from_row(),
                    historic_share_net_imports_coal_eu_until_2016()
                    * extraction_coal_ej_world(),
                ),
                lambda: if_then_else(
                    limited_coal_imports_from_row() == 3,
                    lambda: np.minimum(
                        ped_eu_coal_from_row(),
                        adapt_max_share_import_coal_ue() * extraction_coal_ej_world(),
                    ),
                    lambda: ped_eu_coal_from_row(),
                ),
            ),
        ),
    )


@component.add(
    name="adapt max share import coal UE",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 3,
        "historic_share_net_imports_coal_eu_until_2016": 3,
        "max_share_import_coal_ue": 2,
    },
)
def adapt_max_share_import_coal_ue():
    return if_then_else(
        time() < 2016,
        lambda: historic_share_net_imports_coal_eu_until_2016(),
        lambda: if_then_else(
            time() < 2021,
            lambda: historic_share_net_imports_coal_eu_until_2016()
            + (
                max_share_import_coal_ue()
                - historic_share_net_imports_coal_eu_until_2016()
            )
            * ((time() - 2016) / (2021 - 2016)),
            lambda: max_share_import_coal_ue(),
        ),
    )


@component.add(
    name='"adapt max share imports nat. gas UE"',
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 3,
        "historic_share_net_imports_nat_gas_until_2016": 3,
        "max_share_imports_nat_gas_ue": 2,
    },
)
def adapt_max_share_imports_nat_gas_ue():
    return if_then_else(
        time() < 2016,
        lambda: historic_share_net_imports_nat_gas_until_2016(),
        lambda: if_then_else(
            time() < 2021,
            lambda: historic_share_net_imports_nat_gas_until_2016()
            + (
                max_share_imports_nat_gas_ue()
                - historic_share_net_imports_nat_gas_until_2016()
            )
            * ((time() - 2016) / (2021 - 2016)),
            lambda: max_share_imports_nat_gas_ue(),
        ),
    )


@component.add(
    name='"imports EU nat. gas from RoW EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "ped_eu_nat_gas_from_row": 5,
        "historic_share_net_imports_nat_gas_until_2016": 1,
        "adapt_max_share_imports_nat_gas_ue": 1,
        "extraction_nat_gas_ej_world": 2,
        "limited_nat_gas_imports_from_row": 3,
    },
)
def imports_eu_nat_gas_from_row_ej():
    return if_then_else(
        time() < 2016,
        lambda: ped_eu_nat_gas_from_row(),
        lambda: if_then_else(
            limited_nat_gas_imports_from_row() == 1,
            lambda: ped_eu_nat_gas_from_row(),
            lambda: if_then_else(
                limited_nat_gas_imports_from_row() == 2,
                lambda: np.minimum(
                    ped_eu_nat_gas_from_row(),
                    historic_share_net_imports_nat_gas_until_2016()
                    * extraction_nat_gas_ej_world(),
                ),
                lambda: if_then_else(
                    limited_nat_gas_imports_from_row() == 3,
                    lambda: np.minimum(
                        ped_eu_nat_gas_from_row(),
                        adapt_max_share_imports_nat_gas_ue()
                        * extraction_nat_gas_ej_world(),
                    ),
                    lambda: ped_eu_nat_gas_from_row(),
                ),
            ),
        ),
    )


@component.add(
    name="imports EU total oil from RoW EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "ped_eu_total_oil_from_row": 5,
        "limited_oil_imports_from_row": 3,
        "adapt_max_share_imports_oil_ue": 1,
        "extraction_oil_ej_world": 2,
        "historic_share_net_imports_oil_until_2016": 1,
    },
)
def imports_eu_total_oil_from_row_ej():
    return if_then_else(
        time() < 2016,
        lambda: ped_eu_total_oil_from_row(),
        lambda: if_then_else(
            limited_oil_imports_from_row() == 1,
            lambda: ped_eu_total_oil_from_row(),
            lambda: if_then_else(
                limited_oil_imports_from_row() == 2,
                lambda: np.minimum(
                    ped_eu_total_oil_from_row(),
                    historic_share_net_imports_oil_until_2016()
                    * extraction_oil_ej_world(),
                ),
                lambda: if_then_else(
                    limited_oil_imports_from_row() == 3,
                    lambda: np.minimum(
                        ped_eu_total_oil_from_row(),
                        adapt_max_share_imports_oil_ue() * extraction_oil_ej_world(),
                    ),
                    lambda: ped_eu_total_oil_from_row(),
                ),
            ),
        ),
    )


@component.add(
    name="Historic share coal domestic UE extraction",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"historic_coal_domestic_eu_extracted_ej": 1, "ped_coal_ej": 1},
)
def historic_share_coal_domestic_ue_extraction():
    return zidz(
        xr.DataArray(
            historic_coal_domestic_eu_extracted_ej(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        ped_coal_ej(),
    )


@component.add(
    name="Historic share coal domestic UE extraction until 2016",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "historic_share_coal_domestic_ue_extraction": 1, "aux19": 1},
)
def historic_share_coal_domestic_ue_extraction_until_2016():
    return if_then_else(
        time() < 2016,
        lambda: historic_share_coal_domestic_ue_extraction(),
        lambda: aux19(),
    )


@component.add(
    name="aux19",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux19": 1},
    other_deps={
        "_delayfixed_aux19": {
            "initial": {"time_step": 1},
            "step": {"historic_share_coal_domestic_ue_extraction_until_2016": 1},
        }
    },
)
def aux19():
    """
    Auxiliary variable to estimate the EROIst of the system in the year 2015.
    """
    return _delayfixed_aux19()


_delayfixed_aux19 = DelayFixed(
    lambda: historic_share_coal_domestic_ue_extraction_until_2016(),
    lambda: time_step(),
    lambda: xr.DataArray(
        0.75, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    time_step,
    "_delayfixed_aux19",
)


@component.add(
    name="max share import coal UE",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_max_share_import_coal_ue"},
)
def max_share_import_coal_ue():
    return _ext_constant_max_share_import_coal_ue()


_ext_constant_max_share_import_coal_ue = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F327",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_max_share_import_coal_ue",
)

_ext_constant_max_share_import_coal_ue.add(
    "inputs_EU.xlsx", "SCEN1", "F327", {"scenarios": ["SCEN1"]}
)

_ext_constant_max_share_import_coal_ue.add(
    "inputs_EU.xlsx", "SCEN2", "F327", {"scenarios": ["SCEN2"]}
)

_ext_constant_max_share_import_coal_ue.add(
    "inputs_EU.xlsx", "SCEN3", "F327", {"scenarios": ["SCEN3"]}
)

_ext_constant_max_share_import_coal_ue.add(
    "inputs_EU.xlsx", "SCEN4", "F327", {"scenarios": ["SCEN4"]}
)

_ext_constant_max_share_import_coal_ue.add(
    "inputs_EU.xlsx", "User defined", "F327", {"scenarios": ["User defined"]}
)


@component.add(
    name="Historic net imports coal EU",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_coal_ej": 1, "historic_coal_domestic_eu_extracted_ej": 1},
)
def historic_net_imports_coal_eu():
    return ped_coal_ej() - historic_coal_domestic_eu_extracted_ej()


@component.add(
    name='"Limited coal imports from RoW?"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_limited_coal_imports_from_row"},
)
def limited_coal_imports_from_row():
    """
    1: Unlimited coal imports share from RoW (constrained by total global production) 2: Limited imports coal of UE from RoW (at 2016 share of EU imports vs global production) 3: Limited imports coal of UE from Row (user defined)
    """
    return _ext_constant_limited_coal_imports_from_row()


_ext_constant_limited_coal_imports_from_row = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D325",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_limited_coal_imports_from_row",
)

_ext_constant_limited_coal_imports_from_row.add(
    "inputs_EU.xlsx", "SCEN1", "D325", {"scenarios": ["SCEN1"]}
)

_ext_constant_limited_coal_imports_from_row.add(
    "inputs_EU.xlsx", "SCEN2", "D325", {"scenarios": ["SCEN2"]}
)

_ext_constant_limited_coal_imports_from_row.add(
    "inputs_EU.xlsx", "SCEN3", "D325", {"scenarios": ["SCEN3"]}
)

_ext_constant_limited_coal_imports_from_row.add(
    "inputs_EU.xlsx", "SCEN4", "D325", {"scenarios": ["SCEN4"]}
)

_ext_constant_limited_coal_imports_from_row.add(
    "inputs_EU.xlsx", "User defined", "D325", {"scenarios": ["User defined"]}
)


@component.add(
    name="PED domestic EU coal EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ped_coal_ej": 1,
        "historic_share_coal_domestic_ue_extraction_until_2016": 1,
    },
)
def ped_domestic_eu_coal_ej():
    return ped_coal_ej() * historic_share_coal_domestic_ue_extraction_until_2016()


@component.add(
    name='"Historic share unconv. nat. gas domestric EU extraction"',
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "historic_unconv_nat_gas_domestic_eu_extracted_ej": 1,
        "ped_nat_gas_ej": 1,
    },
)
def historic_share_unconv_nat_gas_domestric_eu_extraction():
    return zidz(
        xr.DataArray(
            historic_unconv_nat_gas_domestic_eu_extracted_ej(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        ped_nat_gas_ej(),
    )


@component.add(
    name='"Limited nat. gas. imports from RoW?"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_limited_nat_gas_imports_from_row"},
)
def limited_nat_gas_imports_from_row():
    """
    1: Unlimited coal imports share from RoW (constrained by total global production) 2: Limited imports coal of UE from RoW (at 2016 share of EU imports vs global production) 3: Limited imports coal of UE from Row (user defined)
    """
    return _ext_constant_limited_nat_gas_imports_from_row()


_ext_constant_limited_nat_gas_imports_from_row = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D321",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_limited_nat_gas_imports_from_row",
)

_ext_constant_limited_nat_gas_imports_from_row.add(
    "inputs_EU.xlsx", "SCEN1", "D321", {"scenarios": ["SCEN1"]}
)

_ext_constant_limited_nat_gas_imports_from_row.add(
    "inputs_EU.xlsx", "SCEN2", "D321", {"scenarios": ["SCEN2"]}
)

_ext_constant_limited_nat_gas_imports_from_row.add(
    "inputs_EU.xlsx", "SCEN3", "D321", {"scenarios": ["SCEN3"]}
)

_ext_constant_limited_nat_gas_imports_from_row.add(
    "inputs_EU.xlsx", "SCEN4", "D321", {"scenarios": ["SCEN4"]}
)

_ext_constant_limited_nat_gas_imports_from_row.add(
    "inputs_EU.xlsx", "User defined", "D321", {"scenarios": ["User defined"]}
)


@component.add(
    name='"Historic net imports nat. gas EU"',
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ped_nat_gas_ej": 1,
        "historic_conv_nat_gas_domestic_eu_extracted_ej": 1,
        "historic_unconv_nat_gas_domestic_eu_extracted_ej": 1,
    },
)
def historic_net_imports_nat_gas_eu():
    return (
        ped_nat_gas_ej()
        - historic_conv_nat_gas_domestic_eu_extracted_ej()
        - historic_unconv_nat_gas_domestic_eu_extracted_ej()
    )


@component.add(
    name="aux21",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux21": 1},
    other_deps={
        "_delayfixed_aux21": {
            "initial": {"time_step": 1},
            "step": {
                "historic_share_unconv_nat_gas_domestric_eu_extraction_until_2016": 1
            },
        }
    },
)
def aux21():
    return _delayfixed_aux21()


_delayfixed_aux21 = DelayFixed(
    lambda: historic_share_unconv_nat_gas_domestric_eu_extraction_until_2016(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux21",
)


@component.add(
    name='"Historic share conv. nat gas domestic EU extraction"',
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "historic_conv_nat_gas_domestic_eu_extracted_ej": 1,
        "ped_nat_gas_ej": 1,
    },
)
def historic_share_conv_nat_gas_domestic_eu_extraction():
    return zidz(
        xr.DataArray(
            historic_conv_nat_gas_domestic_eu_extracted_ej(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        ped_nat_gas_ej(),
    )


@component.add(
    name='"max share imports nat. gas. UE"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_max_share_imports_nat_gas_ue"},
)
def max_share_imports_nat_gas_ue():
    return _ext_constant_max_share_imports_nat_gas_ue()


_ext_constant_max_share_imports_nat_gas_ue = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F323",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_max_share_imports_nat_gas_ue",
)

_ext_constant_max_share_imports_nat_gas_ue.add(
    "inputs_EU.xlsx", "SCEN1", "F323", {"scenarios": ["SCEN1"]}
)

_ext_constant_max_share_imports_nat_gas_ue.add(
    "inputs_EU.xlsx", "SCEN2", "F323", {"scenarios": ["SCEN2"]}
)

_ext_constant_max_share_imports_nat_gas_ue.add(
    "inputs_EU.xlsx", "SCEN3", "F323", {"scenarios": ["SCEN3"]}
)

_ext_constant_max_share_imports_nat_gas_ue.add(
    "inputs_EU.xlsx", "SCEN4", "F323", {"scenarios": ["SCEN4"]}
)

_ext_constant_max_share_imports_nat_gas_ue.add(
    "inputs_EU.xlsx", "User defined", "F323", {"scenarios": ["User defined"]}
)


@component.add(
    name='"Historic share unconv. nat. gas domestric EU extraction until 2016"',
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "historic_share_unconv_nat_gas_domestric_eu_extraction": 1,
        "aux21": 1,
    },
)
def historic_share_unconv_nat_gas_domestric_eu_extraction_until_2016():
    return if_then_else(
        time() < 2016,
        lambda: historic_share_unconv_nat_gas_domestric_eu_extraction(),
        lambda: aux21(),
    )


@component.add(
    name='"Historic share conv. nat gas domestic EU extraction until 2016"',
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "historic_share_conv_nat_gas_domestic_eu_extraction": 1,
        "aux20": 1,
    },
)
def historic_share_conv_nat_gas_domestic_eu_extraction_until_2016():
    return if_then_else(
        time() < 2016,
        lambda: historic_share_conv_nat_gas_domestic_eu_extraction(),
        lambda: aux20(),
    )


@component.add(
    name='"PED domestic EU total nat.gas EJ"',
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ped_nat_gas_ej": 1,
        "historic_share_unconv_nat_gas_domestric_eu_extraction_until_2016": 1,
        "historic_share_conv_nat_gas_domestic_eu_extraction_until_2016": 1,
    },
)
def ped_domestic_eu_total_natgas_ej():
    return ped_nat_gas_ej() * (
        historic_share_conv_nat_gas_domestic_eu_extraction_until_2016()
        + historic_share_unconv_nat_gas_domestric_eu_extraction_until_2016()
    )


@component.add(
    name="max share imports oil UE",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_max_share_imports_oil_ue"},
)
def max_share_imports_oil_ue():
    return _ext_constant_max_share_imports_oil_ue()


_ext_constant_max_share_imports_oil_ue = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F319",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_max_share_imports_oil_ue",
)

_ext_constant_max_share_imports_oil_ue.add(
    "inputs_EU.xlsx", "SCEN1", "F319", {"scenarios": ["SCEN1"]}
)

_ext_constant_max_share_imports_oil_ue.add(
    "inputs_EU.xlsx", "SCEN2", "F319", {"scenarios": ["SCEN2"]}
)

_ext_constant_max_share_imports_oil_ue.add(
    "inputs_EU.xlsx", "SCEN3", "F319", {"scenarios": ["SCEN3"]}
)

_ext_constant_max_share_imports_oil_ue.add(
    "inputs_EU.xlsx", "SCEN4", "F319", {"scenarios": ["SCEN4"]}
)

_ext_constant_max_share_imports_oil_ue.add(
    "inputs_EU.xlsx", "User defined", "F319", {"scenarios": ["User defined"]}
)


@component.add(
    name='"Limited oil imports from RoW?"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_limited_oil_imports_from_row"},
)
def limited_oil_imports_from_row():
    """
    1: Unlimited coal imports share from RoW (constrained by total global production) 2: Limited imports coal of UE from RoW (at 2016 share of EU imports vs global production) 3: Limited imports coal of UE from Row (user defined)
    """
    return _ext_constant_limited_oil_imports_from_row()


_ext_constant_limited_oil_imports_from_row = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D317",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_limited_oil_imports_from_row",
)

_ext_constant_limited_oil_imports_from_row.add(
    "inputs_EU.xlsx", "SCEN1", "D317", {"scenarios": ["SCEN1"]}
)

_ext_constant_limited_oil_imports_from_row.add(
    "inputs_EU.xlsx", "SCEN2", "D317", {"scenarios": ["SCEN2"]}
)

_ext_constant_limited_oil_imports_from_row.add(
    "inputs_EU.xlsx", "SCEN3", "D317", {"scenarios": ["SCEN3"]}
)

_ext_constant_limited_oil_imports_from_row.add(
    "inputs_EU.xlsx", "SCEN4", "D317", {"scenarios": ["SCEN4"]}
)

_ext_constant_limited_oil_imports_from_row.add(
    "inputs_EU.xlsx", "User defined", "D317", {"scenarios": ["User defined"]}
)


@component.add(
    name="aux24",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux24": 1},
    other_deps={
        "_delayfixed_aux24": {
            "initial": {"time_step": 1},
            "step": {"historic_share_unconv_oil_domestric_eu_extraction_until_2016": 1},
        }
    },
)
def aux24():
    return _delayfixed_aux24()


_delayfixed_aux24 = DelayFixed(
    lambda: historic_share_unconv_oil_domestric_eu_extraction_until_2016(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux24",
)


@component.add(
    name='"Historic share unconv. oil domestric EU extraction until 2016"',
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "historic_share_unconv_oil_domestric_eu_extraction": 1,
        "aux24": 1,
    },
)
def historic_share_unconv_oil_domestric_eu_extraction_until_2016():
    return if_then_else(
        time() < 2016,
        lambda: historic_share_unconv_oil_domestric_eu_extraction(),
        lambda: aux24(),
    )


@component.add(
    name='"Historic share unconv. oil domestric EU extraction"',
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"historic_unconv_oil_domestic_eu_extracted_ej": 1, "ped_liquids_ej": 1},
)
def historic_share_unconv_oil_domestric_eu_extraction():
    return zidz(
        xr.DataArray(
            historic_unconv_oil_domestic_eu_extracted_ej(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        ped_liquids_ej(),
    )


@component.add(
    name="aux23",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux23": 1},
    other_deps={
        "_delayfixed_aux23": {
            "initial": {"time_step": 1},
            "step": {"historic_share_conv_oil_domestic_eu_extraction_until_2016": 1},
        }
    },
)
def aux23():
    return _delayfixed_aux23()


_delayfixed_aux23 = DelayFixed(
    lambda: historic_share_conv_oil_domestic_eu_extraction_until_2016(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux23",
)


@component.add(
    name='"PED domestic EU conv. oil EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ped_total_oil_ej": 1,
        "historic_share_conv_oil_domestic_eu_extraction_until_2016": 1,
    },
)
def ped_domestic_eu_conv_oil_ej():
    return (
        ped_total_oil_ej() * historic_share_conv_oil_domestic_eu_extraction_until_2016()
    )


@component.add(
    name='"Historic share conv. oil domestic EU extraction"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"historic_conv_oil_domestic_eu_extracted_ej": 1, "ped_liquids_ej": 1},
)
def historic_share_conv_oil_domestic_eu_extraction():
    return zidz(
        xr.DataArray(
            historic_conv_oil_domestic_eu_extracted_ej(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        ped_liquids_ej(),
    )


@component.add(
    name='"Historic share conv. oil domestic EU extraction\\" until 2016"',
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "historic_share_conv_oil_domestic_eu_extraction": 1,
        "aux23": 1,
    },
)
def historic_share_conv_oil_domestic_eu_extraction_until_2016():
    return if_then_else(
        time() < 2016,
        lambda: historic_share_conv_oil_domestic_eu_extraction(),
        lambda: aux23(),
    )


@component.add(
    name="Historic net imports oil EU",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ped_liquids_ej": 1,
        "historic_conv_oil_domestic_eu_extracted_ej": 1,
        "historic_unconv_oil_domestic_eu_extracted_ej": 1,
    },
)
def historic_net_imports_oil_eu():
    return (
        ped_liquids_ej()
        - historic_conv_oil_domestic_eu_extracted_ej()
        - historic_unconv_oil_domestic_eu_extracted_ej()
    )


@component.add(
    name="PED domestic EU total oil EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ped_total_oil_ej": 1,
        "historic_share_conv_oil_domestic_eu_extraction_until_2016": 1,
        "historic_share_unconv_oil_domestric_eu_extraction_until_2016": 1,
    },
)
def ped_domestic_eu_total_oil_ej():
    return ped_total_oil_ej() * (
        historic_share_conv_oil_domestic_eu_extraction_until_2016()
        + historic_share_unconv_oil_domestric_eu_extraction_until_2016()
    )


@component.add(
    name='"FED Heat gas+coal EJ"',
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fed_heatcom_plants_fossil_fuels_ej": 1,
        "fed_heat_liquids_plants_ej": 1,
    },
)
def fed_heat_gascoal_ej():
    return fed_heatcom_plants_fossil_fuels_ej() - fed_heat_liquids_plants_ej()


@component.add(
    name="URR tot agg oil",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "separate_conv_and_unconv_oil": 1,
        "unlimited_nre": 1,
        "urr_tot_agg_oil_unlimited": 2,
        "urr_tot_agg_oil_user_defined": 2,
        "choose_extraction_curve_tot_agg_oil": 1,
        "unlimited_oil": 1,
    },
)
def urr_tot_agg_oil():
    """
    Ultimately Recoverable Resources (URR) associated to the selected depletion curve.
    """
    return if_then_else(
        separate_conv_and_unconv_oil() == 1,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            unlimited_oil() == 1,
            lambda: xr.DataArray(
                urr_tot_agg_oil_unlimited(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                unlimited_nre() == 1,
                lambda: xr.DataArray(
                    urr_tot_agg_oil_unlimited(),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    choose_extraction_curve_tot_agg_oil() == 2,
                    lambda: xr.DataArray(
                        urr_tot_agg_oil_user_defined(),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                    lambda: xr.DataArray(
                        urr_tot_agg_oil_user_defined(),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="Desired annual GDP growth rate",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"desire_gdp_next_step": 1, "desired_gdp": 1},
)
def desired_annual_gdp_growth_rate():
    """
    Desired annual GDP growth rate.
    """
    return -1 + desire_gdp_next_step() / desired_gdp()


@component.add(
    name='"materials availability (reserves)"',
    units="Dmnl",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_cum_materials_to_extract_alt_techn_eu_vs_reserves_world": 1},
)
def materials_availability_reserves():
    """
    =1 while the cumulative demand is lower than the estimated resources, and =0 when the cumulative demand surpasses the estimated resources.
    """
    return if_then_else(
        share_cum_materials_to_extract_alt_techn_eu_vs_reserves_world() < 1,
        lambda: xr.DataArray(
            1,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
        lambda: xr.DataArray(
            0,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
    )


@component.add(
    name="max extraction tot agg oil EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "separate_conv_and_unconv_oil": 1,
        "choose_extraction_curve_tot_agg_oil": 1,
        "tot_rurr_tot_agg_oil": 2,
        "table_max_extraction_tot_agg_oil_user_defined": 2,
    },
)
def max_extraction_tot_agg_oil_ej():
    """
    Maximum extraction curve for total aggregated oil selected for the simulations.
    """
    return if_then_else(
        separate_conv_and_unconv_oil() == 0,
        lambda: if_then_else(
            choose_extraction_curve_tot_agg_oil() == 1,
            lambda: table_max_extraction_tot_agg_oil_user_defined(
                tot_rurr_tot_agg_oil(),
                {
                    "scenarios": [
                        "SCEN1",
                        "SCEN2",
                        "SCEN3",
                        "SCEN4",
                        "BAU",
                        "User defined",
                    ]
                },
            ),
            lambda: table_max_extraction_tot_agg_oil_user_defined(
                tot_rurr_tot_agg_oil(),
                {
                    "scenarios": [
                        "SCEN1",
                        "SCEN2",
                        "SCEN3",
                        "SCEN4",
                        "BAU",
                        "User defined",
                    ]
                },
            ),
        ),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="demand Elec gas and coal TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "switch_scarcityps_elec_substit": 1,
        "hist_share_oilff_elec": 2,
        "demand_elec_plants_fossil_fuels_twh": 3,
        "future_share_gascoalff_for_elec": 1,
        "time": 1,
    },
)
def demand_elec_gas_and_coal_twh():
    return if_then_else(
        switch_scarcityps_elec_substit() == 0,
        lambda: demand_elec_plants_fossil_fuels_twh() * (1 - hist_share_oilff_elec()),
        lambda: if_then_else(
            time() < 2016,
            lambda: demand_elec_plants_fossil_fuels_twh()
            * (1 - hist_share_oilff_elec()),
            lambda: demand_elec_plants_fossil_fuels_twh()
            * future_share_gascoalff_for_elec(),
        ),
    )


@component.add(
    name='"materials availability (resources)"',
    units="Dmnl",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_cum_materials_to_extract_alt_techn_eu_vs_resources_world": 1},
)
def materials_availability_resources():
    """
    =1 while the cumulative demand is lower than the estimated reserves, and =0 when the cumulative demand surpasses the estimated reserves.
    """
    return if_then_else(
        share_cum_materials_to_extract_alt_techn_eu_vs_resources_world() < 1,
        lambda: xr.DataArray(
            1,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
        lambda: xr.DataArray(
            0,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
    )


@component.add(
    name='"Share pipeline transport FECg+l in 2015"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "historic_share_pipeline_transport": 1, "aux18_0": 1},
)
def share_pipeline_transport_fecgl_in_2015():
    """
    Share of energy dedicated for pipeline transport vs final energy consumption of gases and liquids.
    """
    return if_then_else(
        time() < 2015, lambda: historic_share_pipeline_transport(), lambda: aux18_0()
    )


@component.add(
    name="aux18 0",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux18_0": 1},
    other_deps={
        "_delayfixed_aux18_0": {
            "initial": {"time_step": 1},
            "step": {"share_pipeline_transport_fecgl_in_2015": 1},
        }
    },
)
def aux18_0():
    """
    Auxiliary variable to estimate the value of "Share pipeline transport FECg+l" in 2015.
    """
    return _delayfixed_aux18_0()


_delayfixed_aux18_0 = DelayFixed(
    lambda: share_pipeline_transport_fecgl_in_2015(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux18_0",
)


@component.add(
    name='"FEC gases+liquids"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_fe_consumption_by_fuel": 2},
)
def fec_gasesliquids():
    return real_fe_consumption_by_fuel().loc[:, "gases"].reset_coords(
        drop=True
    ) + real_fe_consumption_by_fuel().loc[:, "liquids"].reset_coords(drop=True)


@component.add(
    name="Total distribution losses",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "electrical_distribution_losses_ej": 1,
        "heatcom_distribution_losses": 1,
        "heatnc_distribution_losses": 1,
        "pipeline_transport": 1,
        "energy_distr_losses_ff_ej": 1,
    },
)
def total_distribution_losses():
    """
    Total energy distribution losses.
    """
    return (
        electrical_distribution_losses_ej()
        + heatcom_distribution_losses()
        + heatnc_distribution_losses()
        + pipeline_transport()
        + sum(
            energy_distr_losses_ff_ej().rename({"final sources1": "final sources!"}),
            dim=["final sources!"],
        )
    )


@component.add(
    name="Historic pipeline transport",
    units="EJ",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_pipeline_transport",
        "__lookup__": "_ext_lookup_historic_pipeline_transport",
    },
)
def historic_pipeline_transport(x, final_subs=None):
    """
    Historic pipeline transport
    """
    return _ext_lookup_historic_pipeline_transport(x, final_subs)


_ext_lookup_historic_pipeline_transport = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "242",
    "C244",
    {},
    _root,
    {},
    "_ext_lookup_historic_pipeline_transport",
)


@component.add(
    name="Pipeline transport",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_pipeline_transport_fecgl_in_2015": 1, "fec_gasesliquids": 1},
)
def pipeline_transport():
    """
    Pipeline transport. IEA definition: Pipeline transport includes energy used in the support and operation of pipelines transporting gases, liquids, slurries and other commodities, including the energy used for pump stations and maintenance of the pipeline.
    """
    return share_pipeline_transport_fecgl_in_2015() * fec_gasesliquids()


@component.add(
    name="Historic share pipeline transport",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 2, "fec_gasesliquids": 1, "historic_pipeline_transport": 1},
)
def historic_share_pipeline_transport():
    """
    Historic share of energy for pipeline transport vs TFEC of liquids and gases.
    """
    return if_then_else(
        time() < 2016,
        lambda: zidz(
            xr.DataArray(
                historic_pipeline_transport(time()),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            fec_gasesliquids(),
        ),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="EROIst system",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_tfec": 1, "feist_system": 1},
)
def eroist_system():
    """
    EROI standard of the system.
    """
    return np.maximum(0, real_tfec() / feist_system())


@component.add(
    name="FEIst system",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "share_e_industry_ownuse_vs_tfec_in_2015": 1,
        "fe_tot_generation_all_res_elec_ej": 1,
        "real_tfec": 1,
        "total_dyn_fei_res": 1,
    },
)
def feist_system():
    """
    Total (dynamic) final energy investment of the whole energy system (standard EROI approach)..
    """
    return (
        share_e_industry_ownuse_vs_tfec_in_2015()
        * (real_tfec() - fe_tot_generation_all_res_elec_ej())
        + total_dyn_fei_res()
    )


@component.add(
    name='"Historic energy industry own-use"',
    units="EJ",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_energy_industry_ownuse",
        "__lookup__": "_ext_lookup_historic_energy_industry_ownuse",
    },
)
def historic_energy_industry_ownuse(x, final_subs=None):
    """
    Energy industry own-use.
    """
    return _ext_lookup_historic_energy_industry_ownuse(x, final_subs)


_ext_lookup_historic_energy_industry_ownuse = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "242",
    "C243",
    {},
    _root,
    {},
    "_ext_lookup_historic_energy_industry_ownuse",
)


@component.add(
    name='"Share E industry own-use vs TFEC in 2015"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "historic_share_e_industry_ownuse_vs_tfec": 1,
        "aux1_1_1": 1,
    },
)
def share_e_industry_ownuse_vs_tfec_in_2015():
    return if_then_else(
        time() < 2015,
        lambda: historic_share_e_industry_ownuse_vs_tfec(),
        lambda: aux1_1_1(),
    )


@component.add(
    name="aux1 1 1",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux1_1_1": 1},
    other_deps={
        "_delayfixed_aux1_1_1": {
            "initial": {"time_step": 1},
            "step": {"share_e_industry_ownuse_vs_tfec_in_2015": 1},
        }
    },
)
def aux1_1_1():
    """
    Auxiliary variable to estimate the energy losses due to climate change impacts in the year 2015.
    """
    return _delayfixed_aux1_1_1()


_delayfixed_aux1_1_1 = DelayFixed(
    lambda: share_e_industry_ownuse_vs_tfec_in_2015(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux1_1_1",
)


@component.add(
    name="Temperature change",
    units="Mdollars",
    subscripts=["scenarios"],
    comp_type="Data",
    comp_subtype="Normal",
    depends_on={"time": 1, "__data__": "_data_temperature_change"},
)
def temperature_change():
    """
    Temperature change. Source: global model.
    """
    return _data_temperature_change(time())


_data_temperature_change = TabData(
    "Temperature change",
    "temperature_change",
    {"scenarios": _subscript_dict["scenarios"]},
    "interpolate",
)


@component.add(
    name="max extraction uranium EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "choose_extraction_uranium_curve": 3,
        "table_max_extraction_uranium_user_defined": 3,
        "rurr_uranium": 3,
        "kt_uranium_per_ej": 1,
        "av_past_eu_domestic_uranium_extraction": 1,
    },
)
def max_extraction_uranium_ej():
    """
    Maximum extraction curve selected for the simulations.
    """
    return if_then_else(
        choose_extraction_uranium_curve() == 1,
        lambda: table_max_extraction_uranium_user_defined(
            rurr_uranium(),
            {"scenarios": ["SCEN1", "SCEN2", "SCEN3", "SCEN4", "BAU", "User defined"]},
        ),
        lambda: if_then_else(
            choose_extraction_uranium_curve() == 2,
            lambda: table_max_extraction_uranium_user_defined(
                rurr_uranium(),
                {
                    "scenarios": [
                        "SCEN1",
                        "SCEN2",
                        "SCEN3",
                        "SCEN4",
                        "BAU",
                        "User defined",
                    ]
                },
            ),
            lambda: if_then_else(
                choose_extraction_uranium_curve() == 3,
                lambda: xr.DataArray(
                    av_past_eu_domestic_uranium_extraction()
                    / (kt_uranium_per_ej() * 1000),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: table_max_extraction_uranium_user_defined(
                    rurr_uranium(),
                    {
                        "scenarios": [
                            "SCEN1",
                            "SCEN2",
                            "SCEN3",
                            "SCEN4",
                            "BAU",
                            "User defined",
                        ]
                    },
                ),
            ),
        ),
    )


@component.add(
    name="tonnes per kt",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_tonnes_per_kt"},
)
def tonnes_per_kt():
    return _ext_constant_tonnes_per_kt()


_ext_constant_tonnes_per_kt = ExtConstant(
    "inputs_EU.xlsx", "Constants", "G22", {}, _root, {}, "_ext_constant_tonnes_per_kt"
)


@component.add(
    name="Desired variation GDPpc",
    units="$/person",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "desired_variation_gdppc_per_scen": 1,
        "smooth_desired_variation_gdppc": 1,
    },
)
def desired_variation_gdppc():
    """
    Desired variation of GDP per capita.
    """
    return if_then_else(
        time() < 2015,
        lambda: desired_variation_gdppc_per_scen(),
        lambda: smooth_desired_variation_gdppc(),
    )


@component.add(
    name="smooth Desired variation GDPpc",
    units="$/person",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "p_customized_year_gdppc_evolution": 1,
        "desired_variation_gdppc_per_scen": 1,
        "smooth_desired_gdppc": 1,
    },
)
def smooth_desired_variation_gdppc():
    return if_then_else(
        time() < p_customized_year_gdppc_evolution(),
        lambda: desired_variation_gdppc_per_scen(),
        lambda: smooth_desired_gdppc(),
    )


@component.add(
    name="smooth Desired GDPpc",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_smooth_desired_gdppc": 1},
    other_deps={
        "_smooth_smooth_desired_gdppc": {
            "initial": {"desired_variation_gdppc_per_scen": 1},
            "step": {"desired_variation_gdppc_per_scen": 1},
        }
    },
)
def smooth_desired_gdppc():
    return _smooth_smooth_desired_gdppc()


_smooth_smooth_desired_gdppc = Smooth(
    lambda: desired_variation_gdppc_per_scen(),
    lambda: xr.DataArray(2, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    lambda: desired_variation_gdppc_per_scen(),
    lambda: 2,
    "_smooth_smooth_desired_gdppc",
)


@component.add(
    name="GDPpc variation asymptote scen",
    units="$/(Year*person)",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "gdppc_until_p_customized_year_gdppc_evolution": 1,
        "p_gdppc_asymptote": 1,
        "t_asymptote_gdppc": 2,
        "p_customized_year_gdppc_evolution": 1,
        "time": 1,
    },
)
def gdppc_variation_asymptote_scen():
    """
    Desired GDPpc variation to reach asymptote target.
    """
    return (
        (gdppc_until_p_customized_year_gdppc_evolution() - (p_gdppc_asymptote() - 1600))
        * (-1 / t_asymptote_gdppc())
        * np.exp(-(time() - p_customized_year_gdppc_evolution()) / t_asymptote_gdppc())
    )


@component.add(
    name="desired variation GDPpc per scen",
    units="$/person",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "variation_historic_gdppc": 1,
        "p_customized_year_gdppc_evolution": 1,
        "desired_gdppc": 4,
        "gdppc_variation_asymptote_scen": 1,
        "select_gdppc_evolution_input": 4,
        "annual_gdppc_growth_rate": 4,
    },
)
def desired_variation_gdppc_per_scen():
    """
    Desired GDPpc variation depending on the policy target selected by the user.
    """
    return if_then_else(
        time() < 2015,
        lambda: xr.DataArray(
            variation_historic_gdppc(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            np.logical_and(
                select_gdppc_evolution_input() == 3,
                time() < p_customized_year_gdppc_evolution(),
            ),
            lambda: desired_gdppc() * annual_gdppc_growth_rate(),
            lambda: if_then_else(
                select_gdppc_evolution_input() == 0,
                lambda: desired_gdppc() * annual_gdppc_growth_rate(),
                lambda: if_then_else(
                    select_gdppc_evolution_input() == 1,
                    lambda: desired_gdppc() * annual_gdppc_growth_rate(),
                    lambda: if_then_else(
                        select_gdppc_evolution_input() == 2,
                        lambda: desired_gdppc() * annual_gdppc_growth_rate(),
                        lambda: gdppc_variation_asymptote_scen(),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="pop variation",
    units="people/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "p_customized_year_pop_evolution": 1,
        "pop_variation_by_scen": 2,
        "pop_variation_delay_2_step": 1,
        "pop_variation_delay_5_step": 1,
        "pop_variation_delay_4_step": 1,
        "pop_variation_delay_1_step": 1,
        "pop_variation_delay_3_step": 1,
        "pop_variation_delay_6_step": 1,
    },
)
def pop_variation():
    """
    Population growth. (Historic data from 1990-2010; projection 2011-2100) 2011 UST$
    """
    return if_then_else(
        time() < p_customized_year_pop_evolution(),
        lambda: pop_variation_by_scen(),
        lambda: 0.05 * pop_variation_by_scen()
        + 0.05 * pop_variation_delay_1_step()
        + 0.1 * pop_variation_delay_2_step()
        + 0.15 * pop_variation_delay_3_step()
        + 0.2 * pop_variation_delay_4_step()
        + 0.3 * pop_variation_delay_5_step()
        + 0.15 * pop_variation_delay_6_step(),
    )


@component.add(
    name="smooth pop",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_smooth_pop": 1},
    other_deps={
        "_smooth_smooth_pop": {
            "initial": {"pop_variation_by_scen": 1},
            "step": {"pop_variation_by_scen": 1},
        }
    },
)
def smooth_pop():
    return _smooth_smooth_pop()


_smooth_smooth_pop = Smooth(
    lambda: pop_variation_by_scen(),
    lambda: xr.DataArray(4, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    lambda: pop_variation_by_scen(),
    lambda: 2,
    "_smooth_smooth_pop",
)


@component.add(
    name="smooth probe",
    units="people/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "p_customized_year_pop_evolution": 1,
        "pop_variation_by_scen": 1,
        "smooth_pop": 1,
    },
)
def smooth_probe():
    return if_then_else(
        time() < p_customized_year_pop_evolution(),
        lambda: pop_variation_by_scen(),
        lambda: smooth_pop(),
    )


@component.add(
    name="aux1 1 0",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux1_1_0": 1},
    other_deps={
        "_delayfixed_aux1_1_0": {
            "initial": {"time_step": 1},
            "step": {"gdppc_until_p_customized_year_gdppc_evolution": 1},
        }
    },
)
def aux1_1_0():
    """
    Auxiliary variable to estimate the energy losses due to climate change impacts in the year 2015.
    """
    return _delayfixed_aux1_1_0()


_delayfixed_aux1_1_0 = DelayFixed(
    lambda: gdppc_until_p_customized_year_gdppc_evolution(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux1_1_0",
)


@component.add(
    name="pop variation delay 5 step",
    units="people/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_pop_variation_delay_5_step": 1},
    other_deps={
        "_delayfixed_pop_variation_delay_5_step": {
            "initial": {"pop_variation_by_scen": 1},
            "step": {"pop_variation_by_scen": 1},
        }
    },
)
def pop_variation_delay_5_step():
    return _delayfixed_pop_variation_delay_5_step()


_delayfixed_pop_variation_delay_5_step = DelayFixed(
    lambda: pop_variation_by_scen(),
    lambda: 4,
    lambda: pop_variation_by_scen(),
    time_step,
    "_delayfixed_pop_variation_delay_5_step",
)


@component.add(
    name="pop variation delay 6 step",
    units="people/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_pop_variation_delay_6_step": 1},
    other_deps={
        "_delayfixed_pop_variation_delay_6_step": {
            "initial": {"pop_variation_by_scen": 1},
            "step": {"pop_variation_by_scen": 1},
        }
    },
)
def pop_variation_delay_6_step():
    return _delayfixed_pop_variation_delay_6_step()


_delayfixed_pop_variation_delay_6_step = DelayFixed(
    lambda: pop_variation_by_scen(),
    lambda: 5,
    lambda: pop_variation_by_scen(),
    time_step,
    "_delayfixed_pop_variation_delay_6_step",
)


@component.add(
    name="pop variation by scen",
    units="people/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "variation_historic_pop": 1,
        "select_population_evolution_input": 4,
        "population": 4,
        "p_customized_year_pop_evolution": 1,
        "pop_variation_asymptote_scen": 1,
        "annual_population_growth_rate": 4,
    },
)
def pop_variation_by_scen():
    """
    Population variation depending on the policy target selected by the user.
    """
    return if_then_else(
        time() < 2014,
        lambda: xr.DataArray(
            variation_historic_pop(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            np.logical_and(
                select_population_evolution_input() == 3,
                time() < p_customized_year_pop_evolution(),
            ),
            lambda: population() * annual_population_growth_rate(),
            lambda: if_then_else(
                select_population_evolution_input() == 0,
                lambda: population() * annual_population_growth_rate(),
                lambda: if_then_else(
                    select_population_evolution_input() == 2,
                    lambda: population() * annual_population_growth_rate(),
                    lambda: if_then_else(
                        select_population_evolution_input() == 3,
                        lambda: pop_variation_asymptote_scen(),
                        lambda: population() * annual_population_growth_rate(),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="P GDPpc asymptote",
    units="$/person",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_gdppc_asymptote"},
)
def p_gdppc_asymptote():
    """
    Policy target of GDPpc in target year to be approached smoothly-asymptotically.
    """
    return _ext_constant_p_gdppc_asymptote()


_ext_constant_p_gdppc_asymptote = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "G8",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_gdppc_asymptote",
)

_ext_constant_p_gdppc_asymptote.add(
    "inputs_EU.xlsx", "SCEN1", "G8", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_gdppc_asymptote.add(
    "inputs_EU.xlsx", "SCEN2", "G8", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_gdppc_asymptote.add(
    "inputs_EU.xlsx", "SCEN3", "G8", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_gdppc_asymptote.add(
    "inputs_EU.xlsx", "SCEN4", "G8", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_gdppc_asymptote.add(
    "inputs_EU.xlsx", "User defined", "G8", {"scenarios": ["User defined"]}
)


@component.add(
    name="Target year GDPpc asymptote",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_target_year_gdppc_asymptote"},
)
def target_year_gdppc_asymptote():
    return _ext_constant_target_year_gdppc_asymptote()


_ext_constant_target_year_gdppc_asymptote = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "I8",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_target_year_gdppc_asymptote",
)

_ext_constant_target_year_gdppc_asymptote.add(
    "inputs_EU.xlsx", "SCEN1", "I8", {"scenarios": ["SCEN1"]}
)

_ext_constant_target_year_gdppc_asymptote.add(
    "inputs_EU.xlsx", "SCEN2", "I8", {"scenarios": ["SCEN2"]}
)

_ext_constant_target_year_gdppc_asymptote.add(
    "inputs_EU.xlsx", "SCEN3", "I8", {"scenarios": ["SCEN3"]}
)

_ext_constant_target_year_gdppc_asymptote.add(
    "inputs_EU.xlsx", "SCEN4", "I8", {"scenarios": ["SCEN4"]}
)

_ext_constant_target_year_gdppc_asymptote.add(
    "inputs_EU.xlsx", "User defined", "I8", {"scenarios": ["User defined"]}
)


@component.add(
    name="pop variation delay 4 step",
    units="people/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_pop_variation_delay_4_step": 1},
    other_deps={
        "_delayfixed_pop_variation_delay_4_step": {
            "initial": {"pop_variation_by_scen": 1},
            "step": {"pop_variation_by_scen": 1},
        }
    },
)
def pop_variation_delay_4_step():
    return _delayfixed_pop_variation_delay_4_step()


_delayfixed_pop_variation_delay_4_step = DelayFixed(
    lambda: pop_variation_by_scen(),
    lambda: 3,
    lambda: pop_variation_by_scen(),
    time_step,
    "_delayfixed_pop_variation_delay_4_step",
)


@component.add(
    name="pop variation delay 1 step",
    units="people/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_pop_variation_delay_1_step": 1},
    other_deps={
        "_delayfixed_pop_variation_delay_1_step": {
            "initial": {"pop_variation_by_scen": 1},
            "step": {"pop_variation_by_scen": 1},
        }
    },
)
def pop_variation_delay_1_step():
    return _delayfixed_pop_variation_delay_1_step()


_delayfixed_pop_variation_delay_1_step = DelayFixed(
    lambda: pop_variation_by_scen(),
    lambda: 0.5,
    lambda: pop_variation_by_scen(),
    time_step,
    "_delayfixed_pop_variation_delay_1_step",
)


@component.add(
    name="pop variation delay 2 step",
    units="people/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_pop_variation_delay_2_step": 1},
    other_deps={
        "_delayfixed_pop_variation_delay_2_step": {
            "initial": {"pop_variation_by_scen": 1},
            "step": {"pop_variation_by_scen": 1},
        }
    },
)
def pop_variation_delay_2_step():
    return _delayfixed_pop_variation_delay_2_step()


_delayfixed_pop_variation_delay_2_step = DelayFixed(
    lambda: pop_variation_by_scen(),
    lambda: 1,
    lambda: pop_variation_by_scen(),
    time_step,
    "_delayfixed_pop_variation_delay_2_step",
)


@component.add(
    name="pop variation delay 3 step",
    units="people/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_pop_variation_delay_3_step": 1},
    other_deps={
        "_delayfixed_pop_variation_delay_3_step": {
            "initial": {"pop_variation_by_scen": 1},
            "step": {"pop_variation_by_scen": 1},
        }
    },
)
def pop_variation_delay_3_step():
    return _delayfixed_pop_variation_delay_3_step()


_delayfixed_pop_variation_delay_3_step = DelayFixed(
    lambda: pop_variation_by_scen(),
    lambda: 2,
    lambda: pop_variation_by_scen(),
    time_step,
    "_delayfixed_pop_variation_delay_3_step",
)


@component.add(
    name="GDPpc until P customized year GDPpc evolution",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "p_customized_year_gdppc_evolution": 1,
        "desired_gdppc": 1,
        "aux1_1_0": 1,
    },
)
def gdppc_until_p_customized_year_gdppc_evolution():
    """
    GDPpc until starting customized year of the policy target.
    """
    return if_then_else(
        time() < p_customized_year_gdppc_evolution(),
        lambda: desired_gdppc(),
        lambda: aux1_1_0(),
    )


@component.add(
    name="T asymptote GDPpc",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "target_year_gdppc_asymptote": 1,
        "p_customized_year_gdppc_evolution": 1,
    },
)
def t_asymptote_gdppc():
    return (target_year_gdppc_asymptote() - p_customized_year_gdppc_evolution()) / 3


@component.add(
    name="P pop asymptote millions",
    units="Mpeople",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_pop_asymptote_millions"},
)
def p_pop_asymptote_millions():
    """
    Policy target of population in target year to be approached smoothly-asymptotically.
    """
    return _ext_constant_p_pop_asymptote_millions()


_ext_constant_p_pop_asymptote_millions = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "G15",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_pop_asymptote_millions",
)

_ext_constant_p_pop_asymptote_millions.add(
    "inputs_EU.xlsx", "SCEN1", "G15", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_pop_asymptote_millions.add(
    "inputs_EU.xlsx", "SCEN2", "G15", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_pop_asymptote_millions.add(
    "inputs_EU.xlsx", "SCEN3", "G15", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_pop_asymptote_millions.add(
    "inputs_EU.xlsx", "SCEN4", "G15", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_pop_asymptote_millions.add(
    "inputs_EU.xlsx", "User defined", "G15", {"scenarios": ["User defined"]}
)


@component.add(
    name="pop asymptote",
    units="people",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"p_pop_asymptote_millions": 1},
)
def pop_asymptote():
    return p_pop_asymptote_millions() * 1000000.0 - 10000000.0


@component.add(
    name="aux1 1",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux1_1": 1},
    other_deps={
        "_delayfixed_aux1_1": {
            "initial": {"time_step": 1},
            "step": {"pop_until_p_customized_year_pop_evolution": 1},
        }
    },
)
def aux1_1():
    """
    Auxiliary variable to estimate the energy losses due to climate change impacts in the year 2015.
    """
    return _delayfixed_aux1_1()


_delayfixed_aux1_1 = DelayFixed(
    lambda: pop_until_p_customized_year_pop_evolution(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux1_1",
)


@component.add(
    name="pop variation asymptote scen",
    units="people/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pop_until_p_customized_year_pop_evolution": 1,
        "pop_asymptote": 1,
        "t_asymptote_pop": 2,
        "p_customized_year_pop_evolution": 1,
        "time": 1,
    },
)
def pop_variation_asymptote_scen():
    """
    Population variation to reach asymptote target.
    """
    return (
        (pop_until_p_customized_year_pop_evolution() - pop_asymptote())
        * (-1 / t_asymptote_pop())
        * np.exp(-(time() - p_customized_year_pop_evolution()) / t_asymptote_pop())
    )


@component.add(
    name="pop until P customized year pop evolution",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "p_customized_year_pop_evolution": 1,
        "population": 1,
        "aux1_1": 1,
    },
)
def pop_until_p_customized_year_pop_evolution():
    """
    Population until starting customized year of the policy target.
    """
    return if_then_else(
        time() < p_customized_year_pop_evolution(),
        lambda: population(),
        lambda: aux1_1(),
    )


@component.add(
    name="T asymptote pop",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"target_year_pop_asymptote": 1, "p_customized_year_pop_evolution": 1},
)
def t_asymptote_pop():
    return (target_year_pop_asymptote() - p_customized_year_pop_evolution()) / 3


@component.add(
    name="Target year pop asymptote",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_target_year_pop_asymptote"},
)
def target_year_pop_asymptote():
    """
    Year when population target reaches around 95% of the target population (asymptote).
    """
    return _ext_constant_target_year_pop_asymptote()


_ext_constant_target_year_pop_asymptote = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "I15",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_target_year_pop_asymptote",
)

_ext_constant_target_year_pop_asymptote.add(
    "inputs_EU.xlsx", "SCEN1", "I15", {"scenarios": ["SCEN1"]}
)

_ext_constant_target_year_pop_asymptote.add(
    "inputs_EU.xlsx", "SCEN2", "I15", {"scenarios": ["SCEN2"]}
)

_ext_constant_target_year_pop_asymptote.add(
    "inputs_EU.xlsx", "SCEN3", "I15", {"scenarios": ["SCEN3"]}
)

_ext_constant_target_year_pop_asymptote.add(
    "inputs_EU.xlsx", "SCEN4", "I15", {"scenarios": ["SCEN4"]}
)

_ext_constant_target_year_pop_asymptote.add(
    "inputs_EU.xlsx", "User defined", "I15", {"scenarios": ["User defined"]}
)


@component.add(
    name="variation exports demand",
    units="Mdollars/Year",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "exports_demand": 1,
        "real_exchange": 1,
        "variation_historic_exports_demand": 1,
        "time": 1,
        "beta_0_exp": 1,
        "real_demand_world": 1,
        "beta_2_exp": 2,
        "real_demand_world_next_step": 1,
        "beta_1_exp": 1,
        "beta_3_exp": 2,
        "real_exchange_next_step": 1,
    },
)
def variation_exports_demand():
    """
    Variation of exports by industrial sectors
    """
    return if_then_else(
        exports_demand() < 0,
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "sectors": _subscript_dict["sectors"],
            },
            ["scenarios", "sectors"],
        ),
        lambda: if_then_else(
            time() < 2009,
            lambda: variation_historic_exports_demand(),
            lambda: (
                (np.exp(beta_0_exp()) * np.exp(beta_1_exp()))
                * (
                    np.exp(beta_2_exp() * real_exchange_next_step())
                    * real_demand_world_next_step() ** beta_3_exp()
                    - np.exp(beta_2_exp() * real_exchange())
                    * real_demand_world() ** beta_3_exp()
                )
            ).transpose("scenarios", "sectors"),
        ),
    )


@component.add(
    name="variation GFCF",
    units="Mdollars/Year",
    subscripts=["scenarios", "sectors1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "gross_fixed_capital_formation": 35,
        "beta_1_gfcf": 34,
        "time": 35,
        "cc_total": 34,
        "beta_0_gfcf": 34,
        "beta_3_gfcf": 68,
        "cc_total_delayed": 34,
        "real_long_term_interest_rate": 34,
        "real_long_term_interest_rate_next_step": 34,
        "variation_historic_gfcf": 35,
        "beta_2_gfcf": 68,
        "lc_next_step": 1,
        "real_interest_rate_for_corporations": 1,
        "real_interest_rate_for_house_purchases_next_step": 1,
        "lc": 1,
        "beta_3_cons": 2,
        "real_interest_rate_for_corporations_next_step": 1,
        "beta_2_cons": 2,
        "beta_1_cons": 2,
        "real_interest_rate_for_house_purchases": 1,
        "beta_0_con": 1,
    },
)
def variation_gfcf():
    """
    Variation of domestic gross fixed capital formation by industrial sectors
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "sectors1": _subscript_dict["sectors1"],
        },
        ["scenarios", "sectors1"],
    )
    value.loc[:, ["Agriculture Hunting Forestry and Fishing"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Agriculture Hunting Forestry and Fishing"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Agriculture Hunting Forestry and Fishing"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(
                        float(
                            beta_1_gfcf().loc[
                                "Agriculture Hunting Forestry and Fishing"
                            ]
                        )
                    )
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Agriculture Hunting Forestry and Fishing"]}, 1)
        .values
    )
    value.loc[:, ["Mining and Quarrying"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Mining and Quarrying"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Mining and Quarrying"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(float(beta_1_gfcf().loc["Mining and Quarrying"]))
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Mining and Quarrying"]}, 1)
        .values
    )
    value.loc[:, ["Food Beverages and Tobacco"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Food Beverages and Tobacco"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Food Beverages and Tobacco"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(float(beta_1_gfcf().loc["Food Beverages and Tobacco"]))
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Food Beverages and Tobacco"]}, 1)
        .values
    )
    value.loc[:, ["Textiles and Textile Products"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Textiles and Textile Products"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Textiles and Textile Products"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(float(beta_1_gfcf().loc["Textiles and Textile Products"]))
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Textiles and Textile Products"]}, 1)
        .values
    )
    value.loc[:, ["Leather Leather and Footwear"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Leather Leather and Footwear"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Leather Leather and Footwear"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(float(beta_1_gfcf().loc["Leather Leather and Footwear"]))
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Leather Leather and Footwear"]}, 1)
        .values
    )
    value.loc[:, ["Wood and Products of Woood and Cork"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Wood and Products of Woood and Cork"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Wood and Products of Woood and Cork"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(
                        float(beta_1_gfcf().loc["Wood and Products of Woood and Cork"])
                    )
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Wood and Products of Woood and Cork"]}, 1)
        .values
    )
    value.loc[:, ["Pulp Paper Printing and Publishing"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Pulp Paper Printing and Publishing"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Pulp Paper Printing and Publishing"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(
                        float(beta_1_gfcf().loc["Pulp Paper Printing and Publishing"])
                    )
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Pulp Paper Printing and Publishing"]}, 1)
        .values
    )
    value.loc[:, ["Coke Refined Petroleum and Nuclear Fuel"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Coke Refined Petroleum and Nuclear Fuel"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Coke Refined Petroleum and Nuclear Fuel"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(
                        float(
                            beta_1_gfcf().loc["Coke Refined Petroleum and Nuclear Fuel"]
                        )
                    )
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Coke Refined Petroleum and Nuclear Fuel"]}, 1)
        .values
    )
    value.loc[:, ["Chemicals and Chemical products"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Chemicals and Chemical products"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Chemicals and Chemical products"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(
                        float(beta_1_gfcf().loc["Chemicals and Chemical products"])
                    )
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Chemicals and Chemical products"]}, 1)
        .values
    )
    value.loc[:, ["Rubber and Plastics"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Rubber and Plastics"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Rubber and Plastics"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(float(beta_1_gfcf().loc["Rubber and Plastics"]))
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Rubber and Plastics"]}, 1)
        .values
    )
    value.loc[:, ["Other Non Metalic Mineral"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Other Non Metalic Mineral"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Other Non Metalic Mineral"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(float(beta_1_gfcf().loc["Other Non Metalic Mineral"]))
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Other Non Metalic Mineral"]}, 1)
        .values
    )
    value.loc[:, ["Basic Metals and Fabricated Metal"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Basic Metals and Fabricated Metal"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Basic Metals and Fabricated Metal"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(
                        float(beta_1_gfcf().loc["Basic Metals and Fabricated Metal"])
                    )
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Basic Metals and Fabricated Metal"]}, 1)
        .values
    )
    value.loc[:, ["Machinery Nec"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Machinery Nec"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Machinery Nec"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(float(beta_1_gfcf().loc["Machinery Nec"]))
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Machinery Nec"]}, 1)
        .values
    )
    value.loc[:, ["Electrical and Optical Equipment"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Electrical and Optical Equipment"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Electrical and Optical Equipment"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(
                        float(beta_1_gfcf().loc["Electrical and Optical Equipment"])
                    )
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Electrical and Optical Equipment"]}, 1)
        .values
    )
    value.loc[:, ["Transport Equipment"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Transport Equipment"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Transport Equipment"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(float(beta_1_gfcf().loc["Transport Equipment"]))
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Transport Equipment"]}, 1)
        .values
    )
    value.loc[:, ["Manufacturing Nec Recycling"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Manufacturing Nec Recycling"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Manufacturing Nec Recycling"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(float(beta_1_gfcf().loc["Manufacturing Nec Recycling"]))
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Manufacturing Nec Recycling"]}, 1)
        .values
    )
    value.loc[:, ["Electricity Gas and Water Supply"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Electricity Gas and Water Supply"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Electricity Gas and Water Supply"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(
                        float(beta_1_gfcf().loc["Electricity Gas and Water Supply"])
                    )
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Electricity Gas and Water Supply"]}, 1)
        .values
    )
    value.loc[:, ["Construction"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Construction"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Construction"]
                .reset_coords(drop=True),
                lambda: np.exp(beta_0_con())
                * (
                    np.exp(
                        beta_1_cons() * real_interest_rate_for_corporations_next_step()
                    )
                    * np.exp(
                        beta_2_cons()
                        * real_interest_rate_for_house_purchases_next_step()
                    )
                    * lc_next_step() ** beta_3_cons()
                    - np.exp(beta_1_cons() * real_interest_rate_for_corporations())
                    * np.exp(beta_2_cons() * real_interest_rate_for_house_purchases())
                    * lc() ** beta_3_cons()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Construction"]}, 1)
        .values
    )
    value.loc[
        :,
        [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
    ] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[
                :,
                "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            ]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[
                    :,
                    "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
                ]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(
                        float(
                            beta_1_gfcf().loc[
                                "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
                            ]
                        )
                    )
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims(
            {
                "sectors1": [
                    "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
                ]
            },
            1,
        )
        .values
    )
    value.loc[
        :,
        [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
    ] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[
                :,
                "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            ]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[
                    :,
                    "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
                ]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(
                        float(
                            beta_1_gfcf().loc[
                                "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
                            ]
                        )
                    )
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims(
            {
                "sectors1": [
                    "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
                ]
            },
            1,
        )
        .values
    )
    value.loc[
        :,
        [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
    ] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[
                :,
                "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            ]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[
                    :,
                    "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
                ]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(
                        float(
                            beta_1_gfcf().loc[
                                "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
                            ]
                        )
                    )
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims(
            {
                "sectors1": [
                    "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
                ]
            },
            1,
        )
        .values
    )
    value.loc[:, ["Hotels and Restaurants"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Hotels and Restaurants"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Hotels and Restaurants"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(float(beta_1_gfcf().loc["Hotels and Restaurants"]))
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Hotels and Restaurants"]}, 1)
        .values
    )
    value.loc[:, ["Inland Transport"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Inland Transport"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Inland Transport"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(float(beta_1_gfcf().loc["Inland Transport"]))
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Inland Transport"]}, 1)
        .values
    )
    value.loc[:, ["Water Transport"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Water Transport"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Water Transport"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(float(beta_1_gfcf().loc["Water Transport"]))
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Water Transport"]}, 1)
        .values
    )
    value.loc[:, ["Air Transport"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Air Transport"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Air Transport"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(float(beta_1_gfcf().loc["Air Transport"]))
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Air Transport"]}, 1)
        .values
    )
    value.loc[
        :,
        [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
    ] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[
                :,
                "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            ]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[
                    :,
                    "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
                ]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(
                        float(
                            beta_1_gfcf().loc[
                                "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
                            ]
                        )
                    )
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims(
            {
                "sectors1": [
                    "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
                ]
            },
            1,
        )
        .values
    )
    value.loc[:, ["Post and Telecommunications"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Post and Telecommunications"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Post and Telecommunications"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(float(beta_1_gfcf().loc["Post and Telecommunications"]))
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Post and Telecommunications"]}, 1)
        .values
    )
    value.loc[:, ["Financial Intermedation"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Financial Intermedation"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Financial Intermedation"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(float(beta_1_gfcf().loc["Financial Intermedation"]))
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Financial Intermedation"]}, 1)
        .values
    )
    value.loc[:, ["Real Estate Activities"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Real Estate Activities"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Real Estate Activities"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(float(beta_1_gfcf().loc["Real Estate Activities"]))
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Real Estate Activities"]}, 1)
        .values
    )
    value.loc[:, ["Renting od MEq and Other Business Activities"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Renting od MEq and Other Business Activities"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Renting od MEq and Other Business Activities"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(
                        float(
                            beta_1_gfcf().loc[
                                "Renting od MEq and Other Business Activities"
                            ]
                        )
                    )
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Renting od MEq and Other Business Activities"]}, 1)
        .values
    )
    value.loc[:, ["Public Admin and Defence Compulsory Social Security"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Public Admin and Defence Compulsory Social Security"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Public Admin and Defence Compulsory Social Security"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(
                        float(
                            beta_1_gfcf().loc[
                                "Public Admin and Defence Compulsory Social Security"
                            ]
                        )
                    )
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims(
            {"sectors1": ["Public Admin and Defence Compulsory Social Security"]}, 1
        )
        .values
    )
    value.loc[:, ["Education"]] = (
        if_then_else(
            gross_fixed_capital_formation().loc[:, "Education"].reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Education"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(float(beta_1_gfcf().loc["Education"]))
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Education"]}, 1)
        .values
    )
    value.loc[:, ["Health and Social Work"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Health and Social Work"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Health and Social Work"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(float(beta_1_gfcf().loc["Health and Social Work"]))
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Health and Social Work"]}, 1)
        .values
    )
    value.loc[:, ["Other Community Social and Persona Services"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Other Community Social and Persona Services"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Other Community Social and Persona Services"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(
                        float(
                            beta_1_gfcf().loc[
                                "Other Community Social and Persona Services"
                            ]
                        )
                    )
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Other Community Social and Persona Services"]}, 1)
        .values
    )
    value.loc[:, ["Private Households with Employed Persons"]] = (
        if_then_else(
            gross_fixed_capital_formation()
            .loc[:, "Private Households with Employed Persons"]
            .reset_coords(drop=True)
            < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < 2009,
                lambda: variation_historic_gfcf()
                .loc[:, "Private Households with Employed Persons"]
                .reset_coords(drop=True),
                lambda: (
                    np.exp(beta_0_gfcf())
                    * np.exp(
                        float(
                            beta_1_gfcf().loc[
                                "Private Households with Employed Persons"
                            ]
                        )
                    )
                )
                * (
                    np.exp(beta_2_gfcf() * real_long_term_interest_rate_next_step())
                    * cc_total() ** beta_3_gfcf()
                    - np.exp(beta_2_gfcf() * real_long_term_interest_rate())
                    * cc_total_delayed() ** beta_3_gfcf()
                ),
            ),
        )
        .expand_dims({"sectors1": ["Private Households with Employed Persons"]}, 1)
        .values
    )
    return value


@component.add(
    name="beta 0 con",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_beta_0_con"},
)
def beta_0_con():
    return _ext_constant_beta_0_con()


_ext_constant_beta_0_con = ExtConstant(
    "inputs_EU.xlsx", "Economy", "AL330", {}, _root, {}, "_ext_constant_beta_0_con"
)


@component.add(
    name="beta 1 cons",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_beta_1_cons"},
)
def beta_1_cons():
    return _ext_constant_beta_1_cons()


_ext_constant_beta_1_cons = ExtConstant(
    "inputs_EU.xlsx", "Economy", "AN330", {}, _root, {}, "_ext_constant_beta_1_cons"
)


@component.add(
    name="beta 3 cons",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_beta_3_cons"},
)
def beta_3_cons():
    return _ext_constant_beta_3_cons()


_ext_constant_beta_3_cons = ExtConstant(
    "inputs_EU.xlsx", "Economy", "AR330", {}, _root, {}, "_ext_constant_beta_3_cons"
)


@component.add(
    name="beta 2 cons",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_beta_2_cons"},
)
def beta_2_cons():
    return _ext_constant_beta_2_cons()


_ext_constant_beta_2_cons = ExtConstant(
    "inputs_EU.xlsx", "Economy", "AP330", {}, _root, {}, "_ext_constant_beta_2_cons"
)


@component.add(
    name="variation historic real long term interest rate",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 2, "historic_real_long_term_interest_rate": 2},
)
def variation_historic_real_long_term_interest_rate():
    """
    Variation of historic Real Effective exchange Rate (Eurostats)
    """
    return historic_real_long_term_interest_rate(
        integer(time() + 1)
    ) - historic_real_long_term_interest_rate(integer(time()))


@component.add(
    name="variation historic real interest rate for house purchases",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 2, "historic_real_interest_rate_for_house_purchases": 2},
)
def variation_historic_real_interest_rate_for_house_purchases():
    """
    Variation of historic Real Effective exchange Rate (Eurostats)
    """
    return historic_real_interest_rate_for_house_purchases(
        integer(time() + 1)
    ) - historic_real_interest_rate_for_house_purchases(integer(time()))


@component.add(
    name="variation real interest rate for corporations",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"variation_historic_real_interest_rate_for_corporations": 1},
)
def variation_real_interest_rate_for_corporations():
    """
    Variation of Real Effective Exchange Rate
    """
    return variation_historic_real_interest_rate_for_corporations()


@component.add(
    name="variation real long term interest rate",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"variation_historic_real_long_term_interest_rate": 1},
)
def variation_real_long_term_interest_rate():
    """
    Variation of Real Effective Exchange Rate
    """
    return variation_historic_real_long_term_interest_rate()


@component.add(
    name="historic real interest rate for corporations",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_real_interest_rate_for_corporations",
        "__lookup__": "_ext_lookup_historic_real_interest_rate_for_corporations",
    },
)
def historic_real_interest_rate_for_corporations(x, final_subs=None):
    """
    Historic Real Effective Exchange Rate (Eurostats)
    """
    return _ext_lookup_historic_real_interest_rate_for_corporations(x, final_subs)


_ext_lookup_historic_real_interest_rate_for_corporations = ExtLookup(
    "inputs_EU.xlsx",
    "Economy",
    "343",
    "B345",
    {},
    _root,
    {},
    "_ext_lookup_historic_real_interest_rate_for_corporations",
)


@component.add(
    name="historic real interest rate for house purchases",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_real_interest_rate_for_house_purchases",
        "__lookup__": "_ext_lookup_historic_real_interest_rate_for_house_purchases",
    },
)
def historic_real_interest_rate_for_house_purchases(x, final_subs=None):
    """
    Historic Real Effective Exchange Rate (Eurostats)
    """
    return _ext_lookup_historic_real_interest_rate_for_house_purchases(x, final_subs)


_ext_lookup_historic_real_interest_rate_for_house_purchases = ExtLookup(
    "inputs_EU.xlsx",
    "Economy",
    "343",
    "B346",
    {},
    _root,
    {},
    "_ext_lookup_historic_real_interest_rate_for_house_purchases",
)


@component.add(
    name="historic real long term interest rate",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_real_long_term_interest_rate",
        "__lookup__": "_ext_lookup_historic_real_long_term_interest_rate",
    },
)
def historic_real_long_term_interest_rate(x, final_subs=None):
    """
    Historic Real Effective Exchange Rate (Eurostats)
    """
    return _ext_lookup_historic_real_long_term_interest_rate(x, final_subs)


_ext_lookup_historic_real_long_term_interest_rate = ExtLookup(
    "inputs_EU.xlsx",
    "Economy",
    "343",
    "B347",
    {},
    _root,
    {},
    "_ext_lookup_historic_real_long_term_interest_rate",
)


@component.add(
    name="LC",
    units="Mdollars",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_lc": 1},
    other_deps={
        "_integ_lc": {
            "initial": {"initial_lc_total": 1},
            "step": {"variation_lc": 1, "lc_not_covered": 1},
        }
    },
)
def lc():
    """
    Labour compensation
    """
    return _integ_lc()


_integ_lc = Integ(
    lambda: variation_lc() - lc_not_covered(),
    lambda: xr.DataArray(
        initial_lc_total(), {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    "_integ_lc",
)


@component.add(
    name="LC next step",
    units="Mdollars",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"lc": 1, "variation_lc": 1},
)
def lc_next_step():
    return lc() + variation_lc()


@component.add(
    name="LC not covered",
    units="Mdollars/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"demand_not_covered_total_fd": 1, "labour_share": 1},
)
def lc_not_covered():
    """
    Gap between labour compensation required and real labour compensation (after energy-economy feedback)
    """
    return demand_not_covered_total_fd() * labour_share()


@component.add(
    name="variation historic real interest rate for corporations",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 2, "historic_real_interest_rate_for_corporations": 2},
)
def variation_historic_real_interest_rate_for_corporations():
    """
    Variation of historic Real Effective exchange Rate (Eurostats)
    """
    return historic_real_interest_rate_for_corporations(
        integer(time() + 1)
    ) - historic_real_interest_rate_for_corporations(integer(time()))


@component.add(
    name="real long term interest rate",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_real_long_term_interest_rate": 1},
    other_deps={
        "_integ_real_long_term_interest_rate": {
            "initial": {},
            "step": {"variation_real_long_term_interest_rate": 1},
        }
    },
)
def real_long_term_interest_rate():
    """
    Real Effective Exchange Rate
    """
    return _integ_real_long_term_interest_rate()


_integ_real_long_term_interest_rate = Integ(
    lambda: variation_real_long_term_interest_rate(),
    lambda: 2.616,
    "_integ_real_long_term_interest_rate",
)


@component.add(
    name="beta 4 exp",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_beta_4_exp"},
)
def beta_4_exp():
    return _ext_constant_beta_4_exp()


_ext_constant_beta_4_exp = ExtConstant(
    "inputs_EU.xlsx", "Economy", "I329", {}, _root, {}, "_ext_constant_beta_4_exp"
)


@component.add(
    name="variation real interest rate for house purchases",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"variation_historic_real_interest_rate_for_house_purchases": 1},
)
def variation_real_interest_rate_for_house_purchases():
    """
    Variation of Real Effective Exchange Rate
    """
    return variation_historic_real_interest_rate_for_house_purchases()


@component.add(
    name="real interest rate for house purchases",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_real_interest_rate_for_house_purchases": 1},
    other_deps={
        "_integ_real_interest_rate_for_house_purchases": {
            "initial": {},
            "step": {"variation_real_interest_rate_for_house_purchases": 1},
        }
    },
)
def real_interest_rate_for_house_purchases():
    """
    Real Effective Exchange Rate
    """
    return _integ_real_interest_rate_for_house_purchases()


_integ_real_interest_rate_for_house_purchases = Integ(
    lambda: variation_real_interest_rate_for_house_purchases(),
    lambda: 6.49,
    "_integ_real_interest_rate_for_house_purchases",
)


@component.add(
    name="real interest rate for corporations next step",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_interest_rate_for_corporations": 1,
        "variation_real_interest_rate_for_corporations": 1,
    },
)
def real_interest_rate_for_corporations_next_step():
    return (
        real_interest_rate_for_corporations()
        + variation_real_interest_rate_for_corporations()
    )


@component.add(
    name="real long term interest rate next step",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_long_term_interest_rate": 1,
        "variation_real_long_term_interest_rate": 1,
    },
)
def real_long_term_interest_rate_next_step():
    return real_long_term_interest_rate() + variation_real_long_term_interest_rate()


@component.add(
    name="real interest rate for house purchases next step",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_interest_rate_for_house_purchases": 1,
        "variation_real_interest_rate_for_house_purchases": 1,
    },
)
def real_interest_rate_for_house_purchases_next_step():
    return (
        real_interest_rate_for_house_purchases()
        + variation_real_interest_rate_for_house_purchases()
    )


@component.add(
    name="variation household demand",
    units="Mdollars/Year",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "variation_historic_demand": 1,
        "lc_next_step": 1,
        "cc_next_step": 1,
        "cc_total": 1,
        "lc": 1,
        "bet_0_hh": 1,
        "beta_1_hh": 1,
        "beta_2_hh": 2,
        "beta_3_hh": 2,
    },
)
def variation_household_demand():
    """
    Variation of final demand by households by industrial sectors
    """
    return if_then_else(
        time() < 2009,
        lambda: variation_historic_demand(),
        lambda: (
            np.exp(bet_0_hh())
            * np.exp(beta_1_hh())
            * (
                lc_next_step() ** beta_2_hh() * cc_next_step() ** beta_3_hh()
                - lc() ** beta_2_hh() * cc_total() ** beta_3_hh()
            )
        ).transpose("scenarios", "sectors"),
    )


@component.add(
    name="real interest rate for corporations",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_real_interest_rate_for_corporations": 1},
    other_deps={
        "_integ_real_interest_rate_for_corporations": {
            "initial": {},
            "step": {"variation_real_interest_rate_for_corporations": 1},
        }
    },
)
def real_interest_rate_for_corporations():
    """
    Real Effective Exchange Rate
    """
    return _integ_real_interest_rate_for_corporations()


_integ_real_interest_rate_for_corporations = Integ(
    lambda: variation_real_interest_rate_for_corporations(),
    lambda: 5.58,
    "_integ_real_interest_rate_for_corporations",
)


@component.add(
    name="PED2",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_solids": 1, "transformation_ff_losses_ej": 1},
)
def ped2():
    return ped_solids() - transformation_ff_losses_ej().loc[:, "solids"].reset_coords(
        drop=True
    )


@component.add(
    name="Transformation FF losses EJ",
    subscripts=["scenarios", "final sources1"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_fossil_fuel_extraction_delayed": 2,
        "historic_share_of_transformation_losses_vs_extraction": 2,
        "transformation_ff_losses_ej": 1,
        "ratio_gain_gas_vs_lose_solids_in_tranf_processes": 1,
    },
)
def transformation_ff_losses_ej():
    """
    Losses in transformation processes of each fossil fuel
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "final sources1": _subscript_dict["final sources1"],
        },
        ["scenarios", "final sources1"],
    )
    value.loc[:, ["liquids"]] = (
        (
            pes_fossil_fuel_extraction_delayed()
            .loc[:, "liquids"]
            .reset_coords(drop=True)
            * float(
                historic_share_of_transformation_losses_vs_extraction().loc["liquids"]
            )
        )
        .expand_dims({"final sources1": ["liquids"]}, 1)
        .values
    )
    value.loc[:, ["solids"]] = (
        (
            pes_fossil_fuel_extraction_delayed()
            .loc[:, "solids"]
            .reset_coords(drop=True)
            * float(
                historic_share_of_transformation_losses_vs_extraction().loc["solids"]
            )
        )
        .expand_dims({"final sources1": ["solids"]}, 1)
        .values
    )
    value.loc[:, ["electricity"]] = 0
    value.loc[:, ["gases"]] = (
        (
            transformation_ff_losses_ej().loc[:, "solids"].reset_coords(drop=True)
            * ratio_gain_gas_vs_lose_solids_in_tranf_processes()
        )
        .expand_dims({"final sources1": ["gases"]}, 1)
        .values
    )
    value.loc[:, ["heat"]] = 0
    return value


@component.add(
    name="Other gases required",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "transformation_ff_losses_ej": 1,
        "energy_distr_losses_ff_ej": 1,
        "nonenergy_use_demand_by_final_fuel_ej": 1,
    },
)
def other_gases_required():
    return (
        transformation_ff_losses_ej().loc[:, "gases"].reset_coords(drop=True)
        + energy_distr_losses_ff_ej().loc[:, "gases"].reset_coords(drop=True)
        + nonenergy_use_demand_by_final_fuel_ej()
        .loc[:, "gases"]
        .reset_coords(drop=True)
    )


@component.add(
    name="Other solids required",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "transformation_ff_losses_ej": 1,
        "energy_distr_losses_ff_ej": 1,
        "nonenergy_use_demand_by_final_fuel_ej": 1,
    },
)
def other_solids_required():
    return (
        transformation_ff_losses_ej().loc[:, "solids"].reset_coords(drop=True)
        + energy_distr_losses_ff_ej().loc[:, "solids"].reset_coords(drop=True)
        + nonenergy_use_demand_by_final_fuel_ej()
        .loc[:, "solids"]
        .reset_coords(drop=True)
    )


@component.add(
    name="PES fossil fuel extraction",
    units="EJ/Year",
    subscripts=["scenarios", "final sources1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_total_oil_ej_eu": 1,
        "imports_eu_total_oil_from_row_ej": 1,
        "extraction_coal_ej_eu": 1,
        "imports_eu_coal_from_row_ej": 1,
        "imports_eu_nat_gas_from_row_ej": 1,
        "pes_nat_gas_eu": 1,
    },
)
def pes_fossil_fuel_extraction():
    """
    Annual extraction of fossil fuels
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "final sources1": _subscript_dict["final sources1"],
        },
        ["scenarios", "final sources1"],
    )
    value.loc[:, ["liquids"]] = (
        (pes_total_oil_ej_eu() + imports_eu_total_oil_from_row_ej())
        .expand_dims({"final sources1": ["liquids"]}, 1)
        .values
    )
    value.loc[:, ["solids"]] = (
        (extraction_coal_ej_eu() + imports_eu_coal_from_row_ej())
        .expand_dims({"final sources1": ["solids"]}, 1)
        .values
    )
    value.loc[:, ["gases"]] = (
        (pes_nat_gas_eu() + imports_eu_nat_gas_from_row_ej())
        .expand_dims({"final sources1": ["gases"]}, 1)
        .values
    )
    return value


@component.add(
    name='"urban land density t-1"',
    units="m2/person",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_urban_land_density_t1": 1},
    other_deps={
        "_delayfixed_urban_land_density_t1": {
            "initial": {},
            "step": {"urban_land_density": 1},
        }
    },
)
def urban_land_density_t1():
    """
    Policy target to set urban land density in a target year delayed 1 year.
    """
    return _delayfixed_urban_land_density_t1()


_delayfixed_urban_land_density_t1 = DelayFixed(
    lambda: urban_land_density(),
    lambda: 1,
    lambda: xr.DataArray(
        108.5, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    time_step,
    "_delayfixed_urban_land_density_t1",
)


@component.add(
    name="urban land density variation",
    units="m2/people/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"urban_land_density": 1, "urban_land_density_t1": 1},
)
def urban_land_density_variation():
    """
    Urban land density annual variation.
    """
    return urban_land_density() - urban_land_density_t1()


@component.add(
    name="Historic urban land density",
    units="m2/people",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 2, "historic_urban_land": 1, "mha_to_m2": 1, "historic_pop": 1},
)
def historic_urban_land_density():
    """
    Historic urban land density evolution (defined as urban land vs total population).
    """
    return historic_urban_land(time()) * mha_to_m2() / historic_pop(time())


@component.add(
    name="P variation primary forest",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_variation_primary_forest"},
)
def p_variation_primary_forest():
    """
    Policy target to increase/decrease the rate of expansion of primary forest.
    """
    return _ext_constant_p_variation_primary_forest()


_ext_constant_p_variation_primary_forest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C271",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_variation_primary_forest",
)

_ext_constant_p_variation_primary_forest.add(
    "inputs_EU.xlsx", "SCEN1", "C271", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_variation_primary_forest.add(
    "inputs_EU.xlsx", "SCEN2", "C271", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_variation_primary_forest.add(
    "inputs_EU.xlsx", "SCEN3", "C271", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_variation_primary_forest.add(
    "inputs_EU.xlsx", "SCEN4", "C271", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_variation_primary_forest.add(
    "inputs_EU.xlsx", "User defined", "C271", {"scenarios": ["User defined"]}
)


@component.add(
    name="Primary forests area",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_primary_forests_area": 1},
    other_deps={
        "_integ_primary_forests_area": {
            "initial": {"initial_primary_forest_area": 1},
            "step": {"available_to_primary_forest_rate": 1},
        }
    },
)
def primary_forests_area():
    """
    Primary forests area.
    """
    return _integ_primary_forests_area()


_integ_primary_forests_area = Integ(
    lambda: available_to_primary_forest_rate(),
    lambda: xr.DataArray(
        initial_primary_forest_area(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_primary_forests_area",
)


@component.add(
    name="\"'Available' forest area\"",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_available_forest_area": 1},
    other_deps={
        "_integ_available_forest_area": {
            "initial": {"initial_available_forest_area": 1},
            "step": {
                "deforestation_rate": 1,
                "forest_loss_to_sustain_agriculture": 1,
                "available_to_primary_forest_rate": 1,
            },
        }
    },
)
def available_forest_area():
    """
    Used forests, removing primary forest which are not used for wood extraction
    """
    return _integ_available_forest_area()


_integ_available_forest_area = Integ(
    lambda: -deforestation_rate()
    - forest_loss_to_sustain_agriculture()
    - available_to_primary_forest_rate(),
    lambda: xr.DataArray(
        initial_available_forest_area(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_available_forest_area",
)


@component.add(
    name="\"'Available' to primary forest rate\"",
    units="MHa/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "hist_variation_primary_forest": 1,
        "start_year_p_variation_primary_forest": 1,
        "p_variation_primary_forest": 1,
        "historic_av_variation_primary_forests_area": 1,
        "primary_forests_area": 2,
    },
)
def available_to_primary_forest_rate():
    """
    Rate of variation of the area occupied by primary forests.
    """
    return if_then_else(
        time() < 2014,
        lambda: xr.DataArray(
            hist_variation_primary_forest(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            time() < start_year_p_variation_primary_forest(),
            lambda: historic_av_variation_primary_forests_area()
            * primary_forests_area(),
            lambda: p_variation_primary_forest() * primary_forests_area(),
        ),
    )


@component.add(
    name="Start year P variation primary forest",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_start_year_p_variation_primary_forest"},
)
def start_year_p_variation_primary_forest():
    """
    Start year of the policy target to increase primary forests area.
    """
    return _ext_constant_start_year_p_variation_primary_forest()


_ext_constant_start_year_p_variation_primary_forest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E271",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_year_p_variation_primary_forest",
)

_ext_constant_start_year_p_variation_primary_forest.add(
    "inputs_EU.xlsx", "SCEN1", "E271", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_year_p_variation_primary_forest.add(
    "inputs_EU.xlsx", "SCEN2", "E271", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_year_p_variation_primary_forest.add(
    "inputs_EU.xlsx", "SCEN3", "E271", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_year_p_variation_primary_forest.add(
    "inputs_EU.xlsx", "SCEN4", "E271", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_year_p_variation_primary_forest.add(
    "inputs_EU.xlsx", "User defined", "E271", {"scenarios": ["User defined"]}
)


@component.add(
    name="Mha to m2",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_mha_to_m2"},
)
def mha_to_m2():
    """
    Conversion from Mha to m2.
    """
    return _ext_constant_mha_to_m2()


_ext_constant_mha_to_m2 = ExtConstant(
    "inputs_EU.xlsx", "Constants", "G21", {}, _root, {}, "_ext_constant_mha_to_m2"
)


@component.add(
    name="urban land density",
    units="m2/people",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 4,
        "historic_urban_land_density": 4,
        "time_dmnl": 1,
        "target_year_p_urban_land_density": 2,
        "start_year_p_urban_land_density": 3,
        "p_urban_land_density": 2,
    },
)
def urban_land_density():
    """
    Urban land density evolution as a result of the application of a policy target.
    """
    return if_then_else(
        time() < 2015,
        lambda: xr.DataArray(
            historic_urban_land_density(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            time() < start_year_p_urban_land_density(),
            lambda: xr.DataArray(
                historic_urban_land_density(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                time() < target_year_p_urban_land_density(),
                lambda: historic_urban_land_density()
                + (p_urban_land_density() - historic_urban_land_density())
                * (time_dmnl(time()) - start_year_p_urban_land_density())
                / (
                    target_year_p_urban_land_density()
                    - start_year_p_urban_land_density()
                ),
                lambda: p_urban_land_density(),
            ),
        ),
    )


@component.add(
    name="Start year P urban land density",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_start_year_p_urban_land_density"},
)
def start_year_p_urban_land_density():
    """
    Start year of the policy target to modify urban land density.
    """
    return _ext_constant_start_year_p_urban_land_density()


_ext_constant_start_year_p_urban_land_density = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C275",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_year_p_urban_land_density",
)

_ext_constant_start_year_p_urban_land_density.add(
    "inputs_EU.xlsx", "SCEN1", "C275", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_year_p_urban_land_density.add(
    "inputs_EU.xlsx", "SCEN2", "C275", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_year_p_urban_land_density.add(
    "inputs_EU.xlsx", "SCEN3", "C275", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_year_p_urban_land_density.add(
    "inputs_EU.xlsx", "SCEN4", "C275", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_year_p_urban_land_density.add(
    "inputs_EU.xlsx", "User defined", "C275", {"scenarios": ["User defined"]}
)


@component.add(
    name="forest extraction EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "available_forest_area": 1,
        "p_minimum_forest": 1,
        "forest_extraction_per_ha": 1,
        "p_forest_overexplotation": 1,
        "total_demand_forest_biomass_ej": 1,
        "max_sustainable_forest_extraction_ej": 1,
    },
)
def forest_extraction_ej():
    """
    Forest extration of all kinds of products. If the total demand of forest is greater than sustainable potential multiplied by the overxplotation accepted in policy P_forest_extraction the demand is cut to this amount. If the demand is lower than the sustainable*P_forest_extraction the extraction equals the demand
    """
    return if_then_else(
        available_forest_area()
        > float(p_minimum_forest().loc["BAU"]) * forest_extraction_per_ha(),
        lambda: np.minimum(
            total_demand_forest_biomass_ej(),
            max_sustainable_forest_extraction_ej() * (1 + p_forest_overexplotation()),
        ),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="Natural lands",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "available_land": 1,
        "primary_forests_area": 1,
        "available_forest_area": 1,
    },
)
def natural_lands():
    """
    Lands within EU which are not affected by human activities.
    """
    return available_land() + primary_forests_area() + available_forest_area() * 0


@component.add(
    name="Deforestation rate",
    units="MHa/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "available_forest_area": 1,
        "p_minimum_forest": 1,
        "unsustainable_loggin": 1,
    },
)
def deforestation_rate():
    """
    Forest land deforestation rate due to unsustainable loggin and converted to agriculture uses.
    """
    return if_then_else(
        available_forest_area() > float(p_minimum_forest().loc["BAU"]),
        lambda: unsustainable_loggin(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="Target year P urban land density",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_target_year_p_urban_land_density"},
)
def target_year_p_urban_land_density():
    """
    Target year of the policy target to modify urban land density.
    """
    return _ext_constant_target_year_p_urban_land_density()


_ext_constant_target_year_p_urban_land_density = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C276",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_target_year_p_urban_land_density",
)

_ext_constant_target_year_p_urban_land_density.add(
    "inputs_EU.xlsx", "SCEN1", "C276", {"scenarios": ["SCEN1"]}
)

_ext_constant_target_year_p_urban_land_density.add(
    "inputs_EU.xlsx", "SCEN2", "C276", {"scenarios": ["SCEN2"]}
)

_ext_constant_target_year_p_urban_land_density.add(
    "inputs_EU.xlsx", "SCEN3", "C276", {"scenarios": ["SCEN3"]}
)

_ext_constant_target_year_p_urban_land_density.add(
    "inputs_EU.xlsx", "SCEN4", "C276", {"scenarios": ["SCEN4"]}
)

_ext_constant_target_year_p_urban_land_density.add(
    "inputs_EU.xlsx", "User defined", "C276", {"scenarios": ["User defined"]}
)


@component.add(
    name="Historic av variation primary forests area",
    units="MHa/Year",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_historic_av_variation_primary_forests_area"
    },
)
def historic_av_variation_primary_forests_area():
    """
    Historic average variation (1990-2015) of primary forests area.
    """
    return _ext_constant_historic_av_variation_primary_forests_area()


_ext_constant_historic_av_variation_primary_forests_area = ExtConstant(
    "inputs_EU.xlsx",
    "Land",
    "AD24",
    {},
    _root,
    {},
    "_ext_constant_historic_av_variation_primary_forests_area",
)


@component.add(
    name="Total EU land endogenous",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "agricultural_land": 1,
        "compet_agricultural_land_for_biofuels": 1,
        "available_forest_area": 1,
        "land_for_solar_and_hydro_res": 1,
        "marginal_land_for_biofuels": 1,
        "permanent_snowsglaciers_area": 1,
        "primary_forests_area": 1,
        "urban_land": 1,
        "available_land": 1,
    },
)
def total_eu_land_endogenous():
    return (
        agricultural_land()
        + compet_agricultural_land_for_biofuels()
        + available_forest_area()
        + land_for_solar_and_hydro_res()
        + marginal_land_for_biofuels()
        + permanent_snowsglaciers_area()
        + primary_forests_area()
        + urban_land()
        + available_land()
    )


@component.add(
    name="consum wood products EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "demand_wood_products_ej": 1,
        "consum_forest_energy_traditional_ej": 1,
        "forest_consumption_ej": 1,
    },
)
def consum_wood_products_ej():
    """
    Priority to energy uses Part of the forest biomass extration that goes into non energy uses. P wood/energy uses divides the possible extration into the two uses. Traditional uses are not restricted
    """
    return np.minimum(
        demand_wood_products_ej(),
        forest_consumption_ej() - consum_forest_energy_traditional_ej(),
    )


@component.add(
    name="share imports EU NRE from RoW vs world extraction",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_imports_eu_nre_from_row": 1, "total_extraction_nre_ej_world": 1},
)
def share_imports_eu_nre_from_row_vs_world_extraction():
    return total_imports_eu_nre_from_row() / total_extraction_nre_ej_world()


@component.add(
    name="share imports EU NRE vs TPEC",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_imports_eu_nre_from_row": 1, "tpes_ej": 1},
)
def share_imports_eu_nre_vs_tpec():
    return total_imports_eu_nre_from_row() / tpes_ej()


@component.add(
    name="initial agricultural area",
    units="MHa",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_agricultural_area"},
)
def initial_agricultural_area():
    return _ext_constant_initial_agricultural_area()


_ext_constant_initial_agricultural_area = ExtConstant(
    "inputs_EU.xlsx",
    "Land",
    "H23",
    {},
    _root,
    {},
    "_ext_constant_initial_agricultural_area",
)


@component.add(
    name="Total extraction NRE EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Data",
    comp_subtype="Normal",
    depends_on={"time": 1, "__data__": "_data_total_extraction_nre_ej"},
)
def total_extraction_nre_ej():
    """
    Global total non-renewable primary energy extraction. Source: global model.
    """
    return _data_total_extraction_nre_ej(time())


_data_total_extraction_nre_ej = TabData(
    "Total extraction NRE EJ",
    "total_extraction_nre_ej",
    {"scenarios": _subscript_dict["scenarios"]},
    "interpolate",
)


@component.add(
    name="Total extraction NRE EJ World",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_extraction_nre_ej": 1},
)
def total_extraction_nre_ej_world():
    """
    Global total non-renewable primary energy extraction. Source: global model.
    """
    return total_extraction_nre_ej()


@component.add(
    name='"ratio Power Plants, Energy Conversion, Extraction, and Distribution vs total CH4 emissions"',
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def ratio_power_plants_energy_conversion_extraction_and_distribution_vs_total_ch4_emissions():
    return 0.2752


@component.add(
    name='"1 to M"',
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_nvs_1_to_m"},
)
def nvs_1_to_m():
    return _ext_constant_nvs_1_to_m()


_ext_constant_nvs_1_to_m = ExtConstant(
    "inputs_EU.xlsx", "Constants", "G20", {}, _root, {}, "_ext_constant_nvs_1_to_m"
)


@component.add(
    name="EU forest energy imports from RoW",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_demand_forest_biomass_ej": 1, "forest_extraction_ej": 1},
)
def eu_forest_energy_imports_from_row():
    """
    EU imports of wood from RoW.
    """
    return total_demand_forest_biomass_ej() - forest_extraction_ej()


@component.add(
    name="Growing stock forest per Ha",
    units="m3/Ha",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_growing_stock_forest_per_ha"},
)
def growing_stock_forest_per_ha():
    """
    Hectares of forest lost per m3 of unsustainable wood extraction, based on stock per extraction ratios, source FAO2015 129m3/Ha for the world.
    """
    return _ext_constant_growing_stock_forest_per_ha()


_ext_constant_growing_stock_forest_per_ha = ExtConstant(
    "inputs_EU.xlsx",
    "Land",
    "C5",
    {},
    _root,
    {},
    "_ext_constant_growing_stock_forest_per_ha",
)


@component.add(
    name="forest stock ratio",
    units="MHa/EJ",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "growing_stock_forest_per_ha": 1,
        "nvs_1_to_m": 1,
        "wood_energy_density": 1,
    },
)
def forest_stock_ratio():
    """
    Forest stock ratio.
    """
    return 1 / (growing_stock_forest_per_ha() * nvs_1_to_m() * wood_energy_density())


@component.add(
    name="Forest loss to sustain agriculture",
    units="MHa/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "aux_reach_available_land": 1,
        "agricultural_land_until_2015": 1,
        "agricultural_land": 1,
    },
)
def forest_loss_to_sustain_agriculture():
    """
    Forest loss rate to maintain the area dedicated to agriculture in EU in the year 2015.
    """
    return if_then_else(
        aux_reach_available_land() < 1,
        lambda: agricultural_land_until_2015() - agricultural_land(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="forest consumption EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"forest_extraction_ej": 1, "eu_forest_energy_imports_from_row": 1},
)
def forest_consumption_ej():
    """
    EU forest consumption.
    """
    return forest_extraction_ej() + eu_forest_energy_imports_from_row()


@component.add(
    name="consum forest energy non traditional EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "demand_forest_energy_non_tradition_ej": 1,
        "forest_consumption_ej": 1,
        "consum_forest_energy_traditional_ej": 1,
        "consum_wood_products_ej": 1,
    },
)
def consum_forest_energy_non_traditional_ej():
    """
    Part of the forest biomass extration that goes into non energy uses. P wood-energy uses divides the possible extration into the two uses. Traditional biomass is not restricted
    """
    return np.minimum(
        demand_forest_energy_non_tradition_ej(),
        forest_consumption_ej()
        - consum_forest_energy_traditional_ej()
        - consum_wood_products_ej(),
    )


@component.add(
    name="urban land rate",
    units="MHa/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "hist_variation_urban_land": 1,
        "urban_land_density_variation": 1,
        "pop_variation": 1,
    },
)
def urban_land_rate():
    """
    Rate of urban surface rate.
    """
    return if_then_else(
        time() < 2014,
        lambda: xr.DataArray(
            hist_variation_urban_land(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: 0.0478639 * urban_land_density_variation()
        + 1.99746 * 1e-08 * pop_variation(),
    )


@component.add(
    name="Total land occupied by RES",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "compet_agricultural_land_for_biofuels": 1,
        "land_for_solar_and_hydro_res": 1,
        "marginal_land_for_biofuels": 1,
    },
)
def total_land_occupied_by_res():
    """
    Total land occupied by RES (biofuel crops and RES elec PV on land, CSP and hydro).
    """
    return (
        compet_agricultural_land_for_biofuels()
        + land_for_solar_and_hydro_res()
        + marginal_land_for_biofuels()
    )


@component.add(
    name="consum forest energy traditional EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"forest_consumption_ej": 1, "demand_forest_energy_traditional_ej": 1},
)
def consum_forest_energy_traditional_ej():
    """
    Consumption of traditional biomass. Traditional wood extraction is got priority over other uses but is limited by forest extraction, which depends on the stock and the policies taken to protect forests.
    """
    return np.minimum(forest_consumption_ej(), demand_forest_energy_traditional_ej())


@component.add(
    name="Total imports EU NRE from Row",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "extraction_uranium_row": 1,
        "imports_eu_coal_from_row_ej": 1,
        "imports_eu_nat_gas_from_row_ej": 1,
        "imports_eu_total_oil_from_row_ej": 1,
    },
)
def total_imports_eu_nre_from_row():
    return (
        extraction_uranium_row()
        + imports_eu_coal_from_row_ej()
        + imports_eu_nat_gas_from_row_ej()
        + imports_eu_total_oil_from_row_ej()
    )


@component.add(
    name="CH4 anthro emissions",
    units="Mton/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_ch4_emissions_fossil_fuels": 1,
        "choose_rcp": 3,
        "ratio_power_plants_energy_conversion_extraction_and_distribution_vs_total_ch4_emissions": 1,
        "ch4_anthro_emissions_rcp": 4,
    },
)
def ch4_anthro_emissions():
    """
    "Representative Concentration Pathways" (RCPs, see http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare) except Power Plants, Energy Conversion, Extraction, and Distribution. Corrected with endogenous data "Total CH4 emissions fossil fuels" Choose RCP: 1. RCP 2.6 2. RCP 4.5 3. RCP 6.0 4. RCP 8.5
    """
    return total_ch4_emissions_fossil_fuels() + if_then_else(
        choose_rcp() == 1,
        lambda: xr.DataArray(
            float(ch4_anthro_emissions_rcp().loc["RCP26"]),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            choose_rcp() == 2,
            lambda: xr.DataArray(
                float(ch4_anthro_emissions_rcp().loc["RCP45"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                choose_rcp() == 3,
                lambda: xr.DataArray(
                    float(ch4_anthro_emissions_rcp().loc["RCP60"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: xr.DataArray(
                    float(ch4_anthro_emissions_rcp().loc["RCP85"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
            ),
        ),
    ) * (
        1
        - ratio_power_plants_energy_conversion_extraction_and_distribution_vs_total_ch4_emissions()
    )


@component.add(
    name='"PE supply RES non-Elec EJ"',
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pe_supply_from_res_nonelec_without_trad_bioe_ej": 1,
        "pe_traditional_biomass_ej_delayed_1yr": 1,
        "losses_in_charcoal_plants_ej": 1,
        "modern_solids_bioe_demand_households": 1,
    },
)
def pe_supply_res_nonelec_ej():
    """
    Primary energy (non electricity) from RES, including traditional biomass.
    """
    return (
        pe_supply_from_res_nonelec_without_trad_bioe_ej()
        + pe_traditional_biomass_ej_delayed_1yr()
        + losses_in_charcoal_plants_ej()
        + modern_solids_bioe_demand_households()
    )


@component.add(
    name="PED coal EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ped_solids": 1,
        "modern_solids_bioe_demand_households": 1,
        "losses_in_charcoal_plants_ej": 1,
        "pes_waste_for_tfc": 1,
        "pe_traditional_biomass_ej_delayed_1yr": 1,
        "pes_peat_ej": 1,
    },
)
def ped_coal_ej():
    return np.maximum(
        0,
        ped_solids()
        - (
            pe_traditional_biomass_ej_delayed_1yr()
            + modern_solids_bioe_demand_households()
            + pes_peat_ej()
            + pes_waste_for_tfc()
            + losses_in_charcoal_plants_ej()
        ),
    )


@component.add(
    name="real FE consumption solids EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "extraction_coal_ej_eu": 1,
        "imports_eu_coal_from_row_ej": 1,
        "modern_solids_bioe_demand_households": 1,
        "losses_in_charcoal_plants_ej": 1,
        "pes_waste_for_tfc": 1,
        "pe_traditional_biomass_ej_delayed_1yr": 1,
        "pes_peat_ej": 1,
        "ped_coal_for_ctl_ej": 1,
        "other_solids_required": 1,
        "share_solids_for_final_energy": 1,
    },
)
def real_fe_consumption_solids_ej():
    """
    Real final energy consumption by solids after accounting for energy availability.
    """
    return (
        extraction_coal_ej_eu()
        + imports_eu_coal_from_row_ej()
        + (
            modern_solids_bioe_demand_households()
            + pe_traditional_biomass_ej_delayed_1yr()
            + pes_waste_for_tfc()
            + pes_peat_ej()
            + losses_in_charcoal_plants_ej()
        )
        - ped_coal_for_ctl_ej()
        - other_solids_required()
    ) * share_solids_for_final_energy()


@component.add(
    name="PES solids",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pec_coal": 1,
        "pe_traditional_biomass_ej_delayed_1yr": 1,
        "pes_peat_ej": 1,
        "pes_waste_for_tfc": 1,
        "losses_in_charcoal_plants_ej": 1,
        "modern_solids_bioe_demand_households": 1,
    },
)
def pes_solids():
    """
    Primary energy supply solids.
    """
    return (
        pec_coal()
        + pe_traditional_biomass_ej_delayed_1yr()
        + pes_peat_ej()
        + pes_waste_for_tfc()
        + losses_in_charcoal_plants_ej()
        + modern_solids_bioe_demand_households()
    )


@component.add(
    name="TFEC RES EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_tot_generation_all_res_elec_ej": 1,
        "fes_res_for_heat_ej": 1,
        "pe_traditional_biomass_consum_ej": 1,
        "fes_total_biofuels_production_ej": 1,
        "pes_biogas_for_tfc": 1,
        "modern_solids_bioe_demand_households": 1,
    },
)
def tfec_res_ej():
    """
    Total final energy consumption from RES.
    """
    return (
        fe_tot_generation_all_res_elec_ej()
        + fes_res_for_heat_ej()
        + pe_traditional_biomass_consum_ej()
        + fes_total_biofuels_production_ej()
        + pes_biogas_for_tfc()
        + modern_solids_bioe_demand_households()
    )


@component.add(
    name="variation energy intensity of households transport",
    units="EJ/T$/yr",
    subscripts=["scenarios", "final sources1"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 3,
        "var_ih_liq2": 1,
        "aux_reach_zero": 3,
        "var_ih_gas2": 1,
        "var_ih_e2": 1,
    },
)
def variation_energy_intensity_of_households_transport():
    """
    Variation of intensity of households due to change of vehicles
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "final sources1": _subscript_dict["final sources1"],
        },
        ["scenarios", "final sources1"],
    )
    value.loc[:, ["liquids"]] = (
        (
            if_then_else(
                time() < 2009,
                lambda: xr.DataArray(
                    0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
                ),
                lambda: var_ih_liq2(),
            )
            * aux_reach_zero()
        )
        .expand_dims({"final sources1": ["liquids"]}, 1)
        .values
    )
    value.loc[:, ["solids"]] = 0
    value.loc[:, ["gases"]] = (
        (
            if_then_else(
                time() > 2009,
                lambda: var_ih_gas2(),
                lambda: xr.DataArray(
                    0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
                ),
            )
            * aux_reach_zero()
        )
        .expand_dims({"final sources1": ["gases"]}, 1)
        .values
    )
    value.loc[:, ["electricity"]] = (
        (
            if_then_else(
                time() > 2009,
                lambda: var_ih_e2(),
                lambda: xr.DataArray(
                    0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
                ),
            )
            * aux_reach_zero()
        )
        .expand_dims({"final sources1": ["electricity"]}, 1)
        .values
    )
    value.loc[:, ["heat"]] = 0
    return value


@component.add(
    name="Liq 2w",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_liq_2w"},
)
def liq_2w():
    """
    Initial liquids used by 2 wheelers in the year of start of policies (2015 default)
    """
    return _ext_constant_liq_2w()


_ext_constant_liq_2w = ExtConstant(
    "inputs_EU.xlsx", "Transportation", "B59", {}, _root, {}, "_ext_constant_liq_2w"
)


@component.add(
    name="aux reach zero",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"energy_intensity_of_households_transport": 1},
)
def aux_reach_zero():
    return xr.DataArray(
        np.interp(
            energy_intensity_of_households_transport()
            .loc[:, "liquids"]
            .reset_coords(drop=True),
            [-1.0e-02, 0.0e00, 1.0e-08, 1.0e-06, 1.0e-02, 1.0e00, 1.0e02],
            [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
        ),
        {"scenarios": ["SCEN1", "SCEN2", "SCEN3", "SCEN4", "BAU", "User defined"]},
        ["scenarios"],
    )


@component.add(
    name="extraction conv oil EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rurr_conv_oil": 1,
        "time": 1,
        "unlimited_nre": 1,
        "max_extraction_conv_oil_ej": 1,
        "ped_domestic_eu_conv_oil_ej": 4,
        "unlimited_oil": 1,
    },
)
def extraction_conv_oil_ej():
    """
    Annual extraction of conventional oil.
    """
    return if_then_else(
        rurr_conv_oil() < 0,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            time() < 2016,
            lambda: ped_domestic_eu_conv_oil_ej(),
            lambda: if_then_else(
                unlimited_nre() == 1,
                lambda: ped_domestic_eu_conv_oil_ej(),
                lambda: if_then_else(
                    unlimited_oil() == 1,
                    lambda: ped_domestic_eu_conv_oil_ej(),
                    lambda: np.minimum(
                        ped_domestic_eu_conv_oil_ej(), max_extraction_conv_oil_ej()
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="extraction tot agg gas EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rurr_tot_agg_gas": 1,
        "max_extraction_tot_agg_gas_ej": 1,
        "time": 1,
        "unlimited_nre": 1,
        "unlimited_gas": 1,
        "ped_domestic_eu_total_natgas_ej": 4,
    },
)
def extraction_tot_agg_gas_ej():
    """
    Annual extraction of total aggregated natural gas.
    """
    return if_then_else(
        rurr_tot_agg_gas() < 0,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            time() < 2016,
            lambda: ped_domestic_eu_total_natgas_ej(),
            lambda: if_then_else(
                unlimited_nre() == 1,
                lambda: ped_domestic_eu_total_natgas_ej(),
                lambda: if_then_else(
                    unlimited_gas() == 1,
                    lambda: ped_domestic_eu_total_natgas_ej(),
                    lambda: np.minimum(
                        ped_domestic_eu_total_natgas_ej(),
                        max_extraction_tot_agg_gas_ej(),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="extraction tot agg oil EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rurr_tot_agg_oil": 1,
        "ped_domestic_eu_total_oil_ej": 4,
        "time": 1,
        "unlimited_nre": 1,
        "unlimited_oil": 1,
        "max_extraction_tot_agg_oil_ej": 1,
    },
)
def extraction_tot_agg_oil_ej():
    """
    Annual extraction of total aggregated oil.
    """
    return if_then_else(
        rurr_tot_agg_oil() < 0,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            time() < 2016,
            lambda: ped_domestic_eu_total_oil_ej(),
            lambda: if_then_else(
                unlimited_nre() == 1,
                lambda: ped_domestic_eu_total_oil_ej(),
                lambda: if_then_else(
                    unlimited_oil() == 1,
                    lambda: ped_domestic_eu_total_oil_ej(),
                    lambda: np.minimum(
                        ped_domestic_eu_total_oil_ej(), max_extraction_tot_agg_oil_ej()
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="Historic share net imports oil until 2016",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "extraction_oil_ej_world": 1,
        "historic_net_imports_oil_eu": 1,
        "aux25": 1,
    },
)
def historic_share_net_imports_oil_until_2016():
    return if_then_else(
        time() < 2016,
        lambda: zidz(historic_net_imports_oil_eu(), extraction_oil_ej_world()),
        lambda: aux25(),
    )


@component.add(
    name="aux25",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux25": 1},
    other_deps={
        "_delayfixed_aux25": {
            "initial": {"time_step": 1},
            "step": {"historic_share_net_imports_oil_until_2016": 1},
        }
    },
)
def aux25():
    return _delayfixed_aux25()


_delayfixed_aux25 = DelayFixed(
    lambda: historic_share_net_imports_oil_until_2016(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux25",
)


@component.add(
    name="extraction conv gas EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rurr_conv_gas": 1,
        "max_extraction_conv_gas_ej": 1,
        "ped_domestic_eu_conv_nat_gas_ej": 4,
        "time": 1,
        "unlimited_nre": 1,
        "unlimited_gas": 1,
    },
)
def extraction_conv_gas_ej():
    """
    Annual extraction of conventional gas. IF THEN ELSE(RURR coal[scenarios]<0,0, IF THEN ELSE(Time<2016, PED domestic EU coal EJ[scenarios], IF THEN ELSE("unlimited NRE?"[scenarios]=1, PED domestic EU coal EJ[scenarios], IF THEN ELSE("unlimited coal?"[scenarios]=1, PED domestic EU coal EJ[scenarios],MIN(PED domestic EU coal EJ[scenarios], max extraction coal EJ[scenarios])))))
    """
    return if_then_else(
        rurr_conv_gas() < 0,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            time() < 2016,
            lambda: ped_domestic_eu_conv_nat_gas_ej(),
            lambda: if_then_else(
                unlimited_nre() == 1,
                lambda: ped_domestic_eu_conv_nat_gas_ej(),
                lambda: if_then_else(
                    unlimited_gas() == 1,
                    lambda: ped_domestic_eu_conv_nat_gas_ej(),
                    lambda: np.minimum(
                        ped_domestic_eu_conv_nat_gas_ej(), max_extraction_conv_gas_ej()
                    ),
                ),
            ),
        ),
    )


@component.add(
    name='"PED domestic EU conv. nat. gas EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ped_nat_gas_ej": 1,
        "historic_share_conv_nat_gas_domestic_eu_extraction_until_2016": 1,
    },
)
def ped_domestic_eu_conv_nat_gas_ej():
    return (
        ped_nat_gas_ej()
        * historic_share_conv_nat_gas_domestic_eu_extraction_until_2016()
    )


@component.add(
    name='"Historic share net imports nat. gas until 2016"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "extraction_nat_gas_ej_world": 1,
        "historic_net_imports_nat_gas_eu": 1,
        "aux22": 1,
    },
)
def historic_share_net_imports_nat_gas_until_2016():
    return if_then_else(
        time() < 2016,
        lambda: zidz(historic_net_imports_nat_gas_eu(), extraction_nat_gas_ej_world()),
        lambda: aux22(),
    )


@component.add(
    name="aux22",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux22": 1},
    other_deps={
        "_delayfixed_aux22": {
            "initial": {"time_step": 1},
            "step": {"historic_share_net_imports_nat_gas_until_2016": 1},
        }
    },
)
def aux22():
    return _delayfixed_aux22()


_delayfixed_aux22 = DelayFixed(
    lambda: historic_share_net_imports_nat_gas_until_2016(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux22",
)


@component.add(
    name="aux20",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux20": 1},
    other_deps={
        "_delayfixed_aux20": {
            "initial": {"time_step": 1},
            "step": {
                "historic_share_conv_nat_gas_domestic_eu_extraction_until_2016": 1
            },
        }
    },
)
def aux20():
    return _delayfixed_aux20()


_delayfixed_aux20 = DelayFixed(
    lambda: historic_share_conv_nat_gas_domestic_eu_extraction_until_2016(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux20",
)


@component.add(
    name="Desired variation GDP",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "desired_gdppc": 2,
        "dollars_to_tdollars": 6,
        "variation_historic_gdppc_2": 2,
        "variation_pop2": 2,
        "population": 2,
        "pop_variation": 2,
        "desired_variation_gdppc": 2,
    },
)
def desired_variation_gdp():
    return if_then_else(
        time() < 2015,
        lambda: desired_gdppc() * variation_pop2() / dollars_to_tdollars()
        + variation_historic_gdppc_2() * population() / dollars_to_tdollars()
        + variation_historic_gdppc_2() * variation_pop2() / dollars_to_tdollars(),
        lambda: desired_gdppc() * pop_variation() / dollars_to_tdollars()
        + desired_variation_gdppc() * population() / dollars_to_tdollars()
        + desired_variation_gdppc() * pop_variation() / dollars_to_tdollars(),
    )


@component.add(
    name="variation pop2",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 3, "historic_pop": 2},
)
def variation_pop2():
    return if_then_else(
        time() < 2014,
        lambda: historic_pop(time() + 1) - historic_pop(time()),
        lambda: 0,
    )


@component.add(
    name="Desired annual total demand growth rate delayed 1 yr",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_desired_annual_total_demand_growth_rate_delayed_1_yr": 1},
    other_deps={
        "_delayfixed_desired_annual_total_demand_growth_rate_delayed_1_yr": {
            "initial": {},
            "step": {"desired_annual_total_demand_growth_rate": 1},
        }
    },
)
def desired_annual_total_demand_growth_rate_delayed_1_yr():
    """
    Lagged variation of final demand
    """
    return _delayfixed_desired_annual_total_demand_growth_rate_delayed_1_yr()


_delayfixed_desired_annual_total_demand_growth_rate_delayed_1_yr = DelayFixed(
    lambda: desired_annual_total_demand_growth_rate(),
    lambda: 1,
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_desired_annual_total_demand_growth_rate_delayed_1_yr",
)


@component.add(
    name="diff demand EU",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "desired_annual_total_demand_growth_rate_delayed_1_yr": 1,
        "real_demand_delayed_1yr": 1,
        "total_demand": 1,
    },
)
def diff_demand_eu():
    """
    Ratio between the desired GDP and the real GDP level after applying the demand function.
    """
    return if_then_else(
        time() < 2009,
        lambda: xr.DataArray(
            1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: (
            real_demand_delayed_1yr()
            * (1 + desired_annual_total_demand_growth_rate_delayed_1_yr())
        )
        / total_demand(),
    )


@component.add(
    name="variation historic gdppc 2",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 3, "historic_gdppc": 2},
)
def variation_historic_gdppc_2():
    return if_then_else(
        time() < 2015,
        lambda: historic_gdppc(time() + 1) - historic_gdppc(time()),
        lambda: 0,
    )


@component.add(
    name="Desire GDP next step",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"desired_gdp": 1, "desired_variation_gdp": 1},
)
def desire_gdp_next_step():
    return desired_gdp() + desired_variation_gdp()


@component.add(
    name="T hist inlandT",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def t_hist_inlandt():
    """
    Year used to calibrate the historical growth of vehicles, 2015
    """
    value = xr.DataArray(
        np.nan, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    )
    value.loc[["BAU"]] = 2015
    value.loc[["SCEN1"]] = 2015
    value.loc[["SCEN2"]] = 2015
    value.loc[["SCEN3"]] = 2015
    value.loc[["SCEN4"]] = 2015
    value.loc[["User defined"]] = 2015
    return value


@component.add(
    name="percent T veh Tini",
    units="Dmnl",
    subscripts=["scenarios", "vehicleT"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 6,
        "t_ini_hveh": 6,
        "aaux_tveh_ini": 6,
        "initial_percent_t_vehicles": 5,
    },
)
def percent_t_veh_tini():
    """
    percents in the year of beguining of policies of vehicles relative to each type
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "vehicleT": _subscript_dict["vehicleT"],
        },
        ["scenarios", "vehicleT"],
    )
    value.loc[["User defined"], :] = (
        if_then_else(
            time() < float(t_ini_hveh().loc["User defined"]),
            lambda: xr.DataArray(
                0, {"vehicleT": _subscript_dict["vehicleT"]}, ["vehicleT"]
            ),
            lambda: aaux_tveh_ini().loc["User defined", :].reset_coords(drop=True),
        )
        .expand_dims({"scenarios": ["User defined"]}, 0)
        .values
    )
    value.loc[["BAU"], :] = (
        if_then_else(
            time() < float(t_ini_hveh().loc["BAU"]),
            lambda: initial_percent_t_vehicles(),
            lambda: aaux_tveh_ini().loc["BAU", :].reset_coords(drop=True),
        )
        .expand_dims({"scenarios": ["BAU"]}, 0)
        .values
    )
    value.loc[["SCEN1"], :] = (
        if_then_else(
            time() < float(t_ini_hveh().loc["SCEN1"]),
            lambda: initial_percent_t_vehicles(),
            lambda: aaux_tveh_ini().loc["SCEN1", :].reset_coords(drop=True),
        )
        .expand_dims({"scenarios": ["SCEN1"]}, 0)
        .values
    )
    value.loc[["SCEN2"], :] = (
        if_then_else(
            time() < float(t_ini_hveh().loc["SCEN2"]),
            lambda: initial_percent_t_vehicles(),
            lambda: aaux_tveh_ini().loc["SCEN2", :].reset_coords(drop=True),
        )
        .expand_dims({"scenarios": ["SCEN2"]}, 0)
        .values
    )
    value.loc[["SCEN3"], :] = (
        if_then_else(
            time() < float(t_ini_hveh().loc["SCEN3"]),
            lambda: initial_percent_t_vehicles(),
            lambda: aaux_tveh_ini().loc["SCEN3", :].reset_coords(drop=True),
        )
        .expand_dims({"scenarios": ["SCEN3"]}, 0)
        .values
    )
    value.loc[["SCEN4"], :] = (
        if_then_else(
            time() < float(t_ini_hveh().loc["SCEN4"]),
            lambda: initial_percent_t_vehicles(),
            lambda: aaux_tveh_ini().loc["SCEN4", :].reset_coords(drop=True),
        )
        .expand_dims({"scenarios": ["SCEN4"]}, 0)
        .values
    )
    return value


@component.add(
    name="percent T vehicles",
    units="Dmnl",
    subscripts=["scenarios", "vehicleT"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_percent_t_vehicles": 1},
    other_deps={
        "_integ_percent_t_vehicles": {
            "initial": {"percent_tveh_1995": 1},
            "step": {"var_percent_t_vehicles": 1},
        }
    },
)
def percent_t_vehicles():
    """
    Percents of inland transport vehicles, each type relative to its own: heavy vehicles (%liq+%hib+%gas) add 1, light vehicles (%liq+%elec+%gas+%hib) add 1, bus (%liq+%elec+%gas+%hib) add 1 and trains ((%liq+%elec) add 1.
    """
    return _integ_percent_t_vehicles()


_integ_percent_t_vehicles = Integ(
    lambda: var_percent_t_vehicles(),
    lambda: percent_tveh_1995(),
    "_integ_percent_t_vehicles",
)


@component.add(
    name="aux hist Tveh",
    units="1/yr",
    subscripts=["scenarios", "vehicleT"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"hist_var_percent_tveh": 17},
)
def aux_hist_tveh():
    """
    auxiliar variable to set the variation of liquid vehicles
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "vehicleT": _subscript_dict["vehicleT"],
        },
        ["scenarios", "vehicleT"],
    )
    value.loc[:, ["HV liq"]] = (
        (
            -hist_var_percent_tveh().loc[:, "HV hib"].reset_coords(drop=True)
            - hist_var_percent_tveh().loc[:, "HV gas"].reset_coords(drop=True)
        )
        .expand_dims({"vehicleT": ["HV liq"]}, 1)
        .values
    )
    value.loc[:, ["HV hib"]] = (
        hist_var_percent_tveh()
        .loc[:, "HV hib"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["HV hib"]}, 1)
        .values
    )
    value.loc[:, ["HV gas"]] = (
        hist_var_percent_tveh()
        .loc[:, "HV gas"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["HV gas"]}, 1)
        .values
    )
    value.loc[:, ["LV liq"]] = (
        (
            -hist_var_percent_tveh().loc[:, "LV elec"].reset_coords(drop=True)
            - hist_var_percent_tveh().loc[:, "LV hib"].reset_coords(drop=True)
            - hist_var_percent_tveh().loc[:, "LV gas"].reset_coords(drop=True)
        )
        .expand_dims({"vehicleT": ["LV liq"]}, 1)
        .values
    )
    value.loc[:, ["LV elec"]] = (
        hist_var_percent_tveh()
        .loc[:, "LV elec"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["LV elec"]}, 1)
        .values
    )
    value.loc[:, ["LV hib"]] = (
        hist_var_percent_tveh()
        .loc[:, "LV hib"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["LV hib"]}, 1)
        .values
    )
    value.loc[:, ["LV gas"]] = (
        hist_var_percent_tveh()
        .loc[:, "LV gas"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["LV gas"]}, 1)
        .values
    )
    value.loc[:, ["bus liq"]] = (
        (
            -hist_var_percent_tveh().loc[:, "bus elec"].reset_coords(drop=True)
            - hist_var_percent_tveh().loc[:, "bus hib"].reset_coords(drop=True)
            - hist_var_percent_tveh().loc[:, "bus gas"].reset_coords(drop=True)
        )
        .expand_dims({"vehicleT": ["bus liq"]}, 1)
        .values
    )
    value.loc[:, ["bus hib"]] = (
        hist_var_percent_tveh()
        .loc[:, "bus hib"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["bus hib"]}, 1)
        .values
    )
    value.loc[:, ["bus gas"]] = (
        hist_var_percent_tveh()
        .loc[:, "bus gas"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["bus gas"]}, 1)
        .values
    )
    value.loc[:, ["train liq"]] = (
        hist_var_percent_tveh()
        .loc[:, "train liq"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["train liq"]}, 1)
        .values
    )
    value.loc[:, ["train elec"]] = (
        hist_var_percent_tveh()
        .loc[:, "train elec"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["train elec"]}, 1)
        .values
    )
    return value


@component.add(
    name="aux P inland transp",
    units="Dmnl",
    subscripts=["scenarios", "vehicleT"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "t_fin_inlandt": 2,
        "hist_var_inlandt": 1,
        "p_inlandt": 1,
        "t_ini_inlandt": 2,
        "percent_t_veh_tini": 1,
        "activate_policy_inlandt": 1,
    },
)
def aux_p_inland_transp():
    """
    auxiliar variable to introduce begining and ending times of policies and calculate the lineal growth in time
    """
    return if_then_else(
        (time() < t_fin_inlandt()).expand_dims(
            {"vehicleT": _subscript_dict["vehicleT"]}, 1
        ),
        lambda: if_then_else(
            np.logical_and(
                activate_policy_inlandt() == 1, time() > t_ini_inlandt()
            ).expand_dims({"vehicleT": _subscript_dict["vehicleT"]}, 1),
            lambda: (p_inlandt() - percent_t_veh_tini())
            / (t_fin_inlandt() - t_ini_inlandt()),
            lambda: hist_var_inlandt(),
        ),
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "vehicleT": _subscript_dict["vehicleT"],
            },
            ["scenarios", "vehicleT"],
        ),
    )


@component.add(
    name="var I inlandT Gas",
    units="EJ/T$/yr",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_per_x_t": 3, "ratio_var_t_vehicles": 3},
)
def var_i_inlandt_gas():
    """
    Variation of the energy intensity of inland transport relative to gas and due to the variations of gas based vehicles
    """
    return (
        energy_per_x_t().loc[:, "HV gas"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc[:, "HV gas"].reset_coords(drop=True)
        + energy_per_x_t().loc[:, "bus gas"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc[:, "bus gas"].reset_coords(drop=True)
        + energy_per_x_t().loc[:, "LV gas"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc[:, "LV gas"].reset_coords(drop=True)
    )


@component.add(
    name="var I inlandT liq",
    units="EJ/T$/yr",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_per_x_t": 7, "ratio_var_t_vehicles": 7},
)
def var_i_inlandt_liq():
    """
    Variation of the energy intensity of inland transport relative to liquids and due to the variations of liquids based vehicles
    """
    return (
        energy_per_x_t().loc[:, "HV liq"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc[:, "HV liq"].reset_coords(drop=True)
        + energy_per_x_t().loc[:, "LV liq"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc[:, "LV liq"].reset_coords(drop=True)
        + energy_per_x_t().loc[:, "bus liq"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc[:, "bus liq"].reset_coords(drop=True)
        + energy_per_x_t().loc[:, "HV liq"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc[:, "HV hib"].reset_coords(drop=True)
        + energy_per_x_t().loc[:, "LV liq"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc[:, "LV hib"].reset_coords(drop=True)
        + energy_per_x_t().loc[:, "bus liq"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc[:, "bus hib"].reset_coords(drop=True)
        + energy_per_x_t().loc[:, "train liq"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc[:, "train liq"].reset_coords(drop=True)
    )


@component.add(
    name="ratio var T vehicles",
    subscripts=["scenarios", "vehicleT"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"var_percent_t_vehicles": 1},
)
def ratio_var_t_vehicles():
    return var_percent_t_vehicles() / 100


@component.add(
    name="aaux Tveh ini",
    subscripts=["scenarios", "vehicleT"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"aaux_tveh": 1, "aaux_tveh_t": 1},
)
def aaux_tveh_ini():
    return np.maximum(aaux_tveh(), aaux_tveh_t())


@component.add(
    name="var I inland Elec",
    units="EJ/T$/yr",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_per_x_t": 3, "ratio_var_t_vehicles": 3},
)
def var_i_inland_elec():
    """
    Variation of the energy intensity of inland transport relative to electricity and due to the variations of electricity based vehicles
    """
    return (
        energy_per_x_t().loc[:, "LV elec"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc[:, "LV elec"].reset_coords(drop=True)
        + energy_per_x_t().loc[:, "train elec"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc[:, "train elec"].reset_coords(drop=True)
        + energy_per_x_t().loc[:, "bus elec"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc[:, "bus elec"].reset_coords(drop=True)
    )


@component.add(
    name="aaux Tveh t",
    subscripts=["scenarios", "vehicleT"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aaux_tveh_t": 1},
    other_deps={
        "_delayfixed_aaux_tveh_t": {
            "initial": {"time_step": 1},
            "step": {"aaux_tveh_ini": 1},
        }
    },
)
def aaux_tveh_t():
    return _delayfixed_aaux_tveh_t()


_delayfixed_aaux_tveh_t = DelayFixed(
    lambda: aaux_tveh_ini(),
    lambda: time_step(),
    lambda: xr.DataArray(
        0,
        {
            "scenarios": _subscript_dict["scenarios"],
            "vehicleT": _subscript_dict["vehicleT"],
        },
        ["scenarios", "vehicleT"],
    ),
    time_step,
    "_delayfixed_aaux_tveh_t",
)


@component.add(
    name="percent Tveh 1995",
    subscripts=["scenarios", "vehicleT"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"initial_percent_t_vehicles": 2},
)
def percent_tveh_1995():
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "vehicleT": _subscript_dict["vehicleT"],
        },
        ["scenarios", "vehicleT"],
    )
    value.loc[:, ["HV liq"]] = 100
    value.loc[:, ["HV hib"]] = 0
    value.loc[:, ["HV gas"]] = 0
    value.loc[:, ["LV liq"]] = 100
    value.loc[:, ["LV elec"]] = 0
    value.loc[:, ["LV hib"]] = 0
    value.loc[:, ["LV gas"]] = 0
    value.loc[:, ["bus liq"]] = 100
    value.loc[:, ["bus elec"]] = 0
    value.loc[:, ["bus hib"]] = 0
    value.loc[:, ["bus gas"]] = 0
    value.loc[:, ["train liq"]] = float(initial_percent_t_vehicles().loc["train liq"])
    value.loc[:, ["train elec"]] = float(initial_percent_t_vehicles().loc["train elec"])
    return value


@component.add(
    name="hist var percent Tveh",
    units="1/yr",
    subscripts=["scenarios", "vehicleT"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 8, "t_hist_inlandt": 8, "initial_percent_t_vehicles": 8},
)
def hist_var_percent_tveh():
    """
    historical evolution of percent of vehicles based on the linear interpolation between 2005 and T hist H transp(default 2015). Before 2005 all vehicles are liquid based except trains. Percents relative to each type of vehicle
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "vehicleT": _subscript_dict["vehicleT"],
        },
        ["scenarios", "vehicleT"],
    )
    value.loc[:, ["HV liq"]] = 0
    value.loc[:, ["HV hib"]] = (
        if_then_else(
            time() > 2005,
            lambda: (float(initial_percent_t_vehicles().loc["HV hib"]) - 0)
            / (t_hist_inlandt() - 2005),
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        )
        .expand_dims({"vehicleT": ["HV hib"]}, 1)
        .values
    )
    value.loc[:, ["HV gas"]] = (
        if_then_else(
            time() > 2005,
            lambda: (float(initial_percent_t_vehicles().loc["HV gas"]) - 0)
            / (t_hist_inlandt() - 2005),
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        )
        .expand_dims({"vehicleT": ["HV gas"]}, 1)
        .values
    )
    value.loc[:, ["LV liq"]] = 0
    value.loc[:, ["LV elec"]] = (
        if_then_else(
            time() > 2005,
            lambda: (float(initial_percent_t_vehicles().loc["LV elec"]) - 0)
            / (t_hist_inlandt() - 2005),
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        )
        .expand_dims({"vehicleT": ["LV elec"]}, 1)
        .values
    )
    value.loc[:, ["LV hib"]] = (
        if_then_else(
            time() > 2005,
            lambda: (float(initial_percent_t_vehicles().loc["LV hib"]) - 0)
            / (t_hist_inlandt() - 2005),
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        )
        .expand_dims({"vehicleT": ["LV hib"]}, 1)
        .values
    )
    value.loc[:, ["LV gas"]] = (
        if_then_else(
            time() > 2005,
            lambda: (float(initial_percent_t_vehicles().loc["LV gas"]) - 0)
            / (t_hist_inlandt() - 2005),
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        )
        .expand_dims({"vehicleT": ["LV gas"]}, 1)
        .values
    )
    value.loc[:, ["bus liq"]] = 0
    value.loc[:, ["bus elec"]] = (
        if_then_else(
            time() > 2005,
            lambda: (float(initial_percent_t_vehicles().loc["bus elec"]) - 0)
            / (t_hist_inlandt() - 2005),
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        )
        .expand_dims({"vehicleT": ["bus elec"]}, 1)
        .values
    )
    value.loc[:, ["bus hib"]] = (
        if_then_else(
            time() > 2005,
            lambda: (float(initial_percent_t_vehicles().loc["bus hib"]) - 0)
            / (t_hist_inlandt() - 2005),
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        )
        .expand_dims({"vehicleT": ["bus hib"]}, 1)
        .values
    )
    value.loc[:, ["bus gas"]] = (
        if_then_else(
            time() > 2005,
            lambda: (float(initial_percent_t_vehicles().loc["bus gas"]) - 0)
            / (t_hist_inlandt() - 2005),
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        )
        .expand_dims({"vehicleT": ["bus gas"]}, 1)
        .values
    )
    value.loc[:, ["train liq"]] = 0
    value.loc[:, ["train elec"]] = 0
    return value


@component.add(
    name="aaux Tveh",
    subscripts=["scenarios", "vehicleT"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "t_ini_inlandt": 1, "time_step": 1, "percent_t_vehicles": 1},
)
def aaux_tveh():
    return if_then_else(
        (np.abs(time() - t_ini_inlandt()) < 1 * time_step()).expand_dims(
            {"vehicleT": _subscript_dict["vehicleT"]}, 1
        ),
        lambda: percent_t_vehicles(),
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "vehicleT": _subscript_dict["vehicleT"],
            },
            ["scenarios", "vehicleT"],
        ),
    )


@component.add(
    name="new cellulosic biofuels",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 3,
        "start_year_3gen_cellulosic_biofuels": 3,
        "constrain_liquids_exogenous_growth": 1,
        "max_npp_potential_bioe_residues": 1,
        "p_bioe_residues": 1,
        "ej_per_ktoe": 1,
        "check_liquids": 1,
        "cellulosic_biofuels_available": 1,
        "start_production_biofuels": 1,
        "potential_pe_cellulosic_biofuel_ej": 2,
    },
)
def new_cellulosic_biofuels():
    """
    New annual production of cellulosic biofuels from bioE residues. For the first 5 years, we assume the same rate of energy produced than the one achieved by conventional biofuels (2nd generation).
    """
    return if_then_else(
        time() < start_year_3gen_cellulosic_biofuels(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            max_npp_potential_bioe_residues() == 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < start_year_3gen_cellulosic_biofuels() + 5,
                lambda: start_production_biofuels(
                    time() - start_year_3gen_cellulosic_biofuels(),
                    {
                        "scenarios": [
                            "SCEN1",
                            "SCEN2",
                            "SCEN3",
                            "SCEN4",
                            "BAU",
                            "User defined",
                        ]
                    },
                )
                * ej_per_ktoe(),
                lambda: if_then_else(
                    check_liquids() < 0,
                    lambda: constrain_liquids_exogenous_growth()
                    * potential_pe_cellulosic_biofuel_ej(),
                    lambda: p_bioe_residues()
                    * potential_pe_cellulosic_biofuel_ej()
                    * cellulosic_biofuels_available(),
                ),
            ),
        ),
    )


@component.add(
    name="new land marg for biofuels",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "new_biofuels_land_marg": 1,
        "land_occupation_ratio_biofuels_marg_land": 1,
        "conv_efficiency_from_npp_to_biofuels": 1,
    },
)
def new_land_marg_for_biofuels():
    return (
        new_biofuels_land_marg()
        * land_occupation_ratio_biofuels_marg_land()
        / conv_efficiency_from_npp_to_biofuels()
    )


@component.add(
    name="new biofuels land marg",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 3,
        "start_year_biofuels_land_marg": 3,
        "constrain_liquids_exogenous_growth": 1,
        "bioe_gen_land_marg_available": 1,
        "potential_marginal_lands_mha": 1,
        "potential_peavail_biofuels_land_marg_ej": 2,
        "ej_per_ktoe": 1,
        "check_liquids": 1,
        "p_biofuels_marg_lands": 1,
        "start_production_biofuels": 1,
        "ratio_land_productivity_2gen_vs_marg": 1,
        "land_availability_constraint": 1,
    },
)
def new_biofuels_land_marg():
    """
    New annual production from biofuels in marginal lands. For the first 5 years, we assume the same rate of land occupation (MHa/year) than the one achieved by conventional biofuels -this is the reason to take into account the relative land productivity between both types of crops.
    """
    return (
        if_then_else(
            time() < start_year_biofuels_land_marg(),
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                potential_marginal_lands_mha() == 0,
                lambda: xr.DataArray(
                    0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
                ),
                lambda: if_then_else(
                    time() < start_year_biofuels_land_marg() + 5,
                    lambda: start_production_biofuels(
                        time() - start_year_biofuels_land_marg(),
                        {
                            "scenarios": [
                                "SCEN1",
                                "SCEN2",
                                "SCEN3",
                                "SCEN4",
                                "BAU",
                                "User defined",
                            ]
                        },
                    )
                    * ej_per_ktoe()
                    / ratio_land_productivity_2gen_vs_marg(),
                    lambda: if_then_else(
                        check_liquids() < 0,
                        lambda: constrain_liquids_exogenous_growth()
                        * potential_peavail_biofuels_land_marg_ej(),
                        lambda: p_biofuels_marg_lands()
                        * bioe_gen_land_marg_available()
                        * potential_peavail_biofuels_land_marg_ej(),
                    ),
                ),
            ),
        )
        * land_availability_constraint()
    )


@component.add(
    name="max potential CSP TWe",
    units="TWe",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_solar_on_land_mha": 1,
        "power_density_csp": 1,
        "share_solar_pv_vs_tot_solar_gen": 1,
    },
)
def max_potential_csp_twe():
    """
    Maximum potential of CSP PV for producing electricity on land. To distribute the area potential with the CSP, we assume the potential share proportional to the generation share in each time period.
    """
    return (
        max_solar_on_land_mha()
        * power_density_csp()
        * (1 - share_solar_pv_vs_tot_solar_gen())
    )


@component.add(
    name="new biofuels 2gen land compet",
    units="MHa/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "check_liquids": 1,
        "constrain_liquids_exogenous_growth": 1,
        "land_compet_biofuels_2gen_mha": 2,
        "biofuels_land_compet_available": 1,
        "adapt_growth_biofuels_2gen": 1,
        "annual_additional_historic_land_use_biofuels_2gen": 1,
        "land_availability_constraint": 1,
    },
)
def new_biofuels_2gen_land_compet():
    """
    New land dedicated to biofuels 2nd generation in land competing with other uses.
    """
    return (
        if_then_else(
            check_liquids() < 0,
            lambda: constrain_liquids_exogenous_growth()
            * land_compet_biofuels_2gen_mha(),
            lambda: np.maximum(
                annual_additional_historic_land_use_biofuels_2gen()
                + adapt_growth_biofuels_2gen()
                * land_compet_biofuels_2gen_mha()
                * biofuels_land_compet_available(),
                0,
            ),
        )
        * land_availability_constraint()
    )


@component.add(
    name="max potential solar PV TWe",
    units="TWe",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_solar_on_land_mha": 1,
        "power_density_solar_pv_on_land_twemha": 1,
        "share_solar_pv_vs_tot_solar_gen": 1,
    },
)
def max_potential_solar_pv_twe():
    """
    Maximum potential of solar PV for producing electricity on land. To distribute the area potential with the CSP, we assume the potential share proportional to the generation share in each time period.
    """
    return (
        max_solar_on_land_mha()
        * power_density_solar_pv_on_land_twemha()
        * share_solar_pv_vs_tot_solar_gen()
    )


@component.add(
    name="Land availability constraint",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"aux_reach_available_land": 1},
)
def land_availability_constraint():
    """
    Land availability constraint: when this variable is 0 it limits the expansion of biofuel crops.
    """
    return aux_reach_available_land()


@component.add(
    name="Marginal land for biofuels rate",
    units="MHa/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"new_land_marg_for_biofuels": 1, "aux_reach_available_land": 1},
)
def marginal_land_for_biofuels_rate():
    """
    Biofuels plantation rate on marginal lands.
    """
    return new_land_marg_for_biofuels() * aux_reach_available_land()


@component.add(
    name="\"'Available land'\"",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_available_land": 1},
    other_deps={
        "_integ_available_land": {
            "initial": {"initial_available_land": 1},
            "step": {
                "land_for_res_elec_rate": 1,
                "increase_agricultural_land": 1,
                "marginal_land_for_biofuels_rate": 1,
            },
        }
    },
)
def available_land():
    """
    "Available land" as defined in MEDEAS-EU framework, representing the terrestrial land that is currently neither being used by the primary sector (arable land, permanent crops, permanent meadows and pastures and productive forest area) nor built-up, nor occupied by permanent snows&glaciers.
    """
    return _integ_available_land()


_integ_available_land = Integ(
    lambda: -land_for_res_elec_rate()
    - increase_agricultural_land()
    - marginal_land_for_biofuels_rate(),
    lambda: xr.DataArray(
        initial_available_land(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_available_land",
)


@component.add(
    name="max CSP on land MHa",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_solar_on_land_mha": 1, "surface_solar_pv_on_land_mha": 1},
)
def max_csp_on_land_mha():
    """
    Available land for solar CSP taking into account the total land availability for solar and the actual occupation from solar PV on land.
    """
    return max_solar_on_land_mha() - surface_solar_pv_on_land_mha()


@component.add(
    name="compet land for biofuels rate",
    units="MHa/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"new_biofuels_2gen_land_compet": 1},
)
def compet_land_for_biofuels_rate():
    """
    Biofuels plantation rate on land subject to competition with other agricultural uses.
    """
    return new_biofuels_2gen_land_compet()


@component.add(
    name='"new BioE residues for non-biofuels"',
    units="EJ/(Year*Year)",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 3,
        "start_year_bioe_residues_for_nonbiofuels": 3,
        "pe_bioe_residues_nonbiofuels_ej": 1,
        "max_npp_potential_bioe_residues": 1,
        "p_bioe_residues": 1,
        "ej_per_ktoe": 1,
        "bioe_residues_for_nonbiofuels_available": 1,
        "start_production_biofuels": 1,
    },
)
def new_bioe_residues_for_nonbiofuels():
    """
    BioE residues used for other uses than biofuels (heat, solids and electricity). For the first 5 years, we assume the same rate of energy produced than the one achieved by conventional biofuels (2nd generation).
    """
    return if_then_else(
        time() < start_year_bioe_residues_for_nonbiofuels(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            max_npp_potential_bioe_residues() == 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() < start_year_bioe_residues_for_nonbiofuels() + 5,
                lambda: start_production_biofuels(
                    time() - start_year_bioe_residues_for_nonbiofuels(),
                    {
                        "scenarios": [
                            "SCEN1",
                            "SCEN2",
                            "SCEN3",
                            "SCEN4",
                            "BAU",
                            "User defined",
                        ]
                    },
                )
                * ej_per_ktoe(),
                lambda: p_bioe_residues()
                * pe_bioe_residues_nonbiofuels_ej()
                * bioe_residues_for_nonbiofuels_available(),
            ),
        ),
    )


@component.add(
    name="max solar PV on land MHa",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_solar_on_land_mha": 1, "surface_csp_mha": 1},
)
def max_solar_pv_on_land_mha():
    """
    Available land for solar PV taking into account the total land availability for solar and the actual occupation from CSP.
    """
    return max_solar_on_land_mha() - surface_csp_mha()


@component.add(
    name="max solar on land Mha",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "available_land": 1,
        "surface_csp_mha": 1,
        "surface_solar_pv_on_land_mha": 1,
    },
)
def max_solar_on_land_mha():
    """
    Maximum area potential to be occupied by solar power plants on land.
    """
    return available_land() + surface_csp_mha() + surface_solar_pv_on_land_mha()


@component.add(
    name='"permanent snows&glaciers area"',
    units="MHa",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_permanent_snowsglaciers_area": 1},
    other_deps={
        "_integ_permanent_snowsglaciers_area": {
            "initial": {"initial_permanent_snowsglaciers_area": 1},
            "step": {},
        }
    },
)
def permanent_snowsglaciers_area():
    """
    Permanent snow & glaciers from FAOSTAT.
    """
    return _integ_permanent_snowsglaciers_area()


_integ_permanent_snowsglaciers_area = Integ(
    lambda: 0,
    lambda: initial_permanent_snowsglaciers_area(),
    "_integ_permanent_snowsglaciers_area",
)


@component.add(
    name='"initial permanent snows&glaciers area"',
    units="MHa",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_permanent_snowsglaciers_area"},
)
def initial_permanent_snowsglaciers_area():
    """
    Initial area occupied by permanent snows & glaciers.
    """
    return _ext_constant_initial_permanent_snowsglaciers_area()


_ext_constant_initial_permanent_snowsglaciers_area = ExtConstant(
    "inputs_EU.xlsx",
    "Land",
    "H28",
    {},
    _root,
    {},
    "_ext_constant_initial_permanent_snowsglaciers_area",
)


@component.add(
    name='"Warning biodiversity loss <12%"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"natural_lands": 1, "total_eu_land": 1},
)
def warning_biodiversity_loss_12():
    """
    0: natural lands > 12% 1:natural lands < 12%
    """
    return if_then_else(
        natural_lands() / total_eu_land() > 0.12,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: xr.DataArray(
            1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="Total EU land",
    units="MHa",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_total_eu_land"},
)
def total_eu_land():
    """
    EU terrestrial land.
    """
    return _ext_constant_total_eu_land()


_ext_constant_total_eu_land = ExtConstant(
    "inputs_EU.xlsx", "Land", "C9", {}, _root, {}, "_ext_constant_total_eu_land"
)


@component.add(
    name="Land for RES elec rate",
    units="MHa/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "land_requirements_res_elec_compet_uses": 1,
        "land_requirements_res_elec_compet_uses_t1": 1,
        "aux_reach_available_land": 1,
    },
)
def land_for_res_elec_rate():
    """
    Land requirements for renewable technologies to generate electricity (PV on land, CSP and hydro).
    """
    return (
        land_requirements_res_elec_compet_uses()
        - land_requirements_res_elec_compet_uses_t1()
    ) * aux_reach_available_land()


@component.add(
    name="aux reach available land",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"available_land": 1},
)
def aux_reach_available_land():
    """
    This variable = 0 when there is no more land available.
    """
    return xr.DataArray(
        np.interp(
            available_land(),
            [-1.0e-02, 0.0e00, 1.0e-08, 1.0e-04, 1.0e-02, 1.0e00, 1.0e02],
            [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
        ),
        {"scenarios": ["SCEN1", "SCEN2", "SCEN3", "SCEN4", "BAU", "User defined"]},
        ["scenarios"],
    )


@component.add(
    name="increase agricultural land",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "agricultural_land_until_2015": 1,
        "agricultural_land": 1,
        "aux_reach_available_land": 1,
    },
)
def increase_agricultural_land():
    return (
        if_then_else(
            time() < 2014,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: agricultural_land_until_2015() - agricultural_land(),
        )
        * aux_reach_available_land()
    )


@component.add(
    name="Total land requirements renew Mha",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "land_requirements_res_elec_compet_uses": 1,
        "land_compet_required_dedicated_crops_for_biofuels": 1,
        "land_required_biofuels_land_marg": 1,
        "surface_onshore_wind_mha": 1,
    },
)
def total_land_requirements_renew_mha():
    """
    Land required for RES power plants and total bioenergy (land competition + marginal lands).
    """
    return (
        land_requirements_res_elec_compet_uses()
        + land_compet_required_dedicated_crops_for_biofuels()
        + land_required_biofuels_land_marg()
        + surface_onshore_wind_mha()
    )


@component.add(
    name='"Land requirements RES elec compet uses t-1"',
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_land_requirements_res_elec_compet_uses_t1": 1},
    other_deps={
        "_delayfixed_land_requirements_res_elec_compet_uses_t1": {
            "initial": {},
            "step": {"land_requirements_res_elec_compet_uses": 1},
        }
    },
)
def land_requirements_res_elec_compet_uses_t1():
    """
    Land requirements for renewable technologies to generate electricity (PV on land, CSP and hydro) requiring land and not easily compatible with double uses delayed 1 year.
    """
    return _delayfixed_land_requirements_res_elec_compet_uses_t1()


_delayfixed_land_requirements_res_elec_compet_uses_t1 = DelayFixed(
    lambda: land_requirements_res_elec_compet_uses(),
    lambda: 1,
    lambda: xr.DataArray(
        0.9115, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    time_step,
    "_delayfixed_land_requirements_res_elec_compet_uses_t1",
)


@component.add(
    name="initial 'available land'",
    units="MHa",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_available_land"},
)
def initial_available_land():
    """
    Initial "available land" as defined in MEDEAS-EU framework, representing the terrestrial land that is currently neither being used by the primary sector (arable land, permanent crops, permanent meadows and pastures and productive forest area) nor built-up, nor occupied by permanent snows&glaciers.
    """
    return _ext_constant_initial_available_land()


_ext_constant_initial_available_land = ExtConstant(
    "inputs_EU.xlsx",
    "Land",
    "C8",
    {},
    _root,
    {},
    "_ext_constant_initial_available_land",
)


@component.add(
    name="Land for solar and hydro RES",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_land_for_solar_and_hydro_res": 1},
    other_deps={
        "_integ_land_for_solar_and_hydro_res": {
            "initial": {},
            "step": {"land_for_res_elec_rate": 1},
        }
    },
)
def land_for_solar_and_hydro_res():
    """
    Land for solar on land and hydro power plants.
    """
    return _integ_land_for_solar_and_hydro_res()


_integ_land_for_solar_and_hydro_res = Integ(
    lambda: land_for_res_elec_rate(),
    lambda: xr.DataArray(
        0.9, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    "_integ_land_for_solar_and_hydro_res",
)


@component.add(
    name="aux16",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux16": 1},
    other_deps={
        "_delayfixed_aux16": {
            "initial": {"initial_agricultural_area": 1, "time_step": 1},
            "step": {"agricultural_land_until_2015": 1},
        }
    },
)
def aux16():
    """
    Auxiliary variable to estimate "agricultural land until 2015".
    """
    return _delayfixed_aux16()


_delayfixed_aux16 = DelayFixed(
    lambda: agricultural_land_until_2015(),
    lambda: time_step(),
    lambda: xr.DataArray(
        initial_agricultural_area(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    time_step,
    "_delayfixed_aux16",
)


@component.add(
    name="agricultural land until 2015",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "agricultural_land": 1, "aux16": 1},
)
def agricultural_land_until_2015():
    """
    Agricultural land in EU until the year 2015. From that year, this variable reports the value of agricultural land in 2015.
    """
    return if_then_else(time() < 2015, lambda: agricultural_land(), lambda: aux16())


@component.add(
    name="P urban land density",
    units="m2/people",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_urban_land_density"},
)
def p_urban_land_density():
    """
    Policy target to set urban land density in a target year.
    """
    return _ext_constant_p_urban_land_density()


_ext_constant_p_urban_land_density = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C274",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_urban_land_density",
)

_ext_constant_p_urban_land_density.add(
    "inputs_EU.xlsx", "SCEN1", "C274", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_urban_land_density.add(
    "inputs_EU.xlsx", "SCEN2", "C274", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_urban_land_density.add(
    "inputs_EU.xlsx", "SCEN3", "C274", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_urban_land_density.add(
    "inputs_EU.xlsx", "SCEN4", "C274", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_urban_land_density.add(
    "inputs_EU.xlsx", "User defined", "C274", {"scenarios": ["User defined"]}
)


@component.add(
    name="Historic urban land",
    units="MHa",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_urban_land",
        "__lookup__": "_ext_lookup_historic_urban_land",
    },
)
def historic_urban_land(x, final_subs=None):
    """
    Historic urban land.
    """
    return _ext_lookup_historic_urban_land(x, final_subs)


_ext_lookup_historic_urban_land = ExtLookup(
    "inputs_EU.xlsx",
    "Land",
    "20",
    "H27",
    {},
    _root,
    {},
    "_ext_lookup_historic_urban_land",
)


@component.add(
    name="hist variation urban land",
    units="MHa",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 3, "historic_urban_land": 2},
)
def hist_variation_urban_land():
    """
    Annual variation of historic urban land.
    """
    return if_then_else(
        time() < 2014,
        lambda: historic_urban_land(integer(time() + 1))
        - historic_urban_land(integer(time())),
        lambda: 0,
    )


@component.add(
    name="percent H vehicles initial",
    units="Dmnl",
    subscripts=["Households vehicles"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_percent_h_vehicles_initial"},
)
def percent_h_vehicles_initial():
    """
    percents in the year of calibration (2015 ) of vehciles relative to total 4w+2w:
    """
    return _ext_constant_percent_h_vehicles_initial()


_ext_constant_percent_h_vehicles_initial = ExtConstant(
    "inputs_EU.xlsx",
    "Transportation",
    "B26",
    {"Households vehicles": ["liq 4wheels"]},
    _root,
    {"Households vehicles": _subscript_dict["Households vehicles"]},
    "_ext_constant_percent_h_vehicles_initial",
)

_ext_constant_percent_h_vehicles_initial.add(
    "inputs_EU.xlsx", "Transportation", "B27", {"Households vehicles": ["elec 4wheels"]}
)

_ext_constant_percent_h_vehicles_initial.add(
    "inputs_EU.xlsx", "Transportation", "B28", {"Households vehicles": ["hib 4wheels"]}
)

_ext_constant_percent_h_vehicles_initial.add(
    "inputs_EU.xlsx", "Transportation", "B29", {"Households vehicles": ["gas 4wheels"]}
)

_ext_constant_percent_h_vehicles_initial.add(
    "inputs_EU.xlsx", "Transportation", "B30", {"Households vehicles": ["liq 2wheels"]}
)

_ext_constant_percent_h_vehicles_initial.add(
    "inputs_EU.xlsx", "Transportation", "B31", {"Households vehicles": ["elec 2wheels"]}
)


@component.add(
    name="var percents H vehicles",
    units="Dmnl",
    subscripts=["scenarios", "Households vehicles"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 6,
        "t_ini_hveh": 6,
        "aux_hist_h": 6,
        "h_2w_liq_adapt_growth": 2,
        "h_hyb_adapt_growth": 2,
        "h_2w_elec_adapt_growth": 2,
        "h_elec_adapt_growth": 2,
        "h_gas_adapt_growth": 2,
    },
)
def var_percents_h_vehicles():
    """
    Variation of vehicles percetages. Percentages relative to total 4w+2w. Before T_ini_H_veh the percentages follow historical variations
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "Households vehicles": _subscript_dict["Households vehicles"],
        },
        ["scenarios", "Households vehicles"],
    )
    value.loc[:, ["liq 4wheels"]] = (
        if_then_else(
            time() < t_ini_hveh(),
            lambda: aux_hist_h().loc[:, "liq 4wheels"].reset_coords(drop=True),
            lambda: -h_elec_adapt_growth()
            - h_hyb_adapt_growth()
            - h_gas_adapt_growth()
            - h_2w_elec_adapt_growth()
            - h_2w_liq_adapt_growth(),
        )
        .expand_dims({"Households vehicles": ["liq 4wheels"]}, 1)
        .values
    )
    value.loc[:, ["elec 4wheels"]] = (
        if_then_else(
            time() < t_ini_hveh(),
            lambda: aux_hist_h().loc[:, "elec 4wheels"].reset_coords(drop=True),
            lambda: h_elec_adapt_growth(),
        )
        .expand_dims({"Households vehicles": ["elec 4wheels"]}, 1)
        .values
    )
    value.loc[:, ["hib 4wheels"]] = (
        if_then_else(
            time() < t_ini_hveh(),
            lambda: aux_hist_h().loc[:, "hib 4wheels"].reset_coords(drop=True),
            lambda: h_hyb_adapt_growth(),
        )
        .expand_dims({"Households vehicles": ["hib 4wheels"]}, 1)
        .values
    )
    value.loc[:, ["gas 4wheels"]] = (
        if_then_else(
            time() < t_ini_hveh(),
            lambda: aux_hist_h().loc[:, "gas 4wheels"].reset_coords(drop=True),
            lambda: h_gas_adapt_growth(),
        )
        .expand_dims({"Households vehicles": ["gas 4wheels"]}, 1)
        .values
    )
    value.loc[:, ["liq 2wheels"]] = (
        if_then_else(
            time() < t_ini_hveh(),
            lambda: aux_hist_h().loc[:, "liq 2wheels"].reset_coords(drop=True),
            lambda: h_2w_liq_adapt_growth(),
        )
        .expand_dims({"Households vehicles": ["liq 2wheels"]}, 1)
        .values
    )
    value.loc[:, ["elec 2wheels"]] = (
        if_then_else(
            time() < t_ini_hveh(),
            lambda: aux_hist_h().loc[:, "elec 2wheels"].reset_coords(drop=True),
            lambda: h_2w_elec_adapt_growth(),
        )
        .expand_dims({"Households vehicles": ["elec 2wheels"]}, 1)
        .values
    )
    return value


@component.add(
    name="H gas initial growth",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "t_fin_hveh": 2,
        "percent_h_vehicles_tini": 1,
        "aux_hist_h": 1,
        "p_h_vehicle": 1,
        "t_ini_hveh": 2,
        "activate_policy_h_transp": 1,
    },
)
def h_gas_initial_growth():
    """
    Growth of percent of gas 4w without restrictions derived from saturation and shortage of electricity Percent relative to total number of vehicles 2w+4w.
    """
    return if_then_else(
        time() < t_fin_hveh(),
        lambda: if_then_else(
            np.logical_and(activate_policy_h_transp() == 1, time() > t_ini_hveh()),
            lambda: (
                p_h_vehicle().loc[:, "gas 4wheels"].reset_coords(drop=True)
                - percent_h_vehicles_tini()
                .loc[:, "gas 4wheels"]
                .reset_coords(drop=True)
            )
            / (t_fin_hveh() - t_ini_hveh()),
            lambda: aux_hist_h().loc[:, "gas 4wheels"].reset_coords(drop=True),
        ),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="H 2w liq initial growth",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "t_fin_hveh": 2,
        "percent_h_vehicles_tini": 1,
        "aux_hist_h": 1,
        "p_h_vehicle": 1,
        "t_ini_hveh": 2,
        "activate_policy_h_transp": 1,
    },
)
def h_2w_liq_initial_growth():
    return if_then_else(
        time() < t_fin_hveh(),
        lambda: if_then_else(
            np.logical_and(activate_policy_h_transp() == 1, time() > t_ini_hveh()),
            lambda: (
                p_h_vehicle().loc[:, "liq 2wheels"].reset_coords(drop=True)
                - percent_h_vehicles_tini()
                .loc[:, "liq 2wheels"]
                .reset_coords(drop=True)
            )
            / (t_fin_hveh() - t_ini_hveh()),
            lambda: aux_hist_h().loc[:, "liq 2wheels"].reset_coords(drop=True),
        ),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="H hyb initial growth",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "t_fin_hveh": 2,
        "percent_h_vehicles_tini": 1,
        "aux_hist_h": 1,
        "p_h_vehicle": 1,
        "t_ini_hveh": 2,
        "activate_policy_h_transp": 1,
    },
)
def h_hyb_initial_growth():
    """
    Growth of percent of hibrid 4w without restrictions derived from saturation and shortage of electricity Percent relative to total number of vehicles 2w+4w.
    """
    return if_then_else(
        time() < t_fin_hveh(),
        lambda: if_then_else(
            np.logical_and(activate_policy_h_transp() == 1, time() > t_ini_hveh()),
            lambda: (
                p_h_vehicle().loc[:, "hib 4wheels"].reset_coords(drop=True)
                - percent_h_vehicles_tini()
                .loc[:, "hib 4wheels"]
                .reset_coords(drop=True)
            )
            / (t_fin_hveh() - t_ini_hveh()),
            lambda: aux_hist_h().loc[:, "hib 4wheels"].reset_coords(drop=True),
        ),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="H 2w elec initial growth",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "t_fin_hveh": 2,
        "percent_h_vehicles_tini": 1,
        "aux_hist_h": 1,
        "p_h_vehicle": 1,
        "t_ini_hveh": 2,
        "activate_policy_h_transp": 1,
    },
)
def h_2w_elec_initial_growth():
    """
    Growth of percent of electric 2w without restrictions derived from saturation and shortage of electricity Percent relative to total number of vehicles 2w+4w.
    """
    return if_then_else(
        time() < t_fin_hveh(),
        lambda: if_then_else(
            np.logical_and(activate_policy_h_transp() == 1, time() > t_ini_hveh()),
            lambda: (
                p_h_vehicle().loc[:, "elec 2wheels"].reset_coords(drop=True)
                - percent_h_vehicles_tini()
                .loc[:, "elec 2wheels"]
                .reset_coords(drop=True)
            )
            / (t_fin_hveh() - t_ini_hveh()),
            lambda: aux_hist_h().loc[:, "elec 2wheels"].reset_coords(drop=True),
        ),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="H 2w liq adapt growth",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"h_2w_liq_initial_growth": 1},
)
def h_2w_liq_adapt_growth():
    return h_2w_liq_initial_growth()


@component.add(
    name="aaux Hveh t",
    subscripts=["scenarios", "Households vehicles"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aaux_hveh_t": 1},
    other_deps={
        "_delayfixed_aaux_hveh_t": {
            "initial": {"time_step": 1},
            "step": {"aaux_hveh_ini": 1},
        }
    },
)
def aaux_hveh_t():
    return _delayfixed_aaux_hveh_t()


_delayfixed_aaux_hveh_t = DelayFixed(
    lambda: aaux_hveh_ini(),
    lambda: time_step(),
    lambda: xr.DataArray(
        0,
        {
            "scenarios": _subscript_dict["scenarios"],
            "Households vehicles": _subscript_dict["Households vehicles"],
        },
        ["scenarios", "Households vehicles"],
    ),
    time_step,
    "_delayfixed_aaux_hveh_t",
)


@component.add(
    name="A2 coef tH",
    units="EJ/T$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"liq_2w": 1, "demand_h": 1, "percent_2w_liq": 1},
)
def a2_coef_th():
    """
    Coeficients for the calculation of variations of trasnport intensities
    """
    return liq_2w() / (demand_h() * (percent_2w_liq() / 100))


@component.add(
    name="H elec initial growth",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "t_fin_hveh": 2,
        "percent_h_vehicles_tini": 1,
        "aux_hist_h": 1,
        "p_h_vehicle": 1,
        "t_ini_hveh": 2,
        "activate_policy_h_transp": 1,
    },
)
def h_elec_initial_growth():
    """
    Growth of percent of electrical 4w without restrictions derived from saturation and shortage of electricity Percent relative to total number of vehicles 2w+4w.
    """
    return if_then_else(
        time() < t_fin_hveh(),
        lambda: if_then_else(
            np.logical_and(activate_policy_h_transp() == 1, time() > t_ini_hveh()),
            lambda: (
                p_h_vehicle().loc[:, "elec 4wheels"].reset_coords(drop=True)
                - percent_h_vehicles_tini()
                .loc[:, "elec 4wheels"]
                .reset_coords(drop=True)
            )
            / (t_fin_hveh() - t_ini_hveh()),
            lambda: aux_hist_h().loc[:, "elec 4wheels"].reset_coords(drop=True),
        ),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="aaux Hveh ini",
    subscripts=["scenarios", "Households vehicles"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"aaux_hveh": 1, "aaux_hveh_t": 1},
)
def aaux_hveh_ini():
    return np.maximum(aaux_hveh(), aaux_hveh_t())


@component.add(
    name="aaux Hveh",
    subscripts=["scenarios", "Households vehicles"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "t_ini_hveh": 1, "time_step": 1, "percents_h_vehicles": 1},
)
def aaux_hveh():
    return if_then_else(
        (np.abs(time() - t_ini_hveh()) < 1 * time_step()).expand_dims(
            {"Households vehicles": _subscript_dict["Households vehicles"]}, 1
        ),
        lambda: percents_h_vehicles(),
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "Households vehicles": _subscript_dict["Households vehicles"],
            },
            ["scenarios", "Households vehicles"],
        ),
    )


@component.add(
    name="hist var percent H",
    units="1/yr",
    subscripts=["scenarios", "Households vehicles"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 5,
        "percent_h_vehicles_tini": 5,
        "t_hist_h_transp": 5,
        "initial_2w_percent": 1,
    },
)
def hist_var_percent_h():
    """
    historical evolution of percent of vehicles based on the linear interpolation between 2005 and T hist H transp(default 2015). Before 2005 all vehicle s are liquid based. Percents relative to 2w+4w
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "Households vehicles": _subscript_dict["Households vehicles"],
        },
        ["scenarios", "Households vehicles"],
    )
    value.loc[:, ["liq 4wheels"]] = 0
    value.loc[:, ["hib 4wheels"]] = (
        if_then_else(
            time() > 2005,
            lambda: (
                percent_h_vehicles_tini().loc[:, "hib 4wheels"].reset_coords(drop=True)
                - 0
            )
            / (t_hist_h_transp() - 2005),
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        )
        .expand_dims({"Households vehicles": ["hib 4wheels"]}, 1)
        .values
    )
    value.loc[:, ["elec 4wheels"]] = (
        if_then_else(
            time() < 2005,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: (
                percent_h_vehicles_tini().loc[:, "elec 4wheels"].reset_coords(drop=True)
                - 0
            )
            / (t_hist_h_transp() - 2005),
        )
        .expand_dims({"Households vehicles": ["elec 4wheels"]}, 1)
        .values
    )
    value.loc[:, ["gas 4wheels"]] = (
        if_then_else(
            time() < 2005,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: (
                percent_h_vehicles_tini().loc[:, "gas 4wheels"].reset_coords(drop=True)
                - 0
            )
            / (t_hist_h_transp() - 2005),
        )
        .expand_dims({"Households vehicles": ["gas 4wheels"]}, 1)
        .values
    )
    value.loc[:, ["liq 2wheels"]] = (
        if_then_else(
            time() < 2005,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: (
                percent_h_vehicles_tini().loc[:, "liq 2wheels"].reset_coords(drop=True)
                - initial_2w_percent()
            )
            / (t_hist_h_transp() - 2005),
        )
        .expand_dims({"Households vehicles": ["liq 2wheels"]}, 1)
        .values
    )
    value.loc[:, ["elec 2wheels"]] = (
        if_then_else(
            time() < 2005,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: (
                percent_h_vehicles_tini().loc[:, "elec 2wheels"].reset_coords(drop=True)
                - 0
            )
            / (t_hist_h_transp() - 2005),
        )
        .expand_dims({"Households vehicles": ["elec 2wheels"]}, 1)
        .values
    )
    return value


@component.add(
    name="percent H vehicles Tini",
    units="Dmnl",
    subscripts=["scenarios", "Households vehicles"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 6,
        "t_ini_hveh": 6,
        "percent_h_vehicles_initial": 6,
        "aaux_hveh_ini": 6,
    },
)
def percent_h_vehicles_tini():
    """
    percents in the year Tini of start of policy of vehicles relative to total 4w+2w:
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "Households vehicles": _subscript_dict["Households vehicles"],
        },
        ["scenarios", "Households vehicles"],
    )
    value.loc[["User defined"], :] = (
        if_then_else(
            time() < float(t_ini_hveh().loc["User defined"]),
            lambda: percent_h_vehicles_initial(),
            lambda: aaux_hveh_ini().loc["User defined", :].reset_coords(drop=True),
        )
        .expand_dims({"scenarios": ["User defined"]}, 0)
        .values
    )
    value.loc[["BAU"], :] = (
        if_then_else(
            time() < float(t_ini_hveh().loc["BAU"]),
            lambda: percent_h_vehicles_initial(),
            lambda: aaux_hveh_ini().loc["BAU", :].reset_coords(drop=True),
        )
        .expand_dims({"scenarios": ["BAU"]}, 0)
        .values
    )
    value.loc[["SCEN1"], :] = (
        if_then_else(
            time() < float(t_ini_hveh().loc["SCEN1"]),
            lambda: percent_h_vehicles_initial(),
            lambda: aaux_hveh_ini().loc["SCEN1", :].reset_coords(drop=True),
        )
        .expand_dims({"scenarios": ["SCEN1"]}, 0)
        .values
    )
    value.loc[["SCEN2"], :] = (
        if_then_else(
            time() < float(t_ini_hveh().loc["SCEN2"]),
            lambda: percent_h_vehicles_initial(),
            lambda: aaux_hveh_ini().loc["SCEN2", :].reset_coords(drop=True),
        )
        .expand_dims({"scenarios": ["SCEN2"]}, 0)
        .values
    )
    value.loc[["SCEN3"], :] = (
        if_then_else(
            time() < float(t_ini_hveh().loc["SCEN3"]),
            lambda: percent_h_vehicles_initial(),
            lambda: aaux_hveh_ini().loc["SCEN3", :].reset_coords(drop=True),
        )
        .expand_dims({"scenarios": ["SCEN3"]}, 0)
        .values
    )
    value.loc[["SCEN4"], :] = (
        if_then_else(
            time() < float(t_ini_hveh().loc["SCEN4"]),
            lambda: percent_h_vehicles_initial(),
            lambda: aaux_hveh_ini().loc["SCEN4", :].reset_coords(drop=True),
        )
        .expand_dims({"scenarios": ["SCEN4"]}, 0)
        .values
    )
    return value


@component.add(
    name="P labour share",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_labour_share"},
)
def p_labour_share():
    """
    Labour share targetted by 2050.
    """
    return _ext_constant_p_labour_share()


_ext_constant_p_labour_share = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C3",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_labour_share",
)

_ext_constant_p_labour_share.add(
    "inputs_EU.xlsx", "SCEN1", "C3", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_labour_share.add(
    "inputs_EU.xlsx", "SCEN2", "C3", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_labour_share.add(
    "inputs_EU.xlsx", "SCEN3", "C3", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_labour_share.add(
    "inputs_EU.xlsx", "SCEN4", "C3", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_labour_share.add(
    "inputs_EU.xlsx", "User defined", "C3", {"scenarios": ["User defined"]}
)


@component.add(
    name="Initial Labour share",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_labour_share():
    """
    Historic 2015 Labour share
    """
    return 0.473592


@component.add(
    name="GFCF not covered",
    units="Mdollars/Year",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "gross_fixed_capital_formation": 1,
        "real_gfcf_by_sector": 1,
    },
)
def gfcf_not_covered():
    """
    Gap between gross fixed capital formation required and real gross fixed capital formation (after energy-economy feedback)
    """
    return if_then_else(
        time() < 2009,
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "sectors": _subscript_dict["sectors"],
            },
            ["scenarios", "sectors"],
        ),
        lambda: gross_fixed_capital_formation() - real_gfcf_by_sector(),
    )


@component.add(
    name="CC total not covered",
    units="Mdollars/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"demand_not_covered_total_fd": 1, "capital_share": 1},
)
def cc_total_not_covered():
    """
    Gap between capital compensation required and real capital compensation (after energy-economy feedback)
    """
    return demand_not_covered_total_fd() * capital_share()


@component.add(
    name="Historic labour share growth",
    units="Dmnl",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_historic_labour_share_growth",
        "__data__": "_ext_data_historic_labour_share_growth",
        "time": 1,
    },
)
def historic_labour_share_growth():
    """
    Historic variation of labour share (own calculations from Eurostats).
    """
    return _ext_data_historic_labour_share_growth(time())


_ext_data_historic_labour_share_growth = ExtData(
    "inputs_EU.xlsx",
    "Economy",
    "324",
    "B326",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_historic_labour_share_growth",
)


@component.add(
    name="real exchange next step",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_exchange": 1, "variation_real_exchange": 1},
)
def real_exchange_next_step():
    return real_exchange() + variation_real_exchange()


@component.add(
    name='"share Exp vs GFCF+HD+Exp"',
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "exports_demand": 2,
        "gross_fixed_capital_formation": 1,
        "household_demand": 1,
    },
)
def share_exp_vs_gfcfhdexp():
    """
    Ratio 'Exports/GFCF+Exports+Households demand'.
    """
    return exports_demand() / (
        gross_fixed_capital_formation() + household_demand() + exports_demand()
    )


@component.add(
    name="beta 1 gfcf",
    units="Dmnl",
    subscripts=["sectors"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_beta_1_gfcf"},
)
def beta_1_gfcf():
    """
    Sectorial Beta coefficients of panel data regression of Gross fixed capital formation
    """
    return _ext_constant_beta_1_gfcf()


_ext_constant_beta_1_gfcf = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "B331",
    {"sectors": _subscript_dict["sectors"]},
    _root,
    {"sectors": _subscript_dict["sectors"]},
    "_ext_constant_beta_1_gfcf",
)


@component.add(
    name="beta 1 exp",
    units="Dmnl",
    subscripts=["sectors"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_beta_1_exp"},
)
def beta_1_exp():
    """
    Sectorial Beta coefficients of panel data regression of exports
    """
    return _ext_constant_beta_1_exp()


_ext_constant_beta_1_exp = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "B337",
    {"sectors": _subscript_dict["sectors"]},
    _root,
    {"sectors": _subscript_dict["sectors"]},
    "_ext_constant_beta_1_exp",
)


@component.add(
    name="variation real exchange",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"variation_historic_real_exchange": 1},
)
def variation_real_exchange():
    """
    Variation of Real Effective Exchange Rate
    """
    return variation_historic_real_exchange()


@component.add(
    name="beta 2 gfcf",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_beta_2_gfcf"},
)
def beta_2_gfcf():
    """
    Beta coefficient of first independent variable in panel data regression of Gross fixed capital formation
    """
    return _ext_constant_beta_2_gfcf()


_ext_constant_beta_2_gfcf = ExtConstant(
    "inputs_EU.xlsx", "Economy", "E329", {}, _root, {}, "_ext_constant_beta_2_gfcf"
)


@component.add(
    name="Total GFCF",
    units="Mdollars",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gross_fixed_capital_formation": 1},
)
def total_gfcf():
    """
    Whole economy domestic gross fixed capital formation
    """
    return sum(
        gross_fixed_capital_formation().rename({"sectors": "sectors!"}),
        dim=["sectors!"],
    )


@component.add(
    name="beta 2 hh",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_beta_2_hh"},
)
def beta_2_hh():
    """
    beta coefficient for first independent variable in panel data regression of households consumption
    """
    return _ext_constant_beta_2_hh()


_ext_constant_beta_2_hh = ExtConstant(
    "inputs_EU.xlsx", "Economy", "E332", {}, _root, {}, "_ext_constant_beta_2_hh"
)


@component.add(
    name="beta 3 gfcf",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_beta_3_gfcf"},
)
def beta_3_gfcf():
    """
    Beta coefficient of second independent variable in panel data regression of Gross fixed capital formation
    """
    return _ext_constant_beta_3_gfcf()


_ext_constant_beta_3_gfcf = ExtConstant(
    "inputs_EU.xlsx", "Economy", "G329", {}, _root, {}, "_ext_constant_beta_3_gfcf"
)


@component.add(
    name="beta 3 exp",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_beta_3_exp"},
)
def beta_3_exp():
    """
    Beta coefficient of second independent variable in panel data regression of exports
    """
    return _ext_constant_beta_3_exp()


_ext_constant_beta_3_exp = ExtConstant(
    "inputs_EU.xlsx", "Economy", "G335", {}, _root, {}, "_ext_constant_beta_3_exp"
)


@component.add(
    name="Initial capital share",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_capital_share():
    """
    Historic 2015 Labour share
    """
    return 0.407001


@component.add(
    name="initial CC total",
    units="Mdollars",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_cc_total():
    """
    Initial capital compensation
    """
    return 3594330.0


@component.add(
    name="Annual GDPpc growth rate",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "select_gdppc_evolution_input": 2,
        "time": 2,
        "gdppc_annual_growth_ssp2": 1,
        "p_customized_cte_gdppc_variation": 1,
        "p_customized_year_gdppc_evolution": 1,
        "p_timeseries_gdppc_growth_rate": 2,
    },
)
def annual_gdppc_growth_rate():
    return if_then_else(
        select_gdppc_evolution_input() == 0,
        lambda: xr.DataArray(
            gdppc_annual_growth_ssp2(time()),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            select_gdppc_evolution_input() == 1,
            lambda: p_timeseries_gdppc_growth_rate(),
            lambda: if_then_else(
                time() < p_customized_year_gdppc_evolution(),
                lambda: p_timeseries_gdppc_growth_rate(),
                lambda: p_customized_cte_gdppc_variation(),
            ),
        ),
    )


@component.add(
    name="Number vehicles H",
    units="vehicles",
    subscripts=["scenarios", "Households vehicles"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ratio_n_veh_demand_h": 1,
        "household_demand_total": 1,
        "percents_h_vehicles": 1,
    },
)
def number_vehicles_h():
    """
    Estimated number of households vehicles asuming constant ratios of vehicles per households demand
    """
    return (
        ratio_n_veh_demand_h()
        * household_demand_total()
        * 1e-06
        * percents_h_vehicles()
        / 100
    )


@component.add(
    name="Total government expenditure",
    units="Mdollars",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sectoral_government_expenditures": 1},
)
def total_government_expenditure():
    """
    Whole economy government expenditures
    """
    return sum(
        sectoral_government_expenditures().rename({"sectors": "sectors!"}),
        dim=["sectors!"],
    )


@component.add(
    name="Sectoral Government expenditures",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_final_demand_by_sector_eu": 1, "government_expenditure_share": 1},
)
def sectoral_government_expenditures():
    """
    Expenditures made by the public sector in each sector.
    """
    return real_final_demand_by_sector_eu() * government_expenditure_share()


@component.add(
    name="Initial water intensity for households",
    units="dam3/Mdollars",
    subscripts=["scenarios", "water"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "household_demand_total": 1,
        "initial_water_use_by_households": 1,
    },
)
def initial_water_intensity_for_households():
    return if_then_else(
        time() < 1996,
        lambda: initial_water_use_by_households() / household_demand_total(),
        lambda: xr.DataArray(
            0,
            {
                "water": _subscript_dict["water"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["water", "scenarios"],
        ),
    ).transpose("scenarios", "water")


@component.add(
    name="historic real exchange",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_real_exchange",
        "__lookup__": "_ext_lookup_historic_real_exchange",
    },
)
def historic_real_exchange(x, final_subs=None):
    """
    Historic Real Effective Exchange Rate (Eurostats)
    """
    return _ext_lookup_historic_real_exchange(x, final_subs)


_ext_lookup_historic_real_exchange = ExtLookup(
    "inputs_EU.xlsx",
    "Economy",
    "344",
    "B344",
    {},
    _root,
    {},
    "_ext_lookup_historic_real_exchange",
)


@component.add(
    name="select GDPpc evolution input",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_select_gdppc_evolution_input"},
)
def select_gdppc_evolution_input():
    """
    0. SSP2 1. Timeseries 2. From customized year, set annual constant variation
    """
    return _ext_constant_select_gdppc_evolution_input()


_ext_constant_select_gdppc_evolution_input = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B4",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_select_gdppc_evolution_input",
)

_ext_constant_select_gdppc_evolution_input.add(
    "inputs_EU.xlsx", "SCEN1", "B4", {"scenarios": ["SCEN1"]}
)

_ext_constant_select_gdppc_evolution_input.add(
    "inputs_EU.xlsx", "SCEN2", "B4", {"scenarios": ["SCEN2"]}
)

_ext_constant_select_gdppc_evolution_input.add(
    "inputs_EU.xlsx", "SCEN3", "B4", {"scenarios": ["SCEN3"]}
)

_ext_constant_select_gdppc_evolution_input.add(
    "inputs_EU.xlsx", "SCEN4", "B4", {"scenarios": ["SCEN4"]}
)

_ext_constant_select_gdppc_evolution_input.add(
    "inputs_EU.xlsx", "User defined", "B4", {"scenarios": ["User defined"]}
)


@component.add(
    name="Gross fixed capital formation",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_gross_fixed_capital_formation": 1},
    other_deps={
        "_integ_gross_fixed_capital_formation": {
            "initial": {"initial_gfcf": 1},
            "step": {"variation_gfcf": 1, "gfcf_not_covered": 1},
        }
    },
)
def gross_fixed_capital_formation():
    """
    Sectorial domestic value of gross fixed capital formation
    """
    return _integ_gross_fixed_capital_formation()


_integ_gross_fixed_capital_formation = Integ(
    lambda: variation_gfcf().rename({"sectors1": "sectors"}) - gfcf_not_covered(),
    lambda: initial_gfcf().expand_dims({"scenarios": _subscript_dict["scenarios"]}, 0),
    "_integ_gross_fixed_capital_formation",
)


@component.add(
    name="growth capital share",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "laborcapital_share_cte": 1,
        "capital_share_growth": 1,
        "historic_capital_share_growth": 1,
    },
)
def growth_capital_share():
    return if_then_else(
        time() > 2014,
        lambda: if_then_else(
            time() > 2050,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: capital_share_growth() * laborcapital_share_cte(),
        ),
        lambda: xr.DataArray(
            historic_capital_share_growth(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
    )


@component.add(
    name="growth labour share",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "laborcapital_share_cte": 1,
        "labour_share_growth": 1,
        "historic_labour_share_growth": 1,
    },
)
def growth_labour_share():
    """
    Real variation rate of labour share depending on activation.
    """
    return if_then_else(
        time() > 2014,
        lambda: if_then_else(
            time() > 2050,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: labour_share_growth() * laborcapital_share_cte(),
        ),
        lambda: xr.DataArray(
            historic_labour_share_growth(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
    )


@component.add(
    name="Water use by households",
    units="dam3",
    subscripts=["scenarios", "water"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"water_intensity_for_households": 1, "household_demand_total": 1},
)
def water_use_by_households():
    """
    Water use by type by households.
    """
    return water_intensity_for_households() * household_demand_total()


@component.add(
    name="Initial exports demand",
    units="Mdollars",
    subscripts=["sectors"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_exports_demand"},
)
def initial_exports_demand():
    """
    Initial value of sectorial exports
    """
    return _ext_constant_initial_exports_demand()


_ext_constant_initial_exports_demand = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "B342",
    {"sectors": _subscript_dict["sectors"]},
    _root,
    {"sectors": _subscript_dict["sectors"]},
    "_ext_constant_initial_exports_demand",
)


@component.add(
    name="Total exports",
    units="Mdollars",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"exports_demand": 1},
)
def total_exports():
    """
    Whole economy exports
    """
    return sum(exports_demand().rename({"sectors": "sectors!"}), dim=["sectors!"])


@component.add(
    name="capital share",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_capital_share": 1},
    other_deps={
        "_integ_capital_share": {"initial": {}, "step": {"variation_capital_share": 1}}
    },
)
def capital_share():
    """
    Ratio 'Capital compensation/GDP'
    """
    return _integ_capital_share()


_integ_capital_share = Integ(
    lambda: variation_capital_share(),
    lambda: xr.DataArray(
        0.413596, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    "_integ_capital_share",
)


@component.add(
    name="initial GFCF",
    units="Mdollars",
    subscripts=["sectors"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_gfcf"},
)
def initial_gfcf():
    """
    Initial value of gross fixed capital formation
    """
    return _ext_constant_initial_gfcf()


_ext_constant_initial_gfcf = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "B340",
    {"sectors": _subscript_dict["sectors"]},
    _root,
    {"sectors": _subscript_dict["sectors"]},
    "_ext_constant_initial_gfcf",
)


@component.add(
    name="Historic exports demand",
    units="Mdollars",
    subscripts=["sectors"],
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_exports_demand",
        "__lookup__": "_ext_lookup_historic_exports_demand",
    },
)
def historic_exports_demand(x, final_subs=None):
    """
    Historic exports (WIOD-35 sectors)
    """
    return _ext_lookup_historic_exports_demand(x, final_subs)


_ext_lookup_historic_exports_demand = ExtLookup(
    "inputs_EU.xlsx",
    "Economy",
    "348",
    "B349",
    {"sectors": _subscript_dict["sectors"]},
    _root,
    {"sectors": _subscript_dict["sectors"]},
    "_ext_lookup_historic_exports_demand",
)


@component.add(
    name="variation historic GFCF",
    units="Mdollars/Year",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 2, "historic_gfcf": 2},
)
def variation_historic_gfcf():
    """
    Historic variation of gross fixed capital formation (WIOD-35 sectors)
    """
    return (
        historic_gfcf(integer(time() + 1)) - historic_gfcf(integer(time()))
    ).expand_dims({"scenarios": _subscript_dict["scenarios"]}, 0)


@component.add(
    name="real demand world next step",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_demand_world": 1, "annual_gdp_growth_rate_world": 1},
)
def real_demand_world_next_step():
    return real_demand_world() * (1 + annual_gdp_growth_rate_world())


@component.add(
    name="Real Exports demand by sector",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_final_demand_by_sector_eu": 1,
        "government_expenditure_and_changes_in_inventories_shares": 1,
        "share_exp_vs_gfcfhdexp": 1,
    },
)
def real_exports_demand_by_sector():
    """
    Real exports after energy feedback.
    """
    return (
        real_final_demand_by_sector_eu()
        * (1 - government_expenditure_and_changes_in_inventories_shares())
        * share_exp_vs_gfcfhdexp()
    )


@component.add(
    name="Historic GDPpc",
    units="$/person",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_gdppc",
        "__lookup__": "_ext_lookup_historic_gdppc",
    },
)
def historic_gdppc(x, final_subs=None):
    """
    Historic GDP per capita. Data from WIOD for 1995-2009 and from World Bank stats for 2010-2016.
    """
    return _ext_lookup_historic_gdppc(x, final_subs)


_ext_lookup_historic_gdppc = ExtLookup(
    "inputs_EU.xlsx",
    "Economy",
    "324",
    "B328",
    {},
    _root,
    {},
    "_ext_lookup_historic_gdppc",
)


@component.add(
    name="increase Households energy final demand for Transp",
    units="EJ/T$",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "energy_intensity_of_households_transport": 1,
        "initial_energy_intensity_of_households_transport_2009": 1,
        "household_demand_total": 1,
    },
)
def increase_households_energy_final_demand_for_transp():
    return (
        (
            energy_intensity_of_households_transport()
            - initial_energy_intensity_of_households_transport_2009().rename(
                {"final sources1": "final sources"}
            )
        )
        * household_demand_total()
        / 1000000.0
    )


@component.add(
    name="variation labour share",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"growth_labour_share": 1, "labour_share": 1},
)
def variation_labour_share():
    """
    Real variation of labour share.
    """
    return growth_labour_share() * labour_share()


@component.add(
    name="initial LC total",
    units="Mdollars",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_lc_total():
    """
    Initial labour compensation
    """
    return 4181720.0


@component.add(
    name="Bet 0 hh",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_bet_0_hh"},
)
def bet_0_hh():
    """
    Beta coefficient (intercept) in panel data regression of households consumption
    """
    return _ext_constant_bet_0_hh()


_ext_constant_bet_0_hh = ExtConstant(
    "inputs_EU.xlsx", "Economy", "C332", {}, _root, {}, "_ext_constant_bet_0_hh"
)


@component.add(
    name="beta 0 gfcf",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_beta_0_gfcf"},
)
def beta_0_gfcf():
    """
    Beta coefficient (intercept) of panel data regression of Gross fixed capital formation
    """
    return _ext_constant_beta_0_gfcf()


_ext_constant_beta_0_gfcf = ExtConstant(
    "inputs_EU.xlsx", "Economy", "C329", {}, _root, {}, "_ext_constant_beta_0_gfcf"
)


@component.add(
    name="beta 0 exp",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_beta_0_exp"},
)
def beta_0_exp():
    """
    Beta coefficient (intercept) of panel data regression of exports
    """
    return _ext_constant_beta_0_exp()


_ext_constant_beta_0_exp = ExtConstant(
    "inputs_EU.xlsx", "Economy", "C335", {}, _root, {}, "_ext_constant_beta_0_exp"
)


@component.add(
    name="Historic HD",
    subscripts=["sectors"],
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_hd",
        "__lookup__": "_ext_lookup_historic_hd",
    },
)
def historic_hd(x, final_subs=None):
    """
    Historical final demand by households (WIOD-35 sectors)
    """
    return _ext_lookup_historic_hd(x, final_subs)


_ext_lookup_historic_hd = ExtLookup(
    "inputs_EU.xlsx",
    "Economy",
    "475",
    "B476",
    {"sectors": _subscript_dict["sectors"]},
    _root,
    {"sectors": _subscript_dict["sectors"]},
    "_ext_lookup_historic_hd",
)


@component.add(
    name="Year final capial share", comp_type="Constant", comp_subtype="Normal"
)
def year_final_capial_share():
    """
    Year of final capital share by scenarios to use in the mean accumulative growth rate.
    """
    return 2050


@component.add(
    name="Beta 1 hh",
    units="Dmnl",
    subscripts=["sectors"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_beta_1_hh"},
)
def beta_1_hh():
    """
    Sectorial Beta coefficient in panel data regression of households consumption
    """
    return _ext_constant_beta_1_hh()


_ext_constant_beta_1_hh = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "B334",
    {"sectors": _subscript_dict["sectors"]},
    _root,
    {"sectors": _subscript_dict["sectors"]},
    "_ext_constant_beta_1_hh",
)


@component.add(
    name='"share GFCF vs GFCF+HD+Exp"',
    units="Dmnl",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "gross_fixed_capital_formation": 2,
        "household_demand": 1,
        "exports_demand": 1,
    },
)
def share_gfcf_vs_gfcfhdexp():
    """
    Ratio 'GFCF/GFCF+Exports+Households demand'.
    """
    return gross_fixed_capital_formation() / (
        gross_fixed_capital_formation() + household_demand() + exports_demand()
    )


@component.add(
    name="beta 2 exp",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_beta_2_exp"},
)
def beta_2_exp():
    """
    Beta coefficient of first independent variable in panel data regression of exports
    """
    return _ext_constant_beta_2_exp()


_ext_constant_beta_2_exp = ExtConstant(
    "inputs_EU.xlsx", "Economy", "E335", {}, _root, {}, "_ext_constant_beta_2_exp"
)


@component.add(
    name='"Labor/Capital share cte?"',
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def laborcapital_share_cte():
    """
    0: Labor share: cte 1: Labor share evolves following "P labor share"
    """
    return 1


@component.add(
    name="P capital share",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_capital_share"},
)
def p_capital_share():
    """
    Capital share targetted by 2050.
    """
    return _ext_constant_p_capital_share()


_ext_constant_p_capital_share = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F3",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_capital_share",
)

_ext_constant_p_capital_share.add(
    "inputs_EU.xlsx", "SCEN1", "F3", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_capital_share.add(
    "inputs_EU.xlsx", "SCEN2", "F3", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_capital_share.add(
    "inputs_EU.xlsx", "SCEN3", "F3", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_capital_share.add(
    "inputs_EU.xlsx", "SCEN4", "F3", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_capital_share.add(
    "inputs_EU.xlsx", "User defined", "F3", {"scenarios": ["User defined"]}
)


@component.add(
    name="demand not covered by sector FD EU",
    units="Mdollars/Year",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "real_final_demand_by_sector_eu": 1,
        "demand_by_sector_fd_eu": 1,
    },
)
def demand_not_covered_by_sector_fd_eu():
    """
    Gap between final demand required and real final demand (after energy-economy feedback)
    """
    return if_then_else(
        time() < 2009,
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "sectors": _subscript_dict["sectors"],
            },
            ["scenarios", "sectors"],
        ),
        lambda: demand_by_sector_fd_eu() - real_final_demand_by_sector_eu(),
    )


@component.add(
    name="Historic capital share growth",
    units="Dmnl",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_historic_capital_share_growth",
        "__data__": "_ext_data_historic_capital_share_growth",
        "time": 1,
    },
)
def historic_capital_share_growth():
    """
    Historic variation of capital share (own calculations from Eurostats).
    """
    return _ext_data_historic_capital_share_growth(time())


_ext_data_historic_capital_share_growth = ExtData(
    "inputs_EU.xlsx",
    "Economy",
    "324",
    "B325",
    None,
    {},
    _root,
    {},
    "_ext_data_historic_capital_share_growth",
)


@component.add(
    name="variation capital share",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"capital_share": 1, "growth_capital_share": 1},
)
def variation_capital_share():
    """
    Real variation of capital share.
    """
    return capital_share() * growth_capital_share()


@component.add(
    name="variation CC",
    units="Mdollars/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "capital_share": 1,
        "desired_annual_total_demand_growth_rate": 2,
        "growth_capital_share": 2,
        "gdp_eu": 1,
    },
)
def variation_cc():
    """
    Variation of capital compensation
    """
    return (
        capital_share()
        * (
            desired_annual_total_demand_growth_rate()
            + growth_capital_share()
            + desired_annual_total_demand_growth_rate() * growth_capital_share()
        )
        * gdp_eu()
        * 1000000.0
    )


@component.add(
    name="P timeseries GDPpc growth rate",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_p_timeseries_gdppc_growth_rate",
        "__data__": "_ext_data_p_timeseries_gdppc_growth_rate",
        "time": 1,
    },
)
def p_timeseries_gdppc_growth_rate():
    """
    Annual GDPpc growth from timeseries.
    """
    return _ext_data_p_timeseries_gdppc_growth_rate(time())


_ext_data_p_timeseries_gdppc_growth_rate = ExtData(
    "inputs_EU.xlsx",
    "BAU",
    "5",
    "E6",
    "interpolate",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_data_p_timeseries_gdppc_growth_rate",
)

_ext_data_p_timeseries_gdppc_growth_rate.add(
    "inputs_EU.xlsx", "SCEN1", "5", "E6", "interpolate", {"scenarios": ["SCEN1"]}
)

_ext_data_p_timeseries_gdppc_growth_rate.add(
    "inputs_EU.xlsx", "SCEN2", "5", "E6", "interpolate", {"scenarios": ["SCEN2"]}
)

_ext_data_p_timeseries_gdppc_growth_rate.add(
    "inputs_EU.xlsx", "SCEN3", "5", "E6", "interpolate", {"scenarios": ["SCEN3"]}
)

_ext_data_p_timeseries_gdppc_growth_rate.add(
    "inputs_EU.xlsx", "SCEN4", "5", "E6", "interpolate", {"scenarios": ["SCEN4"]}
)

_ext_data_p_timeseries_gdppc_growth_rate.add(
    "inputs_EU.xlsx",
    "User defined",
    "5",
    "E6",
    "interpolate",
    {"scenarios": ["User defined"]},
)


@component.add(
    name="P customized cte GDPpc variation",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_customized_cte_gdppc_variation"},
)
def p_customized_cte_gdppc_variation():
    """
    From customized year, set annual constant variation.
    """
    return _ext_constant_p_customized_cte_gdppc_variation()


_ext_constant_p_customized_cte_gdppc_variation = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "G7",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_customized_cte_gdppc_variation",
)

_ext_constant_p_customized_cte_gdppc_variation.add(
    "inputs_EU.xlsx", "SCEN1", "G7", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_customized_cte_gdppc_variation.add(
    "inputs_EU.xlsx", "SCEN2", "G7", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_customized_cte_gdppc_variation.add(
    "inputs_EU.xlsx", "SCEN3", "G7", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_customized_cte_gdppc_variation.add(
    "inputs_EU.xlsx", "SCEN4", "G7", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_customized_cte_gdppc_variation.add(
    "inputs_EU.xlsx", "User defined", "G7", {"scenarios": ["User defined"]}
)


@component.add(
    name="variation demand flow FD EU",
    units="Mdollars/Year",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "historic_variation_demand": 1,
        "share_government_expenditures_and_changes_in_inventories_next_step": 4,
        "variation_household_demand": 1,
        "variation_gfcf": 1,
        "exports_demand": 1,
        "gross_fixed_capital_formation": 1,
        "household_demand": 1,
        "government_expenditure_and_changes_in_inventories_shares": 3,
        "variation_exports_demand": 1,
    },
)
def variation_demand_flow_fd_eu():
    """
    variation of final demand by EU28 industrial sectors
    """
    return if_then_else(
        time() < 2009,
        lambda: historic_variation_demand(),
        lambda: (
            gross_fixed_capital_formation()
            * (
                1
                - (
                    1
                    - share_government_expenditures_and_changes_in_inventories_next_step()
                )
                / (1 - government_expenditure_and_changes_in_inventories_shares())
            )
            + exports_demand()
            * (
                1
                - (
                    1
                    - share_government_expenditures_and_changes_in_inventories_next_step()
                )
                / (1 - government_expenditure_and_changes_in_inventories_shares())
            )
            + household_demand()
            * (
                1
                - (
                    1
                    - share_government_expenditures_and_changes_in_inventories_next_step()
                )
                / (1 - government_expenditure_and_changes_in_inventories_shares())
            )
            + variation_gfcf().rename({"sectors1": "sectors"})
            + variation_household_demand()
            + variation_exports_demand()
        )
        / (1 - share_government_expenditures_and_changes_in_inventories_next_step()),
    )


@component.add(
    name="Desired GDP",
    units="T$",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"desired_gdppc": 1, "population": 1, "dollars_to_tdollars": 1},
)
def desired_gdp():
    """
    Desired GDP level for each scenario (user selection).
    """
    return desired_gdppc() * population() / dollars_to_tdollars()


@component.add(
    name="Desired GDP delayed 1yr",
    units="T$/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_desired_gdp_delayed_1yr": 1},
    other_deps={
        "_delayfixed_desired_gdp_delayed_1yr": {
            "initial": {},
            "step": {"desired_gdp": 1},
        }
    },
)
def desired_gdp_delayed_1yr():
    """
    Desired GDP delayed 1 year.
    """
    return _delayfixed_desired_gdp_delayed_1yr()


_delayfixed_desired_gdp_delayed_1yr = DelayFixed(
    lambda: desired_gdp(),
    lambda: 1,
    lambda: xr.DataArray(
        8.6, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    time_step,
    "_delayfixed_desired_gdp_delayed_1yr",
)


@component.add(
    name="Real Household demand by sector",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_final_demand_by_sector_eu": 1,
        "government_expenditure_and_changes_in_inventories_shares": 1,
        "share_exp_vs_gfcfhdexp": 1,
        "share_gfcf_vs_gfcfhdexp": 1,
    },
)
def real_household_demand_by_sector():
    """
    Real Households demand after energy feedback.
    """
    return (
        real_final_demand_by_sector_eu()
        * (1 - government_expenditure_and_changes_in_inventories_shares())
        * (1 - share_gfcf_vs_gfcfhdexp() - share_exp_vs_gfcfhdexp())
    )


@component.add(
    name="Sectoral changes in inventories",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_final_demand_by_sector_eu": 1, "changes_in_inventories_share": 1},
)
def sectoral_changes_in_inventories():
    """
    Changes in inventories by sector
    """
    return real_final_demand_by_sector_eu() * changes_in_inventories_share()


@component.add(
    name="Desired GDPpc",
    units="$/person",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_desired_gdppc": 1},
    other_deps={
        "_integ_desired_gdppc": {
            "initial": {"gdppc_initial_year": 1},
            "step": {"desired_variation_gdppc": 1},
        }
    },
)
def desired_gdppc():
    return _integ_desired_gdppc()


_integ_desired_gdppc = Integ(
    lambda: desired_variation_gdppc(),
    lambda: xr.DataArray(
        gdppc_initial_year(), {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    "_integ_desired_gdppc",
)


@component.add(
    name="diff annual GDP growth rate",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"annual_gdp_growth_rate_eu": 1, "desired_annual_gdp_growth_rate": 2},
)
def diff_annual_gdp_growth_rate():
    """
    Difference between the annual GDP growth rate desired and the real obtained.
    """
    return zidz(
        annual_gdp_growth_rate_eu() - desired_annual_gdp_growth_rate(),
        desired_annual_gdp_growth_rate(),
    )


@component.add(
    name="variation historic demand",
    units="Mdollars/Year",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 2, "historic_hd": 2},
)
def variation_historic_demand():
    """
    Variation of final demand by households
    """
    return (
        historic_hd(integer(time() + 1)) - historic_hd(integer(time()))
    ).expand_dims({"scenarios": _subscript_dict["scenarios"]}, 0)


@component.add(
    name="capital share growth",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "p_capital_share": 1,
        "initial_capital_share": 1,
        "year_final_capial_share": 1,
        "year_initial_capital_share": 1,
    },
)
def capital_share_growth():
    """
    Real variation rate of capital share depending on activation.
    """
    return (p_capital_share() / initial_capital_share()) ** (
        1 / (year_final_capial_share() - year_initial_capital_share())
    ) - 1


@component.add(
    name="variation historic real exchange",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 2, "historic_real_exchange": 2},
)
def variation_historic_real_exchange():
    """
    Variation of historic Real Effective exchange Rate (Eurostats)
    """
    return historic_real_exchange(integer(time() + 1)) - historic_real_exchange(
        integer(time())
    )


@component.add(
    name="initial household demand",
    subscripts=["sectors"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_household_demand"},
)
def initial_household_demand():
    """
    Initial final demand by households
    """
    return _ext_constant_initial_household_demand()


_ext_constant_initial_household_demand = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "B339",
    {"sectors": _subscript_dict["sectors"]},
    _root,
    {"sectors": _subscript_dict["sectors"]},
    "_ext_constant_initial_household_demand",
)


@component.add(
    name="GDPpc initial year",
    units="$/person",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_gdppc_initial_year"},
)
def gdppc_initial_year():
    return _ext_constant_gdppc_initial_year()


_ext_constant_gdppc_initial_year = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "B328",
    {},
    _root,
    {},
    "_ext_constant_gdppc_initial_year",
)


@component.add(
    name="CC next step",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"cc_total": 1, "variation_cc": 1},
)
def cc_next_step():
    return cc_total() + variation_cc()


@component.add(
    name="CC total delayed",
    units="Mdollars",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_cc_total_delayed": 1},
    other_deps={
        "_delayfixed_cc_total_delayed": {"initial": {}, "step": {"cc_total": 1}}
    },
)
def cc_total_delayed():
    """
    Lagged capital compensation
    """
    return _delayfixed_cc_total_delayed()


_delayfixed_cc_total_delayed = DelayFixed(
    lambda: cc_total(),
    lambda: 1,
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_cc_total_delayed",
)


@component.add(
    name="real exchange",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_real_exchange": 1},
    other_deps={
        "_integ_real_exchange": {"initial": {}, "step": {"variation_real_exchange": 1}}
    },
)
def real_exchange():
    """
    Real Effective Exchange Rate
    """
    return _integ_real_exchange()


_integ_real_exchange = Integ(
    lambda: variation_real_exchange(), lambda: 1, "_integ_real_exchange"
)


@component.add(
    name="Historic GFCF",
    units="Mdollars",
    subscripts=["sectors"],
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_gfcf",
        "__lookup__": "_ext_lookup_historic_gfcf",
    },
)
def historic_gfcf(x, final_subs=None):
    """
    Historic gross fixed capital formation (WIOD-35 sectors)
    """
    return _ext_lookup_historic_gfcf(x, final_subs)


_ext_lookup_historic_gfcf = ExtLookup(
    "inputs_EU.xlsx",
    "Economy",
    "514",
    "B515",
    {"sectors": _subscript_dict["sectors"]},
    _root,
    {"sectors": _subscript_dict["sectors"]},
    "_ext_lookup_historic_gfcf",
)


@component.add(
    name="Historic water by type intensities for households",
    units="dam3/Mdollars",
    subscripts=["scenarios", "water"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "household_demand_total": 1,
        "historic_water_use_by_type_for_households": 1,
    },
)
def historic_water_by_type_intensities_for_households():
    return if_then_else(
        time() < 2009,
        lambda: historic_water_use_by_type_for_households(time())
        / household_demand_total(),
        lambda: xr.DataArray(
            0,
            {
                "water": _subscript_dict["water"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["water", "scenarios"],
        ),
    ).transpose("scenarios", "water")


@component.add(
    name="Exports demand not covered",
    units="Mdollars/Year",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "real_exports_demand_by_sector": 1, "exports_demand": 1},
)
def exports_demand_not_covered():
    """
    Gap between exports required and real exports (after energy-economy feedback)
    """
    return if_then_else(
        time() < 2009,
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "sectors": _subscript_dict["sectors"],
            },
            ["scenarios", "sectors"],
        ),
        lambda: exports_demand() - real_exports_demand_by_sector(),
    )


@component.add(
    name="Year Final Labour share", comp_type="Constant", comp_subtype="Normal"
)
def year_final_labour_share():
    """
    Year of final labour share by scenarios to use in the mean accumulative growth rate.
    """
    return 2050


@component.add(
    name="Household demand not covered",
    units="Mdollars/Year",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "real_household_demand_by_sector": 1, "household_demand": 1},
)
def household_demand_not_covered():
    """
    Gap between households consumption required and households real consumption (after energy-economy feedback)
    """
    return if_then_else(
        time() < 2009,
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "sectors": _subscript_dict["sectors"],
            },
            ["scenarios", "sectors"],
        ),
        lambda: household_demand() - real_household_demand_by_sector(),
    )


@component.add(
    name="HH demand pc",
    units="$/people",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"household_demand_total": 1, "population": 1},
)
def hh_demand_pc():
    """
    Households demand per capita
    """
    return household_demand_total() * 1000000.0 / population()


@component.add(
    name="Exports demand",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_exports_demand": 1},
    other_deps={
        "_integ_exports_demand": {
            "initial": {"initial_exports_demand": 1},
            "step": {"variation_exports_demand": 1, "exports_demand_not_covered": 1},
        }
    },
)
def exports_demand():
    """
    Sectorial value of exports
    """
    return _integ_exports_demand()


_integ_exports_demand = Integ(
    lambda: variation_exports_demand() - exports_demand_not_covered(),
    lambda: initial_exports_demand().expand_dims(
        {"scenarios": _subscript_dict["scenarios"]}, 0
    ),
    "_integ_exports_demand",
)


@component.add(
    name="P customized year GDPpc evolution",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_customized_year_gdppc_evolution"},
)
def p_customized_year_gdppc_evolution():
    """
    From customized year, set annual constant variation.
    """
    return _ext_constant_p_customized_year_gdppc_evolution()


_ext_constant_p_customized_year_gdppc_evolution = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E7",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_customized_year_gdppc_evolution",
)

_ext_constant_p_customized_year_gdppc_evolution.add(
    "inputs_EU.xlsx", "BAU", "E7", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_customized_year_gdppc_evolution.add(
    "inputs_EU.xlsx", "SCEN2", "E7", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_customized_year_gdppc_evolution.add(
    "inputs_EU.xlsx", "SCEN3", "E7", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_customized_year_gdppc_evolution.add(
    "inputs_EU.xlsx", "SCEN4", "E7", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_customized_year_gdppc_evolution.add(
    "inputs_EU.xlsx", "User defined", "E7", {"scenarios": ["User defined"]}
)


@component.add(
    name="variation historic GDPpc",
    units="$/(person*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 3, "historic_gdppc": 2},
)
def variation_historic_gdppc():
    """
    Variation of historic GDPpc.
    """
    return if_then_else(
        time() < 2015,
        lambda: historic_gdppc(integer(time() + 1)) - historic_gdppc(integer(time())),
        lambda: 0,
    )


@component.add(
    name="Household demand",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_household_demand": 1},
    other_deps={
        "_integ_household_demand": {
            "initial": {"initial_household_demand": 1},
            "step": {
                "variation_household_demand": 1,
                "household_demand_not_covered": 1,
            },
        }
    },
)
def household_demand():
    """
    Sectorial domestic final demand made by Households
    """
    return _integ_household_demand()


_integ_household_demand = Integ(
    lambda: variation_household_demand() - household_demand_not_covered(),
    lambda: initial_household_demand().expand_dims(
        {"scenarios": _subscript_dict["scenarios"]}, 0
    ),
    "_integ_household_demand",
)


@component.add(
    name="beta 3 hh",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_beta_3_hh"},
)
def beta_3_hh():
    """
    beta coefficient for second independent variable in panel data regression of households consumption
    """
    return _ext_constant_beta_3_hh()


_ext_constant_beta_3_hh = ExtConstant(
    "inputs_EU.xlsx", "Economy", "G332", {}, _root, {}, "_ext_constant_beta_3_hh"
)


@component.add(
    name="Year initial capital share", comp_type="Constant", comp_subtype="Normal"
)
def year_initial_capital_share():
    """
    Last year with historical data to use in the mean cummulative growth rate.
    """
    return 2015


@component.add(
    name="CC total",
    units="Mdollars",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cc_total": 1},
    other_deps={
        "_integ_cc_total": {
            "initial": {"initial_cc_total": 1},
            "step": {"variation_cc": 1, "cc_total_not_covered": 1},
        }
    },
)
def cc_total():
    """
    Capital compensation
    """
    return _integ_cc_total()


_integ_cc_total = Integ(
    lambda: variation_cc() - cc_total_not_covered(),
    lambda: xr.DataArray(
        initial_cc_total(), {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    "_integ_cc_total",
)


@component.add(
    name="Labour share growth",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "p_labour_share": 1,
        "initial_labour_share": 1,
        "year_final_labour_share": 1,
        "year_initial_labour_share": 1,
    },
)
def labour_share_growth():
    """
    Mean cummulative growth rate of labour share.
    """
    return (p_labour_share() / initial_labour_share()) ** (
        1 / (year_final_labour_share() - year_initial_labour_share())
    ) - 1


@component.add(
    name="Year Initial Labour share", comp_type="Constant", comp_subtype="Normal"
)
def year_initial_labour_share():
    """
    Last year with historical data to use in the mean cummulative growth rate.
    """
    return 2015


@component.add(
    name="variation LC",
    units="Mdollars",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "gdp_eu": 1,
        "labour_share": 1,
        "desired_annual_total_demand_growth_rate": 2,
        "growth_labour_share": 2,
    },
)
def variation_lc():
    """
    Variation of labour compensation
    """
    return (
        gdp_eu()
        * 1000000.0
        * labour_share()
        * (
            desired_annual_total_demand_growth_rate()
            + growth_labour_share()
            + desired_annual_total_demand_growth_rate() * growth_labour_share()
        )
    )


@component.add(
    name="Desired annual total demand growth rate",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"desired_annual_gdp_growth_rate": 1},
)
def desired_annual_total_demand_growth_rate():
    """
    Real variation of Final Demand. Assumed to be equal according to sample data from WIOD.
    """
    return desired_annual_gdp_growth_rate()


@component.add(
    name="labour share",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_labour_share": 1},
    other_deps={
        "_integ_labour_share": {"initial": {}, "step": {"variation_labour_share": 1}}
    },
)
def labour_share():
    """
    Ratio 'Labour compensation/GDP'
    """
    return _integ_labour_share()


_integ_labour_share = Integ(
    lambda: variation_labour_share(),
    lambda: xr.DataArray(
        0.481186, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    "_integ_labour_share",
)


@component.add(
    name="Household demand total",
    units="Mdollars",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"household_demand": 1},
)
def household_demand_total():
    """
    Whole economy domestic households demand
    """
    return sum(household_demand().rename({"sectors": "sectors!"}), dim=["sectors!"])


@component.add(
    name="variation historic exports demand",
    units="Mdollars/Year",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 2, "historic_exports_demand": 2},
)
def variation_historic_exports_demand():
    """
    Historic variation of exports (WIOD-35 sectors)
    """
    return (
        historic_exports_demand(integer(time() + 1))
        - historic_exports_demand(integer(time()))
    ).expand_dims({"scenarios": _subscript_dict["scenarios"]}, 0)


@component.add(
    name="GDPpc annual growth SSP2",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_gdppc_annual_growth_ssp2",
        "__lookup__": "_ext_lookup_gdppc_annual_growth_ssp2",
    },
)
def gdppc_annual_growth_ssp2(x, final_subs=None):
    return _ext_lookup_gdppc_annual_growth_ssp2(x, final_subs)


_ext_lookup_gdppc_annual_growth_ssp2 = ExtLookup(
    "inputs_EU.xlsx",
    "Result comparison",
    "33",
    "C35",
    {},
    _root,
    {},
    "_ext_lookup_gdppc_annual_growth_ssp2",
)


@component.add(
    name="initial planted forests",
    units="MHa",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_planted_forests"},
)
def initial_planted_forests():
    """
    Initial "Planted Forests" (FAOSTAT category).
    """
    return _ext_constant_initial_planted_forests()


_ext_constant_initial_planted_forests = ExtConstant(
    "inputs_EU.xlsx",
    "Land",
    "H26",
    {},
    _root,
    {},
    "_ext_constant_initial_planted_forests",
)


@component.add(
    name="initial 'available' forest area",
    units="MHa",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "initial_planted_forests": 1,
        "initial_other_naturally_regen_forest": 1,
    },
)
def initial_available_forest_area():
    """
    Initial "available" forest area.
    """
    return initial_planted_forests() + initial_other_naturally_regen_forest()


@component.add(
    name="initial urban land",
    units="MHa",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_urban_land"},
)
def initial_urban_land():
    """
    Artificial surfaces (including urban and associated areas).
    """
    return _ext_constant_initial_urban_land()


_ext_constant_initial_urban_land = ExtConstant(
    "inputs_EU.xlsx", "Land", "H27", {}, _root, {}, "_ext_constant_initial_urban_land"
)


@component.add(
    name="Historic primary forest",
    units="MHa",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_primary_forest",
        "__lookup__": "_ext_lookup_historic_primary_forest",
    },
)
def historic_primary_forest(x, final_subs=None):
    """
    Historic primary forest evolution.
    """
    return _ext_lookup_historic_primary_forest(x, final_subs)


_ext_lookup_historic_primary_forest = ExtLookup(
    "inputs_EU.xlsx",
    "Land",
    "20",
    "H24",
    {},
    _root,
    {},
    "_ext_lookup_historic_primary_forest",
)


@component.add(
    name="initial other naturally regen forest",
    units="MHa",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_other_naturally_regen_forest"},
)
def initial_other_naturally_regen_forest():
    """
    Initial "Other naturally regenerated forests" (FAOSTAT category).
    """
    return _ext_constant_initial_other_naturally_regen_forest()


_ext_constant_initial_other_naturally_regen_forest = ExtConstant(
    "inputs_EU.xlsx",
    "Land",
    "H25",
    {},
    _root,
    {},
    "_ext_constant_initial_other_naturally_regen_forest",
)


@component.add(
    name="initial primary forest area",
    units="MHa",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_primary_forest_area"},
)
def initial_primary_forest_area():
    """
    Initial primary forests area.
    """
    return _ext_constant_initial_primary_forest_area()


_ext_constant_initial_primary_forest_area = ExtConstant(
    "inputs_EU.xlsx",
    "Land",
    "H24",
    {},
    _root,
    {},
    "_ext_constant_initial_primary_forest_area",
)


@component.add(
    name="hist variation primary forest",
    units="MHa/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 3, "historic_primary_forest": 2},
)
def hist_variation_primary_forest():
    """
    Primary forest area historic variation.
    """
    return if_then_else(
        time() < 2014,
        lambda: historic_primary_forest(integer(time() + 1))
        - historic_primary_forest(integer(time())),
        lambda: 0,
    )


@component.add(
    name="Urban land",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_urban_land": 1},
    other_deps={
        "_integ_urban_land": {
            "initial": {"initial_urban_land": 1},
            "step": {"urban_land_rate": 1},
        }
    },
)
def urban_land():
    """
    Land for urban uses and infraestructures. Corresponds with FAOSTAT category "Artificial surfaces (including urban and associated areas)".
    """
    return _integ_urban_land()


_integ_urban_land = Integ(
    lambda: urban_land_rate(),
    lambda: xr.DataArray(
        initial_urban_land(), {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    "_integ_urban_land",
)


@component.add(
    name="Land requirements RES elec compet uses",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "surface_hydro_mha": 1,
        "surface_csp_mha": 1,
        "surface_solar_pv_on_land_mha": 1,
    },
)
def land_requirements_res_elec_compet_uses():
    """
    Land requirements for renewable technologies to generate electricity (PV on land, CSP and hydro) requiring land and not easily compatible with double uses.
    """
    return surface_hydro_mha() + surface_csp_mha() + surface_solar_pv_on_land_mha()


@component.add(
    name="Historic conv oil domestic EU extracted EJ",
    units="EJ",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_historic_conv_oil_domestic_eu_extracted_ej",
        "__data__": "_ext_data_historic_conv_oil_domestic_eu_extracted_ej",
        "time": 1,
    },
)
def historic_conv_oil_domestic_eu_extracted_ej():
    return _ext_data_historic_conv_oil_domestic_eu_extracted_ej(time())


_ext_data_historic_conv_oil_domestic_eu_extracted_ej = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "112",
    "H114",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_historic_conv_oil_domestic_eu_extracted_ej",
)


@component.add(
    name='"Historic unconv nat. gas domestic EU extracted EJ"',
    units="EJ",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_historic_unconv_nat_gas_domestic_eu_extracted_ej",
        "__data__": "_ext_data_historic_unconv_nat_gas_domestic_eu_extracted_ej",
        "time": 1,
    },
)
def historic_unconv_nat_gas_domestic_eu_extracted_ej():
    return _ext_data_historic_unconv_nat_gas_domestic_eu_extracted_ej(time())


_ext_data_historic_unconv_nat_gas_domestic_eu_extracted_ej = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "112",
    "H117",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_historic_unconv_nat_gas_domestic_eu_extracted_ej",
)


@component.add(
    name="Historic unconv oil domestic EU extracted EJ",
    units="EJ",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_historic_unconv_oil_domestic_eu_extracted_ej",
        "__data__": "_ext_data_historic_unconv_oil_domestic_eu_extracted_ej",
        "time": 1,
    },
)
def historic_unconv_oil_domestic_eu_extracted_ej():
    return _ext_data_historic_unconv_oil_domestic_eu_extracted_ej(time())


_ext_data_historic_unconv_oil_domestic_eu_extracted_ej = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "112",
    "H115",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_historic_unconv_oil_domestic_eu_extracted_ej",
)


@component.add(
    name="Historic uranium domestic EU extracted t",
    units="EJ",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_historic_uranium_domestic_eu_extracted_t",
        "__data__": "_ext_data_historic_uranium_domestic_eu_extracted_t",
        "time": 1,
    },
)
def historic_uranium_domestic_eu_extracted_t():
    """
    Historic uranium domestic EU extracted.
    """
    return _ext_data_historic_uranium_domestic_eu_extracted_t(time())


_ext_data_historic_uranium_domestic_eu_extracted_t = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "112",
    "H119",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_historic_uranium_domestic_eu_extracted_t",
)


@component.add(
    name="PEC uranium EU EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"extraction_uranium_ej_eu": 1, "extraction_uranium_row": 1},
)
def pec_uranium_eu_ej():
    return extraction_uranium_ej_eu() + extraction_uranium_row()


@component.add(
    name="PEC uranium EU kt",
    units="Kt",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pec_uranium_eu_ej": 1, "kt_uranium_per_ej": 1},
)
def pec_uranium_eu_kt():
    return pec_uranium_eu_ej() * kt_uranium_per_ej()


@component.add(
    name='"Historic conv nat. gas domestic EU extracted EJ"',
    units="EJ",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_historic_conv_nat_gas_domestic_eu_extracted_ej",
        "__data__": "_ext_data_historic_conv_nat_gas_domestic_eu_extracted_ej",
        "time": 1,
    },
)
def historic_conv_nat_gas_domestic_eu_extracted_ej():
    return _ext_data_historic_conv_nat_gas_domestic_eu_extracted_ej(time())


_ext_data_historic_conv_nat_gas_domestic_eu_extracted_ej = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "112",
    "H116",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_historic_conv_nat_gas_domestic_eu_extracted_ej",
)


@component.add(
    name="imports EU conv oil from RoW EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "imports_eu_total_oil_from_row_ej": 1,
        "share_conv_vs_total_oil_extraction_world": 1,
    },
)
def imports_eu_conv_oil_from_row_ej():
    return (
        imports_eu_total_oil_from_row_ej() * share_conv_vs_total_oil_extraction_world()
    )


@component.add(
    name="PEC conv oil",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_extraction_conv_oil_ej": 1, "imports_eu_conv_oil_from_row_ej": 1},
)
def pec_conv_oil():
    return real_extraction_conv_oil_ej() + imports_eu_conv_oil_from_row_ej()


@component.add(
    name="CO2 emissions conv gas without GTL",
    units="GtCO2/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "separate_conv_and_unconv_gas": 1,
        "gco2_per_mj_conv_gas": 2,
        "real_consumption_ue_conv_gas_emissions_relevant_ej": 3,
        "gco2_per_mj_unconv_gas": 1,
        "adapt_co2_emissions_unconv_gas": 2,
        "mj_per_ej": 1,
        "g_per_gt": 1,
    },
)
def co2_emissions_conv_gas_without_gtl():
    """
    CO2 emissions from conventional gas (withouth GTL) when the gas extraction is disaggregated in conventional and unconventional resource, and CO2 emissions from total gas when the extraction is aggregated.
    """
    return (
        if_then_else(
            separate_conv_and_unconv_gas() == 1,
            lambda: real_consumption_ue_conv_gas_emissions_relevant_ej()
            * gco2_per_mj_conv_gas(),
            lambda: (1 - adapt_co2_emissions_unconv_gas())
            * real_consumption_ue_conv_gas_emissions_relevant_ej()
            * gco2_per_mj_conv_gas()
            + adapt_co2_emissions_unconv_gas()
            * real_consumption_ue_conv_gas_emissions_relevant_ej()
            * gco2_per_mj_unconv_gas(),
        )
        * mj_per_ej()
        / g_per_gt()
    )


@component.add(
    name="CO2 emissions conv oil",
    units="GtCO2/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_consumption_ue_conv_oil_emissions_relevant_ej": 1,
        "gco2_per_mj_conv_oil": 1,
        "mj_per_ej": 1,
        "g_per_gt": 1,
    },
)
def co2_emissions_conv_oil():
    """
    CO2 emissions from conventional oil.
    """
    return (
        real_consumption_ue_conv_oil_emissions_relevant_ej()
        * gco2_per_mj_conv_oil()
        * mj_per_ej()
        / g_per_gt()
    )


@component.add(
    name="imports EU unconv oil from RoW EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "imports_eu_total_oil_from_row_ej": 1,
        "share_conv_vs_total_oil_extraction_world": 1,
    },
)
def imports_eu_unconv_oil_from_row_ej():
    return imports_eu_total_oil_from_row_ej() * (
        1 - share_conv_vs_total_oil_extraction_world()
    )


@component.add(
    name="CO2 emissions coal without CTL",
    units="GtCO2/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "consumption_ue_coal_emissions_relevant_ej": 1,
        "gco2_per_mj_coal": 1,
        "mj_per_ej": 1,
        "g_per_gt": 1,
    },
)
def co2_emissions_coal_without_ctl():
    """
    Emissions from coal withoug accounting for CTL-related emissions.
    """
    return (
        consumption_ue_coal_emissions_relevant_ej()
        * gco2_per_mj_coal()
        * mj_per_ej()
        / g_per_gt()
    )


@component.add(
    name="real consumption unconv oil emissions relevant EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pec_unconv_oil": 1,
        "nonenergy_use_demand_by_final_fuel_ej": 1,
        "share_conv_vs_total_oil_extraction_eu": 1,
    },
)
def real_consumption_unconv_oil_emissions_relevant_ej():
    """
    Extraction of emission-relevant unconventional gas, i.e. excepting the resource used to produce GTL and for non-energy uses. We assume conventional and unconventional resource are used to produce GTL and for non-energy uses following the same share as for their relative extraction.
    """
    return np.maximum(
        0,
        pec_unconv_oil()
        - nonenergy_use_demand_by_final_fuel_ej()
        .loc[:, "liquids"]
        .reset_coords(drop=True)
        * (1 - share_conv_vs_total_oil_extraction_eu()),
    )


@component.add(
    name="CH4 emissions CTL",
    units="MtCH4",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "extraction_coal_for_ctl_ej": 1,
        "gch4_per_mj_ctl": 1,
        "mj_per_ej": 1,
        "g_per_mt": 1,
    },
)
def ch4_emissions_ctl():
    """
    CH4 emissions CTL.
    """
    return extraction_coal_for_ctl_ej() * gch4_per_mj_ctl() * mj_per_ej() / g_per_mt()


@component.add(
    name="CO2 emissions CTL",
    units="GtCO2/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "gco2_per_mj_ctl": 1,
        "extraction_coal_for_ctl_ej": 1,
        "mj_per_ej": 1,
        "g_per_gt": 1,
    },
)
def co2_emissions_ctl():
    """
    CO2 emissions associated to CTL production.
    """
    return gco2_per_mj_ctl() * extraction_coal_for_ctl_ej() * mj_per_ej() / g_per_gt()


@component.add(
    name="real consumption unconv gas emissions relevant EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pec_unconv_gas": 1,
        "nonenergy_use_demand_by_final_fuel_ej": 1,
        "share_conv_vs_total_gas_extraction_eu": 1,
    },
)
def real_consumption_unconv_gas_emissions_relevant_ej():
    """
    Extraction of emission-relevant unconventional gas, i.e. excepting the resource used to produce GTL and for non-energy uses. We assume conventional and unconventional resource are used to produce GTL and for non-energy uses following the same share as for their relative extraction.
    """
    return np.maximum(
        0,
        pec_unconv_gas()
        - nonenergy_use_demand_by_final_fuel_ej()
        .loc[:, "gases"]
        .reset_coords(drop=True)
        * (1 - share_conv_vs_total_gas_extraction_eu()),
    )


@component.add(
    name="consumption UE coal emissions relevant EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pec_coal": 1, "nonenergy_use_demand_by_final_fuel_ej": 1},
)
def consumption_ue_coal_emissions_relevant_ej():
    """
    Consumption of emission-relevant coal, i.e. excepting the resource used for non-energy uses.
    """
    return np.maximum(
        0,
        pec_coal()
        - nonenergy_use_demand_by_final_fuel_ej()
        .loc[:, "solids"]
        .reset_coords(drop=True),
    )


@component.add(
    name="PEC conv gas",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_extraction_conv_gas_ej": 1, "imports_eu_conv_gas_from_row_ej": 1},
)
def pec_conv_gas():
    return real_extraction_conv_gas_ej() + imports_eu_conv_gas_from_row_ej()


@component.add(
    name="share imports EU uranium from RoW vs extraction World",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"imports_eu_uranium_from_row_ej": 1, "extraction_uranium_ej_world": 1},
)
def share_imports_eu_uranium_from_row_vs_extraction_world():
    """
    Share of EU uranium imports vs total uranium extraction.
    """
    return zidz(imports_eu_uranium_from_row_ej(), extraction_uranium_ej_world())


@component.add(
    name="CO2 emissions unconv oil",
    units="GtCO2/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_consumption_unconv_oil_emissions_relevant_ej": 1,
        "adapt_emissions_shale_oil": 1,
        "gco2_per_mj_unconv_oil": 2,
        "gco2_per_mj_shale_oil": 1,
        "mj_per_ej": 1,
        "g_per_gt": 1,
    },
)
def co2_emissions_unconv_oil():
    """
    CO2 emissions from unconventional oil.
    """
    return (
        (
            real_consumption_unconv_oil_emissions_relevant_ej()
            * (
                gco2_per_mj_unconv_oil()
                + (gco2_per_mj_shale_oil() - gco2_per_mj_unconv_oil())
                * adapt_emissions_shale_oil()
            )
        )
        * mj_per_ej()
        / g_per_gt()
    )


@component.add(
    name="real consumption UE conv oil emissions relevant EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pec_conv_oil": 1,
        "nonenergy_use_demand_by_final_fuel_ej": 1,
        "share_conv_vs_total_oil_extraction_eu": 1,
    },
)
def real_consumption_ue_conv_oil_emissions_relevant_ej():
    """
    Extraction of emission-relevant conventional oil. We assume conventional and unconventional resource are used to produce GTL and for non-energy uses following the same share as for their relative extraction.
    """
    return np.maximum(
        0,
        pec_conv_oil()
        - nonenergy_use_demand_by_final_fuel_ej()
        .loc[:, "liquids"]
        .reset_coords(drop=True)
        * share_conv_vs_total_oil_extraction_eu(),
    )


@component.add(
    name="PEC unconv gas",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_extraction_unconv_gas_ej": 1,
        "imports_eu_unconv_gas_from_row_ej": 1,
    },
)
def pec_unconv_gas():
    return real_extraction_unconv_gas_ej() + imports_eu_unconv_gas_from_row_ej()


@component.add(
    name="PEC unconv oil",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_extraction_unconv_oil_ej": 1,
        "imports_eu_unconv_oil_from_row_ej": 1,
    },
)
def pec_unconv_oil():
    return real_extraction_unconv_oil_ej() + imports_eu_unconv_oil_from_row_ej()


@component.add(
    name="CH4 emissions oil",
    units="MtCH4",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pec_total_oil": 1,
        "gch4_per_mj_oil": 1,
        "mj_per_ej": 1,
        "g_per_mt": 1,
    },
)
def ch4_emissions_oil():
    """
    CH4 emissions oil.
    """
    return pec_total_oil() * gch4_per_mj_oil() * mj_per_ej() / g_per_mt()


@component.add(
    name="real consumption UE conv gas emissions relevant EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pec_conv_gas": 1,
        "nonenergy_use_demand_by_final_fuel_ej": 1,
        "share_conv_vs_total_gas_extraction_eu": 1,
    },
)
def real_consumption_ue_conv_gas_emissions_relevant_ej():
    """
    Extraction of emission-relevant conventional gas, i.e. excepting the resource used to produce GTL and for non-energy uses. We assume conventional and unconventional resource are used to produce GTL and for non-energy uses following the same share as for their relative extraction.
    """
    return np.maximum(
        0,
        pec_conv_gas()
        - nonenergy_use_demand_by_final_fuel_ej()
        .loc[:, "gases"]
        .reset_coords(drop=True)
        * share_conv_vs_total_gas_extraction_eu(),
    )


@component.add(
    name="CH4 emissions conv gas without GTL",
    units="MtCH4",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "separate_conv_and_unconv_gas": 1,
        "gch4_per_mj_conv_gas": 2,
        "real_consumption_ue_conv_gas_emissions_relevant_ej": 3,
        "gch4_per_mj_unconv_gas": 1,
        "adapt_co2_emissions_unconv_gas": 2,
        "mj_per_ej": 1,
        "g_per_mt": 1,
    },
)
def ch4_emissions_conv_gas_without_gtl():
    """
    CH4 emissions conventional gas.
    """
    return (
        if_then_else(
            separate_conv_and_unconv_gas() == 1,
            lambda: real_consumption_ue_conv_gas_emissions_relevant_ej()
            * gch4_per_mj_conv_gas(),
            lambda: (1 - adapt_co2_emissions_unconv_gas())
            * real_consumption_ue_conv_gas_emissions_relevant_ej()
            * gch4_per_mj_conv_gas()
            + adapt_co2_emissions_unconv_gas()
            * real_consumption_ue_conv_gas_emissions_relevant_ej()
            * gch4_per_mj_unconv_gas(),
        )
        * mj_per_ej()
        / g_per_mt()
    )


@component.add(
    name="CH4 emissions coal without CTL",
    units="MtCH4",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "consumption_ue_coal_emissions_relevant_ej": 1,
        "gch4_per_mj_coal": 1,
        "mj_per_ej": 1,
        "g_per_mt": 1,
    },
)
def ch4_emissions_coal_without_ctl():
    """
    CH4 emissions coal.
    """
    return (
        consumption_ue_coal_emissions_relevant_ej()
        * gch4_per_mj_coal()
        * mj_per_ej()
        / g_per_mt()
    )


@component.add(
    name="share imports EU tot oil from RoW vs extraction World",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"imports_eu_total_oil_from_row_ej": 1, "extraction_oil_ej_world": 1},
)
def share_imports_eu_tot_oil_from_row_vs_extraction_world():
    """
    Share of EU total oil imports vs global oil extraction.
    """
    return zidz(imports_eu_total_oil_from_row_ej(), extraction_oil_ej_world())


@component.add(
    name='"power density solar PV in urban TWe/Mha"',
    units="TWe/MHa",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "av_solar_i": 1,
        "f1_solar_pv": 1,
        "f2_pf_solar_pv": 1,
        "share_available_roof": 1,
        "share_available_roof_for_rooftop_pv": 1,
        "twhmha_per_wem2": 1,
    },
)
def power_density_solar_pv_in_urban_twemha():
    """
    Power density of solar PV in urban areas.
    """
    return (
        av_solar_i()
        * f1_solar_pv()
        * f2_pf_solar_pv()
        * share_available_roof()
        * share_available_roof_for_rooftop_pv()
        * twhmha_per_wem2()
    )


@component.add(
    name='"power density solar PV on land TWe/Mha"',
    units="TWe/MHa",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "av_solar_i": 1,
        "f1_solar_pv": 1,
        "f2_pf_solar_pv": 1,
        "f3_solar_pv_on_land": 1,
        "twhmha_per_wem2": 1,
    },
)
def power_density_solar_pv_on_land_twemha():
    """
    Power density of solar PV power plants on land.
    """
    return (
        av_solar_i()
        * f1_solar_pv()
        * f2_pf_solar_pv()
        * f3_solar_pv_on_land()
        * twhmha_per_wem2()
    )


@component.add(
    name='"power density solar thermal in urban TWe/Mha"',
    units="TWe/MHa",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "av_solar_i": 1,
        "f1_solar_panels_for_heat": 1,
        "losses_solar_for_heat": 1,
        "share_available_roof": 1,
        "share_available_roof_for_solar_thermal": 1,
        "twhmha_per_wem2": 1,
    },
)
def power_density_solar_thermal_in_urban_twemha():
    """
    Power density of solar thermal in urban areas.
    """
    return (
        av_solar_i()
        * f1_solar_panels_for_heat()
        * losses_solar_for_heat()
        * share_available_roof()
        * share_available_roof_for_solar_thermal()
        * twhmha_per_wem2()
    )


@component.add(
    name='"share imports EU nat. gas from RoW vs extraction World"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"imports_eu_nat_gas_from_row_ej": 1, "extraction_nat_gas_ej_world": 1},
)
def share_imports_eu_nat_gas_from_row_vs_extraction_world():
    """
    Share of EU natural gas imports vs global natural gas extraction.
    """
    return zidz(imports_eu_nat_gas_from_row_ej(), extraction_nat_gas_ej_world())


@component.add(
    name="av past EU domestic uranium extraction",
    units="tonnes",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_av_past_eu_domestic_uranium_extraction"},
)
def av_past_eu_domestic_uranium_extraction():
    """
    Average 2010-2015 past uranium extraction in the UE.
    """
    return _ext_constant_av_past_eu_domestic_uranium_extraction()


_ext_constant_av_past_eu_domestic_uranium_extraction = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "AE119",
    {},
    _root,
    {},
    "_ext_constant_av_past_eu_domestic_uranium_extraction",
)


@component.add(
    name="Choose GWP time frame",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_choose_gwp_time_frame"},
)
def choose_gwp_time_frame():
    return _ext_constant_choose_gwp_time_frame()


_ext_constant_choose_gwp_time_frame = ExtConstant(
    "inputs_EU.xlsx",
    "SCEN1",
    "J116",
    {"scenarios": ["SCEN1"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_choose_gwp_time_frame",
)

_ext_constant_choose_gwp_time_frame.add(
    "inputs_EU.xlsx", "SCEN2", "J116", {"scenarios": ["SCEN2"]}
)

_ext_constant_choose_gwp_time_frame.add(
    "inputs_EU.xlsx", "SCEN3", "J116", {"scenarios": ["SCEN3"]}
)

_ext_constant_choose_gwp_time_frame.add(
    "inputs_EU.xlsx", "SCEN4", "J116", {"scenarios": ["SCEN4"]}
)

_ext_constant_choose_gwp_time_frame.add(
    "inputs_EU.xlsx", "BAU", "J116", {"scenarios": ["BAU"]}
)

_ext_constant_choose_gwp_time_frame.add(
    "inputs_EU.xlsx", "User defined", "J116", {"scenarios": ["User defined"]}
)


@component.add(
    name="GWP 20 year",
    subscripts=["GHGs"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_gwp_20_year"},
)
def gwp_20_year():
    return _ext_constant_gwp_20_year()


_ext_constant_gwp_20_year = ExtConstant(
    "inputs_EU.xlsx",
    "Climate",
    "B5",
    {"GHGs": ["CH4"]},
    _root,
    {"GHGs": _subscript_dict["GHGs"]},
    "_ext_constant_gwp_20_year",
)

_ext_constant_gwp_20_year.add("inputs_EU.xlsx", "Climate", "B6", {"GHGs": ["N2O"]})

_ext_constant_gwp_20_year.add("inputs_EU.xlsx", "Climate", "B7", {"GHGs": ["PFCs"]})

_ext_constant_gwp_20_year.add("inputs_EU.xlsx", "Climate", "B8", {"GHGs": ["SF6"]})

_ext_constant_gwp_20_year.add("inputs_EU.xlsx", "Climate", "B9", {"GHGs": ["HFC134a"]})

_ext_constant_gwp_20_year.add("inputs_EU.xlsx", "Climate", "B10", {"GHGs": ["HFC23"]})

_ext_constant_gwp_20_year.add("inputs_EU.xlsx", "Climate", "B11", {"GHGs": ["HFC32"]})

_ext_constant_gwp_20_year.add("inputs_EU.xlsx", "Climate", "B12", {"GHGs": ["HFC125"]})

_ext_constant_gwp_20_year.add("inputs_EU.xlsx", "Climate", "B13", {"GHGs": ["HFC143a"]})

_ext_constant_gwp_20_year.add("inputs_EU.xlsx", "Climate", "B14", {"GHGs": ["HFC152a"]})

_ext_constant_gwp_20_year.add(
    "inputs_EU.xlsx", "Climate", "B15", {"GHGs": ["HFC227ea"]}
)

_ext_constant_gwp_20_year.add(
    "inputs_EU.xlsx", "Climate", "B16", {"GHGs": ["HFC245ca"]}
)

_ext_constant_gwp_20_year.add(
    "inputs_EU.xlsx", "Climate", "B17", {"GHGs": ["HFC4310mee"]}
)


@component.add(
    name="GWP 100 year",
    subscripts=["GHGs"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_gwp_100_year"},
)
def gwp_100_year():
    return _ext_constant_gwp_100_year()


_ext_constant_gwp_100_year = ExtConstant(
    "inputs_EU.xlsx",
    "Climate",
    "C5",
    {"GHGs": ["CH4"]},
    _root,
    {"GHGs": _subscript_dict["GHGs"]},
    "_ext_constant_gwp_100_year",
)

_ext_constant_gwp_100_year.add("inputs_EU.xlsx", "Climate", "C6", {"GHGs": ["N2O"]})

_ext_constant_gwp_100_year.add("inputs_EU.xlsx", "Climate", "C7", {"GHGs": ["PFCs"]})

_ext_constant_gwp_100_year.add("inputs_EU.xlsx", "Climate", "C8", {"GHGs": ["SF6"]})

_ext_constant_gwp_100_year.add("inputs_EU.xlsx", "Climate", "C9", {"GHGs": ["HFC134a"]})

_ext_constant_gwp_100_year.add("inputs_EU.xlsx", "Climate", "C10", {"GHGs": ["HFC23"]})

_ext_constant_gwp_100_year.add("inputs_EU.xlsx", "Climate", "C11", {"GHGs": ["HFC32"]})

_ext_constant_gwp_100_year.add("inputs_EU.xlsx", "Climate", "C12", {"GHGs": ["HFC125"]})

_ext_constant_gwp_100_year.add(
    "inputs_EU.xlsx", "Climate", "C13", {"GHGs": ["HFC143a"]}
)

_ext_constant_gwp_100_year.add(
    "inputs_EU.xlsx", "Climate", "C14", {"GHGs": ["HFC152a"]}
)

_ext_constant_gwp_100_year.add(
    "inputs_EU.xlsx", "Climate", "C15", {"GHGs": ["HFC227ea"]}
)

_ext_constant_gwp_100_year.add(
    "inputs_EU.xlsx", "Climate", "C16", {"GHGs": ["HFC245ca"]}
)

_ext_constant_gwp_100_year.add(
    "inputs_EU.xlsx", "Climate", "C17", {"GHGs": ["HFC4310mee"]}
)


@component.add(
    name="Total CO2e",
    units="GTCO2e",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_co2_emissions_gtco2": 1,
        "choose_gwp_time_frame": 13,
        "gwp_20_year": 13,
        "gwp_100_year": 13,
        "mt_per_gt": 2,
        "ch4_anthro_emissions": 1,
        "n2o_anthro_emissions": 1,
        "nvs_1_to_g": 11,
        "pfc_emissions": 1,
        "sf6_emissions": 1,
        "hfc_emissions": 9,
    },
)
def total_co2e():
    return (
        total_co2_emissions_gtco2()
        + ch4_anthro_emissions()
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: xr.DataArray(
                float(gwp_20_year().loc["CH4"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: xr.DataArray(
                float(gwp_100_year().loc["CH4"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
        )
        / mt_per_gt()
        + n2o_anthro_emissions()
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: xr.DataArray(
                float(gwp_20_year().loc["N2O"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: xr.DataArray(
                float(gwp_100_year().loc["N2O"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
        )
        / mt_per_gt()
        + pfc_emissions()
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: xr.DataArray(
                float(gwp_20_year().loc["PFCs"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: xr.DataArray(
                float(gwp_100_year().loc["PFCs"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
        )
        / nvs_1_to_g()
        + sf6_emissions()
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: xr.DataArray(
                float(gwp_20_year().loc["SF6"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: xr.DataArray(
                float(gwp_100_year().loc["SF6"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
        )
        / nvs_1_to_g()
        + hfc_emissions().loc["HFC134a", :].reset_coords(drop=True)
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: xr.DataArray(
                float(gwp_20_year().loc["HFC134a"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: xr.DataArray(
                float(gwp_100_year().loc["HFC134a"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
        )
        / nvs_1_to_g()
        + hfc_emissions().loc["HFC23", :].reset_coords(drop=True)
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: xr.DataArray(
                float(gwp_20_year().loc["HFC23"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: xr.DataArray(
                float(gwp_100_year().loc["HFC23"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
        )
        / nvs_1_to_g()
        + hfc_emissions().loc["HFC32", :].reset_coords(drop=True)
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: xr.DataArray(
                float(gwp_20_year().loc["HFC32"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: xr.DataArray(
                float(gwp_100_year().loc["HFC32"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
        )
        / nvs_1_to_g()
        + hfc_emissions().loc["HFC125", :].reset_coords(drop=True)
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: xr.DataArray(
                float(gwp_20_year().loc["HFC125"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: xr.DataArray(
                float(gwp_100_year().loc["HFC125"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
        )
        / nvs_1_to_g()
        + hfc_emissions().loc["HFC143a", :].reset_coords(drop=True)
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: xr.DataArray(
                float(gwp_20_year().loc["HFC143a"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: xr.DataArray(
                float(gwp_100_year().loc["HFC143a"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
        )
        / nvs_1_to_g()
        + hfc_emissions().loc["HFC152a", :].reset_coords(drop=True)
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: xr.DataArray(
                float(gwp_20_year().loc["HFC152a"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: xr.DataArray(
                float(gwp_100_year().loc["HFC152a"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
        )
        / nvs_1_to_g()
        + hfc_emissions().loc["HFC227ea", :].reset_coords(drop=True)
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: xr.DataArray(
                float(gwp_20_year().loc["HFC227ea"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: xr.DataArray(
                float(gwp_100_year().loc["HFC227ea"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
        )
        / nvs_1_to_g()
        + hfc_emissions().loc["HFC245ca", :].reset_coords(drop=True)
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: xr.DataArray(
                float(gwp_20_year().loc["HFC245ca"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: xr.DataArray(
                float(gwp_100_year().loc["HFC245ca"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
        )
        / nvs_1_to_g()
        + hfc_emissions().loc["HFC4310mee", :].reset_coords(drop=True)
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: xr.DataArray(
                float(gwp_20_year().loc["HFC4310mee"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: xr.DataArray(
                float(gwp_100_year().loc["HFC4310mee"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
        )
        / nvs_1_to_g()
    )


@component.add(
    name="Total CO2e Ce",
    units="GTCe/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_co2e": 1, "c_per_co2": 1},
)
def total_co2e_ce():
    return total_co2e() * c_per_co2()


@component.add(
    name='"1 to G"',
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_nvs_1_to_g"},
)
def nvs_1_to_g():
    return _ext_constant_nvs_1_to_g()


_ext_constant_nvs_1_to_g = ExtConstant(
    "inputs_EU.xlsx", "Constants", "G19", {}, _root, {}, "_ext_constant_nvs_1_to_g"
)


@component.add(
    name="Annual GDP growth rate",
    subscripts=["scenarios"],
    comp_type="Data",
    comp_subtype="Normal",
    depends_on={"time": 1, "__data__": "_data_annual_gdp_growth_rate"},
)
def annual_gdp_growth_rate():
    """
    Annual GDP growth rate. Source: global model.
    """
    return _data_annual_gdp_growth_rate(time())


_data_annual_gdp_growth_rate = TabData(
    "Annual GDP growth rate",
    "annual_gdp_growth_rate",
    {"scenarios": _subscript_dict["scenarios"]},
    "interpolate",
)


@component.add(
    name="Annual GDP growth rate World",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"annual_gdp_growth_rate": 1},
)
def annual_gdp_growth_rate_world():
    """
    Annual GDP growth rate. Source: global model.
    """
    return annual_gdp_growth_rate()


@component.add(
    name="Real final energy by sector and fuel RoW",
    subscripts=["scenarios", "final sources", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_final_energy_by_sector_and_fuel_world": 1,
        "real_final_energy_by_sector_and_fuel_eu": 1,
    },
)
def real_final_energy_by_sector_and_fuel_row():
    """
    Real final energy consumption made by Rest of the World.
    """
    return (
        real_final_energy_by_sector_and_fuel_world()
        - real_final_energy_by_sector_and_fuel_eu()
    )


@component.add(
    name="Real final energy by sector and fuel World",
    subscripts=["scenarios", "final sources", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_final_energy_by_sector_and_fuel": 1},
)
def real_final_energy_by_sector_and_fuel_world():
    """
    Real final energy consumed by sector and fuel. Source: global model.
    """
    return real_final_energy_by_sector_and_fuel()


@component.add(
    name="Real demand World",
    units="Mdollars",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_demand_by_sector_world": 1},
)
def real_demand_world():
    """
    Total World final demand (MEDEAS-World).
    """
    return sum(
        real_demand_by_sector_world().rename({"sectors": "sectors!"}), dim=["sectors!"]
    )


@component.add(
    name='"PEC nat. gas"',
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_nat_gas_eu": 1, "imports_eu_nat_gas_from_row_ej": 1},
)
def pec_nat_gas():
    return pes_nat_gas_eu() + imports_eu_nat_gas_from_row_ej()


@component.add(
    name="PES Liquids EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pec_total_oil": 1, "other_liquids_supply_ej": 1},
)
def pes_liquids_ej():
    """
    Total primary supply of liquids.
    """
    return pec_total_oil() + other_liquids_supply_ej()


@component.add(
    name="PES gases",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pec_nat_gas": 1, "pes_biogas_for_tfc": 1},
)
def pes_gases():
    """
    Primary energy supply gas.
    """
    return pec_nat_gas() + pes_biogas_for_tfc()


@component.add(
    name='"PED EU nat. gas from RoW"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_nat_gas_ej": 1, "pes_nat_gas_eu": 1},
)
def ped_eu_nat_gas_from_row():
    return np.maximum(0, ped_nat_gas_ej() - pes_nat_gas_eu())


@component.add(
    name="PEC total oil",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_total_oil_ej_eu": 1, "imports_eu_total_oil_from_row_ej": 1},
)
def pec_total_oil():
    return pes_total_oil_ej_eu() + imports_eu_total_oil_from_row_ej()


@component.add(
    name="Historic share net imports coal EU until 2016",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "historic_net_imports_coal_eu": 1,
        "extraction_coal_ej_world": 1,
        "aux18": 1,
    },
)
def historic_share_net_imports_coal_eu_until_2016():
    return if_then_else(
        time() < 2016,
        lambda: zidz(historic_net_imports_coal_eu(), extraction_coal_ej_world()),
        lambda: aux18(),
    )


@component.add(
    name="Historic coal domestic EU extracted EJ 2",
    units="EJ",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"historic_coal_domestic_eu_extracted_ej": 1},
)
def historic_coal_domestic_eu_extracted_ej_2():
    return historic_coal_domestic_eu_extracted_ej()


@component.add(
    name="PEC coal",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"extraction_coal_ej_eu": 1, "imports_eu_coal_from_row_ej": 1},
)
def pec_coal():
    return extraction_coal_ej_eu() + imports_eu_coal_from_row_ej()


@component.add(
    name="aux18",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux18": 1},
    other_deps={
        "_delayfixed_aux18": {
            "initial": {"time_step": 1},
            "step": {"historic_share_net_imports_coal_eu_until_2016": 1},
        }
    },
)
def aux18():
    return _delayfixed_aux18()


_delayfixed_aux18 = DelayFixed(
    lambda: historic_share_net_imports_coal_eu_until_2016(),
    lambda: time_step(),
    lambda: xr.DataArray(
        0.04, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    time_step,
    "_delayfixed_aux18",
)


@component.add(
    name="share imports EU coal from RoW vs extraction World",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"imports_eu_coal_from_row_ej": 1, "extraction_coal_ej_world": 1},
)
def share_imports_eu_coal_from_row_vs_extraction_world():
    """
    Share of EU coal imports vs global coal extraction.
    """
    return zidz(imports_eu_coal_from_row_ej(), extraction_coal_ej_world())


@component.add(
    name="extraction coal EJ EU",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rurr_coal": 1,
        "unlimited_coal": 1,
        "time": 1,
        "max_extraction_coal_ej": 1,
        "unlimited_nre": 1,
        "ped_domestic_eu_coal_ej": 4,
    },
)
def extraction_coal_ej_eu():
    """
    Annual extraction of coal.
    """
    return if_then_else(
        rurr_coal() < 0,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            time() < 2016,
            lambda: ped_domestic_eu_coal_ej(),
            lambda: if_then_else(
                unlimited_nre() == 1,
                lambda: ped_domestic_eu_coal_ej(),
                lambda: if_then_else(
                    unlimited_coal() == 1,
                    lambda: ped_domestic_eu_coal_ej(),
                    lambda: np.minimum(
                        ped_domestic_eu_coal_ej(), max_extraction_coal_ej()
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="extraction coal EJ RoW",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"extraction_coal_ej_world": 1, "extraction_coal_ej_eu": 1},
)
def extraction_coal_ej_row():
    return extraction_coal_ej_world() - extraction_coal_ej_eu()


@component.add(
    name="current mineral resources Mt World",
    units="Mdollars",
    subscripts=["materials"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"current_mineral_resources_mt": 1},
)
def current_mineral_resources_mt_world():
    """
    Current global mineral resources. Source: global model.
    """
    return current_mineral_resources_mt()


@component.add(
    name="Historic coal domestic EU extracted EJ",
    units="EJ",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_historic_coal_domestic_eu_extracted_ej",
        "__data__": "_ext_data_historic_coal_domestic_eu_extracted_ej",
        "time": 1,
    },
)
def historic_coal_domestic_eu_extracted_ej():
    return _ext_data_historic_coal_domestic_eu_extracted_ej(time())


_ext_data_historic_coal_domestic_eu_extracted_ej = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "112",
    "H118",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_historic_coal_domestic_eu_extracted_ej",
)


@component.add(
    name="share cum materials to extract alt techn EU vs resources World",
    units="Dmnl",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "cum_materials_to_extract_for_alt_techn_from_2015_eu": 1,
        "current_mineral_resources_mt_world": 1,
    },
)
def share_cum_materials_to_extract_alt_techn_eu_vs_resources_world():
    """
    Annual demand of materials for alternative technologies vs. current EU extraction of each material.
    """
    return zidz(
        cum_materials_to_extract_for_alt_techn_from_2015_eu(),
        current_mineral_resources_mt_world().expand_dims(
            {"scenarios": _subscript_dict["scenarios"]}, 1
        ),
    )


@component.add(
    name="current mineral reserves Mt World",
    units="Mdollars",
    subscripts=["materials"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"current_mineral_reserves_mt": 1},
)
def current_mineral_reserves_mt_world():
    """
    Current global mineral reserves. Source: global model.
    """
    return current_mineral_reserves_mt()


@component.add(
    name="share cum materials to extract alt techn EU vs reserves World",
    units="Dmnl",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "cum_materials_to_extract_for_alt_techn_from_2015_eu": 1,
        "current_mineral_reserves_mt_world": 1,
    },
)
def share_cum_materials_to_extract_alt_techn_eu_vs_reserves_world():
    """
    Annual demand of materials for alternative technologies vs. current EU extraction of each material.
    """
    return zidz(
        cum_materials_to_extract_for_alt_techn_from_2015_eu(),
        current_mineral_reserves_mt_world().expand_dims(
            {"scenarios": _subscript_dict["scenarios"]}, 1
        ),
    )


@component.add(
    name="current mineral reserves Mt",
    units="Mt",
    subscripts=["materials"],
    comp_type="Data",
    comp_subtype="Normal",
    depends_on={"time": 1, "__data__": "_data_current_mineral_reserves_mt"},
)
def current_mineral_reserves_mt():
    """
    Current global mineral reserves. Source: global model.
    """
    return _data_current_mineral_reserves_mt(time())


_data_current_mineral_reserves_mt = TabData(
    "current mineral reserves Mt",
    "current_mineral_reserves_mt",
    {"materials": _subscript_dict["materials"]},
    "interpolate",
)


@component.add(
    name="current mineral resources Mt",
    units="Mt",
    subscripts=["materials"],
    comp_type="Data",
    comp_subtype="Normal",
    depends_on={"time": 1, "__data__": "_data_current_mineral_resources_mt"},
)
def current_mineral_resources_mt():
    """
    Current global mineral resources. Source: global model.
    """
    return _data_current_mineral_resources_mt(time())


_data_current_mineral_resources_mt = TabData(
    "current mineral resources Mt",
    "current_mineral_resources_mt",
    {"materials": _subscript_dict["materials"]},
    "interpolate",
)


@component.add(
    name="share annual demand alt techn vs current EU extraction",
    units="Dmnl",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_materials_to_extract_alt_techn_mtyr": 1,
        "current_annual_extraction_materials_mtyr": 1,
    },
)
def share_annual_demand_alt_techn_vs_current_eu_extraction():
    """
    Annual demand of materials for alternative technologies vs. current EU extraction of each material.
    """
    return zidz(
        total_materials_to_extract_alt_techn_mtyr(),
        current_annual_extraction_materials_mtyr().expand_dims(
            {"scenarios": _subscript_dict["scenarios"]}, 1
        ),
    )


@component.add(
    name='"Total materials to extract alt techn Mt/yr"',
    units="Mt",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_materials_to_extract_for_ev_batteries_mt": 1,
        "total_materials_to_extract_for_res_elec_mt": 1,
    },
)
def total_materials_to_extract_alt_techn_mtyr():
    """
    Total materials to extract annually in UE for RES elec and EV batteries.
    """
    return (
        total_materials_to_extract_for_ev_batteries_mt()
        + total_materials_to_extract_for_res_elec_mt()
    )


@component.add(
    name='"current annual extraction materials Mt/yr"',
    units="Mt/Year",
    subscripts=["materials"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_current_annual_extraction_materials_mtyr"
    },
)
def current_annual_extraction_materials_mtyr():
    """
    Current annual extraction per material.
    """
    return _ext_constant_current_annual_extraction_materials_mtyr()


_ext_constant_current_annual_extraction_materials_mtyr = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "BY5",
    {"materials": ["Adhesive"]},
    _root,
    {"materials": _subscript_dict["materials"]},
    "_ext_constant_current_annual_extraction_materials_mtyr",
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY6", {"materials": ["Aluminium"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY7", {"materials": ["Aluminium mirrors"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY8", {"materials": ["Cadmium"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY9", {"materials": ["Carbon fiber"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY10", {"materials": ["Cement"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY11", {"materials": ["Chromium"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY12", {"materials": ["Copper"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY13", {"materials": ["diesel"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY14", {"materials": ["Dy"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx",
    "Materials",
    "BY15",
    {"materials": ['"Electric/electronic components"']},
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY16", {"materials": ["Evacuation lines"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY17", {"materials": ["Fiberglass"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY18", {"materials": ["Foam glass"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY19", {"materials": ["Galium"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY20", {"materials": ["Glass"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY21", {"materials": ["Glass reinforcing plastic"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY22", {"materials": ["gravel"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY23", {"materials": ["Indium"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY24", {"materials": ["Iron"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY25", {"materials": ["KNO3 mined"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY26", {"materials": ["Asphalt"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY27", {"materials": ["Lime"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY28", {"materials": ["Limestone"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY29", {"materials": ["Lithium"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY30", {"materials": ["Lubricant"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY31", {"materials": ["Magnesium"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY32", {"materials": ["Manganese"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY33", {"materials": ["Heavy equipment"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY34", {"materials": ["Concrete"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY35", {"materials": ["Molybdenum"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY36", {"materials": ["NaNO3 mined"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY37", {"materials": ["NaNO3 synthetic"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY38", {"materials": ["Neodymium"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY39", {"materials": ["Nickel"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY40", {"materials": ['"Over grid (15%)"']}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY41", {"materials": ['"Over grid (5%)"']}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY42", {"materials": ["Paint"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY43", {"materials": ["Lead"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY44", {"materials": ["Plastics"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY45", {"materials": ["Polypropylene"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY46", {"materials": ["Rock"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY47", {"materials": ["Rock wool"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY48", {"materials": ["Sand"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY49", {"materials": ["Silicon sand"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY50", {"materials": ["Silicon wafer modules"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY51", {"materials": ["Silver"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY52", {"materials": ["Site preparation"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY53", {"materials": ["Tin"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY54", {"materials": ["soda ash"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY55", {"materials": ["steel"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY56", {"materials": ["synthetic oil"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY57", {"materials": ["tellurium"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY58", {"materials": ["titanium"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY59", {"materials": ["titanium dioxide"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY60", {"materials": ["vanadium"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY61", {"materials": ["wires"]}
)

_ext_constant_current_annual_extraction_materials_mtyr.add(
    "inputs_EU.xlsx", "Materials", "BY62", {"materials": ["zinc"]}
)


@component.add(
    name="Energy embedded in EU exports by sector and fuel",
    units="EJ",
    subscripts=["scenarios", "final sources", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "final_energy_intensity_by_sector_and_fuel_eu": 1,
        "total_domestic_output_required_for_exports_by_sector": 1,
        "m_per_t": 1,
    },
)
def energy_embedded_in_eu_exports_by_sector_and_fuel():
    """
    Final energy embedded in EU28 exports.Energy required to produce the output necessary to satisfy Rest of the World demand of EU28 products
    """
    return (
        final_energy_intensity_by_sector_and_fuel_eu()
        * total_domestic_output_required_for_exports_by_sector()
        / m_per_t()
    )


@component.add(
    name="Total energy embedded in EU28 imports",
    units="EJ",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_embedded_in_eu_imports_by_sector_and_fuel": 1},
)
def total_energy_embedded_in_eu28_imports():
    """
    Whole economy (Rest of the World) energy requirements to satisfy EU28 imports.
    """
    return sum(
        energy_embedded_in_eu_imports_by_sector_and_fuel().rename(
            {"sectors": "sectors!"}
        ),
        dim=["sectors!"],
    )


@component.add(
    name="Coverage energy rate",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_final_energy_footprint": 1, "real_tfec": 1},
)
def coverage_energy_rate():
    """
    EU28 energy consumption covering total energy carriers of EU28 economy.
    """
    return total_final_energy_footprint() / real_tfec() - 1


@component.add(
    name="Total energy embedded in EU28 exports",
    units="EJ",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_embedded_in_eu_exports_by_sector_and_fuel": 1},
)
def total_energy_embedded_in_eu28_exports():
    """
    Whole economy energy requirements to export.
    """
    return sum(
        energy_embedded_in_eu_exports_by_sector_and_fuel().rename(
            {"sectors": "sectors!"}
        ),
        dim=["sectors!"],
    )


@component.add(
    name="Total final energy footprint",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"final_energy_footprint_by_fuel": 1},
)
def total_final_energy_footprint():
    """
    Whole economy final energy consumption to satisfy EU28 domestic final demand
    """
    return sum(
        final_energy_footprint_by_fuel().rename({"final sources": "final sources!"}),
        dim=["final sources!"],
    )


@component.add(
    name="max FE solar thermal urban TWth",
    units="TWth",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"power_density_solar_thermal_in_urban_twemha": 1, "urban_land": 1},
)
def max_fe_solar_thermal_urban_twth():
    """
    Potential of solar thermal in urban areas (final energy).
    """
    return power_density_solar_thermal_in_urban_twemha() * urban_land()


@component.add(
    name="share available roof for solar thermal",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_available_roof_for_solar_thermal"},
)
def share_available_roof_for_solar_thermal():
    """
    Share of available roof in urban land for rooftop PV.
    """
    return _ext_constant_share_available_roof_for_solar_thermal()


_ext_constant_share_available_roof_for_solar_thermal = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "G30",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_share_available_roof_for_solar_thermal",
)

_ext_constant_share_available_roof_for_solar_thermal.add(
    "inputs_EU.xlsx", "SCEN1", "G30", {"scenarios": ["SCEN1"]}
)

_ext_constant_share_available_roof_for_solar_thermal.add(
    "inputs_EU.xlsx", "SCEN2", "G30", {"scenarios": ["SCEN2"]}
)

_ext_constant_share_available_roof_for_solar_thermal.add(
    "inputs_EU.xlsx", "SCEN3", "G30", {"scenarios": ["SCEN3"]}
)

_ext_constant_share_available_roof_for_solar_thermal.add(
    "inputs_EU.xlsx", "SCEN4", "G30", {"scenarios": ["SCEN4"]}
)

_ext_constant_share_available_roof_for_solar_thermal.add(
    "inputs_EU.xlsx", "User defined", "G30", {"scenarios": ["User defined"]}
)


@component.add(
    name="Efficiency RES heat",
    units="Dmnl",
    subscripts=["RES heat"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "f1_solar_panels_for_heat": 1,
        "losses_solar_for_heat": 1,
        "efficiency_geothermal_for_heat": 1,
        "efficiency_conversion_bioe_plants_to_heat": 1,
    },
)
def efficiency_res_heat():
    """
    Efficiency of RES technologies for heat.
    """
    value = xr.DataArray(
        np.nan, {"RES heat": _subscript_dict["RES heat"]}, ["RES heat"]
    )
    value.loc[['"solar-heat"']] = f1_solar_panels_for_heat() * losses_solar_for_heat()
    value.loc[['"geot-heat"']] = efficiency_geothermal_for_heat()
    value.loc[['"solid bioE-heat"']] = efficiency_conversion_bioe_plants_to_heat()
    return value


@component.add(
    name="Max PE RES for heat",
    units="EJ",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_fe_solar_thermal_urban_twth": 1,
        "efficiency_res_heat": 1,
        "geot_pe_potential_for_heat_ej": 1,
        "available_max_pe_solid_bioe_for_heat_ej": 1,
    },
)
def max_pe_res_for_heat():
    """
    Maximum level of primary energy for producing heat from renewables by technology.
    """
    value = xr.DataArray(
        np.nan,
        {
            "RES heat": _subscript_dict["RES heat"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES heat", "scenarios"],
    )
    value.loc[['"solar-heat"'], :] = (
        (
            max_fe_solar_thermal_urban_twth()
            / float(efficiency_res_heat().loc['"solar-heat"'])
        )
        .expand_dims({"RES heat": ['"solar-heat"']}, 0)
        .values
    )
    value.loc[['"geot-heat"'], :] = (
        geot_pe_potential_for_heat_ej()
        .expand_dims({"RES heat": ['"geot-heat"']}, 0)
        .values
    )
    value.loc[['"solid bioE-heat"'], :] = (
        available_max_pe_solid_bioe_for_heat_ej()
        .expand_dims({"RES heat": ['"solid bioE-heat"']}, 0)
        .values
    )
    return value


@component.add(
    name="Max FE RES for heat",
    units="EJ",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_fe_solar_thermal_urban_twth": 1,
        "ej_per_twh": 1,
        "twe_per_twh": 1,
        "efficiency_res_heat": 2,
        "max_pe_res_for_heat": 2,
    },
)
def max_fe_res_for_heat():
    """
    Maximum level of final energy for producing heat from renewables by technology. For technologies "solar-heat" and "geot-heat" this variable corresponds with the maximum potential, but not for solids bioenergy due to the competing use for heat and electricity.
    """
    value = xr.DataArray(
        np.nan,
        {
            "RES heat": _subscript_dict["RES heat"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES heat", "scenarios"],
    )
    value.loc[['"solar-heat"'], :] = (
        (max_fe_solar_thermal_urban_twth() * ej_per_twh() / twe_per_twh())
        .expand_dims({"RES heat": ['"solar-heat"']}, 0)
        .values
    )
    value.loc[['"geot-heat"'], :] = (
        (
            max_pe_res_for_heat().loc['"geot-heat"', :].reset_coords(drop=True)
            * float(efficiency_res_heat().loc['"geot-heat"'])
        )
        .expand_dims({"RES heat": ['"geot-heat"']}, 0)
        .values
    )
    value.loc[['"solid bioE-heat"'], :] = (
        (
            max_pe_res_for_heat().loc['"solid bioE-heat"', :].reset_coords(drop=True)
            * float(efficiency_res_heat().loc['"solid bioE-heat"'])
        )
        .expand_dims({"RES heat": ['"solid bioE-heat"']}, 0)
        .values
    )
    return value


@component.add(
    name="Final energy intensity by sector and fuel RoW",
    units="Dmnl",
    subscripts=["scenarios", "final sources", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_final_energy_by_sector_and_fuel_row": 1,
        "real_total_output_by_sector_row": 1,
    },
)
def final_energy_intensity_by_sector_and_fuel_row():
    """
    Final energy intensity of Rest of the World sectors. (Energy consumed by RoW/Value of output in RoW).
    """
    return (
        real_final_energy_by_sector_and_fuel_row()
        / real_total_output_by_sector_row()
        * 1000000.0
    )


@component.add(
    name="Energy embedded in EU imports by sector and fuel",
    units="EJ",
    subscripts=["scenarios", "final sources", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "final_energy_intensity_by_sector_and_fuel_row": 1,
        "row_output_required_for_eu28_imports_by_sector": 1,
        "m_per_t": 1,
    },
)
def energy_embedded_in_eu_imports_by_sector_and_fuel():
    """
    Energy embedded in EU28 final products imports. Energy required to produced to output necessary to satisfy EU28 imports.
    """
    return (
        final_energy_intensity_by_sector_and_fuel_row()
        * row_output_required_for_eu28_imports_by_sector()
        / m_per_t()
    )


@component.add(
    name="Real final energy by sector and fuel",
    subscripts=["scenarios", "final sources", "sectors"],
    comp_type="Data",
    comp_subtype="Normal",
    depends_on={"time": 1, "__data__": "_data_real_final_energy_by_sector_and_fuel"},
)
def real_final_energy_by_sector_and_fuel():
    """
    Real final energy consumed by sector and fuel. Source: global model.
    """
    return _data_real_final_energy_by_sector_and_fuel(time())


_data_real_final_energy_by_sector_and_fuel = TabData(
    "Real final energy by sector and fuel",
    "real_final_energy_by_sector_and_fuel",
    {
        "scenarios": _subscript_dict["scenarios"],
        "final sources": _subscript_dict["final sources"],
        "sectors": _subscript_dict["sectors"],
    },
    "interpolate",
)


@component.add(
    name="Leontief Matrix EU Imports 2009",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_imports_2009"},
)
def leontief_matrix_eu_imports_2009():
    return _ext_constant_leontief_matrix_eu_imports_2009()


_ext_constant_leontief_matrix_eu_imports_2009 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "RW203",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_imports_2009",
)


@component.add(
    name="Leontief Matrix EU Imports 2001",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_imports_2001"},
)
def leontief_matrix_eu_imports_2001():
    return _ext_constant_leontief_matrix_eu_imports_2001()


_ext_constant_leontief_matrix_eu_imports_2001 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "HC203",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_imports_2001",
)


@component.add(
    name="Total domestic output required for exports by sector",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"domestic_output_required_for_exports_by_sector": 1},
)
def total_domestic_output_required_for_exports_by_sector():
    """
    Value of output (production) required to satisfy Rest of the World demand of EU28 producs (exports) by sector.
    """
    return domestic_output_required_for_exports_by_sector()


@component.add(
    name="RoW output required for EU28 imports by sector",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"leontief_matrix_eu_imports": 35, "real_final_demand_by_sector_eu": 35},
)
def row_output_required_for_eu28_imports_by_sector():
    """
    Value of Rest of the World output (production) required to satisfy EU28 demand of RoW producs (imports).
    """
    return (
        leontief_matrix_eu_imports()
        .loc[:, "Agriculture Hunting Forestry and Fishing"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Agriculture Hunting Forestry and Fishing"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Mining and Quarrying"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Mining and Quarrying"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Food Beverages and Tobacco"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Food Beverages and Tobacco"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Textiles and Textile Products"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Textiles and Textile Products"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Leather Leather and Footwear"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Leather Leather and Footwear"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Wood and Products of Woood and Cork"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Wood and Products of Woood and Cork"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Pulp Paper Printing and Publishing"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Pulp Paper Printing and Publishing"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Coke Refined Petroleum and Nuclear Fuel"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Coke Refined Petroleum and Nuclear Fuel"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Chemicals and Chemical products"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Chemicals and Chemical products"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Rubber and Plastics"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Rubber and Plastics"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Other Non Metalic Mineral"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Other Non Metalic Mineral"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Basic Metals and Fabricated Metal"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Basic Metals and Fabricated Metal"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports().loc[:, "Machinery Nec"].reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Machinery Nec"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Electrical and Optical Equipment"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Electrical and Optical Equipment"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Transport Equipment"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Transport Equipment"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Manufacturing Nec Recycling"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Manufacturing Nec Recycling"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Electricity Gas and Water Supply"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Electricity Gas and Water Supply"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports().loc[:, "Construction"].reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Construction"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[
            :,
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
        ]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[
            :,
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
        ]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[
            :,
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
        ]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[
            :,
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
        ]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[
            :,
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
        ]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[
            :,
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
        ]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Hotels and Restaurants"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Hotels and Restaurants"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Inland Transport"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Inland Transport"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports().loc[:, "Water Transport"].reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Water Transport"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports().loc[:, "Air Transport"].reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Air Transport"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[
            :,
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
        ]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[
            :,
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
        ]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Post and Telecommunications"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Post and Telecommunications"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Financial Intermedation"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Financial Intermedation"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Real Estate Activities"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Real Estate Activities"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Renting od MEq and Other Business Activities"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Renting od MEq and Other Business Activities"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Public Admin and Defence Compulsory Social Security"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Public Admin and Defence Compulsory Social Security"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports().loc[:, "Education"].reset_coords(drop=True)
        * real_final_demand_by_sector_eu().loc[:, "Education"].reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Health and Social Work"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Health and Social Work"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Other Community Social and Persona Services"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Other Community Social and Persona Services"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_imports()
        .loc[:, "Private Households with Employed Persons"]
        .reset_coords(drop=True)
        * real_final_demand_by_sector_eu()
        .loc[:, "Private Households with Employed Persons"]
        .reset_coords(drop=True)
    ).transpose("scenarios", "sectors")


@component.add(
    name="Leontief Matrix EU Imports 1996",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_imports_1996"},
)
def leontief_matrix_eu_imports_1996():
    return _ext_constant_leontief_matrix_eu_imports_1996()


_ext_constant_leontief_matrix_eu_imports_1996 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "AJ203",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_imports_1996",
)


@component.add(
    name="Leontief Matrix EU Imports 1997",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_imports_1997"},
)
def leontief_matrix_eu_imports_1997():
    return _ext_constant_leontief_matrix_eu_imports_1997()


_ext_constant_leontief_matrix_eu_imports_1997 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "BS203",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_imports_1997",
)


@component.add(
    name="Leontief Matrix EU Imports 1998",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_imports_1998"},
)
def leontief_matrix_eu_imports_1998():
    return _ext_constant_leontief_matrix_eu_imports_1998()


_ext_constant_leontief_matrix_eu_imports_1998 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "DB203",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_imports_1998",
)


@component.add(
    name="Leontief Matrix EU Imports 1999",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_imports_1999"},
)
def leontief_matrix_eu_imports_1999():
    return _ext_constant_leontief_matrix_eu_imports_1999()


_ext_constant_leontief_matrix_eu_imports_1999 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "EK203",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_imports_1999",
)


@component.add(
    name="Leontief Matrix EU Imports 2000",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_imports_2000"},
)
def leontief_matrix_eu_imports_2000():
    return _ext_constant_leontief_matrix_eu_imports_2000()


_ext_constant_leontief_matrix_eu_imports_2000 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "FT203",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_imports_2000",
)


@component.add(
    name="Leontief Matrix EU Imports 2005",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_imports_2005"},
)
def leontief_matrix_eu_imports_2005():
    return _ext_constant_leontief_matrix_eu_imports_2005()


_ext_constant_leontief_matrix_eu_imports_2005 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "MM203",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_imports_2005",
)


@component.add(
    name="Leontief Matrix EU Imports 2002",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_imports_2002"},
)
def leontief_matrix_eu_imports_2002():
    return _ext_constant_leontief_matrix_eu_imports_2002()


_ext_constant_leontief_matrix_eu_imports_2002 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "IL203",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_imports_2002",
)


@component.add(
    name="Leontief Matrix EU Imports 2003",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_imports_2003"},
)
def leontief_matrix_eu_imports_2003():
    return _ext_constant_leontief_matrix_eu_imports_2003()


_ext_constant_leontief_matrix_eu_imports_2003 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "JU203",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_imports_2003",
)


@component.add(
    name="Leontief Matrix EU Imports 2004",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_imports_2004"},
)
def leontief_matrix_eu_imports_2004():
    return _ext_constant_leontief_matrix_eu_imports_2004()


_ext_constant_leontief_matrix_eu_imports_2004 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "LD203",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_imports_2004",
)


@component.add(
    name="Leontief Matrix EU Imports 1995",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_imports_1995"},
)
def leontief_matrix_eu_imports_1995():
    return _ext_constant_leontief_matrix_eu_imports_1995()


_ext_constant_leontief_matrix_eu_imports_1995 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "A203",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_imports_1995",
)


@component.add(
    name="Leontief Matrix EU Imports 2006",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_imports_2006"},
)
def leontief_matrix_eu_imports_2006():
    return _ext_constant_leontief_matrix_eu_imports_2006()


_ext_constant_leontief_matrix_eu_imports_2006 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "NV203",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_imports_2006",
)


@component.add(
    name="Leontief Matrix EU Imports 2007",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_imports_2007"},
)
def leontief_matrix_eu_imports_2007():
    return _ext_constant_leontief_matrix_eu_imports_2007()


_ext_constant_leontief_matrix_eu_imports_2007 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "PE203",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_imports_2007",
)


@component.add(
    name="Leontief Matrix EU Imports 2008",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_imports_2008"},
)
def leontief_matrix_eu_imports_2008():
    return _ext_constant_leontief_matrix_eu_imports_2008()


_ext_constant_leontief_matrix_eu_imports_2008 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "QN203",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_imports_2008",
)


@component.add(
    name="Leontief Matrix EU Imports",
    units="Dmnl",
    subscripts=["sectors", "sectors1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 14,
        "leontief_matrix_eu_imports_1995": 1,
        "leontief_matrix_eu_imports_2008": 1,
        "leontief_matrix_eu_imports_1996": 1,
        "leontief_matrix_eu_imports_2000": 1,
        "leontief_matrix_eu_imports_2001": 1,
        "leontief_matrix_eu_imports_1997": 1,
        "leontief_matrix_eu_imports_2002": 1,
        "leontief_matrix_eu_imports_1998": 1,
        "leontief_matrix_eu_imports_2005": 1,
        "leontief_matrix_eu_imports_2007": 1,
        "leontief_matrix_eu_imports_2004": 1,
        "leontief_matrix_eu_imports_2009": 1,
        "leontief_matrix_eu_imports_1999": 1,
        "leontief_matrix_eu_imports_2003": 1,
        "leontief_matrix_eu_imports_2006": 1,
    },
)
def leontief_matrix_eu_imports():
    """
    Leontieff matrix in interregional Input-Output Analysis can be divided in submatrixes. Imports submatrix (lower-left quadrant) gives the sensitiveness of foreign production to domestic final demand of Rest of the World products (imports).
    """
    return if_then_else(
        time() < 1996,
        lambda: leontief_matrix_eu_imports_1995(),
        lambda: if_then_else(
            time() < 1997,
            lambda: leontief_matrix_eu_imports_1996(),
            lambda: if_then_else(
                time() < 1998,
                lambda: leontief_matrix_eu_imports_1997(),
                lambda: if_then_else(
                    time() < 1999,
                    lambda: leontief_matrix_eu_imports_1998(),
                    lambda: if_then_else(
                        time() < 2000,
                        lambda: leontief_matrix_eu_imports_1999(),
                        lambda: if_then_else(
                            time() < 2001,
                            lambda: leontief_matrix_eu_imports_2000(),
                            lambda: if_then_else(
                                time() < 2002,
                                lambda: leontief_matrix_eu_imports_2001(),
                                lambda: if_then_else(
                                    time() < 2003,
                                    lambda: leontief_matrix_eu_imports_2002(),
                                    lambda: if_then_else(
                                        time() < 2004,
                                        lambda: leontief_matrix_eu_imports_2003(),
                                        lambda: if_then_else(
                                            time() < 2005,
                                            lambda: leontief_matrix_eu_imports_2004(),
                                            lambda: if_then_else(
                                                time() < 2006,
                                                lambda: leontief_matrix_eu_imports_2005(),
                                                lambda: if_then_else(
                                                    time() < 2007,
                                                    lambda: leontief_matrix_eu_imports_2006(),
                                                    lambda: if_then_else(
                                                        time() < 2008,
                                                        lambda: leontief_matrix_eu_imports_2007(),
                                                        lambda: if_then_else(
                                                            time() < 2009,
                                                            lambda: leontief_matrix_eu_imports_2008(),
                                                            lambda: leontief_matrix_eu_imports_2009(),
                                                        ),
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="Energy scarcity feedback shortage coeff EU",
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "activate_energy_scarcity_feedback": 1,
        "real_fe_consumption_by_fuel_before_heat_correction": 1,
        "required_fed_by_fuel_before_heat_correction": 1,
    },
)
def energy_scarcity_feedback_shortage_coeff_eu():
    """
    MIN(1, real FE consumption by fuel before heat correction[scenarios,final sources]/Required FED by fuel before heat correction [scenarios,final sources]) This coefficient adapts the real final energy by fuel to be used by economic sectors taking into account energy availability.
    """
    return if_then_else(
        activate_energy_scarcity_feedback() == 1,
        lambda: np.minimum(
            1,
            zidz(
                real_fe_consumption_by_fuel_before_heat_correction().rename(
                    {"final sources1": "final sources"}
                ),
                required_fed_by_fuel_before_heat_correction(),
            ),
        ),
        lambda: xr.DataArray(
            1,
            {
                "scenarios": _subscript_dict["scenarios"],
                "final sources": _subscript_dict["final sources"],
            },
            ["scenarios", "final sources"],
        ),
    )


@component.add(
    name="A Matrix EU Exports 2000",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_exports_2000"},
)
def a_matrix_eu_exports_2000():
    return _ext_constant_a_matrix_eu_exports_2000()


_ext_constant_a_matrix_eu_exports_2000 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "FT121",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_exports_2000",
)


@component.add(
    name="A Matrix EU Exports 2002",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_exports_2002"},
)
def a_matrix_eu_exports_2002():
    return _ext_constant_a_matrix_eu_exports_2002()


_ext_constant_a_matrix_eu_exports_2002 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "IL121",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_exports_2002",
)


@component.add(
    name="A Matrix EU Exports 2003",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_exports_2003"},
)
def a_matrix_eu_exports_2003():
    return _ext_constant_a_matrix_eu_exports_2003()


_ext_constant_a_matrix_eu_exports_2003 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "JU121",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_exports_2003",
)


@component.add(
    name="A Matrix EU Exports 2004",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_exports_2004"},
)
def a_matrix_eu_exports_2004():
    return _ext_constant_a_matrix_eu_exports_2004()


_ext_constant_a_matrix_eu_exports_2004 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "LD121",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_exports_2004",
)


@component.add(
    name="A Matrix EU Exports 2005",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_exports_2005"},
)
def a_matrix_eu_exports_2005():
    return _ext_constant_a_matrix_eu_exports_2005()


_ext_constant_a_matrix_eu_exports_2005 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "MM121",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_exports_2005",
)


@component.add(
    name="A Matrix EU Exports 2006",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_exports_2006"},
)
def a_matrix_eu_exports_2006():
    return _ext_constant_a_matrix_eu_exports_2006()


_ext_constant_a_matrix_eu_exports_2006 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "NV121",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_exports_2006",
)


@component.add(
    name="A Matrix EU Exports 2007",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_exports_2007"},
)
def a_matrix_eu_exports_2007():
    return _ext_constant_a_matrix_eu_exports_2007()


_ext_constant_a_matrix_eu_exports_2007 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "PE121",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_exports_2007",
)


@component.add(
    name="GDP EU",
    units="T$",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gdp_by_sector": 1},
)
def gdp_eu():
    """
    Global GDP in T1995T$.
    """
    return (
        sum(gdp_by_sector().rename({"sectors": "sectors!"}), dim=["sectors!"])
        / 1000000.0
    )


@component.add(
    name="GDP by sector",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_final_demand_by_sector_eu": 1,
        "ic_exports_eu": 1,
        "ic_imports_eu": 1,
    },
)
def gdp_by_sector():
    """
    EU 28 Gross Domestic Product by sector
    """
    return real_final_demand_by_sector_eu() + ic_exports_eu() - ic_imports_eu()


@component.add(
    name="A Matrix EU Imports",
    subscripts=["sectors", "sectors1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 14,
        "a_matrix_eu_imports_1995": 1,
        "a_matrix_eu_imports_1996": 1,
        "a_matrix_eu_imports_2007": 1,
        "a_matrix_eu_imports_2006": 1,
        "a_matrix_eu_imports_2000": 1,
        "a_matrix_eu_imports_2005": 1,
        "a_matrix_eu_imports_2008": 1,
        "a_matrix_eu_imports_1997": 1,
        "a_matrix_eu_imports_1999": 1,
        "a_matrix_eu_imports_2009": 1,
        "a_matrix_eu_imports_1998": 1,
        "a_matrix_eu_imports_2003": 1,
        "a_matrix_eu_imports_2001": 1,
        "a_matrix_eu_imports_2004": 1,
        "a_matrix_eu_imports_2002": 1,
    },
)
def a_matrix_eu_imports():
    """
    In interregional Input-Output Analysis, A Matrix can be divided in submatrixes. Exports submatrix (lower-left quadrant) is the matrix of technnical coefficients of imports.
    """
    return if_then_else(
        time() < 1996,
        lambda: a_matrix_eu_imports_1995(),
        lambda: if_then_else(
            time() < 1997,
            lambda: a_matrix_eu_imports_1996(),
            lambda: if_then_else(
                time() < 1998,
                lambda: a_matrix_eu_imports_1997(),
                lambda: if_then_else(
                    time() < 1999,
                    lambda: a_matrix_eu_imports_1998(),
                    lambda: if_then_else(
                        time() < 2000,
                        lambda: a_matrix_eu_imports_1999(),
                        lambda: if_then_else(
                            time() < 2001,
                            lambda: a_matrix_eu_imports_2000(),
                            lambda: if_then_else(
                                time() < 2002,
                                lambda: a_matrix_eu_imports_2001(),
                                lambda: if_then_else(
                                    time() < 2003,
                                    lambda: a_matrix_eu_imports_2002(),
                                    lambda: if_then_else(
                                        time() < 2004,
                                        lambda: a_matrix_eu_imports_2003(),
                                        lambda: if_then_else(
                                            time() < 2005,
                                            lambda: a_matrix_eu_imports_2004(),
                                            lambda: if_then_else(
                                                time() < 2006,
                                                lambda: a_matrix_eu_imports_2005(),
                                                lambda: if_then_else(
                                                    time() < 2007,
                                                    lambda: a_matrix_eu_imports_2006(),
                                                    lambda: if_then_else(
                                                        time() < 2008,
                                                        lambda: a_matrix_eu_imports_2007(),
                                                        lambda: if_then_else(
                                                            time() < 2009,
                                                            lambda: a_matrix_eu_imports_2008(),
                                                            lambda: a_matrix_eu_imports_2009(),
                                                        ),
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="A Matrix EU Imports 1995",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_imports_1995"},
)
def a_matrix_eu_imports_1995():
    return _ext_constant_a_matrix_eu_imports_1995()


_ext_constant_a_matrix_eu_imports_1995 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "A161",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_imports_1995",
)


@component.add(
    name="A Matrix EU Imports 1996",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_imports_1996"},
)
def a_matrix_eu_imports_1996():
    return _ext_constant_a_matrix_eu_imports_1996()


_ext_constant_a_matrix_eu_imports_1996 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "AJ161",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_imports_1996",
)


@component.add(
    name="A Matrix EU Imports 1997",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_imports_1997"},
)
def a_matrix_eu_imports_1997():
    return _ext_constant_a_matrix_eu_imports_1997()


_ext_constant_a_matrix_eu_imports_1997 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "BS161",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_imports_1997",
)


@component.add(
    name="A Matrix EU Imports 1998",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_imports_1998"},
)
def a_matrix_eu_imports_1998():
    return _ext_constant_a_matrix_eu_imports_1998()


_ext_constant_a_matrix_eu_imports_1998 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "DB161",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_imports_1998",
)


@component.add(
    name="A Matrix EU Imports 1999",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_imports_1999"},
)
def a_matrix_eu_imports_1999():
    return _ext_constant_a_matrix_eu_imports_1999()


_ext_constant_a_matrix_eu_imports_1999 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "EK161",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_imports_1999",
)


@component.add(
    name="A Matrix EU Imports 2000",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_imports_2000"},
)
def a_matrix_eu_imports_2000():
    return _ext_constant_a_matrix_eu_imports_2000()


_ext_constant_a_matrix_eu_imports_2000 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "FT161",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_imports_2000",
)


@component.add(
    name="A Matrix EU Imports 2001",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_imports_2001"},
)
def a_matrix_eu_imports_2001():
    return _ext_constant_a_matrix_eu_imports_2001()


_ext_constant_a_matrix_eu_imports_2001 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "HC161",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_imports_2001",
)


@component.add(
    name="A Matrix EU Imports 2002",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_imports_2002"},
)
def a_matrix_eu_imports_2002():
    return _ext_constant_a_matrix_eu_imports_2002()


_ext_constant_a_matrix_eu_imports_2002 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "IL161",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_imports_2002",
)


@component.add(
    name="A Matrix EU Imports 2003",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_imports_2003"},
)
def a_matrix_eu_imports_2003():
    return _ext_constant_a_matrix_eu_imports_2003()


_ext_constant_a_matrix_eu_imports_2003 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "JU161",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_imports_2003",
)


@component.add(
    name="A Matrix EU Imports 2004",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_imports_2004"},
)
def a_matrix_eu_imports_2004():
    return _ext_constant_a_matrix_eu_imports_2004()


_ext_constant_a_matrix_eu_imports_2004 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "LD161",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_imports_2004",
)


@component.add(
    name="A Matrix EU Imports 2005",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_imports_2005"},
)
def a_matrix_eu_imports_2005():
    return _ext_constant_a_matrix_eu_imports_2005()


_ext_constant_a_matrix_eu_imports_2005 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "MM161",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_imports_2005",
)


@component.add(
    name="A Matrix EU Imports 2006",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_imports_2006"},
)
def a_matrix_eu_imports_2006():
    return _ext_constant_a_matrix_eu_imports_2006()


_ext_constant_a_matrix_eu_imports_2006 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "NV161",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_imports_2006",
)


@component.add(
    name="A Matrix EU Imports 2007",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_imports_2007"},
)
def a_matrix_eu_imports_2007():
    return _ext_constant_a_matrix_eu_imports_2007()


_ext_constant_a_matrix_eu_imports_2007 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "PE161",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_imports_2007",
)


@component.add(
    name="A Matrix EU Imports 2008",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_imports_2008"},
)
def a_matrix_eu_imports_2008():
    return _ext_constant_a_matrix_eu_imports_2008()


_ext_constant_a_matrix_eu_imports_2008 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "QN161",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_imports_2008",
)


@component.add(
    name="IC exports EU",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ic_exports_eu_matrix": 1},
)
def ic_exports_eu():
    """
    Total intermediate products exports
    """
    return sum(
        ic_exports_eu_matrix().rename({"sectors1": "sectors1!"}), dim=["sectors1!"]
    )


@component.add(
    name="IC exports EU matrix",
    units="Mdollars",
    subscripts=["scenarios", "sectors", "sectors1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"a_matrix_eu_exports": 1, "real_total_output_by_sector_row": 1},
)
def ic_exports_eu_matrix():
    """
    Intermediate products exports by sector
    """
    return (
        a_matrix_eu_exports()
        * real_total_output_by_sector_row()
        .rename({"sectors": "sectors1"})
        .transpose("sectors1", "scenarios")
    ).transpose("scenarios", "sectors", "sectors1")


@component.add(
    name="IC imports EU",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ic_imports_eu_matrix": 1},
)
def ic_imports_eu():
    """
    Total intermediate products imports
    """
    return sum(
        ic_imports_eu_matrix().rename({"sectors": "sectors1!", "sectors1": "sectors"}),
        dim=["sectors1!"],
    )


@component.add(
    name="IC imports EU matrix",
    units="Mdollars",
    subscripts=["scenarios", "sectors", "sectors1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"a_matrix_eu_imports": 1, "real_total_output_by_sector_eu": 1},
)
def ic_imports_eu_matrix():
    """
    Intermediate products imports by sector
    """
    return (
        a_matrix_eu_imports()
        * real_total_output_by_sector_eu()
        .rename({"sectors": "sectors1"})
        .transpose("sectors1", "scenarios")
    ).transpose("scenarios", "sectors", "sectors1")


@component.add(
    name="Real demand Tdollars",
    units="Tdollars",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_demand": 1},
)
def real_demand_tdollars():
    return real_demand() / 1000000.0


@component.add(
    name="A Matrix EU Exports",
    subscripts=["sectors", "sectors1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 14,
        "a_matrix_eu_exports_1995": 1,
        "a_matrix_eu_exports_2008": 1,
        "a_matrix_eu_exports_1998": 1,
        "a_matrix_eu_exports_1999": 1,
        "a_matrix_eu_exports_2002": 1,
        "a_matrix_eu_exports_2005": 1,
        "a_matrix_eu_exports_2001": 1,
        "a_matrix_eu_exports_1996": 1,
        "a_matrix_eu_exports_1997": 1,
        "a_matrix_eu_exports_2006": 1,
        "a_matrix_eu_exports_2007": 1,
        "a_matrix_eu_exports_2009": 1,
        "a_matrix_eu_exports_2004": 1,
        "a_matrix_eu_exports_2003": 1,
        "a_matrix_eu_exports_2000": 1,
    },
)
def a_matrix_eu_exports():
    """
    In interregional Input-Output Analysis, A Matrix can be divided in submatrixes. Exports submatrix (upper-right quadrant) is the matrix of technnical coefficients of exports.
    """
    return if_then_else(
        time() < 1996,
        lambda: a_matrix_eu_exports_1995(),
        lambda: if_then_else(
            time() < 1997,
            lambda: a_matrix_eu_exports_1996(),
            lambda: if_then_else(
                time() < 1998,
                lambda: a_matrix_eu_exports_1997(),
                lambda: if_then_else(
                    time() < 1999,
                    lambda: a_matrix_eu_exports_1998(),
                    lambda: if_then_else(
                        time() < 2000,
                        lambda: a_matrix_eu_exports_1999(),
                        lambda: if_then_else(
                            time() < 2001,
                            lambda: a_matrix_eu_exports_2000(),
                            lambda: if_then_else(
                                time() < 2002,
                                lambda: a_matrix_eu_exports_2001(),
                                lambda: if_then_else(
                                    time() < 2003,
                                    lambda: a_matrix_eu_exports_2002(),
                                    lambda: if_then_else(
                                        time() < 2004,
                                        lambda: a_matrix_eu_exports_2003(),
                                        lambda: if_then_else(
                                            time() < 2005,
                                            lambda: a_matrix_eu_exports_2004(),
                                            lambda: if_then_else(
                                                time() < 2006,
                                                lambda: a_matrix_eu_exports_2005(),
                                                lambda: if_then_else(
                                                    time() < 2007,
                                                    lambda: a_matrix_eu_exports_2006(),
                                                    lambda: if_then_else(
                                                        time() < 2008,
                                                        lambda: a_matrix_eu_exports_2007(),
                                                        lambda: if_then_else(
                                                            time() < 2009,
                                                            lambda: a_matrix_eu_exports_2008(),
                                                            lambda: a_matrix_eu_exports_2009(),
                                                        ),
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="A Matrix EU Exports 1995",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_exports_1995"},
)
def a_matrix_eu_exports_1995():
    return _ext_constant_a_matrix_eu_exports_1995()


_ext_constant_a_matrix_eu_exports_1995 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "A121",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_exports_1995",
)


@component.add(
    name="A Matrix EU Exports 1996",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_exports_1996"},
)
def a_matrix_eu_exports_1996():
    return _ext_constant_a_matrix_eu_exports_1996()


_ext_constant_a_matrix_eu_exports_1996 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "AJ121",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_exports_1996",
)


@component.add(
    name="A Matrix EU Exports 1997",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_exports_1997"},
)
def a_matrix_eu_exports_1997():
    return _ext_constant_a_matrix_eu_exports_1997()


_ext_constant_a_matrix_eu_exports_1997 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "BS121",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_exports_1997",
)


@component.add(
    name="A Matrix EU Exports 1998",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_exports_1998"},
)
def a_matrix_eu_exports_1998():
    return _ext_constant_a_matrix_eu_exports_1998()


_ext_constant_a_matrix_eu_exports_1998 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "DB121",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_exports_1998",
)


@component.add(
    name="A Matrix EU Exports 1999",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_exports_1999"},
)
def a_matrix_eu_exports_1999():
    return _ext_constant_a_matrix_eu_exports_1999()


_ext_constant_a_matrix_eu_exports_1999 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "EK121",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_exports_1999",
)


@component.add(
    name="A Matrix EU Exports 2001",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_exports_2001"},
)
def a_matrix_eu_exports_2001():
    return _ext_constant_a_matrix_eu_exports_2001()


_ext_constant_a_matrix_eu_exports_2001 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "HC121",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_exports_2001",
)


@component.add(
    name="A Matrix EU Exports 2009",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_exports_2009"},
)
def a_matrix_eu_exports_2009():
    return _ext_constant_a_matrix_eu_exports_2009()


_ext_constant_a_matrix_eu_exports_2009 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "RW121",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_exports_2009",
)


@component.add(
    name="Real demand delayed 1yr",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_real_demand_delayed_1yr": 1},
    other_deps={
        "_smooth_real_demand_delayed_1yr": {
            "initial": {},
            "step": {"real_demand_tdollars": 1},
        }
    },
)
def real_demand_delayed_1yr():
    return _smooth_real_demand_delayed_1yr()


_smooth_real_demand_delayed_1yr = Smooth(
    lambda: real_demand_tdollars(),
    lambda: xr.DataArray(1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    lambda: xr.DataArray(
        8.6, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    lambda: 12,
    "_smooth_real_demand_delayed_1yr",
)


@component.add(
    name="A Matrix EU Imports 2009",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_imports_2009"},
)
def a_matrix_eu_imports_2009():
    return _ext_constant_a_matrix_eu_imports_2009()


_ext_constant_a_matrix_eu_imports_2009 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "RW161",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_imports_2009",
)


@component.add(
    name="A Matrix EU Exports 2008",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_a_matrix_eu_exports_2008"},
)
def a_matrix_eu_exports_2008():
    return _ext_constant_a_matrix_eu_exports_2008()


_ext_constant_a_matrix_eu_exports_2008 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "QN121",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_a_matrix_eu_exports_2008",
)


@component.add(
    name="IA Matrix EU Exports 2005",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_eu_exports_2005"},
)
def ia_matrix_eu_exports_2005():
    return _ext_constant_ia_matrix_eu_exports_2005()


_ext_constant_ia_matrix_eu_exports_2005 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "MM81",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_eu_exports_2005",
)


@component.add(
    name="IA Matrix EU Exports 2006",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_eu_exports_2006"},
)
def ia_matrix_eu_exports_2006():
    return _ext_constant_ia_matrix_eu_exports_2006()


_ext_constant_ia_matrix_eu_exports_2006 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "NV81",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_eu_exports_2006",
)


@component.add(
    name="IA Matrix EU Exports 2007",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_eu_exports_2007"},
)
def ia_matrix_eu_exports_2007():
    return _ext_constant_ia_matrix_eu_exports_2007()


_ext_constant_ia_matrix_eu_exports_2007 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "PE81",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_eu_exports_2007",
)


@component.add(
    name="IA Matrix EU Exports 2008",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_eu_exports_2008"},
)
def ia_matrix_eu_exports_2008():
    return _ext_constant_ia_matrix_eu_exports_2008()


_ext_constant_ia_matrix_eu_exports_2008 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "QN81",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_eu_exports_2008",
)


@component.add(
    name="IA Matrix EU Exports 2009",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_eu_exports_2009"},
)
def ia_matrix_eu_exports_2009():
    return _ext_constant_ia_matrix_eu_exports_2009()


_ext_constant_ia_matrix_eu_exports_2009 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "RW81",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_eu_exports_2009",
)


@component.add(
    name="Real total output by sector RoW",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_total_output_by_sector_world": 1,
        "real_total_output_by_sector_eu": 1,
    },
)
def real_total_output_by_sector_row():
    """
    Sectoral real total production by Rest of the World.
    """
    return real_total_output_by_sector_world() - real_total_output_by_sector_eu()


@component.add(
    name="Real final demand by sector EU",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_domestic_demand_by_sector_eu": 1,
        "real_final_demand_of_exports": 1,
    },
)
def real_final_demand_by_sector_eu():
    """
    Sectoral final demand of EU28 products (domestic and foreign).
    """
    return np.maximum(
        0, real_domestic_demand_by_sector_eu() + real_final_demand_of_exports()
    )


@component.add(
    name="IA Matrix EU Exports 1999",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_eu_exports_1999"},
)
def ia_matrix_eu_exports_1999():
    return _ext_constant_ia_matrix_eu_exports_1999()


_ext_constant_ia_matrix_eu_exports_1999 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "EK81",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_eu_exports_1999",
)


@component.add(
    name="IA Matrix EU Exports 2000",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_eu_exports_2000"},
)
def ia_matrix_eu_exports_2000():
    return _ext_constant_ia_matrix_eu_exports_2000()


_ext_constant_ia_matrix_eu_exports_2000 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "FT81",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_eu_exports_2000",
)


@component.add(
    name="Real Final Demand of exports",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ia_matrix_eu_exports": 35, "real_total_output_by_sector_row": 35},
)
def real_final_demand_of_exports():
    """
    Real final demand of EU28 products made by the Rest of the World (Exports).
    """
    return (
        ia_matrix_eu_exports()
        .loc[:, "Agriculture Hunting Forestry and Fishing"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Agriculture Hunting Forestry and Fishing"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports().loc[:, "Mining and Quarrying"].reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Mining and Quarrying"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[:, "Food Beverages and Tobacco"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Food Beverages and Tobacco"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[:, "Textiles and Textile Products"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Textiles and Textile Products"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[:, "Leather Leather and Footwear"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Leather Leather and Footwear"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[:, "Wood and Products of Woood and Cork"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Wood and Products of Woood and Cork"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[:, "Pulp Paper Printing and Publishing"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Pulp Paper Printing and Publishing"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[:, "Coke Refined Petroleum and Nuclear Fuel"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Coke Refined Petroleum and Nuclear Fuel"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[:, "Chemicals and Chemical products"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Chemicals and Chemical products"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports().loc[:, "Rubber and Plastics"].reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Rubber and Plastics"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[:, "Other Non Metalic Mineral"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Other Non Metalic Mineral"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[:, "Basic Metals and Fabricated Metal"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Basic Metals and Fabricated Metal"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports().loc[:, "Machinery Nec"].reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Machinery Nec"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[:, "Electrical and Optical Equipment"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Electrical and Optical Equipment"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports().loc[:, "Transport Equipment"].reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Transport Equipment"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[:, "Manufacturing Nec Recycling"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Manufacturing Nec Recycling"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[:, "Electricity Gas and Water Supply"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Electricity Gas and Water Supply"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports().loc[:, "Construction"].reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Construction"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[
            :,
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
        ]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[
            :,
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
        ]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[
            :,
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
        ]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[
            :,
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
        ]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[
            :,
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
        ]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[
            :,
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
        ]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[:, "Hotels and Restaurants"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Hotels and Restaurants"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports().loc[:, "Inland Transport"].reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Inland Transport"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports().loc[:, "Water Transport"].reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Water Transport"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports().loc[:, "Air Transport"].reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Air Transport"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[
            :,
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
        ]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[
            :,
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
        ]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[:, "Post and Telecommunications"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Post and Telecommunications"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[:, "Financial Intermedation"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Financial Intermedation"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[:, "Real Estate Activities"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Real Estate Activities"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[:, "Renting od MEq and Other Business Activities"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Renting od MEq and Other Business Activities"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[:, "Public Admin and Defence Compulsory Social Security"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Public Admin and Defence Compulsory Social Security"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports().loc[:, "Education"].reset_coords(drop=True)
        * real_total_output_by_sector_row().loc[:, "Education"].reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[:, "Health and Social Work"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Health and Social Work"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[:, "Other Community Social and Persona Services"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Other Community Social and Persona Services"]
        .reset_coords(drop=True)
        + ia_matrix_eu_exports()
        .loc[:, "Private Households with Employed Persons"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_row()
        .loc[:, "Private Households with Employed Persons"]
        .reset_coords(drop=True)
    ).transpose("scenarios", "sectors")


@component.add(
    name="IA Matrix EU Exports",
    subscripts=["sectors", "sectors1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 14,
        "ia_matrix_eu_exports_1995": 1,
        "ia_matrix_eu_exports_2003": 1,
        "ia_matrix_eu_exports_2001": 1,
        "ia_matrix_eu_exports_2009": 1,
        "ia_matrix_eu_exports_1996": 1,
        "ia_matrix_eu_exports_1998": 1,
        "ia_matrix_eu_exports_2004": 1,
        "ia_matrix_eu_exports_1997": 1,
        "ia_matrix_eu_exports_2000": 1,
        "ia_matrix_eu_exports_1999": 1,
        "ia_matrix_eu_exports_2006": 1,
        "ia_matrix_eu_exports_2008": 1,
        "ia_matrix_eu_exports_2002": 1,
        "ia_matrix_eu_exports_2007": 1,
        "ia_matrix_eu_exports_2005": 1,
    },
)
def ia_matrix_eu_exports():
    """
    (I-A) Matrix (submatrix upper-right quadrant).
    """
    return if_then_else(
        time() < 1996,
        lambda: ia_matrix_eu_exports_1995(),
        lambda: if_then_else(
            time() < 1997,
            lambda: ia_matrix_eu_exports_1996(),
            lambda: if_then_else(
                time() < 1998,
                lambda: ia_matrix_eu_exports_1997(),
                lambda: if_then_else(
                    time() < 1999,
                    lambda: ia_matrix_eu_exports_1998(),
                    lambda: if_then_else(
                        time() < 2000,
                        lambda: ia_matrix_eu_exports_1999(),
                        lambda: if_then_else(
                            time() < 2001,
                            lambda: ia_matrix_eu_exports_2000(),
                            lambda: if_then_else(
                                time() < 2002,
                                lambda: ia_matrix_eu_exports_2001(),
                                lambda: if_then_else(
                                    time() < 2003,
                                    lambda: ia_matrix_eu_exports_2002(),
                                    lambda: if_then_else(
                                        time() < 2004,
                                        lambda: ia_matrix_eu_exports_2003(),
                                        lambda: if_then_else(
                                            time() < 2005,
                                            lambda: ia_matrix_eu_exports_2004(),
                                            lambda: if_then_else(
                                                time() < 2006,
                                                lambda: ia_matrix_eu_exports_2005(),
                                                lambda: if_then_else(
                                                    time() < 2007,
                                                    lambda: ia_matrix_eu_exports_2006(),
                                                    lambda: if_then_else(
                                                        time() < 2008,
                                                        lambda: ia_matrix_eu_exports_2007(),
                                                        lambda: if_then_else(
                                                            time() < 2009,
                                                            lambda: ia_matrix_eu_exports_2008(),
                                                            lambda: ia_matrix_eu_exports_2009(),
                                                        ),
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="IA Matrix EU Exports 1995",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_eu_exports_1995"},
)
def ia_matrix_eu_exports_1995():
    return _ext_constant_ia_matrix_eu_exports_1995()


_ext_constant_ia_matrix_eu_exports_1995 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "A81",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_eu_exports_1995",
)


@component.add(
    name="Real demand",
    units="Mdollars",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_final_demand_by_sector_eu": 1},
)
def real_demand():
    """
    Total demand
    """
    return sum(
        real_final_demand_by_sector_eu().rename({"sectors": "sectors!"}),
        dim=["sectors!"],
    )


@component.add(
    name="IA Matrix EU Exports 1996",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_eu_exports_1996"},
)
def ia_matrix_eu_exports_1996():
    return _ext_constant_ia_matrix_eu_exports_1996()


_ext_constant_ia_matrix_eu_exports_1996 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "AJ81",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_eu_exports_1996",
)


@component.add(
    name="IA Matrix EU Exports 1997",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_eu_exports_1997"},
)
def ia_matrix_eu_exports_1997():
    return _ext_constant_ia_matrix_eu_exports_1997()


_ext_constant_ia_matrix_eu_exports_1997 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "BS81",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_eu_exports_1997",
)


@component.add(
    name="IA Matrix EU Exports 1998",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_eu_exports_1998"},
)
def ia_matrix_eu_exports_1998():
    return _ext_constant_ia_matrix_eu_exports_1998()


_ext_constant_ia_matrix_eu_exports_1998 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "DB81",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_eu_exports_1998",
)


@component.add(
    name="IA Matrix EU Exports 2004",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_eu_exports_2004"},
)
def ia_matrix_eu_exports_2004():
    return _ext_constant_ia_matrix_eu_exports_2004()


_ext_constant_ia_matrix_eu_exports_2004 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "LD81",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_eu_exports_2004",
)


@component.add(
    name="IA Matrix EU Exports 2003",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_eu_exports_2003"},
)
def ia_matrix_eu_exports_2003():
    return _ext_constant_ia_matrix_eu_exports_2003()


_ext_constant_ia_matrix_eu_exports_2003 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "JU81",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_eu_exports_2003",
)


@component.add(
    name="IA Matrix EU Exports 2002",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_eu_exports_2002"},
)
def ia_matrix_eu_exports_2002():
    return _ext_constant_ia_matrix_eu_exports_2002()


_ext_constant_ia_matrix_eu_exports_2002 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "IL81",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_eu_exports_2002",
)


@component.add(
    name="IA Matrix EU Exports 2001",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_eu_exports_2001"},
)
def ia_matrix_eu_exports_2001():
    return _ext_constant_ia_matrix_eu_exports_2001()


_ext_constant_ia_matrix_eu_exports_2001 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "HC81",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_eu_exports_2001",
)


@component.add(
    name="Total output required by sector",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_output_required_for_exports_by_sector": 1,
        "total_domestic_output_required_by_sector": 1,
    },
)
def total_output_required_by_sector():
    """
    Total output required to satisfy domestic and foreign final demand.
    """
    return (
        domestic_output_required_for_exports_by_sector()
        + total_domestic_output_required_by_sector()
    )


@component.add(
    name="Real total output by sector",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Data",
    comp_subtype="Normal",
    depends_on={"time": 1, "__data__": "_data_real_total_output_by_sector"},
)
def real_total_output_by_sector():
    """
    Real total output by sector. Source: global model.
    """
    return _data_real_total_output_by_sector(time())


_data_real_total_output_by_sector = TabData(
    "Real total output by sector",
    "real_total_output_by_sector",
    {"scenarios": _subscript_dict["scenarios"], "sectors": _subscript_dict["sectors"]},
    "interpolate",
)


@component.add(
    name="Real total output by sector World",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_total_output_by_sector": 1},
)
def real_total_output_by_sector_world():
    """
    Real total output by sector. Source: global model.
    """
    return real_total_output_by_sector()


@component.add(
    name="Real demand by sector RoW",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_demand_by_sector_world": 1,
        "real_demand_by_sector_delayed_eu": 1,
    },
)
def real_demand_by_sector_row():
    return real_demand_by_sector_world() - real_demand_by_sector_delayed_eu()


@component.add(
    name="Real demand by sector",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Data",
    comp_subtype="Normal",
    depends_on={"time": 1, "__data__": "_data_real_demand_by_sector"},
)
def real_demand_by_sector():
    """
    Real demand by sector. Source: global model.
    """
    return _data_real_demand_by_sector(time())


_data_real_demand_by_sector = TabData(
    "Real demand by sector",
    "real_demand_by_sector",
    {"scenarios": _subscript_dict["scenarios"], "sectors": _subscript_dict["sectors"]},
    "interpolate",
)


@component.add(
    name="Real demand by sector World",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_demand_by_sector": 1},
)
def real_demand_by_sector_world():
    """
    Real demand by sector. Source: global model.
    """
    return real_demand_by_sector()


@component.add(
    name="Demand by sector RoW",
    units="Tdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "historic_demand_by_sector_row": 1,
        "real_demand_by_sector_row": 1,
    },
)
def demand_by_sector_row():
    return if_then_else(
        time() < 2009,
        lambda: historic_demand_by_sector_row(time()).expand_dims(
            {"scenarios": _subscript_dict["scenarios"]}, 1
        ),
        lambda: real_demand_by_sector_row().transpose("sectors", "scenarios"),
    ).transpose("scenarios", "sectors")


@component.add(
    name='"extraction nat. gas EJ World"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_nat_gas": 1},
)
def extraction_nat_gas_ej_world():
    """
    Global primary energy supply of natural gas. Source: global model.
    """
    return pes_nat_gas()


@component.add(
    name="extraction coal EJ World",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"extraction_coal_ej": 1},
)
def extraction_coal_ej_world():
    """
    Global primary energy supply. Source: global model.
    """
    return extraction_coal_ej()


@component.add(
    name="extraction uranium RoW",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"extraction_uranium_ej_world": 2, "imports_eu_uranium_from_row_ej": 2},
)
def extraction_uranium_row():
    return if_then_else(
        extraction_uranium_ej_world() > imports_eu_uranium_from_row_ej(),
        lambda: imports_eu_uranium_from_row_ej(),
        lambda: extraction_uranium_ej_world(),
    )


@component.add(
    name="imports EU unconv gas from RoW EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "imports_eu_nat_gas_from_row_ej": 1,
        "share_conv_vs_total_gas_extraction_world": 1,
    },
)
def imports_eu_unconv_gas_from_row_ej():
    return imports_eu_nat_gas_from_row_ej() * (
        1 - share_conv_vs_total_gas_extraction_world()
    )


@component.add(
    name="extraction uranium EJ World",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"extraction_uranium_ej": 1},
)
def extraction_uranium_ej_world():
    """
    Global uranium extracted. Source: global model.
    """
    return extraction_uranium_ej()


@component.add(
    name="Extraction oil EJ World",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_oil_ej": 1},
)
def extraction_oil_ej_world():
    """
    Global primary energy supply of oil. Source: global model.
    """
    return pes_oil_ej()


@component.add(
    name="share conv vs total gas extraction World",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_conv_vs_total_gas_extraction": 1},
)
def share_conv_vs_total_gas_extraction_world():
    """
    Share of global conventional vs global total (unconventional + conventional) gas extraction. Source: global model.
    """
    return share_conv_vs_total_gas_extraction()


@component.add(
    name="imports EU conv gas from RoW EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "imports_eu_nat_gas_from_row_ej": 1,
        "share_conv_vs_total_gas_extraction_world": 1,
    },
)
def imports_eu_conv_gas_from_row_ej():
    return imports_eu_nat_gas_from_row_ej() * share_conv_vs_total_gas_extraction_world()


@component.add(
    name="share conv vs total oil extraction World",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_conv_vs_total_oil_extraction": 1},
)
def share_conv_vs_total_oil_extraction_world():
    """
    Share of global conventional vs global total (unconventional + conventional) oil extraction. Source: global model.
    """
    return share_conv_vs_total_oil_extraction()


@component.add(
    name='"FED Heat-nc EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "required_fed_by_fuel": 1,
        "required_fed_by_fuel_before_heat_correction": 1,
    },
)
def fed_heatnc_ej():
    """
    Final energy (non-commercial) heat demand.
    """
    return required_fed_by_fuel().loc[:, "heat"].reset_coords(
        drop=True
    ) - required_fed_by_fuel_before_heat_correction().loc[:, "heat"].reset_coords(
        drop=True
    )


@component.add(
    name="share conv vs total oil extraction",
    subscripts=["scenarios"],
    comp_type="Data",
    comp_subtype="Normal",
    depends_on={"time": 1, "__data__": "_data_share_conv_vs_total_oil_extraction"},
)
def share_conv_vs_total_oil_extraction():
    """
    Share of global conventional vs global total (unconventional + conventional) oil extraction. Source: global model.
    """
    return _data_share_conv_vs_total_oil_extraction(time())


_data_share_conv_vs_total_oil_extraction = TabData(
    "share conv vs total oil extraction",
    "share_conv_vs_total_oil_extraction",
    {"scenarios": _subscript_dict["scenarios"]},
    "interpolate",
)


@component.add(
    name="Leontief Matrix EU Exports 1995",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_exports_1995"},
)
def leontief_matrix_eu_exports_1995():
    return _ext_constant_leontief_matrix_eu_exports_1995()


_ext_constant_leontief_matrix_eu_exports_1995 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "A42",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_exports_1995",
)


@component.add(
    name="Leontief Matrix EU Exports 1996",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_exports_1996"},
)
def leontief_matrix_eu_exports_1996():
    return _ext_constant_leontief_matrix_eu_exports_1996()


_ext_constant_leontief_matrix_eu_exports_1996 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "AJ42",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_exports_1996",
)


@component.add(
    name="Leontief Matrix EU Exports 1997",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_exports_1997"},
)
def leontief_matrix_eu_exports_1997():
    return _ext_constant_leontief_matrix_eu_exports_1997()


_ext_constant_leontief_matrix_eu_exports_1997 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "BS42",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_exports_1997",
)


@component.add(
    name="Leontief Matrix EU Exports 1998",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_exports_1998"},
)
def leontief_matrix_eu_exports_1998():
    return _ext_constant_leontief_matrix_eu_exports_1998()


_ext_constant_leontief_matrix_eu_exports_1998 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "DB42",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_exports_1998",
)


@component.add(
    name="Leontief Matrix EU Exports 1999",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_exports_1999"},
)
def leontief_matrix_eu_exports_1999():
    return _ext_constant_leontief_matrix_eu_exports_1999()


_ext_constant_leontief_matrix_eu_exports_1999 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "EK42",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_exports_1999",
)


@component.add(
    name="Leontief Matrix EU Exports 2000",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_exports_2000"},
)
def leontief_matrix_eu_exports_2000():
    return _ext_constant_leontief_matrix_eu_exports_2000()


_ext_constant_leontief_matrix_eu_exports_2000 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "FT42",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_exports_2000",
)


@component.add(
    name="Leontief Matrix EU Exports 2002",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_exports_2002"},
)
def leontief_matrix_eu_exports_2002():
    return _ext_constant_leontief_matrix_eu_exports_2002()


_ext_constant_leontief_matrix_eu_exports_2002 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "IL42",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_exports_2002",
)


@component.add(
    name="Domestic output required for exports by sector",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"leontief_matrix_eu_exports": 35, "demand_by_sector_row": 35},
)
def domestic_output_required_for_exports_by_sector():
    """
    Value of output (production) required to satisfy Rest of the World demand of EU28 producs (exports) by sector.
    """
    return (
        leontief_matrix_eu_exports()
        .loc[:, "Agriculture Hunting Forestry and Fishing"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Agriculture Hunting Forestry and Fishing"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Mining and Quarrying"]
        .reset_coords(drop=True)
        * demand_by_sector_row().loc[:, "Mining and Quarrying"].reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Food Beverages and Tobacco"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Food Beverages and Tobacco"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Textiles and Textile Products"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Textiles and Textile Products"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Leather Leather and Footwear"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Leather Leather and Footwear"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Wood and Products of Woood and Cork"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Wood and Products of Woood and Cork"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Pulp Paper Printing and Publishing"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Pulp Paper Printing and Publishing"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Coke Refined Petroleum and Nuclear Fuel"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Coke Refined Petroleum and Nuclear Fuel"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Chemicals and Chemical products"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Chemicals and Chemical products"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Rubber and Plastics"]
        .reset_coords(drop=True)
        * demand_by_sector_row().loc[:, "Rubber and Plastics"].reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Other Non Metalic Mineral"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Other Non Metalic Mineral"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Basic Metals and Fabricated Metal"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Basic Metals and Fabricated Metal"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports().loc[:, "Machinery Nec"].reset_coords(drop=True)
        * demand_by_sector_row().loc[:, "Machinery Nec"].reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Electrical and Optical Equipment"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Electrical and Optical Equipment"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Transport Equipment"]
        .reset_coords(drop=True)
        * demand_by_sector_row().loc[:, "Transport Equipment"].reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Manufacturing Nec Recycling"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Manufacturing Nec Recycling"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Electricity Gas and Water Supply"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Electricity Gas and Water Supply"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports().loc[:, "Construction"].reset_coords(drop=True)
        * demand_by_sector_row().loc[:, "Construction"].reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[
            :,
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
        ]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[
            :,
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
        ]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[
            :,
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
        ]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[
            :,
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
        ]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[
            :,
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
        ]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[
            :,
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
        ]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Hotels and Restaurants"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Hotels and Restaurants"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Inland Transport"]
        .reset_coords(drop=True)
        * demand_by_sector_row().loc[:, "Inland Transport"].reset_coords(drop=True)
        + leontief_matrix_eu_exports().loc[:, "Water Transport"].reset_coords(drop=True)
        * demand_by_sector_row().loc[:, "Water Transport"].reset_coords(drop=True)
        + leontief_matrix_eu_exports().loc[:, "Air Transport"].reset_coords(drop=True)
        * demand_by_sector_row().loc[:, "Air Transport"].reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[
            :,
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
        ]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[
            :,
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
        ]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Post and Telecommunications"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Post and Telecommunications"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Financial Intermedation"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Financial Intermedation"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Real Estate Activities"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Real Estate Activities"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Renting od MEq and Other Business Activities"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Renting od MEq and Other Business Activities"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Public Admin and Defence Compulsory Social Security"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Public Admin and Defence Compulsory Social Security"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports().loc[:, "Education"].reset_coords(drop=True)
        * demand_by_sector_row().loc[:, "Education"].reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Health and Social Work"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Health and Social Work"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Other Community Social and Persona Services"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Other Community Social and Persona Services"]
        .reset_coords(drop=True)
        + leontief_matrix_eu_exports()
        .loc[:, "Private Households with Employed Persons"]
        .reset_coords(drop=True)
        * demand_by_sector_row()
        .loc[:, "Private Households with Employed Persons"]
        .reset_coords(drop=True)
    ).transpose("scenarios", "sectors")


@component.add(
    name="Required total output",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_output_required_for_exports_by_sector": 1,
        "total_domestic_output_required_by_sector": 1,
    },
)
def required_total_output():
    """
    Required total output (domestic+foreign)
    """
    return (
        domestic_output_required_for_exports_by_sector()
        + total_domestic_output_required_by_sector()
    )


@component.add(
    name="Leontief Matrix EU Exports 2005",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_exports_2005"},
)
def leontief_matrix_eu_exports_2005():
    return _ext_constant_leontief_matrix_eu_exports_2005()


_ext_constant_leontief_matrix_eu_exports_2005 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "MM42",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_exports_2005",
)


@component.add(
    name="Leontief Matrix EU Exports 2006",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_exports_2006"},
)
def leontief_matrix_eu_exports_2006():
    return _ext_constant_leontief_matrix_eu_exports_2006()


_ext_constant_leontief_matrix_eu_exports_2006 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "NV42",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_exports_2006",
)


@component.add(
    name="Leontief Matrix EU Exports 2007",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_exports_2007"},
)
def leontief_matrix_eu_exports_2007():
    return _ext_constant_leontief_matrix_eu_exports_2007()


_ext_constant_leontief_matrix_eu_exports_2007 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "PE42",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_exports_2007",
)


@component.add(
    name="Leontief Matrix EU Exports 2008",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_exports_2008"},
)
def leontief_matrix_eu_exports_2008():
    return _ext_constant_leontief_matrix_eu_exports_2008()


_ext_constant_leontief_matrix_eu_exports_2008 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "QN42",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_exports_2008",
)


@component.add(
    name="Leontief Matrix EU Exports 2009",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_exports_2009"},
)
def leontief_matrix_eu_exports_2009():
    return _ext_constant_leontief_matrix_eu_exports_2009()


_ext_constant_leontief_matrix_eu_exports_2009 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "RW42",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_exports_2009",
)


@component.add(
    name="Leontief Matrix EU Exports 2004",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_exports_2004"},
)
def leontief_matrix_eu_exports_2004():
    return _ext_constant_leontief_matrix_eu_exports_2004()


_ext_constant_leontief_matrix_eu_exports_2004 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "LD42",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_exports_2004",
)


@component.add(
    name="Leontief Matrix EU Exports 2001",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_exports_2001"},
)
def leontief_matrix_eu_exports_2001():
    return _ext_constant_leontief_matrix_eu_exports_2001()


_ext_constant_leontief_matrix_eu_exports_2001 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "HC42",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_exports_2001",
)


@component.add(
    name="Leontief Matrix EU Exports 2003",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_eu_exports_2003"},
)
def leontief_matrix_eu_exports_2003():
    return _ext_constant_leontief_matrix_eu_exports_2003()


_ext_constant_leontief_matrix_eu_exports_2003 = ExtConstant(
    "inputs_EU.xlsx",
    "RoW",
    "JU42",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_eu_exports_2003",
)


@component.add(
    name="Leontief matrix EU Exports",
    subscripts=["sectors", "sectors1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 14,
        "leontief_matrix_eu_exports_1995": 1,
        "leontief_matrix_eu_exports_1996": 1,
        "leontief_matrix_eu_exports_2008": 1,
        "leontief_matrix_eu_exports_2003": 1,
        "leontief_matrix_eu_exports_2005": 1,
        "leontief_matrix_eu_exports_1997": 1,
        "leontief_matrix_eu_exports_2007": 1,
        "leontief_matrix_eu_exports_2006": 1,
        "leontief_matrix_eu_exports_1999": 1,
        "leontief_matrix_eu_exports_2002": 1,
        "leontief_matrix_eu_exports_2000": 1,
        "leontief_matrix_eu_exports_1998": 1,
        "leontief_matrix_eu_exports_2004": 1,
        "leontief_matrix_eu_exports_2009": 1,
        "leontief_matrix_eu_exports_2001": 1,
    },
)
def leontief_matrix_eu_exports():
    """
    Leontieff matrix in interregional Input-Output Analysis can be divided in submatrixes. Exports submatrix (upper-right quadrant) gives the sensitiveness of domestic production to foreign final demand (exports) of EU28 products.
    """
    return if_then_else(
        time() < 1996,
        lambda: leontief_matrix_eu_exports_1995(),
        lambda: if_then_else(
            time() < 1997,
            lambda: leontief_matrix_eu_exports_1996(),
            lambda: if_then_else(
                time() < 1998,
                lambda: leontief_matrix_eu_exports_1997(),
                lambda: if_then_else(
                    time() < 1999,
                    lambda: leontief_matrix_eu_exports_1998(),
                    lambda: if_then_else(
                        time() < 2000,
                        lambda: leontief_matrix_eu_exports_1999(),
                        lambda: if_then_else(
                            time() < 2001,
                            lambda: leontief_matrix_eu_exports_2000(),
                            lambda: if_then_else(
                                time() < 2002,
                                lambda: leontief_matrix_eu_exports_2001(),
                                lambda: if_then_else(
                                    time() < 2003,
                                    lambda: leontief_matrix_eu_exports_2002(),
                                    lambda: if_then_else(
                                        time() < 2004,
                                        lambda: leontief_matrix_eu_exports_2003(),
                                        lambda: if_then_else(
                                            time() < 2005,
                                            lambda: leontief_matrix_eu_exports_2004(),
                                            lambda: if_then_else(
                                                time() < 2006,
                                                lambda: leontief_matrix_eu_exports_2005(),
                                                lambda: if_then_else(
                                                    time() < 2007,
                                                    lambda: leontief_matrix_eu_exports_2006(),
                                                    lambda: if_then_else(
                                                        time() < 2008,
                                                        lambda: leontief_matrix_eu_exports_2007(),
                                                        lambda: if_then_else(
                                                            time() < 2009,
                                                            lambda: leontief_matrix_eu_exports_2008(),
                                                            lambda: leontief_matrix_eu_exports_2009(),
                                                        ),
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="Historic demand by sector RoW",
    subscripts=["sectors"],
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_demand_by_sector_row",
        "__lookup__": "_ext_lookup_historic_demand_by_sector_row",
    },
)
def historic_demand_by_sector_row(x, final_subs=None):
    """
    Sectoral final demand by sector (Rest of the World).
    """
    return _ext_lookup_historic_demand_by_sector_row(x, final_subs)


_ext_lookup_historic_demand_by_sector_row = ExtLookup(
    "inputs_EU.xlsx",
    "RoW",
    "2",
    "B3",
    {"sectors": _subscript_dict["sectors"]},
    _root,
    {"sectors": _subscript_dict["sectors"]},
    "_ext_lookup_historic_demand_by_sector_row",
)


@component.add(
    name="Land saved by urban PV",
    units="MHa*Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_generation_res_elec_twh": 1,
        "real_share_pv_urban_vs_total_pv": 1,
        "power_density_res_elec_twemha": 1,
        "twe_per_twh": 1,
    },
)
def land_saved_by_urban_pv():
    """
    Land saved by urban PV.
    """
    return zidz(
        potential_generation_res_elec_twh().loc["solar PV", :].reset_coords(drop=True)
        * real_share_pv_urban_vs_total_pv(),
        power_density_res_elec_twemha().loc["solar PV", :].reset_coords(drop=True)
        / twe_per_twh(),
    )


@component.add(
    name="remaining potential solar PV urban",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_solar_pv_urban": 2,
        "twe_per_twh": 2,
        "potential_generation_res_elec_twh": 1,
        "desired_share_installed_pv_urban_vs_tot_pv": 1,
    },
)
def remaining_potential_solar_pv_urban():
    """
    Remaining potential of solar PV in urban areas.
    """
    return np.maximum(
        0,
        zidz(
            max_solar_pv_urban() / twe_per_twh()
            - desired_share_installed_pv_urban_vs_tot_pv()
            * potential_generation_res_elec_twh()
            .loc["solar PV", :]
            .reset_coords(drop=True),
            max_solar_pv_urban() / twe_per_twh(),
        ),
    )


@component.add(
    name="surface RES elec",
    units="MHa",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_generation_res_elec_twh": 8,
        "power_density_res_elec_twemha": 8,
        "twe_per_twh": 8,
        "real_share_pv_urban_vs_total_pv": 1,
    },
)
def surface_res_elec():
    """
    Land requirements by renewable technologies for electricity generation.
    """
    value = xr.DataArray(
        np.nan,
        {
            "RES elec": _subscript_dict["RES elec"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES elec", "scenarios"],
    )
    value.loc[["hydro"], :] = (
        zidz(
            potential_generation_res_elec_twh().loc["hydro", :].reset_coords(drop=True),
            power_density_res_elec_twemha().loc["hydro", :].reset_coords(drop=True)
            / twe_per_twh(),
        )
        .expand_dims({"RES elec": ["hydro"]}, 0)
        .values
    )
    value.loc[['"geot-elec"'], :] = (
        zidz(
            potential_generation_res_elec_twh()
            .loc['"geot-elec"', :]
            .reset_coords(drop=True),
            power_density_res_elec_twemha()
            .loc['"geot-elec"', :]
            .reset_coords(drop=True)
            / twe_per_twh(),
        )
        .expand_dims({"RES elec": ['"geot-elec"']}, 0)
        .values
    )
    value.loc[['"solid bioE-elec"'], :] = (
        zidz(
            potential_generation_res_elec_twh()
            .loc['"solid bioE-elec"', :]
            .reset_coords(drop=True),
            power_density_res_elec_twemha()
            .loc['"solid bioE-elec"', :]
            .reset_coords(drop=True)
            / twe_per_twh(),
        )
        .expand_dims({"RES elec": ['"solid bioE-elec"']}, 0)
        .values
    )
    value.loc[["oceanic"], :] = (
        zidz(
            potential_generation_res_elec_twh()
            .loc["oceanic", :]
            .reset_coords(drop=True),
            power_density_res_elec_twemha().loc["oceanic", :].reset_coords(drop=True)
            / twe_per_twh(),
        )
        .expand_dims({"RES elec": ["oceanic"]}, 0)
        .values
    )
    value.loc[["wind onshore"], :] = (
        zidz(
            potential_generation_res_elec_twh()
            .loc["wind onshore", :]
            .reset_coords(drop=True),
            power_density_res_elec_twemha()
            .loc["wind onshore", :]
            .reset_coords(drop=True)
            / twe_per_twh(),
        )
        .expand_dims({"RES elec": ["wind onshore"]}, 0)
        .values
    )
    value.loc[["wind offshore"], :] = (
        zidz(
            potential_generation_res_elec_twh()
            .loc["wind offshore", :]
            .reset_coords(drop=True),
            power_density_res_elec_twemha()
            .loc["wind offshore", :]
            .reset_coords(drop=True)
            / twe_per_twh(),
        )
        .expand_dims({"RES elec": ["wind offshore"]}, 0)
        .values
    )
    value.loc[["solar PV"], :] = (
        zidz(
            potential_generation_res_elec_twh()
            .loc["solar PV", :]
            .reset_coords(drop=True)
            * (1 - real_share_pv_urban_vs_total_pv()),
            power_density_res_elec_twemha().loc["solar PV", :].reset_coords(drop=True)
            / twe_per_twh(),
        )
        .expand_dims({"RES elec": ["solar PV"]}, 0)
        .values
    )
    value.loc[["CSP"], :] = (
        zidz(
            potential_generation_res_elec_twh().loc["CSP", :].reset_coords(drop=True),
            power_density_res_elec_twemha().loc["CSP", :].reset_coords(drop=True)
            / twe_per_twh(),
        )
        .expand_dims({"RES elec": ["CSP"]}, 0)
        .values
    )
    return value


@component.add(
    name="share land RES land compet vs arable",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "land_compet_required_dedicated_crops_for_biofuels": 1,
        "surface_solar_pv_on_land_mha": 1,
        "surface_csp_mha": 1,
        "surface_hydro_mha": 1,
        "agricultural_land_2015": 1,
    },
)
def share_land_res_land_compet_vs_arable():
    """
    Land requirements for RES that compete with other land-uses (solar on land and biofuels on land competition) as a share of the global arable land.
    """
    return (
        land_compet_required_dedicated_crops_for_biofuels()
        + surface_solar_pv_on_land_mha()
        + surface_csp_mha()
        + surface_hydro_mha()
    ) / agricultural_land_2015()


@component.add(
    name="surface hydro Mha",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"surface_res_elec": 1},
)
def surface_hydro_mha():
    """
    Surface required by hydropower plants.
    """
    return surface_res_elec().loc["hydro", :].reset_coords(drop=True)


@component.add(
    name="surface onshore wind Mha",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"surface_res_elec": 1},
)
def surface_onshore_wind_mha():
    """
    Surface required to produce "onshore wind TWe".
    """
    return surface_res_elec().loc["wind onshore", :].reset_coords(drop=True)


@component.add(
    name="surface solar PV on land Mha",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"surface_res_elec": 1},
)
def surface_solar_pv_on_land_mha():
    """
    Area required for solar PV plants on land.
    """
    return surface_res_elec().loc["solar PV", :].reset_coords(drop=True)


@component.add(
    name="surface CSP Mha",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"surface_res_elec": 1},
)
def surface_csp_mha():
    """
    Area required for CSP.
    """
    return surface_res_elec().loc["CSP", :].reset_coords(drop=True)


@component.add(
    name="Land compet biofuels 3gen abandonned",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"land_compet_biofuels_3gen_mha": 1, "share_biofuels_overcapacity": 1},
)
def land_compet_biofuels_3gen_abandonned():
    """
    Land previously dedicated to produce biofuels 3rd generation and abandoned due to reduced liquids demand.
    """
    return land_compet_biofuels_3gen_mha() * share_biofuels_overcapacity()


@component.add(
    name="Land compet biofuels 3gen Mha",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_land_compet_biofuels_3gen_mha": 1},
    other_deps={
        "_integ_land_compet_biofuels_3gen_mha": {
            "initial": {},
            "step": {
                "land_shifted_to_biofuels_3gen": 1,
                "land_compet_biofuels_3gen_abandonned": 1,
            },
        }
    },
)
def land_compet_biofuels_3gen_mha():
    """
    Land subject to competition dedicated to biofuels 3rd generation as a shift of surface previously dedicated to biofuels from the 2nd generation.
    """
    return _integ_land_compet_biofuels_3gen_mha()


_integ_land_compet_biofuels_3gen_mha = Integ(
    lambda: land_shifted_to_biofuels_3gen() - land_compet_biofuels_3gen_abandonned(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    "_integ_land_compet_biofuels_3gen_mha",
)


@component.add(
    name="Potential PEavail biofuels land marg abandonned",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_peavail_biofuels_land_marg_ej": 1,
        "share_biofuels_overcapacity": 1,
    },
)
def potential_peavail_biofuels_land_marg_abandonned():
    return potential_peavail_biofuels_land_marg_ej() * share_biofuels_overcapacity()


@component.add(
    name="Potential PE cellulosic biofuel abanndoned",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_pe_cellulosic_biofuel_ej": 1,
        "share_biofuels_overcapacity": 1,
    },
)
def potential_pe_cellulosic_biofuel_abanndoned():
    return potential_pe_cellulosic_biofuel_ej() * share_biofuels_overcapacity()


@component.add(
    name="Potential PE cellulosic biofuel EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_potential_pe_cellulosic_biofuel_ej": 1},
    other_deps={
        "_integ_potential_pe_cellulosic_biofuel_ej": {
            "initial": {},
            "step": {
                "new_cellulosic_biofuels": 1,
                "potential_pe_cellulosic_biofuel_abanndoned": 1,
            },
        }
    },
)
def potential_pe_cellulosic_biofuel_ej():
    """
    Potential annual primary energy biomass used for cellulosic biofuels.
    """
    return _integ_potential_pe_cellulosic_biofuel_ej()


_integ_potential_pe_cellulosic_biofuel_ej = Integ(
    lambda: new_cellulosic_biofuels() - potential_pe_cellulosic_biofuel_abanndoned(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    "_integ_potential_pe_cellulosic_biofuel_ej",
)


@component.add(
    name="Land compet biofuels 2gen abandonned",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"land_compet_biofuels_2gen_mha": 1, "share_biofuels_overcapacity": 1},
)
def land_compet_biofuels_2gen_abandonned():
    """
    Land previously dedicated to produce biofuels 2nd generation and abandoned due to reduced liquids demand.
    """
    return land_compet_biofuels_2gen_mha() * share_biofuels_overcapacity()


@component.add(
    name="Land compet biofuels 2gen Mha",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_land_compet_biofuels_2gen_mha": 1},
    other_deps={
        "_integ_land_compet_biofuels_2gen_mha": {
            "initial": {
                "initial_value_land_compet_biofuels_2gen_mha": 1,
                "land_productivity_biofuels_2gen_ej_mha": 1,
            },
            "step": {
                "new_biofuels_2gen_land_compet": 1,
                "land_compet_biofuels_2gen_abandonned": 1,
                "land_shifted_to_biofuels_3gen": 1,
            },
        }
    },
)
def land_compet_biofuels_2gen_mha():
    """
    Total annual land dedicated to biofuel production in land competing with other uses.
    """
    return _integ_land_compet_biofuels_2gen_mha()


_integ_land_compet_biofuels_2gen_mha = Integ(
    lambda: new_biofuels_2gen_land_compet()
    - land_compet_biofuels_2gen_abandonned()
    - land_shifted_to_biofuels_3gen(),
    lambda: xr.DataArray(
        initial_value_land_compet_biofuels_2gen_mha()
        * land_productivity_biofuels_2gen_ej_mha(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_land_compet_biofuels_2gen_mha",
)


@component.add(
    name="Potential PEavail biofuels land marg EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_potential_peavail_biofuels_land_marg_ej": 1},
    other_deps={
        "_integ_potential_peavail_biofuels_land_marg_ej": {
            "initial": {},
            "step": {
                "new_biofuels_land_marg": 1,
                "potential_peavail_biofuels_land_marg_abandonned": 1,
            },
        }
    },
)
def potential_peavail_biofuels_land_marg_ej():
    """
    Potential total annual biofuel production in marginal lands.
    """
    return _integ_potential_peavail_biofuels_land_marg_ej()


_integ_potential_peavail_biofuels_land_marg_ej = Integ(
    lambda: new_biofuels_land_marg()
    - potential_peavail_biofuels_land_marg_abandonned(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    "_integ_potential_peavail_biofuels_land_marg_ej",
)


@component.add(
    name="PES RES for heat by techn",
    units="EJ",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_dem_res_for_heatcom_by_techn": 1,
        "pes_dem_res_for_heatnc_by_techn": 1,
    },
)
def pes_res_for_heat_by_techn():
    """
    Primary energy supply of heat from renewable energy sources.
    """
    return pes_dem_res_for_heatcom_by_techn() + pes_dem_res_for_heatnc_by_techn()


@component.add(
    name='"PES DEM RES for heat-nc by techn"',
    units="EJ",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_real_generation_res_heatnc_ej": 3, "efficiency_res_heat": 1},
)
def pes_dem_res_for_heatnc_by_techn():
    """
    Primary energy supply of RES technologies for non-commercial heat (Direct Energy Method convention of accounting for primary energy).
    """
    value = xr.DataArray(
        np.nan,
        {
            "RES heat": _subscript_dict["RES heat"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES heat", "scenarios"],
    )
    value.loc[['"geot-heat"'], :] = (
        fe_real_generation_res_heatnc_ej()
        .loc['"geot-heat"', :]
        .reset_coords(drop=True)
        .expand_dims({"RES heat": ['"geot-heat"']}, 0)
        .values
    )
    value.loc[['"solar-heat"'], :] = (
        fe_real_generation_res_heatnc_ej()
        .loc['"solar-heat"', :]
        .reset_coords(drop=True)
        .expand_dims({"RES heat": ['"solar-heat"']}, 0)
        .values
    )
    value.loc[['"solid bioE-heat"'], :] = (
        (
            fe_real_generation_res_heatnc_ej()
            .loc['"solid bioE-heat"', :]
            .reset_coords(drop=True)
            / float(efficiency_res_heat().loc['"solid bioE-heat"'])
        )
        .expand_dims({"RES heat": ['"solid bioE-heat"']}, 0)
        .values
    )
    return value


@component.add(
    name='"PES DEM RES for heat-com by techn"',
    units="EJ",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_real_generation_res_heatcom_ej": 3, "efficiency_res_heat": 1},
)
def pes_dem_res_for_heatcom_by_techn():
    """
    Primary energy supply of RES technologies for commercial heat (Direct Energy Method convention of accounting for primary energy).
    """
    value = xr.DataArray(
        np.nan,
        {
            "RES heat": _subscript_dict["RES heat"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES heat", "scenarios"],
    )
    value.loc[['"geot-heat"'], :] = (
        fe_real_generation_res_heatcom_ej()
        .loc['"geot-heat"', :]
        .reset_coords(drop=True)
        .expand_dims({"RES heat": ['"geot-heat"']}, 0)
        .values
    )
    value.loc[['"solar-heat"'], :] = (
        fe_real_generation_res_heatcom_ej()
        .loc['"solar-heat"', :]
        .reset_coords(drop=True)
        .expand_dims({"RES heat": ['"solar-heat"']}, 0)
        .values
    )
    value.loc[['"solid bioE-heat"'], :] = (
        (
            fe_real_generation_res_heatcom_ej()
            .loc['"solid bioE-heat"', :]
            .reset_coords(drop=True)
            / float(efficiency_res_heat().loc['"solid bioE-heat"'])
        )
        .expand_dims({"RES heat": ['"solid bioE-heat"']}, 0)
        .values
    )
    return value


@component.add(
    name="P share installed PV urban vs tot PV",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_share_installed_pv_urban_vs_tot_pv"},
)
def p_share_installed_pv_urban_vs_tot_pv():
    """
    User defined share of installed PV in urban areas vs total PV.
    """
    return _ext_constant_p_share_installed_pv_urban_vs_tot_pv()


_ext_constant_p_share_installed_pv_urban_vs_tot_pv = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F35",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_share_installed_pv_urban_vs_tot_pv",
)

_ext_constant_p_share_installed_pv_urban_vs_tot_pv.add(
    "inputs_EU.xlsx", "SCEN1", "F35", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_share_installed_pv_urban_vs_tot_pv.add(
    "inputs_EU.xlsx", "SCEN2", "F35", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_share_installed_pv_urban_vs_tot_pv.add(
    "inputs_EU.xlsx", "SCEN3", "F35", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_share_installed_pv_urban_vs_tot_pv.add(
    "inputs_EU.xlsx", "SCEN4", "F35", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_share_installed_pv_urban_vs_tot_pv.add(
    "inputs_EU.xlsx", "User defined", "F35", {"scenarios": ["User defined"]}
)


@component.add(
    name="Potential elec gen from solar PV on land TWh",
    units="TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_generation_res_elec_twh": 1,
        "potential_elec_gen_from_solar_pv_urban_twh": 1,
    },
)
def potential_elec_gen_from_solar_pv_on_land_twh():
    """
    Potential electricity generation from solar PV on land.
    """
    return (
        potential_generation_res_elec_twh().loc["solar PV", :].reset_coords(drop=True)
        - potential_elec_gen_from_solar_pv_urban_twh()
    )


@component.add(
    name="Potential elec gen from solar PV urban TWh",
    units="TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "remaining_potential_solar_pv_urban": 1,
        "potential_elec_gen_from_solar_pv_urban_unconstrained_twh": 1,
        "aux1_0": 1,
    },
)
def potential_elec_gen_from_solar_pv_urban_twh():
    """
    Potential electricity generation from solar PV in urban areas.
    """
    return if_then_else(
        remaining_potential_solar_pv_urban() > 0,
        lambda: potential_elec_gen_from_solar_pv_urban_unconstrained_twh(),
        lambda: aux1_0(),
    )


@component.add(
    name="Potential elec gen from solar PV urban unconstrained TWh",
    units="TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_generation_res_elec_twh": 1,
        "desired_share_installed_pv_urban_vs_tot_pv": 1,
    },
)
def potential_elec_gen_from_solar_pv_urban_unconstrained_twh():
    """
    Unconstrained potential electricity generation from solar PV in urban areas.
    """
    return (
        potential_generation_res_elec_twh().loc["solar PV", :].reset_coords(drop=True)
        * desired_share_installed_pv_urban_vs_tot_pv()
    )


@component.add(
    name="share solar PV vs tot solar gen",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_elec_gen_from_solar_pv_on_land_twh": 2,
        "fe_elec_generation_from_csp_twh": 1,
    },
)
def share_solar_pv_vs_tot_solar_gen():
    """
    Share of solar PV vs CSP generation.
    """
    return zidz(
        fe_elec_gen_from_solar_pv_on_land_twh(),
        fe_elec_generation_from_csp_twh() + fe_elec_gen_from_solar_pv_on_land_twh(),
    )


@component.add(
    name="real share PV urban vs total PV",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_elec_gen_from_solar_pv_urban_twh": 1,
        "fe_elec_generation_from_solar_pv_twh": 1,
    },
)
def real_share_pv_urban_vs_total_pv():
    """
    Share of PV in urban areas vs total (urban + on land power plants).
    """
    return np.minimum(
        1,
        zidz(
            potential_elec_gen_from_solar_pv_urban_twh(),
            fe_elec_generation_from_solar_pv_twh(),
        ),
    )


@component.add(
    name="FE Elec gen from solar PV on land TWh",
    units="TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_elec_generation_from_solar_pv_twh": 1,
        "real_share_pv_urban_vs_total_pv": 1,
    },
)
def fe_elec_gen_from_solar_pv_on_land_twh():
    """
    Electricity generation from solar PV on land.
    """
    return fe_elec_generation_from_solar_pv_twh() * (
        1 - real_share_pv_urban_vs_total_pv()
    )


@component.add(
    name="historic share installed PV urban vs tot PV",
    units="Dmnl",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_historic_share_installed_pv_urban_vs_tot_pv",
        "__data__": "_ext_data_historic_share_installed_pv_urban_vs_tot_pv",
        "time": 1,
    },
)
def historic_share_installed_pv_urban_vs_tot_pv():
    """
    GET XLS CONSTANTS('inputs_EU.xlsx', 'Parameters', 'K40') Historic share of installed PV in urban areas (mainly rooftop) vs total PV.
    """
    return _ext_data_historic_share_installed_pv_urban_vs_tot_pv(time())


_ext_data_historic_share_installed_pv_urban_vs_tot_pv = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "25",
    "H77",
    None,
    {},
    _root,
    {},
    "_ext_data_historic_share_installed_pv_urban_vs_tot_pv",
)


@component.add(
    name="desired share installed PV urban vs tot PV",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 4,
        "historic_share_installed_pv_urban_vs_tot_pv": 4,
        "time_dmnl": 1,
        "p_share_installed_pv_urban_vs_tot_pv": 2,
        "target_year_p_growth_res_elec": 2,
        "start_year_p_growth_res_elec": 3,
    },
)
def desired_share_installed_pv_urban_vs_tot_pv():
    """
    Desired share of installed PV in urban areas vs total PV installed.
    """
    return if_then_else(
        time() < 2015,
        lambda: xr.DataArray(
            historic_share_installed_pv_urban_vs_tot_pv(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            time() < start_year_p_growth_res_elec(),
            lambda: xr.DataArray(
                historic_share_installed_pv_urban_vs_tot_pv(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                time() < target_year_p_growth_res_elec(),
                lambda: historic_share_installed_pv_urban_vs_tot_pv()
                + (
                    p_share_installed_pv_urban_vs_tot_pv()
                    - historic_share_installed_pv_urban_vs_tot_pv()
                )
                * (time_dmnl(time()) - start_year_p_growth_res_elec())
                / (target_year_p_growth_res_elec() - start_year_p_growth_res_elec()),
                lambda: p_share_installed_pv_urban_vs_tot_pv(),
            ),
        ),
    )


@component.add(
    name="aux1 0",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux1_0": 1},
    other_deps={
        "_delayfixed_aux1_0": {
            "initial": {"time_step": 1},
            "step": {"potential_elec_gen_from_solar_pv_urban_twh": 1},
        }
    },
)
def aux1_0():
    """
    Auxiliary variable to estimate the energy losses due to climate change impacts in the year 2015.
    """
    return _delayfixed_aux1_0()


_delayfixed_aux1_0 = DelayFixed(
    lambda: potential_elec_gen_from_solar_pv_urban_twh(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux1_0",
)


@component.add(
    name="max RES elec TWe",
    units="TWe",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_hydro_twe": 1,
        "max_geotelec_twe": 1,
        "max_bioe_twe": 1,
        "max_oceanic_twe": 1,
        "max_onshore_wind_twe": 1,
        "max_offshore_wind_twe": 1,
        "max_tot_solar_pv_twe": 1,
        "max_csp_twe": 1,
    },
)
def max_res_elec_twe():
    """
    Maximum level of RES for electricity per technology considering an optimal Cp. For most technologies this variable corresponds with the maximum potential, excepting for solids bioenergy and solar, where given to the competing uses (solids bioenergy for heat and electricity) and competing technologies (solar PV and CSP) this variable corresponds to the maximum level from each use and technology.
    """
    value = xr.DataArray(
        np.nan,
        {
            "RES elec": _subscript_dict["RES elec"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES elec", "scenarios"],
    )
    value.loc[["hydro"], :] = (
        max_hydro_twe().expand_dims({"RES elec": ["hydro"]}, 0).values
    )
    value.loc[['"geot-elec"'], :] = (
        max_geotelec_twe().expand_dims({"RES elec": ['"geot-elec"']}, 0).values
    )
    value.loc[['"solid bioE-elec"'], :] = (
        max_bioe_twe().expand_dims({"RES elec": ['"solid bioE-elec"']}, 0).values
    )
    value.loc[["oceanic"], :] = (
        max_oceanic_twe().expand_dims({"RES elec": ["oceanic"]}, 0).values
    )
    value.loc[["wind onshore"], :] = (
        max_onshore_wind_twe().expand_dims({"RES elec": ["wind onshore"]}, 0).values
    )
    value.loc[["wind offshore"], :] = (
        max_offshore_wind_twe().expand_dims({"RES elec": ["wind offshore"]}, 0).values
    )
    value.loc[["solar PV"], :] = (
        max_tot_solar_pv_twe().expand_dims({"RES elec": ["solar PV"]}, 0).values
    )
    value.loc[["CSP"], :] = max_csp_twe().expand_dims({"RES elec": ["CSP"]}, 0).values
    return value


@component.add(
    name="max tot solar PV TWe",
    units="TWe",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_solar_pv_on_land_twe": 1, "max_solar_pv_urban": 1},
)
def max_tot_solar_pv_twe():
    """
    Techno-ecological potential of total solar PV (on land + urban)..
    """
    return max_solar_pv_on_land_twe() + max_solar_pv_urban()


@component.add(
    name="power density CSP",
    units="TWe/MHa",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"power_density_initial_res_elec_twemha": 1},
)
def power_density_csp():
    """
    Power density of CSP power plants.
    """
    return float(power_density_initial_res_elec_twemha().loc["CSP"])


@component.add(
    name="max solar PV on land TWe",
    units="TWe",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_solar_pv_on_land_mha": 1,
        "power_density_solar_pv_on_land_twemha": 1,
    },
)
def max_solar_pv_on_land_twe():
    """
    Techno-ecological potential of solar PV on land. This potential depends on the assumed land availability for solar PV power plants ("max solar PV on land MHa") and its power density (1 TWe = 8760 TWh in one year).
    """
    return max_solar_pv_on_land_mha() * power_density_solar_pv_on_land_twemha()


@component.add(
    name="f1 PV solar in target year",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_f1_pv_solar_in_target_year"},
)
def f1_pv_solar_in_target_year():
    """
    Cell efficiency solar PV in target year.
    """
    return _ext_constant_f1_pv_solar_in_target_year()


_ext_constant_f1_pv_solar_in_target_year = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "G24",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_f1_pv_solar_in_target_year",
)

_ext_constant_f1_pv_solar_in_target_year.add(
    "inputs_EU.xlsx", "SCEN1", "G24", {"scenarios": ["SCEN1"]}
)

_ext_constant_f1_pv_solar_in_target_year.add(
    "inputs_EU.xlsx", "SCEN2", "G24", {"scenarios": ["SCEN2"]}
)

_ext_constant_f1_pv_solar_in_target_year.add(
    "inputs_EU.xlsx", "SCEN3", "G24", {"scenarios": ["SCEN3"]}
)

_ext_constant_f1_pv_solar_in_target_year.add(
    "inputs_EU.xlsx", "SCEN4", "G24", {"scenarios": ["SCEN4"]}
)

_ext_constant_f1_pv_solar_in_target_year.add(
    "inputs_EU.xlsx", "User defined", "G24", {"scenarios": ["User defined"]}
)


@component.add(
    name='"power density initial RES elec TWe/Mha"',
    units="TWe/MHa",
    subscripts=["RES elec"],
    comp_type="Constant, Data",
    comp_subtype="Normal, External",
    depends_on={
        "__external__": "_ext_data_power_density_initial_res_elec_twemha",
        "__data__": "_ext_data_power_density_initial_res_elec_twemha",
        "time": 1,
    },
)
def power_density_initial_res_elec_twemha():
    """
    Input parameter: power density per RES technology for delivering electricity.
    """
    value = xr.DataArray(
        np.nan, {"RES elec": _subscript_dict["RES elec"]}, ["RES elec"]
    )
    def_subs = xr.zeros_like(value, dtype=bool)
    def_subs.loc[["hydro"]] = True
    value.values[def_subs.values] = _ext_data_power_density_initial_res_elec_twemha(
        time()
    ).values[def_subs.values]
    def_subs = xr.zeros_like(value, dtype=bool)
    def_subs.loc[['"geot-elec"']] = True
    def_subs.loc[["wind onshore"]] = True
    def_subs.loc[["wind offshore"]] = True
    def_subs.loc[["CSP"]] = True
    value.values[
        def_subs.values
    ] = _ext_constant_power_density_initial_res_elec_twemha().values[def_subs.values]
    value.loc[['"solid bioE-elec"']] = 0
    value.loc[["oceanic"]] = 0
    value.loc[["solar PV"]] = 0
    return value


_ext_data_power_density_initial_res_elec_twemha = ExtData(
    "inputs_EU.xlsx",
    "Parameters",
    "7",
    "G20",
    "interpolate",
    {"RES elec": ["hydro"]},
    _root,
    {"RES elec": _subscript_dict["RES elec"]},
    "_ext_data_power_density_initial_res_elec_twemha",
)

_ext_constant_power_density_initial_res_elec_twemha = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "B7",
    {"RES elec": ['"geot-elec"']},
    _root,
    {"RES elec": _subscript_dict["RES elec"]},
    "_ext_constant_power_density_initial_res_elec_twemha",
)

_ext_constant_power_density_initial_res_elec_twemha.add(
    "inputs_EU.xlsx", "Parameters", "B10", {"RES elec": ["wind onshore"]}
)

_ext_constant_power_density_initial_res_elec_twemha.add(
    "inputs_EU.xlsx", "Parameters", "B12", {"RES elec": ["wind offshore"]}
)

_ext_constant_power_density_initial_res_elec_twemha.add(
    "inputs_EU.xlsx", "Parameters", "B16", {"RES elec": ["CSP"]}
)


@component.add(
    name="f2 PF solar PV",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_f2_pf_solar_pv"},
)
def f2_pf_solar_pv():
    """
    Average performance ratio over the plant's life cycle (f2).
    """
    return _ext_constant_f2_pf_solar_pv()


_ext_constant_f2_pf_solar_pv = ExtConstant(
    "inputs_EU.xlsx", "Parameters", "K37", {}, _root, {}, "_ext_constant_f2_pf_solar_pv"
)


@component.add(
    name='"power density RES elec TWe/Mha"',
    units="TWe/MHa",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "power_density_initial_res_elec_twemha": 7,
        "cpini_res_elec": 8,
        "cp_res_elec": 8,
        "power_density_solar_pv_on_land_twemha": 1,
    },
)
def power_density_res_elec_twemha():
    """
    Power density of renewable energy technologies for electricity generation.
    """
    value = xr.DataArray(
        np.nan,
        {
            "RES elec": _subscript_dict["RES elec"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES elec", "scenarios"],
    )
    value.loc[["hydro"], :] = (
        (
            float(power_density_initial_res_elec_twemha().loc["hydro"])
            * (
                cp_res_elec().loc["hydro", :].reset_coords(drop=True)
                / float(cpini_res_elec().loc["hydro"])
            )
        )
        .expand_dims({"RES elec": ["hydro"]}, 0)
        .values
    )
    value.loc[['"geot-elec"'], :] = (
        (
            float(power_density_initial_res_elec_twemha().loc['"geot-elec"'])
            * (
                cp_res_elec().loc['"geot-elec"', :].reset_coords(drop=True)
                / float(cpini_res_elec().loc['"geot-elec"'])
            )
        )
        .expand_dims({"RES elec": ['"geot-elec"']}, 0)
        .values
    )
    value.loc[['"solid bioE-elec"'], :] = (
        (
            float(power_density_initial_res_elec_twemha().loc['"solid bioE-elec"'])
            * (
                cp_res_elec().loc['"solid bioE-elec"', :].reset_coords(drop=True)
                / float(cpini_res_elec().loc['"solid bioE-elec"'])
            )
        )
        .expand_dims({"RES elec": ['"solid bioE-elec"']}, 0)
        .values
    )
    value.loc[["oceanic"], :] = (
        (
            float(power_density_initial_res_elec_twemha().loc["oceanic"])
            * (
                cp_res_elec().loc["oceanic", :].reset_coords(drop=True)
                / float(cpini_res_elec().loc["oceanic"])
            )
        )
        .expand_dims({"RES elec": ["oceanic"]}, 0)
        .values
    )
    value.loc[["wind onshore"], :] = (
        (
            float(power_density_initial_res_elec_twemha().loc["wind onshore"])
            * (
                cp_res_elec().loc["wind onshore", :].reset_coords(drop=True)
                / float(cpini_res_elec().loc["wind onshore"])
            )
        )
        .expand_dims({"RES elec": ["wind onshore"]}, 0)
        .values
    )
    value.loc[["wind offshore"], :] = (
        (
            float(power_density_initial_res_elec_twemha().loc["wind offshore"])
            * (
                cp_res_elec().loc["wind offshore", :].reset_coords(drop=True)
                / float(cpini_res_elec().loc["wind offshore"])
            )
        )
        .expand_dims({"RES elec": ["wind offshore"]}, 0)
        .values
    )
    value.loc[["solar PV"], :] = (
        (
            power_density_solar_pv_on_land_twemha()
            * (
                cp_res_elec().loc["solar PV", :].reset_coords(drop=True)
                / float(cpini_res_elec().loc["solar PV"])
            )
        )
        .expand_dims({"RES elec": ["solar PV"]}, 0)
        .values
    )
    value.loc[["CSP"], :] = (
        (
            float(power_density_initial_res_elec_twemha().loc["CSP"])
            * (
                cp_res_elec().loc["CSP", :].reset_coords(drop=True)
                / float(cpini_res_elec().loc["CSP"])
            )
        )
        .expand_dims({"RES elec": ["CSP"]}, 0)
        .values
    )
    return value


@component.add(
    name="f3 solar PV on land",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_f3_solar_pv_on_land"},
)
def f3_solar_pv_on_land():
    """
    Land occupation ratio (f3).
    """
    return _ext_constant_f3_solar_pv_on_land()


_ext_constant_f3_solar_pv_on_land = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "K38",
    {},
    _root,
    {},
    "_ext_constant_f3_solar_pv_on_land",
)


@component.add(
    name="av solar I",
    units="We/m2",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_av_solar_i"},
)
def av_solar_i():
    """
    Average solar irradiance.
    """
    return _ext_constant_av_solar_i()


_ext_constant_av_solar_i = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "K24",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_av_solar_i",
)

_ext_constant_av_solar_i.add("inputs_EU.xlsx", "SCEN1", "K24", {"scenarios": ["SCEN1"]})

_ext_constant_av_solar_i.add("inputs_EU.xlsx", "SCEN2", "K24", {"scenarios": ["SCEN2"]})

_ext_constant_av_solar_i.add("inputs_EU.xlsx", "SCEN3", "K24", {"scenarios": ["SCEN3"]})

_ext_constant_av_solar_i.add("inputs_EU.xlsx", "SCEN4", "K24", {"scenarios": ["SCEN4"]})

_ext_constant_av_solar_i.add(
    "inputs_EU.xlsx", "User defined", "K24", {"scenarios": ["User defined"]}
)


@component.add(
    name='"TWh/Mha per We/m2"',
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_twhmha_per_wem2"},
)
def twhmha_per_wem2():
    """
    Conversion factor.
    """
    return _ext_constant_twhmha_per_wem2()


_ext_constant_twhmha_per_wem2 = ExtConstant(
    "inputs_EU.xlsx", "Constants", "C19", {}, _root, {}, "_ext_constant_twhmha_per_wem2"
)


@component.add(
    name="f1 solar PV",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 4,
        "f1ini_solar_pv": 4,
        "time_dmnl": 1,
        "f1_pv_solar_in_target_year": 2,
        "start_year_p_f1_solar_pv": 3,
        "target_year_f1_solar_pv": 2,
    },
)
def f1_solar_pv():
    """
    Cell efficiency conversion of solar PV.
    """
    return if_then_else(
        time() < 2015,
        lambda: xr.DataArray(
            f1ini_solar_pv(), {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            time() < start_year_p_f1_solar_pv(),
            lambda: xr.DataArray(
                f1ini_solar_pv(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                time() < target_year_f1_solar_pv(),
                lambda: f1ini_solar_pv()
                + (f1_pv_solar_in_target_year() - f1ini_solar_pv())
                * (time_dmnl(time()) - start_year_p_f1_solar_pv())
                / (target_year_f1_solar_pv() - start_year_p_f1_solar_pv()),
                lambda: f1_pv_solar_in_target_year(),
            ),
        ),
    )


@component.add(
    name="share available roof",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_available_roof"},
)
def share_available_roof():
    """
    Share available roof over total urban land.
    """
    return _ext_constant_share_available_roof()


_ext_constant_share_available_roof = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "G28",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_share_available_roof",
)

_ext_constant_share_available_roof.add(
    "inputs_EU.xlsx", "SCEN1", "G28", {"scenarios": ["SCEN1"]}
)

_ext_constant_share_available_roof.add(
    "inputs_EU.xlsx", "SCEN2", "G28", {"scenarios": ["SCEN2"]}
)

_ext_constant_share_available_roof.add(
    "inputs_EU.xlsx", "SCEN3", "G28", {"scenarios": ["SCEN3"]}
)

_ext_constant_share_available_roof.add(
    "inputs_EU.xlsx", "SCEN4", "G28", {"scenarios": ["SCEN4"]}
)

_ext_constant_share_available_roof.add(
    "inputs_EU.xlsx", "User defined", "G28", {"scenarios": ["User defined"]}
)


@component.add(
    name="share available roof for rooftop PV",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_available_roof_for_rooftop_pv"},
)
def share_available_roof_for_rooftop_pv():
    """
    Share of available roof in urban land for rooftop PV.
    """
    return _ext_constant_share_available_roof_for_rooftop_pv()


_ext_constant_share_available_roof_for_rooftop_pv = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "G29",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_share_available_roof_for_rooftop_pv",
)

_ext_constant_share_available_roof_for_rooftop_pv.add(
    "inputs_EU.xlsx", "SCEN1", "G29", {"scenarios": ["SCEN1"]}
)

_ext_constant_share_available_roof_for_rooftop_pv.add(
    "inputs_EU.xlsx", "SCEN2", "G29", {"scenarios": ["SCEN2"]}
)

_ext_constant_share_available_roof_for_rooftop_pv.add(
    "inputs_EU.xlsx", "SCEN3", "G29", {"scenarios": ["SCEN3"]}
)

_ext_constant_share_available_roof_for_rooftop_pv.add(
    "inputs_EU.xlsx", "SCEN4", "G29", {"scenarios": ["SCEN4"]}
)

_ext_constant_share_available_roof_for_rooftop_pv.add(
    "inputs_EU.xlsx", "User defined", "G29", {"scenarios": ["User defined"]}
)


@component.add(
    name="Start year P f1 solar PV",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_start_year_p_f1_solar_pv"},
)
def start_year_p_f1_solar_pv():
    """
    Start year of the variation of cell efficiency of solar PV.
    """
    return _ext_constant_start_year_p_f1_solar_pv()


_ext_constant_start_year_p_f1_solar_pv = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "G25",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_year_p_f1_solar_pv",
)

_ext_constant_start_year_p_f1_solar_pv.add(
    "inputs_EU.xlsx", "SCEN1", "G25", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_year_p_f1_solar_pv.add(
    "inputs_EU.xlsx", "SCEN2", "G25", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_year_p_f1_solar_pv.add(
    "inputs_EU.xlsx", "SCEN3", "G25", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_year_p_f1_solar_pv.add(
    "inputs_EU.xlsx", "SCEN4", "G25", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_year_p_f1_solar_pv.add(
    "inputs_EU.xlsx", "User defined", "G25", {"scenarios": ["User defined"]}
)


@component.add(
    name="max solar PV urban",
    units="TWe",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"power_density_solar_pv_in_urban_twemha": 1, "urban_land": 1},
)
def max_solar_pv_urban():
    """
    Potential of solar PV in urban areas.
    """
    return power_density_solar_pv_in_urban_twemha() * urban_land()


@component.add(
    name="Target year f1 solar PV",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_target_year_f1_solar_pv"},
)
def target_year_f1_solar_pv():
    """
    Target year of the variation of cell efficiency of solar PV.
    """
    return _ext_constant_target_year_f1_solar_pv()


_ext_constant_target_year_f1_solar_pv = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "G26",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_target_year_f1_solar_pv",
)

_ext_constant_target_year_f1_solar_pv.add(
    "inputs_EU.xlsx", "SCEN1", "G26", {"scenarios": ["SCEN1"]}
)

_ext_constant_target_year_f1_solar_pv.add(
    "inputs_EU.xlsx", "SCEN2", "G26", {"scenarios": ["SCEN2"]}
)

_ext_constant_target_year_f1_solar_pv.add(
    "inputs_EU.xlsx", "SCEN3", "G26", {"scenarios": ["SCEN3"]}
)

_ext_constant_target_year_f1_solar_pv.add(
    "inputs_EU.xlsx", "SCEN4", "G26", {"scenarios": ["SCEN4"]}
)

_ext_constant_target_year_f1_solar_pv.add(
    "inputs_EU.xlsx", "User defined", "G26", {"scenarios": ["User defined"]}
)


@component.add(
    name='"f1-ini solar PV"',
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_f1ini_solar_pv"},
)
def f1ini_solar_pv():
    """
    Current cell efficiency conversion of solar PV.
    """
    return _ext_constant_f1ini_solar_pv()


_ext_constant_f1ini_solar_pv = ExtConstant(
    "inputs_EU.xlsx", "Parameters", "K39", {}, _root, {}, "_ext_constant_f1ini_solar_pv"
)


@component.add(
    name="extraction uranium EJ",
    subscripts=["scenarios"],
    comp_type="Data",
    comp_subtype="Normal",
    depends_on={"time": 1, "__data__": "_data_extraction_uranium_ej"},
)
def extraction_uranium_ej():
    """
    Global uranium extracted. Source: global model.
    """
    return _data_extraction_uranium_ej(time())


_data_extraction_uranium_ej = TabData(
    "extraction uranium EJ",
    "extraction_uranium_ej",
    {"scenarios": _subscript_dict["scenarios"]},
    "interpolate",
)


@component.add(
    name="extraction coal EJ",
    subscripts=["scenarios"],
    comp_type="Data",
    comp_subtype="Normal",
    depends_on={"time": 1, "__data__": "_data_extraction_coal_ej"},
)
def extraction_coal_ej():
    """
    Global primary energy supply. Source: global model.
    """
    return _data_extraction_coal_ej(time())


_data_extraction_coal_ej = TabData(
    "extraction coal EJ",
    "extraction_coal_ej",
    {"scenarios": _subscript_dict["scenarios"]},
    "interpolate",
)


@component.add(
    name='"PES coal for Heat-nc plants"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "extraction_coal_ej_eu": 1,
        "imports_eu_coal_from_row_ej": 1,
        "share_coal_dem_for_heatnc": 1,
    },
)
def pes_coal_for_heatnc_plants():
    """
    Primary energy supply of coal for non-commercial Heat plants.
    """
    return (
        extraction_coal_ej_eu() + imports_eu_coal_from_row_ej()
    ) * share_coal_dem_for_heatnc()


@component.add(
    name="PE losses coal for Elec EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "extraction_coal_ej_eu": 1,
        "imports_eu_coal_from_row_ej": 1,
        "share_coal_dem_for_elec": 1,
        "efficiency_coal_for_electricity": 1,
    },
)
def pe_losses_coal_for_elec_ej():
    """
    (Primary) Energy losses in the generation of electricity in coal power centrals.
    """
    return (
        (extraction_coal_ej_eu() + imports_eu_coal_from_row_ej())
        * share_coal_dem_for_elec()
        * (1 - efficiency_coal_for_electricity())
    )


@component.add(
    name="abundance coal EU",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "extraction_coal_ej_eu": 2,
        "imports_eu_coal_from_row_ej": 2,
        "ped_coal_ej": 3,
    },
)
def abundance_coal_eu():
    """
    The parameter abundance varies between (1;0). Abundance=1 while the supply covers the demand; the closest to 0 indicates a higher divergence between supply and demand.
    """
    return if_then_else(
        extraction_coal_ej_eu() + imports_eu_coal_from_row_ej() > ped_coal_ej(),
        lambda: xr.DataArray(
            1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: 1
        - zidz(
            ped_coal_ej() - extraction_coal_ej_eu() - imports_eu_coal_from_row_ej(),
            ped_coal_ej(),
        ),
    )


@component.add(
    name="FE Elec generation from coal TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "extraction_coal_ej_eu": 1,
        "imports_eu_coal_from_row_ej": 1,
        "efficiency_coal_for_electricity": 1,
        "share_coal_dem_for_elec": 1,
        "ej_per_twh": 1,
    },
)
def fe_elec_generation_from_coal_twh():
    """
    Final energy electricity generation from coal (TWh).
    """
    return (
        (extraction_coal_ej_eu() + imports_eu_coal_from_row_ej())
        * efficiency_coal_for_electricity()
        * share_coal_dem_for_elec()
        / ej_per_twh()
    )


@component.add(
    name="Total FE Elec consumption TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_fe_elec_generation_twh_eu": 1,
        "share_transmdistr_elec_losses": 1,
    },
)
def total_fe_elec_consumption_twh():
    """
    Total final energy electricity consumption (fossil fuels, nuclear, waste & renewables) (TWh) excluding distribution losses.
    """
    return total_fe_elec_generation_twh_eu() / (1 + share_transmdistr_elec_losses())


@component.add(
    name='"PES coal for Heat-com plants"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "extraction_coal_ej_eu": 1,
        "imports_eu_coal_from_row_ej": 1,
        "share_coal_dem_for_heatcom": 1,
    },
)
def pes_coal_for_heatcom_plants():
    """
    Primary energy supply of coal for commercial Heat plants.
    """
    return (
        extraction_coal_ej_eu() + imports_eu_coal_from_row_ej()
    ) * share_coal_dem_for_heatcom()


@component.add(
    name="PED EU coal from RoW",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_coal_ej": 1, "extraction_coal_ej_eu": 1},
)
def ped_eu_coal_from_row():
    return np.maximum(0, ped_coal_ej() - extraction_coal_ej_eu())


@component.add(
    name='"Share E-losses CC"',
    subscripts=["scenarios"],
    comp_type="Data",
    comp_subtype="Normal",
    depends_on={"time": 1, "__data__": "_data_share_elosses_cc"},
)
def share_elosses_cc():
    """
    Energy losses due to climate change impacts. Source: global model.
    """
    return _data_share_elosses_cc(time())


_data_share_elosses_cc = TabData(
    '"Share E-losses CC"',
    "share_elosses_cc",
    {"scenarios": _subscript_dict["scenarios"]},
    "interpolate",
)


@component.add(
    name="FE nuclear Elec generation TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "extraction_uranium_ej_eu": 1,
        "extraction_uranium_row": 1,
        "efficiency_uranium_for_electricity": 1,
        "ej_per_twh": 1,
    },
)
def fe_nuclear_elec_generation_twh():
    """
    Final energy electricity generation from uranium (TWh).
    """
    return (
        (extraction_uranium_ej_eu() + extraction_uranium_row())
        * efficiency_uranium_for_electricity()
        / ej_per_twh()
    )


@component.add(
    name="effects shortage uranium",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "extraction_uranium_ej_eu": 1,
        "extraction_uranium_row": 1,
        "abundance_uranium": 2,
    },
)
def effects_shortage_uranium():
    """
    The eventual scarcity of coal would likely constrain the development of CTL. The proposed relationship avoids an abrupt limitation by introducing a range (1;0.8) in the gas abundance that constrains the development of CTL.
    """
    return if_then_else(
        extraction_uranium_ej_eu() + extraction_uranium_row() == 0,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            abundance_uranium() > 0.8,
            lambda: ((abundance_uranium() - 0.8) * 5) ** 2,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        ),
    )


@component.add(
    name="Total consumption NRE EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "extraction_coal_ej_eu": 1,
        "imports_eu_coal_from_row_ej": 1,
        "real_extraction_conv_gas_ej": 1,
        "real_extraction_conv_oil_ej": 1,
        "real_extraction_unconv_gas_ej": 1,
        "real_extraction_unconv_oil_ej": 1,
        "extraction_uranium_ej_eu": 1,
        "imports_eu_nat_gas_from_row_ej": 1,
        "imports_eu_total_oil_from_row_ej": 1,
        "extraction_uranium_row": 1,
    },
)
def total_consumption_nre_ej():
    """
    Annual total consumption of non-renewable energy resources.
    """
    return (
        extraction_coal_ej_eu()
        + imports_eu_coal_from_row_ej()
        + real_extraction_conv_gas_ej()
        + real_extraction_conv_oil_ej()
        + real_extraction_unconv_gas_ej()
        + real_extraction_unconv_oil_ej()
        + extraction_uranium_ej_eu()
        + imports_eu_nat_gas_from_row_ej()
        + imports_eu_total_oil_from_row_ej()
        + extraction_uranium_row()
    )


@component.add(
    name="CC impacts feedback shortage coeff",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_elosses_cc_world": 1},
)
def cc_impacts_feedback_shortage_coeff():
    """
    This coefficient adapts the real final energy by fuel to be used by economic sectors taking into account climate change impacts.
    """
    return 1 - share_elosses_cc_world()


@component.add(
    name="PE losses uranium for Elec EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "extraction_uranium_ej_eu": 1,
        "extraction_uranium_row": 1,
        "efficiency_uranium_for_electricity": 1,
    },
)
def pe_losses_uranium_for_elec_ej():
    """
    (Primary) Energy losses in the generation of electricity in nuclear power centrals.
    """
    return (extraction_uranium_ej_eu() + extraction_uranium_row()) * (
        1 - efficiency_uranium_for_electricity()
    )


@component.add(
    name='"Share E-losses CC World"',
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"activate_elf_by_scen": 1, "share_elosses_cc": 1},
)
def share_elosses_cc_world():
    return if_then_else(
        activate_elf_by_scen() == 1,
        lambda: share_elosses_cc(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="Total FE Heat consumption EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_fe_heat_generation_ej": 1, "share_heat_distribution_losses": 1},
)
def total_fe_heat_consumption_ej():
    """
    Total final heat consumption (fossil fuels, nuclear, waste & renewables) (EJ).
    """
    return total_fe_heat_generation_ej() / (1 + share_heat_distribution_losses())


@component.add(
    name="imports EU uranium from RoW EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pe_demand_uranium_eu_ej": 1, "extraction_uranium_ej_eu": 1},
)
def imports_eu_uranium_from_row_ej():
    return pe_demand_uranium_eu_ej() - extraction_uranium_ej_eu()


@component.add(
    name="abundance uranium",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pe_demand_uranium_eu_ej": 4,
        "extraction_uranium_row": 2,
        "extraction_uranium_ej_eu": 2,
    },
)
def abundance_uranium():
    """
    The parameter abundance varies between (1;0). Abundance=1 while the supply covers the demand; the closest to 0 indicates a higher divergence between supply and demand.
    """
    return if_then_else(
        pe_demand_uranium_eu_ej() == 0,
        lambda: xr.DataArray(
            1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            extraction_uranium_ej_eu() + extraction_uranium_row()
            > pe_demand_uranium_eu_ej(),
            lambda: xr.DataArray(
                1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: 1
            - (
                pe_demand_uranium_eu_ej()
                - extraction_uranium_ej_eu()
                - extraction_uranium_row()
            )
            / pe_demand_uranium_eu_ej(),
        ),
    )


@component.add(
    name="abundance liquids",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_liquids_ej": 3, "pes_liquids_ej": 2},
)
def abundance_liquids():
    """
    The parameter abundance varies between (1;0). Abundance=1 while the supply covers the demand; the closest to 0 indicates a higher divergence between supply and demand.
    """
    return if_then_else(
        ped_liquids_ej() < pes_liquids_ej(),
        lambda: xr.DataArray(
            1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: 1 - zidz(ped_liquids_ej() - pes_liquids_ej(), ped_liquids_ej()),
    )


@component.add(
    name="PE losses oil for Elec EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_total_oil_ej_eu": 1,
        "imports_eu_total_oil_from_row_ej": 1,
        "share_oil_dem_for_elec": 1,
        "efficiency_liquids_for_electricity": 1,
    },
)
def pe_losses_oil_for_elec_ej():
    """
    Primary energy losses related with oil for electricity generation.
    """
    return (
        (pes_total_oil_ej_eu() + imports_eu_total_oil_from_row_ej())
        * share_oil_dem_for_elec()
        * (1 - efficiency_liquids_for_electricity())
    )


@component.add(
    name="PE losses uncon gas for Elec EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_extraction_unconv_gas_ej": 1,
        "imports_eu_unconv_gas_from_row_ej": 1,
        "share_nat_gas_dem_for_elec": 1,
        "efficiency_gas_for_electricity": 1,
    },
)
def pe_losses_uncon_gas_for_elec_ej():
    """
    (Primary) Energy losses in the generation of electricity in gas power centrals.
    """
    return (
        (real_extraction_unconv_gas_ej() + imports_eu_unconv_gas_from_row_ej())
        * share_nat_gas_dem_for_elec()
        * (1 - efficiency_gas_for_electricity())
    )


@component.add(
    name="PE losses conv gas for Elec EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_extraction_conv_gas_ej": 1,
        "imports_eu_conv_gas_from_row_ej": 1,
        "share_nat_gas_dem_for_elec": 1,
        "efficiency_gas_for_electricity": 1,
    },
)
def pe_losses_conv_gas_for_elec_ej():
    """
    (Primary) Energy losses in the generation of electricity in gas power centrals.
    """
    return (
        (real_extraction_conv_gas_ej() + imports_eu_conv_gas_from_row_ej())
        * share_nat_gas_dem_for_elec()
        * (1 - efficiency_gas_for_electricity())
    )


@component.add(
    name="abundance gases",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_gases": 3, "pes_gases": 2},
)
def abundance_gases():
    """
    The parameter abundance varies between (1;0). Abundance=1 while the supply covers the demand; the closest to 0 indicates a higher divergence between supply and demand.
    """
    return if_then_else(
        ped_gases() < pes_gases(),
        lambda: xr.DataArray(
            1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: 1 - zidz(ped_gases() - pes_gases(), ped_gases()),
    )


@component.add(
    name='"PES oil for Heat-nc plants"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_liquids_ej": 1, "share_liquids_dem_for_heatnc": 1},
)
def pes_oil_for_heatnc_plants():
    """
    Primary energy supply of natural oil for non-commercial Heat plants.
    """
    return pes_liquids_ej() * share_liquids_dem_for_heatnc()


@component.add(
    name='"share liquids dem for Heat-nc"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_liquids_heatnc": 1, "pes_liquids_ej": 1},
)
def share_liquids_dem_for_heatnc():
    """
    Share of liquids demand for non-commercial Heat plants in relation to the total demand of liquids.
    """
    return zidz(ped_liquids_heatnc(), pes_liquids_ej())


@component.add(
    name="check liquids",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_liquids_ej": 1, "pes_liquids_ej": 2},
)
def check_liquids():
    """
    If=0, demand=supply. If>0, demand>supply (liquids scarcity). If<0, demand<supply (oversupply). Variable to avoid energy oversupply caused by exogenously driven policies.
    """
    return zidz(ped_liquids_ej() - pes_liquids_ej(), pes_liquids_ej())


@component.add(
    name='"share gases dem for Heat-nc"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_gas_heatnc": 1, "pes_gases": 1, "ped_nat_gas_for_gtl_ej": 1},
)
def share_gases_dem_for_heatnc():
    """
    Share of natural gas demand for non-commercial Heat plants in relation to the demand of natural fossil gas.
    """
    return zidz(ped_gas_heatnc(), pes_gases() - ped_nat_gas_for_gtl_ej())


@component.add(
    name="check gases",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_gases": 1, "pes_gases": 2},
)
def check_gases():
    """
    Variable to avoid energy oversupply caused by exogenously driven policies.
    """
    return zidz(ped_gases() - pes_gases(), pes_gases())


@component.add(
    name='"PES nat. gas for Heat-nc plants"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_gases": 1,
        "ped_nat_gas_for_gtl_ej": 1,
        "share_gases_dem_for_heatnc": 1,
    },
)
def pes_nat_gas_for_heatnc_plants():
    """
    Primary energy supply of natural gas for non-commercial Heat plants.
    """
    return (pes_gases() - ped_nat_gas_for_gtl_ej()) * share_gases_dem_for_heatnc()


@component.add(
    name="FE Elec generation from unconv gas TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_extraction_unconv_gas_ej": 1,
        "imports_eu_unconv_gas_from_row_ej": 1,
        "share_nat_gas_dem_for_elec": 1,
        "efficiency_gas_for_electricity": 1,
        "ej_per_twh": 1,
    },
)
def fe_elec_generation_from_unconv_gas_twh():
    """
    Final energy electricity generation from unconventional gas (TWh).
    """
    return (
        (real_extraction_unconv_gas_ej() + imports_eu_unconv_gas_from_row_ej())
        * share_nat_gas_dem_for_elec()
        * efficiency_gas_for_electricity()
        / ej_per_twh()
    )


@component.add(
    name="share conv vs total gas extraction",
    subscripts=["scenarios"],
    comp_type="Data",
    comp_subtype="Normal",
    depends_on={"time": 1, "__data__": "_data_share_conv_vs_total_gas_extraction"},
)
def share_conv_vs_total_gas_extraction():
    """
    Share of global conventional vs global total (unconventional + conventional) gas extraction. Source: global model.
    """
    return _data_share_conv_vs_total_gas_extraction(time())


_data_share_conv_vs_total_gas_extraction = TabData(
    "share conv vs total gas extraction",
    "share_conv_vs_total_gas_extraction",
    {"scenarios": _subscript_dict["scenarios"]},
    "interpolate",
)


@component.add(
    name="FE Elec generation from conv gas TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_extraction_conv_gas_ej": 1,
        "imports_eu_conv_gas_from_row_ej": 1,
        "share_nat_gas_dem_for_elec": 1,
        "efficiency_gas_for_electricity": 1,
        "ej_per_twh": 1,
    },
)
def fe_elec_generation_from_conv_gas_twh():
    """
    Final energy electricity generation from conventional gas (TWh).
    """
    return (
        (real_extraction_conv_gas_ej() + imports_eu_conv_gas_from_row_ej())
        * share_nat_gas_dem_for_elec()
        * efficiency_gas_for_electricity()
        / ej_per_twh()
    )


@component.add(
    name="real FE consumption gases EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_gases": 1,
        "ped_nat_gas_for_gtl_ej": 1,
        "other_gases_required": 1,
        "share_gases_for_final_energy": 1,
    },
)
def real_fe_consumption_gases_ej():
    """
    Real final energy consumption by gases after accounting for energy availability.
    """
    return (
        pes_gases() - ped_nat_gas_for_gtl_ej() - other_gases_required()
    ) * share_gases_for_final_energy()


@component.add(
    name='"PES nat. gas for Heat-com plants"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_nat_gas_eu": 1,
        "imports_eu_nat_gas_from_row_ej": 1,
        "share_nat_gas_dem_for_heatcom": 1,
    },
)
def pes_nat_gas_for_heatcom_plants():
    """
    Primary energy supply of fossil natural gas for commercial Heat plants.
    """
    return (
        pes_nat_gas_eu() + imports_eu_nat_gas_from_row_ej()
    ) * share_nat_gas_dem_for_heatcom()


@component.add(
    name="FE Elec generation from total oil TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_total_oil_ej_eu": 1,
        "imports_eu_total_oil_from_row_ej": 1,
        "share_oil_dem_for_elec": 1,
        "efficiency_liquids_for_electricity": 1,
        "ej_per_twh": 1,
    },
)
def fe_elec_generation_from_total_oil_twh():
    """
    Electricity generation (final energy) from total oil.
    """
    return (
        (pes_total_oil_ej_eu() + imports_eu_total_oil_from_row_ej())
        * share_oil_dem_for_elec()
        * efficiency_liquids_for_electricity()
        / ej_per_twh()
    )


@component.add(
    name="real FE consumption liquids EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_liquids_ej": 1,
        "other_liquids_required_ej": 1,
        "share_liquids_for_final_energy": 1,
    },
)
def real_fe_consumption_liquids_ej():
    """
    Real final energy consumption by liquids after accounting for energy availability.
    """
    return (
        pes_liquids_ej() - other_liquids_required_ej()
    ) * share_liquids_for_final_energy()


@component.add(
    name="PES oil EJ",
    subscripts=["scenarios"],
    comp_type="Data",
    comp_subtype="Normal",
    depends_on={"time": 1, "__data__": "_data_pes_oil_ej"},
)
def pes_oil_ej():
    """
    Global primary energy supply of oil. Source: global model.
    """
    return _data_pes_oil_ej(time())


_data_pes_oil_ej = TabData(
    "PES oil EJ",
    "pes_oil_ej",
    {"scenarios": _subscript_dict["scenarios"]},
    "interpolate",
)


@component.add(
    name='"PES oil for Heat-com plants"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_total_oil_ej_eu": 1,
        "imports_eu_total_oil_from_row_ej": 1,
        "share_oil_dem_for_heatcom": 1,
    },
)
def pes_oil_for_heatcom_plants():
    """
    Primary energy supply of oil for commercial Heat plants.
    """
    return (
        pes_total_oil_ej_eu() + imports_eu_total_oil_from_row_ej()
    ) * share_oil_dem_for_heatcom()


@component.add(
    name="PED EU total oil from RoW",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_total_oil_ej": 1, "pes_total_oil_ej_eu": 1},
)
def ped_eu_total_oil_from_row():
    return np.maximum(0, ped_total_oil_ej() - pes_total_oil_ej_eu())


@component.add(
    name='"PES nat. gas"',
    subscripts=["scenarios"],
    comp_type="Data",
    comp_subtype="Normal",
    depends_on={"time": 1, "__data__": "_data_pes_nat_gas"},
)
def pes_nat_gas():
    """
    Global primary energy supply of natural gas. Source: global model.
    """
    return _data_pes_nat_gas(time())


_data_pes_nat_gas = TabData(
    '"PES nat. gas"',
    "pes_nat_gas",
    {"scenarios": _subscript_dict["scenarios"]},
    "interpolate",
)


@component.add(
    name="RURR tot agg oil",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_rurr_tot_agg_oil": 1},
    other_deps={
        "_integ_rurr_tot_agg_oil": {
            "initial": {
                "separate_conv_and_unconv_oil": 1,
                "urr_tot_agg_oil": 1,
                "cumulated_tot_agg_extraction_to_1995": 1,
            },
            "step": {
                "extraction_tot_agg_oil_ej": 1,
                "flow_tot_agg_oil_left_in_ground": 1,
            },
        }
    },
)
def rurr_tot_agg_oil():
    """
    RURR total aggregated oil.
    """
    return _integ_rurr_tot_agg_oil()


_integ_rurr_tot_agg_oil = Integ(
    lambda: -extraction_tot_agg_oil_ej() - flow_tot_agg_oil_left_in_ground(),
    lambda: if_then_else(
        separate_conv_and_unconv_oil() == 0,
        lambda: urr_tot_agg_oil() - cumulated_tot_agg_extraction_to_1995(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    ),
    "_integ_rurr_tot_agg_oil",
)


@component.add(
    name="RURR tot agg gas",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_rurr_tot_agg_gas": 1},
    other_deps={
        "_integ_rurr_tot_agg_gas": {
            "initial": {
                "separate_conv_and_unconv_gas": 1,
                "cumulated_tot_agg_gas_extraction_to_1995": 1,
                "urr_tot_agg_gas": 1,
            },
            "step": {
                "extraction_tot_agg_gas_ej": 1,
                "flow_tot_agg_gas_left_in_ground": 1,
            },
        }
    },
)
def rurr_tot_agg_gas():
    """
    RURR total aggregated natural gas.
    """
    return _integ_rurr_tot_agg_gas()


_integ_rurr_tot_agg_gas = Integ(
    lambda: -extraction_tot_agg_gas_ej() - flow_tot_agg_gas_left_in_ground(),
    lambda: if_then_else(
        separate_conv_and_unconv_gas() == 0,
        lambda: urr_tot_agg_gas() - cumulated_tot_agg_gas_extraction_to_1995(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    ),
    "_integ_rurr_tot_agg_gas",
)


@component.add(
    name="Percent share blue water use vs AR",
    units="percent",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_blue_water_use_vs_ar": 1},
)
def percent_share_blue_water_use_vs_ar():
    """
    Percent of the share of blue water used vs accessible runoff water.
    """
    return share_blue_water_use_vs_ar() * 100


@component.add(
    name='"minimum EROI (Brandt, 2017)"',
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_minimum_eroi_brandt_2017"},
)
def minimum_eroi_brandt_2017():
    """
    "At levels of net energy return ≤ 5 J/J, the fraction of productive outputs free to use in discretionary purposes declines rapidly, resulting in the emergence of an effective "minimum EROI" below which prosperity is burdened by excessive direct and indirect requirements of the energy sector." Source: Brandt (2017).
    """
    return _ext_constant_minimum_eroi_brandt_2017()


_ext_constant_minimum_eroi_brandt_2017 = ExtConstant(
    "inputs_EU.xlsx",
    "Result comparison",
    "C52",
    {},
    _root,
    {},
    "_ext_constant_minimum_eroi_brandt_2017",
)


@component.add(
    name='"minimum EROI (Hall et al, 2009)"',
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_minimum_eroi_hall_et_al_2009"},
)
def minimum_eroi_hall_et_al_2009():
    """
    Minimum EROI.
    """
    return _ext_constant_minimum_eroi_hall_et_al_2009()


_ext_constant_minimum_eroi_hall_et_al_2009 = ExtConstant(
    "inputs_EU.xlsx",
    "Result comparison",
    "C53",
    {},
    _root,
    {},
    "_ext_constant_minimum_eroi_hall_et_al_2009",
)


@component.add(
    name="Physical energy intensity TPES vs final",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_total_final_energy_vs_tpes": 1},
)
def physical_energy_intensity_tpes_vs_final():
    """
    Physical energy intensity
    """
    return 1 / share_total_final_energy_vs_tpes()


@component.add(
    name="Physical energy intensity TPES vs net",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_total_net_energy_vs_tpes": 1},
)
def physical_energy_intensity_tpes_vs_net():
    """
    Physical energy intensity
    """
    return 1 / share_total_net_energy_vs_tpes()


@component.add(
    name="Required final energy transport IOT sectors",
    units="EJ/Year",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "required_final_energy_air_transport": 1,
        "required_final_energy_inland_transport": 1,
        "required_final_energy_other_transport": 1,
        "required_final_energy_water_transport": 1,
    },
)
def required_final_energy_transport_iot_sectors():
    return (
        required_final_energy_air_transport()
        + required_final_energy_inland_transport()
        + required_final_energy_other_transport()
        + required_final_energy_water_transport()
    )


@component.add(
    name="available max PE solid bioE for elec EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_pe_solid_bioe_potential_heatelec_ej": 1,
        "pes_res_for_heat_by_techn": 1,
    },
)
def available_max_pe_solid_bioe_for_elec_ej():
    """
    Maximum available (primary energy) solid bioenergy for electricity.
    """
    return np.maximum(
        0,
        total_pe_solid_bioe_potential_heatelec_ej()
        - pes_res_for_heat_by_techn()
        .loc['"solid bioE-heat"', :]
        .reset_coords(drop=True),
    )


@component.add(
    name="remaining potential tot RES heat",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_pe_potential_tot_res_heat_ej": 3, "pes_tot_res_for_heat": 2},
)
def remaining_potential_tot_res_heat():
    """
    Remaining potential available as a fraction of unity.
    """
    return if_then_else(
        max_pe_potential_tot_res_heat_ej() > pes_tot_res_for_heat(),
        lambda: zidz(
            max_pe_potential_tot_res_heat_ej() - pes_tot_res_for_heat(),
            max_pe_potential_tot_res_heat_ej(),
        ),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="PES tot RES for heat",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_tot_biogas_for_heatcom": 1, "pes_res_for_heat_by_techn": 1},
)
def pes_tot_res_for_heat():
    """
    Total primary energy of RES for heat (all technologies: biogas, solids bioenergy, solar and geothermal).
    """
    return pes_tot_biogas_for_heatcom() + sum(
        pes_res_for_heat_by_techn().rename({"RES heat": "RES heat!"}), dim=["RES heat!"]
    )


@component.add(
    name="PES solids bioE EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "losses_in_charcoal_plants_ej": 1,
        "pe_bioe_for_elec_generation_ej": 1,
        "pe_traditional_biomass_ej_delayed_1yr": 1,
        "modern_solids_bioe_demand_households": 1,
        "pes_res_for_heat_by_techn": 1,
    },
)
def pes_solids_bioe_ej():
    """
    Total biomass supply.It aggregates supply for electricity, heat and solids (both modern and traditional biomass).
    """
    return (
        losses_in_charcoal_plants_ej()
        + pe_bioe_for_elec_generation_ej()
        + pe_traditional_biomass_ej_delayed_1yr()
        + modern_solids_bioe_demand_households()
        + pes_res_for_heat_by_techn()
        .loc['"solid bioE-heat"', :]
        .reset_coords(drop=True)
    )


@component.add(
    name="Max tot FE potential RES for heat",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_fe_potential_res_for_heat": 1,
        "max_fe_potential_biogas_for_heat": 1,
    },
)
def max_tot_fe_potential_res_for_heat():
    """
    Potential (final energy) for producing heat from renewables.
    """
    return (
        sum(
            max_fe_potential_res_for_heat().rename({"RES heat": "RES heat!"}),
            dim=["RES heat!"],
        )
        + max_fe_potential_biogas_for_heat()
    )


@component.add(
    name="max PE potential solid bioE for heat EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_pe_solid_bioe_potential_heatelec_ej": 1,
        "share_solids_bioe_for_elec_vs_heat": 1,
    },
)
def max_pe_potential_solid_bioe_for_heat_ej():
    """
    Maximum potential (primary energy) of solid bioenergy for generating heat.
    """
    return total_pe_solid_bioe_potential_heatelec_ej() * (
        1 - share_solids_bioe_for_elec_vs_heat()
    )


@component.add(
    name="max FE potential solid bioE for elec TWe",
    units="TWe",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_pe_potential_solid_bioe_for_elec_ej": 1,
        "efficiency_conversion_bioe_to_elec": 1,
        "twe_per_twh": 1,
        "ej_per_twh": 1,
    },
)
def max_fe_potential_solid_bioe_for_elec_twe():
    """
    Available potential (final energy) solid bioenergy for electricity.
    """
    return (
        max_pe_potential_solid_bioe_for_elec_ej()
        * efficiency_conversion_bioe_to_elec()
        * twe_per_twh()
        / ej_per_twh()
    )


@component.add(
    name="Max PE potential RES for heat",
    units="EJ",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_pe_res_for_heat": 2, "max_pe_potential_solid_bioe_for_heat_ej": 1},
)
def max_pe_potential_res_for_heat():
    value = xr.DataArray(
        np.nan,
        {
            "RES heat": _subscript_dict["RES heat"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES heat", "scenarios"],
    )
    value.loc[['"solar-heat"'], :] = (
        max_pe_res_for_heat()
        .loc['"solar-heat"', :]
        .reset_coords(drop=True)
        .expand_dims({"RES heat": ['"solar-heat"']}, 0)
        .values
    )
    value.loc[['"geot-heat"'], :] = (
        max_pe_res_for_heat()
        .loc['"geot-heat"', :]
        .reset_coords(drop=True)
        .expand_dims({"RES heat": ['"geot-heat"']}, 0)
        .values
    )
    value.loc[['"solid bioE-heat"'], :] = (
        max_pe_potential_solid_bioe_for_heat_ej()
        .expand_dims({"RES heat": ['"solid bioE-heat"']}, 0)
        .values
    )
    return value


@component.add(
    name="max PE potential solid bioE for elec EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_pe_solid_bioe_potential_heatelec_ej": 1,
        "share_solids_bioe_for_elec_vs_heat": 1,
    },
)
def max_pe_potential_solid_bioe_for_elec_ej():
    """
    Maximum potential (primary energy) of solid bioenergy for generating electricity.
    """
    return (
        total_pe_solid_bioe_potential_heatelec_ej()
        * share_solids_bioe_for_elec_vs_heat()
    )


@component.add(
    name="max PE potential tot RES heat EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_pe_potential_biogas_for_heat": 1,
        "max_pe_potential_res_for_heat": 1,
    },
)
def max_pe_potential_tot_res_heat_ej():
    """
    Maximum total primary energy potential of RES for heat.
    """
    return max_pe_potential_biogas_for_heat() + sum(
        max_pe_potential_res_for_heat().rename({"RES heat": "RES heat!"}),
        dim=["RES heat!"],
    )


@component.add(
    name="share solids bioE for elec vs heat",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pe_bioe_for_elec_generation_ej": 2, "pes_res_for_heat_by_techn": 1},
)
def share_solids_bioe_for_elec_vs_heat():
    """
    Share of solids bioenergy for electricity vs electricity+heat.
    """
    return zidz(
        pe_bioe_for_elec_generation_ej(),
        pe_bioe_for_elec_generation_ej()
        + pes_res_for_heat_by_techn()
        .loc['"solid bioE-heat"', :]
        .reset_coords(drop=True),
    )


@component.add(
    name="solid bioE emissions relevant EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pe_bioe_for_elec_generation_ej": 1,
        "pes_res_for_heat_by_techn": 1,
        "modern_solids_bioe_demand_households": 1,
    },
)
def solid_bioe_emissions_relevant_ej():
    """
    Solids bioenergy primary energy supply for estimating the CO2 emissions (we assume the CO2 emissions from traditional biomass are already included in land-use change emissions).
    """
    return (
        pe_bioe_for_elec_generation_ej()
        + pes_res_for_heat_by_techn()
        .loc['"solid bioE-heat"', :]
        .reset_coords(drop=True)
        + modern_solids_bioe_demand_households()
    )


@component.add(
    name="Max FE potential RES for heat",
    units="EJ",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_fe_res_for_heat": 2,
        "efficiency_res_heat": 1,
        "max_pe_potential_solid_bioe_for_heat_ej": 1,
    },
)
def max_fe_potential_res_for_heat():
    value = xr.DataArray(
        np.nan,
        {
            "RES heat": _subscript_dict["RES heat"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES heat", "scenarios"],
    )
    value.loc[['"solar-heat"'], :] = (
        max_fe_res_for_heat()
        .loc['"solar-heat"', :]
        .reset_coords(drop=True)
        .expand_dims({"RES heat": ['"solar-heat"']}, 0)
        .values
    )
    value.loc[['"geot-heat"'], :] = (
        max_fe_res_for_heat()
        .loc['"geot-heat"', :]
        .reset_coords(drop=True)
        .expand_dims({"RES heat": ['"geot-heat"']}, 0)
        .values
    )
    value.loc[['"solid bioE-heat"'], :] = (
        (
            max_pe_potential_solid_bioe_for_heat_ej()
            * float(efficiency_res_heat().loc['"solid bioE-heat"'])
        )
        .expand_dims({"RES heat": ['"solid bioE-heat"']}, 0)
        .values
    )
    return value


@component.add(
    name='"PE supply from RES non-elec without trad bioE EJ"',
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_tot_res_for_heat": 1,
        "fes_total_biofuels_production_ej": 1,
        "pes_biogas_for_tfc": 1,
    },
)
def pe_supply_from_res_nonelec_without_trad_bioe_ej():
    """
    Primary energy (non electric) supply from RES without traditional biomass.
    """
    return (
        pes_tot_res_for_heat()
        + fes_total_biofuels_production_ej()
        + pes_biogas_for_tfc()
    )


@component.add(
    name="max potential RES elec TWh",
    units="TWh",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_res_elec_twe": 5,
        "twe_per_twh": 8,
        "max_fe_potential_solid_bioe_for_elec_twe": 1,
        "max_potential_solar_pv_twe": 1,
        "max_potential_csp_twe": 1,
    },
)
def max_potential_res_elec_twh():
    """
    Maximum potential of RES for electricity per technology considering an optimal Cp.
    """
    value = xr.DataArray(
        np.nan,
        {
            "RES elec": _subscript_dict["RES elec"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES elec", "scenarios"],
    )
    value.loc[["hydro"], :] = (
        (max_res_elec_twe().loc["hydro", :].reset_coords(drop=True) / twe_per_twh())
        .expand_dims({"RES elec": ["hydro"]}, 0)
        .values
    )
    value.loc[['"geot-elec"'], :] = (
        (
            max_res_elec_twe().loc['"geot-elec"', :].reset_coords(drop=True)
            / twe_per_twh()
        )
        .expand_dims({"RES elec": ['"geot-elec"']}, 0)
        .values
    )
    value.loc[['"solid bioE-elec"'], :] = (
        (max_fe_potential_solid_bioe_for_elec_twe() / twe_per_twh())
        .expand_dims({"RES elec": ['"solid bioE-elec"']}, 0)
        .values
    )
    value.loc[["oceanic"], :] = (
        (max_res_elec_twe().loc["oceanic", :].reset_coords(drop=True) / twe_per_twh())
        .expand_dims({"RES elec": ["oceanic"]}, 0)
        .values
    )
    value.loc[["wind onshore"], :] = (
        (
            max_res_elec_twe().loc["wind onshore", :].reset_coords(drop=True)
            / twe_per_twh()
        )
        .expand_dims({"RES elec": ["wind onshore"]}, 0)
        .values
    )
    value.loc[["wind offshore"], :] = (
        (
            max_res_elec_twe().loc["wind offshore", :].reset_coords(drop=True)
            / twe_per_twh()
        )
        .expand_dims({"RES elec": ["wind offshore"]}, 0)
        .values
    )
    value.loc[["solar PV"], :] = (
        (max_potential_solar_pv_twe() / twe_per_twh())
        .expand_dims({"RES elec": ["solar PV"]}, 0)
        .values
    )
    value.loc[["CSP"], :] = (
        (max_potential_csp_twe() / twe_per_twh())
        .expand_dims({"RES elec": ["CSP"]}, 0)
        .values
    )
    return value


@component.add(
    name="max potential tot RES elec TWh",
    units="TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_potential_res_elec_twh": 1,
        "max_potential_phs_twe": 1,
        "twe_per_twh": 1,
        "ej_per_twh": 1,
        "max_pe_potential_biogas_for_elec": 1,
    },
)
def max_potential_tot_res_elec_twh():
    """
    Maximum total potential of RES for electricity considering an optimal Cp.
    """
    return (
        sum(
            max_potential_res_elec_twh().rename({"RES elec": "RES elec!"}),
            dim=["RES elec!"],
        )
        + max_potential_phs_twe() / twe_per_twh()
        + max_pe_potential_biogas_for_elec() / ej_per_twh()
    )


@component.add(
    name="efficiency biogas for heat",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fes_heatcom_from_biogas_ej": 1, "pes_tot_biogas_for_heatcom": 1},
)
def efficiency_biogas_for_heat():
    """
    Efficiency of biogas for heat (from heat plants and CHP).
    """
    return fes_heatcom_from_biogas_ej() / pes_tot_biogas_for_heatcom()


@component.add(
    name="max biogas for TFC",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_pe_biogas_ej": 1, "share_pes_biogas_tfc": 1},
)
def max_biogas_for_tfc():
    """
    Maximum potential of biogas used directly as total final consumption.
    """
    return max_pe_biogas_ej() * share_pes_biogas_tfc()


@component.add(
    name="max PE potential biogas for elec",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_pe_biogas_ej": 1, "share_pes_biogas_for_elec": 1},
)
def max_pe_potential_biogas_for_elec():
    """
    Maximum potential (primary energy) of biogas for electricity.
    """
    return max_pe_biogas_ej() * share_pes_biogas_for_elec()


@component.add(
    name="remaining potential RES elec",
    units="Dmnl",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_potential_res_elec_twh": 3, "real_generation_res_elec_twh": 2},
)
def remaining_potential_res_elec():
    """
    Remaining potential of renewables for electricity by technology.
    """
    return if_then_else(
        max_potential_res_elec_twh() > real_generation_res_elec_twh(),
        lambda: (max_potential_res_elec_twh() - real_generation_res_elec_twh())
        / max_potential_res_elec_twh(),
        lambda: xr.DataArray(
            0,
            {
                "RES elec": _subscript_dict["RES elec"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["RES elec", "scenarios"],
        ),
    )


@component.add(
    name="max FE potential biogas for heat",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_pe_biogas_ej": 1,
        "share_pes_biogas_for_heat": 1,
        "efficiency_biogas_for_heat": 1,
    },
)
def max_fe_potential_biogas_for_heat():
    """
    Potential (final energy) of biogas for heat.
    """
    return (
        max_pe_biogas_ej() * share_pes_biogas_for_heat() * efficiency_biogas_for_heat()
    )


@component.add(
    name="TFEC per capita before heat dem corr",
    units="GJ/person",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_tfec_before_heat_dem_corr": 1, "gj_per_ej": 1, "population": 1},
)
def tfec_per_capita_before_heat_dem_corr():
    return zidz(real_tfec_before_heat_dem_corr() * gj_per_ej(), population())


@component.add(
    name="share total net energy vs TPES",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "net_tfec": 1,
        "tpes_ej": 1,
        "total_real_nonenergy_use_consumption_ej": 1,
    },
)
def share_total_net_energy_vs_tpes():
    """
    Share of total net energy vs total primary energy supply (without accounting for non-energy uses).
    """
    return zidz(net_tfec(), tpes_ej() - total_real_nonenergy_use_consumption_ej())


@component.add(
    name="Net TFEC",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_tfec": 1, "feist_system": 1},
)
def net_tfec():
    """
    Net total final energy consumption (final energy minus energy invested to produce energy).
    """
    return real_tfec() - feist_system()


@component.add(
    name="Real TFEC before heat dem corr",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_fec_before_heat_dem_corr": 1},
)
def real_tfec_before_heat_dem_corr():
    """
    Real total final energy consumption (not including non-energy uses) before heat demand correction
    """
    return sum(
        real_fec_before_heat_dem_corr().rename({"final sources1": "final sources!"}),
        dim=["final sources!"],
    )


@component.add(
    name="Dynamic threshold 'high development'",
    units="GJ/(Year*person)",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "threshold_fec_high_development": 1,
        "cumulative_tfec_intensity_change_from_2009": 1,
        "share_tfec_before_heat_dem_corr_vs_real_tfec": 1,
    },
)
def dynamic_threshold_high_development():
    return (
        threshold_fec_high_development()
        * (1 + cumulative_tfec_intensity_change_from_2009())
        * share_tfec_before_heat_dem_corr_vs_real_tfec()
    )


@component.add(
    name="Dynamic low range FEC good standard of living",
    units="GJ/(Year*person)",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "low_range_fec_good_standard_of_living": 1,
        "cumulative_tfec_intensity_change_from_2009": 1,
        "share_tfec_before_heat_dem_corr_vs_real_tfec": 1,
    },
)
def dynamic_low_range_fec_good_standard_of_living():
    return (
        low_range_fec_good_standard_of_living()
        * (1 + cumulative_tfec_intensity_change_from_2009())
        * share_tfec_before_heat_dem_corr_vs_real_tfec()
    )


@component.add(
    name="Dynamic high range FEC good standard of living",
    units="GJ/(Year*person)",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "high_range_fec_good_standard_of_living": 1,
        "cumulative_tfec_intensity_change_from_2009": 1,
        "share_tfec_before_heat_dem_corr_vs_real_tfec": 1,
    },
)
def dynamic_high_range_fec_good_standard_of_living():
    return (
        high_range_fec_good_standard_of_living()
        * (1 + cumulative_tfec_intensity_change_from_2009())
        * share_tfec_before_heat_dem_corr_vs_real_tfec()
    )


@component.add(
    name="Real FEC before heat dem corr",
    units="EJ",
    subscripts=["scenarios", "final sources1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_fe_consumption_by_fuel": 5,
        "ratio_fed_for_heatnc_vs_fed_for_heatcom": 1,
        "share_feh_over_fed_by_final_fuel": 3,
    },
)
def real_fec_before_heat_dem_corr():
    """
    Real energy consumption by final fuel before heat demand correction.
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "final sources1": _subscript_dict["final sources1"],
        },
        ["scenarios", "final sources1"],
    )
    value.loc[:, ["electricity"]] = (
        real_fe_consumption_by_fuel()
        .loc[:, "electricity"]
        .reset_coords(drop=True)
        .expand_dims({"final sources1": ["electricity"]}, 1)
        .values
    )
    value.loc[:, ["heat"]] = (
        (
            real_fe_consumption_by_fuel().loc[:, "heat"].reset_coords(drop=True)
            / (1 + ratio_fed_for_heatnc_vs_fed_for_heatcom())
        )
        .expand_dims({"final sources1": ["heat"]}, 1)
        .values
    )
    value.loc[:, ["liquids"]] = (
        (
            real_fe_consumption_by_fuel().loc[:, "liquids"].reset_coords(drop=True)
            / (
                1
                - share_feh_over_fed_by_final_fuel()
                .loc["liquids", :]
                .reset_coords(drop=True)
            )
        )
        .expand_dims({"final sources1": ["liquids"]}, 1)
        .values
    )
    value.loc[:, ["gases"]] = (
        (
            real_fe_consumption_by_fuel().loc[:, "gases"].reset_coords(drop=True)
            / (
                1
                - share_feh_over_fed_by_final_fuel()
                .loc["gases", :]
                .reset_coords(drop=True)
            )
        )
        .expand_dims({"final sources1": ["gases"]}, 1)
        .values
    )
    value.loc[:, ["solids"]] = (
        (
            real_fe_consumption_by_fuel().loc[:, "solids"].reset_coords(drop=True)
            / (
                1
                - share_feh_over_fed_by_final_fuel()
                .loc["solids", :]
                .reset_coords(drop=True)
            )
        )
        .expand_dims({"final sources1": ["solids"]}, 1)
        .values
    )
    return value


@component.add(
    name="Net TFEC per capita",
    units="GJ/person",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"net_tfec": 1, "gj_per_ej": 1, "population": 1},
)
def net_tfec_per_capita():
    """
    Net total final energy consumption per capita.
    """
    return zidz(net_tfec() * gj_per_ej(), population())


@component.add(
    name="share TFEC before heat dem corr vs real TFEC",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_tfec": 1, "real_tfec_before_heat_dem_corr": 1},
)
def share_tfec_before_heat_dem_corr_vs_real_tfec():
    """
    Share of total final energy consumption before heat demand correction vs. real TFEC as estimated in MEDEAS correcting for heat demand for non-commercial sectors.
    """
    return real_tfec() / real_tfec_before_heat_dem_corr()


@component.add(
    name="share TFED before heat dem corr vs real TFEC",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"required_tfed": 1, "required_tfed_before_heat_dem_corr": 1},
)
def share_tfed_before_heat_dem_corr_vs_real_tfec():
    """
    Share of total final energy demand before heat demand correction vs. real TFEC as estimated in MEDEAS correcting for heat demand for non-commercial sectors.
    """
    return required_tfed() / required_tfed_before_heat_dem_corr()


@component.add(
    name="BioE potential NPP marginal lands",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_marginal_lands_mha": 1,
        "land_productivity_biofuels_marg_ej_mha": 1,
        "conv_efficiency_from_npp_to_biofuels": 1,
    },
)
def bioe_potential_npp_marginal_lands():
    """
    Potential in marginal lands, i.e. witout competition with current uses. (Field et al., 2008) find that 27 EJ of NPP can be extracted from 386 Mha of marginal lands. We assume that all the production from marginal lands is used for producing liquids.
    """
    return (
        potential_marginal_lands_mha()
        * land_productivity_biofuels_marg_ej_mha()
        / conv_efficiency_from_npp_to_biofuels()
    )


@component.add(
    name='"CO2 soil&LUCF emissions"',
    units="GtCO2/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"co2_lulcf": 1},
)
def co2_soillucf_emissions():
    """
    CO2 emissions associated to soil managemente and land-use change uses and forestry.
    """
    return xr.DataArray(
        co2_lulcf(), {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    )


@component.add(
    name="CO2 LULCF",
    units="GtCO2",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"past_trends_co2_lucf": 1},
)
def co2_lulcf():
    """
    CO2 emissions from Land-Use Change and Forestry.
    """
    return past_trends_co2_lucf()


@component.add(
    name="Max PEavail potential biofuels marginal lands",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "bioe_potential_npp_marginal_lands": 1,
        "conv_efficiency_from_npp_to_biofuels": 1,
    },
)
def max_peavail_potential_biofuels_marginal_lands():
    """
    Annual biofuels potential (primary energy) available from marginal lands
    """
    return bioe_potential_npp_marginal_lands() * conv_efficiency_from_npp_to_biofuels()


@component.add(
    name="Potential marginal lands MHa",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_potential_marginal_lands_mha"},
)
def potential_marginal_lands_mha():
    """
    Global marginal lands as estimated by Field et al (2008).
    """
    return _ext_constant_potential_marginal_lands_mha()


_ext_constant_potential_marginal_lands_mha = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C43",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_potential_marginal_lands_mha",
)

_ext_constant_potential_marginal_lands_mha.add(
    "inputs_EU.xlsx", "SCEN1", "C43", {"scenarios": ["SCEN1"]}
)

_ext_constant_potential_marginal_lands_mha.add(
    "inputs_EU.xlsx", "SCEN2", "C43", {"scenarios": ["SCEN2"]}
)

_ext_constant_potential_marginal_lands_mha.add(
    "inputs_EU.xlsx", "SCEN3", "C43", {"scenarios": ["SCEN3"]}
)

_ext_constant_potential_marginal_lands_mha.add(
    "inputs_EU.xlsx", "SCEN4", "C43", {"scenarios": ["SCEN4"]}
)

_ext_constant_potential_marginal_lands_mha.add(
    "inputs_EU.xlsx", "User defined", "C43", {"scenarios": ["User defined"]}
)


@component.add(
    name="Land shifted to biofuels 3gen",
    units="MHa/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "start_year_3gen_cellulosic_biofuels": 2,
        "p_biofuels_3gen_land_compet": 1,
        "land_compet_biofuels_3gen_mha": 1,
        "land_compet_biofuels_2gen_mha": 1,
        "annual_shift_from_2gen_to_3gen": 1,
        "biofuels_3gen_land_compet_available": 2,
        "land_compet_2gen_vs_total_land_compet": 2,
    },
)
def land_shifted_to_biofuels_3gen():
    """
    New land dedicated to biofuels 3rd generation in land competing with other uses as a shift of surface previously dedicated to biofuels from the 2nd generation. We assume that no new land starts directly to produce biofuels 3rd generation biofuels. IF THEN ELSE(Time<start year 3gen[scenarios],0, IF THEN ELSE(check liquids[scenarios]<0, "constrain liquids exogenous growth?"[scenarios]*Land compet biofuels 3gen Mha[scenarios], IF THEN ELSE(Time<(start year 3gen[scenarios]+5), Annual shift from 2gen to 3gen[scenarios]*Land compet biofuels 2gen Mha[scenarios]*Biofuels 3gen land compet available[scenarios]*land compet 2gen vs total land compet[scenarios], P biofuels 3gen[scenarios]*Land compet biofuels 3gen Mha[scenarios]*Biofuels 3gen land compet available[scenarios]*land compet 2gen vs total land compet[scenarios])))
    """
    return if_then_else(
        time() < start_year_3gen_cellulosic_biofuels(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            time() < start_year_3gen_cellulosic_biofuels() + 5,
            lambda: annual_shift_from_2gen_to_3gen()
            * land_compet_biofuels_2gen_mha()
            * biofuels_3gen_land_compet_available()
            * land_compet_2gen_vs_total_land_compet(),
            lambda: p_biofuels_3gen_land_compet()
            * land_compet_biofuels_3gen_mha()
            * biofuels_3gen_land_compet_available()
            * land_compet_2gen_vs_total_land_compet(),
        ),
    )


@component.add(
    name="adapt growth biogas",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 3, "past_biogas_growth": 3, "time_dmnl": 1, "p_biogas": 2},
)
def adapt_growth_biogas():
    """
    Annual growth per for biogas. Modeling of a soft transition from current historic annual growth to reach the policy-objective 5 years later.
    """
    return if_then_else(
        time() < 2015,
        lambda: xr.DataArray(
            past_biogas_growth(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            time() < 2020,
            lambda: past_biogas_growth()
            + (p_biogas() - past_biogas_growth()) * (time_dmnl(time()) - 2015) / 5,
            lambda: p_biogas(),
        ),
    )


@component.add(
    name="available max PE solid bioE for heat EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_pe_solid_bioe_potential_heatelec_ej": 1,
        "pe_bioe_for_elec_generation_ej": 1,
    },
)
def available_max_pe_solid_bioe_for_heat_ej():
    """
    Maximum available (primary energy) solid bioenergy for heat.
    """
    return np.maximum(
        0,
        total_pe_solid_bioe_potential_heatelec_ej() - pe_bioe_for_elec_generation_ej(),
    )


@component.add(
    name='"Total PE solid bioE potential heat+elec EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_pe_solid_bioe_potential_ej": 1,
        "modern_solids_bioe_demand_households": 1,
    },
)
def total_pe_solid_bioe_potential_heatelec_ej():
    return np.maximum(
        total_pe_solid_bioe_potential_ej() - modern_solids_bioe_demand_households(), 0
    )


@component.add(
    name="FES total biofuels production EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "peavail_tot_biofuels_land_compet_ej": 1,
        "peavail_biofuels_land_marg_ej": 1,
        "peavail_cellulosic_biofuel_ej": 1,
    },
)
def fes_total_biofuels_production_ej():
    """
    Final energy supply total biofuels liquids production. Equivalent to "FES total biofuels production EJ 2" but obtained disaggregately.
    """
    return (
        peavail_tot_biofuels_land_compet_ej()
        + peavail_biofuels_land_marg_ej()
        + peavail_cellulosic_biofuel_ej()
    )


@component.add(
    name="remaining potential biofuels land compet",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_peavail_potential_biofuels_land_compet": 3,
        "peavail_tot_biofuels_land_compet_ej": 2,
    },
)
def remaining_potential_biofuels_land_compet():
    """
    Remaining potential available as a fraction of unity.
    """
    return if_then_else(
        max_peavail_potential_biofuels_land_compet()
        > peavail_tot_biofuels_land_compet_ej(),
        lambda: (
            max_peavail_potential_biofuels_land_compet()
            - peavail_tot_biofuels_land_compet_ej()
        )
        / max_peavail_potential_biofuels_land_compet(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="remaining potential biofuels land marg",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_peavail_potential_biofuels_marginal_lands": 3,
        "peavail_biofuels_land_marg_ej": 2,
    },
)
def remaining_potential_biofuels_land_marg():
    """
    Remaining potential available as a fraction of unity.
    """
    return if_then_else(
        max_peavail_potential_biofuels_marginal_lands()
        > peavail_biofuels_land_marg_ej(),
        lambda: (
            max_peavail_potential_biofuels_marginal_lands()
            - peavail_biofuels_land_marg_ej()
        )
        / max_peavail_potential_biofuels_marginal_lands(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="PEavail tot biofuels land compet EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "peavail_biofuels_2gen_land_compet_ej": 1,
        "peavail_biofuels_3gen_land_compet_ej": 1,
    },
)
def peavail_tot_biofuels_land_compet_ej():
    """
    Primary energy available of biofuels from dedicated crops -in land competition- (2nd and 3rd generation).
    """
    return (
        peavail_biofuels_2gen_land_compet_ej() + peavail_biofuels_3gen_land_compet_ej()
    )


@component.add(
    name="P biofuels marg lands",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_biofuels_marg_lands"},
)
def p_biofuels_marg_lands():
    """
    Annual growth in energy output demand depending on the policy of the scenario.
    """
    return _ext_constant_p_biofuels_marg_lands()


_ext_constant_p_biofuels_marg_lands = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F46",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_biofuels_marg_lands",
)

_ext_constant_p_biofuels_marg_lands.add(
    "inputs_EU.xlsx", "SCEN1", "F46", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_biofuels_marg_lands.add(
    "inputs_EU.xlsx", "SCEN2", "F46", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_biofuels_marg_lands.add(
    "inputs_EU.xlsx", "SCEN3", "F46", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_biofuels_marg_lands.add(
    "inputs_EU.xlsx", "SCEN4", "F46", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_biofuels_marg_lands.add(
    "inputs_EU.xlsx", "User defined", "F46", {"scenarios": ["User defined"]}
)


@component.add(
    name="remaining potential biofuels",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_peavail_biofuels_potential": 3,
        "fes_total_biofuels_production_ej": 2,
    },
)
def remaining_potential_biofuels():
    """
    Remaining potential available as a fraction of unity.
    """
    return if_then_else(
        max_peavail_biofuels_potential() > fes_total_biofuels_production_ej(),
        lambda: (max_peavail_biofuels_potential() - fes_total_biofuels_production_ej())
        / max_peavail_biofuels_potential(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="FE demand oil Elec plants TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_oil_for_elec": 1, "demand_elec_plants_fossil_fuels_twh": 1},
)
def fe_demand_oil_elec_plants_twh():
    """
    Final energy demand of oil to produce electricity.
    """
    return share_oil_for_elec() * demand_elec_plants_fossil_fuels_twh()


@component.add(
    name="PE demand oil Elec plants EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_demand_oil_elec_plants_twh": 1,
        "efficiency_liquids_for_electricity": 1,
        "ej_per_twh": 1,
    },
)
def pe_demand_oil_elec_plants_ej():
    """
    Primary energy demand of oil (EJ) for electric generation (including generation losses).
    """
    return (
        fe_demand_oil_elec_plants_twh() / efficiency_liquids_for_electricity()
    ) * ej_per_twh()


@component.add(
    name='"adapt growth RES for heat-com"',
    units="1/Year",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 4,
        "past_res_growth_for_heatcom": 4,
        "time_dmnl": 1,
        "target_year_p_growth_res_heat": 2,
        "start_year_p_growth_res_heat": 3,
        "p_res_for_heat": 2,
    },
)
def adapt_growth_res_for_heatcom():
    """
    Modeling of a soft transition from current historic annual growth to reach the policy-objective in the target year.
    """
    return if_then_else(
        time() < 2014,
        lambda: past_res_growth_for_heatcom().expand_dims(
            {"scenarios": _subscript_dict["scenarios"]}, 1
        ),
        lambda: if_then_else(
            (time() < start_year_p_growth_res_heat()).expand_dims(
                {"RES heat": _subscript_dict["RES heat"]}, 1
            ),
            lambda: past_res_growth_for_heatcom().expand_dims(
                {"scenarios": _subscript_dict["scenarios"]}, 0
            ),
            lambda: if_then_else(
                (time() < target_year_p_growth_res_heat()).expand_dims(
                    {"RES heat": _subscript_dict["RES heat"]}, 1
                ),
                lambda: (
                    past_res_growth_for_heatcom()
                    + (p_res_for_heat() - past_res_growth_for_heatcom())
                    * (time_dmnl(time()) - start_year_p_growth_res_heat())
                    / (target_year_p_growth_res_heat() - start_year_p_growth_res_heat())
                ).transpose("scenarios", "RES heat"),
                lambda: p_res_for_heat().transpose("scenarios", "RES heat"),
            ),
        ).transpose("RES heat", "scenarios"),
    )


@component.add(
    name='"adapt growth RES for heat-nc"',
    units="1/Year",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 4,
        "past_res_growth_for_heatnc": 4,
        "time_dmnl": 1,
        "target_year_p_growth_res_heat": 2,
        "start_year_p_growth_res_heat": 3,
        "p_res_for_heat": 2,
    },
)
def adapt_growth_res_for_heatnc():
    """
    Modeling of a soft transition from current historic annual growth to reach the policy-objective in the target yeat.
    """
    return if_then_else(
        time() < 2014,
        lambda: past_res_growth_for_heatnc().expand_dims(
            {"scenarios": _subscript_dict["scenarios"]}, 1
        ),
        lambda: if_then_else(
            (time() < start_year_p_growth_res_heat()).expand_dims(
                {"RES heat": _subscript_dict["RES heat"]}, 1
            ),
            lambda: past_res_growth_for_heatnc().expand_dims(
                {"scenarios": _subscript_dict["scenarios"]}, 0
            ),
            lambda: if_then_else(
                (time() < target_year_p_growth_res_heat()).expand_dims(
                    {"RES heat": _subscript_dict["RES heat"]}, 1
                ),
                lambda: (
                    past_res_growth_for_heatnc()
                    + (p_res_for_heat() - past_res_growth_for_heatnc())
                    * (time_dmnl(time()) - start_year_p_growth_res_heat())
                    / (target_year_p_growth_res_heat() - start_year_p_growth_res_heat())
                ).transpose("scenarios", "RES heat"),
                lambda: p_res_for_heat().transpose("scenarios", "RES heat"),
            ),
        ).transpose("RES heat", "scenarios"),
    )


@component.add(
    name="Start year P growth RES heat",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_start_year_p_growth_res_heat"},
)
def start_year_p_growth_res_heat():
    """
    Start year of the policy growth of RES technologies for generating heat.
    """
    return _ext_constant_start_year_p_growth_res_heat()


_ext_constant_start_year_p_growth_res_heat = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C58",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_year_p_growth_res_heat",
)

_ext_constant_start_year_p_growth_res_heat.add(
    "inputs_EU.xlsx", "SCEN1", "C58", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_year_p_growth_res_heat.add(
    "inputs_EU.xlsx", "SCEN2", "C58", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_year_p_growth_res_heat.add(
    "inputs_EU.xlsx", "SCEN3", "C58", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_year_p_growth_res_heat.add(
    "inputs_EU.xlsx", "SCEN4", "C58", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_year_p_growth_res_heat.add(
    "inputs_EU.xlsx", "User defined", "C58", {"scenarios": ["User defined"]}
)


@component.add(
    name="EROI FC system from 2015",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"activate_eroi_fc_system_feedback": 2, "eroi_fc_system_from_2015_1": 1},
)
def eroi_fc_system_from_2015():
    """
    EROI of the system feedback from the year 2015: variation in final energy demand to compensate the variation in the EROI in relation to the base year 2015.
    """
    return if_then_else(
        activate_eroi_fc_system_feedback() == 0,
        lambda: xr.DataArray(
            1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            activate_eroi_fc_system_feedback() == 1,
            lambda: eroi_fc_system_from_2015_1(),
            lambda: xr.DataArray(
                1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        ),
    )


@component.add(
    name="adapt growth RES elec",
    units="1/Year",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 32,
        "past_res_elec_capacity_growth": 32,
        "time_dmnl": 8,
        "target_year_p_growth_res_elec": 16,
        "start_year_p_growth_res_elec": 24,
        "p_res_elec_growth": 16,
    },
)
def adapt_growth_res_elec():
    """
    Annual growth per RES elec technology. Modeling of a soft transition from current historic annual growth to reach the policy-objective in the target year.
    """
    value = xr.DataArray(
        np.nan,
        {
            "RES elec": _subscript_dict["RES elec"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES elec", "scenarios"],
    )
    value.loc[["hydro"], :] = (
        if_then_else(
            time() < 2015,
            lambda: xr.DataArray(
                float(past_res_elec_capacity_growth().loc["hydro"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                time() < start_year_p_growth_res_elec(),
                lambda: xr.DataArray(
                    float(past_res_elec_capacity_growth().loc["hydro"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    time() < target_year_p_growth_res_elec(),
                    lambda: float(past_res_elec_capacity_growth().loc["hydro"])
                    + (
                        p_res_elec_growth().loc["hydro", :].reset_coords(drop=True)
                        - float(past_res_elec_capacity_growth().loc["hydro"])
                    )
                    * (time_dmnl(time()) - start_year_p_growth_res_elec())
                    / (
                        target_year_p_growth_res_elec() - start_year_p_growth_res_elec()
                    ),
                    lambda: p_res_elec_growth().loc["hydro", :].reset_coords(drop=True),
                ),
            ),
        )
        .expand_dims({"RES elec": ["hydro"]}, 0)
        .values
    )
    value.loc[['"geot-elec"'], :] = (
        if_then_else(
            time() < 2013,
            lambda: xr.DataArray(
                float(past_res_elec_capacity_growth().loc['"geot-elec"']),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                time() < start_year_p_growth_res_elec(),
                lambda: xr.DataArray(
                    float(past_res_elec_capacity_growth().loc['"geot-elec"']),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    time() < target_year_p_growth_res_elec(),
                    lambda: float(past_res_elec_capacity_growth().loc['"geot-elec"'])
                    + (
                        p_res_elec_growth()
                        .loc['"geot-elec"', :]
                        .reset_coords(drop=True)
                        - float(past_res_elec_capacity_growth().loc['"geot-elec"'])
                    )
                    * (time_dmnl(time()) - start_year_p_growth_res_elec())
                    / (
                        target_year_p_growth_res_elec() - start_year_p_growth_res_elec()
                    ),
                    lambda: p_res_elec_growth()
                    .loc['"geot-elec"', :]
                    .reset_coords(drop=True),
                ),
            ),
        )
        .expand_dims({"RES elec": ['"geot-elec"']}, 0)
        .values
    )
    value.loc[['"solid bioE-elec"'], :] = (
        if_then_else(
            time() < 2013,
            lambda: xr.DataArray(
                float(past_res_elec_capacity_growth().loc['"solid bioE-elec"']),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                time() < start_year_p_growth_res_elec(),
                lambda: xr.DataArray(
                    float(past_res_elec_capacity_growth().loc['"solid bioE-elec"']),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    time() < target_year_p_growth_res_elec(),
                    lambda: float(
                        past_res_elec_capacity_growth().loc['"solid bioE-elec"']
                    )
                    + (
                        p_res_elec_growth()
                        .loc['"solid bioE-elec"', :]
                        .reset_coords(drop=True)
                        - float(
                            past_res_elec_capacity_growth().loc['"solid bioE-elec"']
                        )
                    )
                    * (time_dmnl(time()) - start_year_p_growth_res_elec())
                    / (
                        target_year_p_growth_res_elec() - start_year_p_growth_res_elec()
                    ),
                    lambda: p_res_elec_growth()
                    .loc['"solid bioE-elec"', :]
                    .reset_coords(drop=True),
                ),
            ),
        )
        .expand_dims({"RES elec": ['"solid bioE-elec"']}, 0)
        .values
    )
    value.loc[["oceanic"], :] = (
        if_then_else(
            time() < 2014,
            lambda: xr.DataArray(
                float(past_res_elec_capacity_growth().loc["oceanic"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                time() < start_year_p_growth_res_elec(),
                lambda: xr.DataArray(
                    float(past_res_elec_capacity_growth().loc["oceanic"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    time() < target_year_p_growth_res_elec(),
                    lambda: float(past_res_elec_capacity_growth().loc["oceanic"])
                    + (
                        p_res_elec_growth().loc["oceanic", :].reset_coords(drop=True)
                        - float(past_res_elec_capacity_growth().loc["oceanic"])
                    )
                    * (time_dmnl(time()) - start_year_p_growth_res_elec())
                    / (
                        target_year_p_growth_res_elec() - start_year_p_growth_res_elec()
                    ),
                    lambda: p_res_elec_growth()
                    .loc["oceanic", :]
                    .reset_coords(drop=True),
                ),
            ),
        )
        .expand_dims({"RES elec": ["oceanic"]}, 0)
        .values
    )
    value.loc[["wind onshore"], :] = (
        if_then_else(
            time() < 2015,
            lambda: xr.DataArray(
                float(past_res_elec_capacity_growth().loc["wind onshore"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                time() < start_year_p_growth_res_elec(),
                lambda: xr.DataArray(
                    float(past_res_elec_capacity_growth().loc["wind onshore"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    time() < target_year_p_growth_res_elec(),
                    lambda: float(past_res_elec_capacity_growth().loc["wind onshore"])
                    + (
                        p_res_elec_growth()
                        .loc["wind onshore", :]
                        .reset_coords(drop=True)
                        - float(past_res_elec_capacity_growth().loc["wind onshore"])
                    )
                    * (time_dmnl(time()) - start_year_p_growth_res_elec())
                    / (
                        target_year_p_growth_res_elec() - start_year_p_growth_res_elec()
                    ),
                    lambda: p_res_elec_growth()
                    .loc["wind onshore", :]
                    .reset_coords(drop=True),
                ),
            ),
        )
        .expand_dims({"RES elec": ["wind onshore"]}, 0)
        .values
    )
    value.loc[["wind offshore"], :] = (
        if_then_else(
            time() < 2014,
            lambda: xr.DataArray(
                float(past_res_elec_capacity_growth().loc["wind offshore"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                time() < start_year_p_growth_res_elec(),
                lambda: xr.DataArray(
                    float(past_res_elec_capacity_growth().loc["wind offshore"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    time() < target_year_p_growth_res_elec(),
                    lambda: float(past_res_elec_capacity_growth().loc["wind offshore"])
                    + (
                        p_res_elec_growth()
                        .loc["wind offshore", :]
                        .reset_coords(drop=True)
                        - float(past_res_elec_capacity_growth().loc["wind offshore"])
                    )
                    * (time_dmnl(time()) - start_year_p_growth_res_elec())
                    / (
                        target_year_p_growth_res_elec() - start_year_p_growth_res_elec()
                    ),
                    lambda: p_res_elec_growth()
                    .loc["wind offshore", :]
                    .reset_coords(drop=True),
                ),
            ),
        )
        .expand_dims({"RES elec": ["wind offshore"]}, 0)
        .values
    )
    value.loc[["solar PV"], :] = (
        if_then_else(
            time() < 2014,
            lambda: xr.DataArray(
                float(past_res_elec_capacity_growth().loc["solar PV"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                time() < start_year_p_growth_res_elec(),
                lambda: xr.DataArray(
                    float(past_res_elec_capacity_growth().loc["solar PV"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    time() < target_year_p_growth_res_elec(),
                    lambda: float(past_res_elec_capacity_growth().loc["solar PV"])
                    + (
                        p_res_elec_growth().loc["solar PV", :].reset_coords(drop=True)
                        - float(past_res_elec_capacity_growth().loc["solar PV"])
                    )
                    * (time_dmnl(time()) - start_year_p_growth_res_elec())
                    / (
                        target_year_p_growth_res_elec() - start_year_p_growth_res_elec()
                    ),
                    lambda: p_res_elec_growth()
                    .loc["solar PV", :]
                    .reset_coords(drop=True),
                ),
            ),
        )
        .expand_dims({"RES elec": ["solar PV"]}, 0)
        .values
    )
    value.loc[["CSP"], :] = (
        if_then_else(
            time() < 2014,
            lambda: xr.DataArray(
                float(past_res_elec_capacity_growth().loc["CSP"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                time() < start_year_p_growth_res_elec(),
                lambda: xr.DataArray(
                    float(past_res_elec_capacity_growth().loc["CSP"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    time() < target_year_p_growth_res_elec(),
                    lambda: float(past_res_elec_capacity_growth().loc["CSP"])
                    + (
                        p_res_elec_growth().loc["CSP", :].reset_coords(drop=True)
                        - float(past_res_elec_capacity_growth().loc["CSP"])
                    )
                    * (time_dmnl(time()) - start_year_p_growth_res_elec())
                    / (
                        target_year_p_growth_res_elec() - start_year_p_growth_res_elec()
                    ),
                    lambda: p_res_elec_growth().loc["CSP", :].reset_coords(drop=True),
                ),
            ),
        )
        .expand_dims({"RES elec": ["CSP"]}, 0)
        .values
    )
    return value


@component.add(
    name="adapt growth PHS",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 4,
        "past_phs_capacity_growth": 4,
        "abundance_storage": 1,
        "target_year_p_growth_res_elec": 2,
        "p_phs_growth": 2,
        "time_dmnl": 1,
        "start_year_p_growth_res_elec": 3,
    },
)
def adapt_growth_phs():
    """
    Annual growth per RES elec technology. Modeling of a soft transition from current historic annual growth to reach the policy-objective in the target year.
    """
    return if_then_else(
        time() < 2015,
        lambda: xr.DataArray(
            past_phs_capacity_growth(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            time() < start_year_p_growth_res_elec(),
            lambda: xr.DataArray(
                past_phs_capacity_growth(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                time() < target_year_p_growth_res_elec(),
                lambda: past_phs_capacity_growth()
                + (p_phs_growth() - past_phs_capacity_growth())
                * (time_dmnl(time()) - start_year_p_growth_res_elec())
                / (target_year_p_growth_res_elec() - start_year_p_growth_res_elec()),
                lambda: p_phs_growth(),
            )
            * (1 + abundance_storage()),
        ),
    )


@component.add(
    name="Variation energy demand due to EROI FC system",
    units="percent",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"eroi_fc_system_from_2015": 1},
)
def variation_energy_demand_due_to_eroi_fc_system():
    """
    Variation (percent) in final energy demand to compensate for the variation in the EROI of the system in relation to the base year 2015.
    """
    return (eroi_fc_system_from_2015() - 1) * 100


@component.add(
    name="Start year P growth RES elec",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_start_year_p_growth_res_elec"},
)
def start_year_p_growth_res_elec():
    """
    Start year of the policy growth of RES technologies for generating electricity.
    """
    return _ext_constant_start_year_p_growth_res_elec()


_ext_constant_start_year_p_growth_res_elec = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F32",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_year_p_growth_res_elec",
)

_ext_constant_start_year_p_growth_res_elec.add(
    "inputs_EU.xlsx", "SCEN1", "F32", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_year_p_growth_res_elec.add(
    "inputs_EU.xlsx", "SCEN2", "F32", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_year_p_growth_res_elec.add(
    "inputs_EU.xlsx", "SCEN3", "F32", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_year_p_growth_res_elec.add(
    "inputs_EU.xlsx", "SCEN4", "F32", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_year_p_growth_res_elec.add(
    "inputs_EU.xlsx", "User defined", "F32", {"scenarios": ["User defined"]}
)


@component.add(
    name="Land productivity biofuels marg EJ MHa",
    units="EJ/MHa",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_land_productivity_biofuels_marg_ej_mha"},
)
def land_productivity_biofuels_marg_ej_mha():
    """
    Energy output per area of biofuels in marginal lands (final energy). Source: Field et al (2008): 27 EJ (NPP) at 15% efficiency in 386 MHa.
    """
    return _ext_constant_land_productivity_biofuels_marg_ej_mha()


_ext_constant_land_productivity_biofuels_marg_ej_mha = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C63",
    {},
    _root,
    {},
    "_ext_constant_land_productivity_biofuels_marg_ej_mha",
)


@component.add(
    name="ratio land productivity 2gen vs marg",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "land_productivity_biofuels_2gen_ej_mha": 1,
        "land_productivity_biofuels_marg_ej_mha": 1,
    },
)
def ratio_land_productivity_2gen_vs_marg():
    """
    Ratio between the land productivity of biofuels 2gen in competition land vs marginal lands.
    """
    return (
        land_productivity_biofuels_2gen_ej_mha()
        / land_productivity_biofuels_marg_ej_mha()
    )


@component.add(
    name='"b lineal regr phase-out oil for elec"',
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "share_in_target_year_oil_for_elec": 1,
        "a_lineal_regr_phaseout_oil_for_elec": 1,
        "target_year_policy_phaseout_oil_for_elec": 1,
    },
)
def b_lineal_regr_phaseout_oil_for_elec():
    """
    b parameter of lineal regression "y=a*TIME+b" where y corresponds to the evolution of the share of oil for electricity over time.
    """
    return (
        share_in_target_year_oil_for_elec()
        - a_lineal_regr_phaseout_oil_for_elec()
        * target_year_policy_phaseout_oil_for_elec()
    )


@component.add(
    name="share in target year oil for elec",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_in_target_year_oil_for_elec"},
)
def share_in_target_year_oil_for_elec():
    """
    Target year for the policy phase-out oil for electricity.
    """
    return _ext_constant_share_in_target_year_oil_for_elec()


_ext_constant_share_in_target_year_oil_for_elec = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "I167",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_share_in_target_year_oil_for_elec",
)

_ext_constant_share_in_target_year_oil_for_elec.add(
    "inputs_EU.xlsx", "BAU", "I167", {"scenarios": ["SCEN1"]}
)

_ext_constant_share_in_target_year_oil_for_elec.add(
    "inputs_EU.xlsx", "SCEN2", "I167", {"scenarios": ["SCEN2"]}
)

_ext_constant_share_in_target_year_oil_for_elec.add(
    "inputs_EU.xlsx", "SCEN3", "I167", {"scenarios": ["SCEN3"]}
)

_ext_constant_share_in_target_year_oil_for_elec.add(
    "inputs_EU.xlsx", "SCEN4", "I167", {"scenarios": ["SCEN4"]}
)

_ext_constant_share_in_target_year_oil_for_elec.add(
    "inputs_EU.xlsx", "User defined", "I167", {"scenarios": ["User defined"]}
)


@component.add(
    name="share in target year oil for heat",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_in_target_year_oil_for_heat"},
)
def share_in_target_year_oil_for_heat():
    """
    Target year for the policy phase-out oil for heat.
    """
    return _ext_constant_share_in_target_year_oil_for_heat()


_ext_constant_share_in_target_year_oil_for_heat = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "I168",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_share_in_target_year_oil_for_heat",
)

_ext_constant_share_in_target_year_oil_for_heat.add(
    "inputs_EU.xlsx", "BAU", "I168", {"scenarios": ["SCEN1"]}
)

_ext_constant_share_in_target_year_oil_for_heat.add(
    "inputs_EU.xlsx", "SCEN2", "I168", {"scenarios": ["SCEN2"]}
)

_ext_constant_share_in_target_year_oil_for_heat.add(
    "inputs_EU.xlsx", "SCEN3", "I168", {"scenarios": ["SCEN3"]}
)

_ext_constant_share_in_target_year_oil_for_heat.add(
    "inputs_EU.xlsx", "SCEN4", "I168", {"scenarios": ["SCEN4"]}
)

_ext_constant_share_in_target_year_oil_for_heat.add(
    "inputs_EU.xlsx", "User defined", "I168", {"scenarios": ["User defined"]}
)


@component.add(
    name='"a lineal regr phase-out oil for elec"',
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "share_in_target_year_oil_for_elec": 1,
        "hist_share_oilff_elec": 1,
        "start_year_policy_phaseout_oil_for_elec": 1,
        "target_year_policy_phaseout_oil_for_elec": 1,
    },
)
def a_lineal_regr_phaseout_oil_for_elec():
    """
    a parameter of lineal regression "y=a*TIME+b" where y corresponds to the evolution of the share of oil for electricity over time.
    """
    return (share_in_target_year_oil_for_elec() - hist_share_oilff_elec()) / (
        target_year_policy_phaseout_oil_for_elec()
        - start_year_policy_phaseout_oil_for_elec()
    )


@component.add(
    name='"a lineal regr phase-out oil for heat"',
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "share_in_target_year_oil_for_heat": 1,
        "historic_share_liquids_for_heat_plants": 1,
        "start_year_policy_phaseout_oil_for_heat": 1,
        "target_year_policy_phaseout_oil_for_heat": 1,
    },
)
def a_lineal_regr_phaseout_oil_for_heat():
    """
    a parameter of lineal regression "y=a*TIME+b" where y corresponds to the evolution of the share of oil for heat over time.
    """
    return (
        share_in_target_year_oil_for_heat() - historic_share_liquids_for_heat_plants()
    ) / (
        target_year_policy_phaseout_oil_for_heat()
        - start_year_policy_phaseout_oil_for_heat()
    )


@component.add(
    name='"start year policy phase-out oil for elec"',
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_start_year_policy_phaseout_oil_for_elec"
    },
)
def start_year_policy_phaseout_oil_for_elec():
    """
    From customized year, start policy phase-out oil for electricity.
    """
    return _ext_constant_start_year_policy_phaseout_oil_for_elec()


_ext_constant_start_year_policy_phaseout_oil_for_elec = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E167",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_year_policy_phaseout_oil_for_elec",
)

_ext_constant_start_year_policy_phaseout_oil_for_elec.add(
    "inputs_EU.xlsx", "BAU", "E167", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_year_policy_phaseout_oil_for_elec.add(
    "inputs_EU.xlsx", "SCEN2", "E167", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_year_policy_phaseout_oil_for_elec.add(
    "inputs_EU.xlsx", "SCEN3", "E167", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_year_policy_phaseout_oil_for_elec.add(
    "inputs_EU.xlsx", "SCEN4", "E167", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_year_policy_phaseout_oil_for_elec.add(
    "inputs_EU.xlsx", "User defined", "E167", {"scenarios": ["User defined"]}
)


@component.add(
    name='"target year policy phase-out oil for elec"',
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_target_year_policy_phaseout_oil_for_elec"
    },
)
def target_year_policy_phaseout_oil_for_elec():
    """
    Target year for the policy phase-out oil for electricity.
    """
    return _ext_constant_target_year_policy_phaseout_oil_for_elec()


_ext_constant_target_year_policy_phaseout_oil_for_elec = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "G167",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_target_year_policy_phaseout_oil_for_elec",
)

_ext_constant_target_year_policy_phaseout_oil_for_elec.add(
    "inputs_EU.xlsx", "BAU", "G167", {"scenarios": ["SCEN1"]}
)

_ext_constant_target_year_policy_phaseout_oil_for_elec.add(
    "inputs_EU.xlsx", "SCEN2", "G167", {"scenarios": ["SCEN2"]}
)

_ext_constant_target_year_policy_phaseout_oil_for_elec.add(
    "inputs_EU.xlsx", "SCEN3", "G167", {"scenarios": ["SCEN3"]}
)

_ext_constant_target_year_policy_phaseout_oil_for_elec.add(
    "inputs_EU.xlsx", "SCEN4", "G167", {"scenarios": ["SCEN4"]}
)

_ext_constant_target_year_policy_phaseout_oil_for_elec.add(
    "inputs_EU.xlsx", "User defined", "G167", {"scenarios": ["User defined"]}
)


@component.add(
    name='"target year policy phase-out oil for heat"',
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_target_year_policy_phaseout_oil_for_heat"
    },
)
def target_year_policy_phaseout_oil_for_heat():
    """
    Target year for the policy phase-out oil for heat.
    """
    return _ext_constant_target_year_policy_phaseout_oil_for_heat()


_ext_constant_target_year_policy_phaseout_oil_for_heat = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "G168",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_target_year_policy_phaseout_oil_for_heat",
)

_ext_constant_target_year_policy_phaseout_oil_for_heat.add(
    "inputs_EU.xlsx", "BAU", "G168", {"scenarios": ["SCEN1"]}
)

_ext_constant_target_year_policy_phaseout_oil_for_heat.add(
    "inputs_EU.xlsx", "SCEN2", "G168", {"scenarios": ["SCEN2"]}
)

_ext_constant_target_year_policy_phaseout_oil_for_heat.add(
    "inputs_EU.xlsx", "SCEN3", "G168", {"scenarios": ["SCEN3"]}
)

_ext_constant_target_year_policy_phaseout_oil_for_heat.add(
    "inputs_EU.xlsx", "SCEN4", "G168", {"scenarios": ["SCEN4"]}
)

_ext_constant_target_year_policy_phaseout_oil_for_heat.add(
    "inputs_EU.xlsx", "User defined", "G168", {"scenarios": ["User defined"]}
)


@component.add(
    name="P share oil for Elec",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "a_lineal_regr_phaseout_oil_for_elec": 1,
        "time": 1,
        "b_lineal_regr_phaseout_oil_for_elec": 1,
    },
)
def p_share_oil_for_elec():
    """
    Share oil for electricity generation derived from the phase-out policy.
    """
    return np.maximum(
        0,
        a_lineal_regr_phaseout_oil_for_elec() * time()
        + b_lineal_regr_phaseout_oil_for_elec(),
    )


@component.add(
    name="P share oil for Heat",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "a_lineal_regr_phaseout_oil_for_heat": 1,
        "time": 1,
        "b_lineal_regr_phaseout_oil_for_heat": 1,
    },
)
def p_share_oil_for_heat():
    """
    Share oil for heat generation derived from the phase-out policy.
    """
    return np.maximum(
        0,
        a_lineal_regr_phaseout_oil_for_heat() * time()
        + b_lineal_regr_phaseout_oil_for_heat(),
    )


@component.add(
    name='"b lineal regr phase-out oil for heat"',
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "share_in_target_year_oil_for_heat": 1,
        "target_year_policy_phaseout_oil_for_heat": 1,
        "a_lineal_regr_phaseout_oil_for_heat": 1,
    },
)
def b_lineal_regr_phaseout_oil_for_heat():
    """
    b parameter of lineal regression "y=a*TIME+b" where y corresponds to the evolution of the share of oil for heat over time.
    """
    return (
        share_in_target_year_oil_for_heat()
        - a_lineal_regr_phaseout_oil_for_heat()
        * target_year_policy_phaseout_oil_for_heat()
    )


@component.add(
    name='"start year policy phase-out oil for heat"',
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_start_year_policy_phaseout_oil_for_heat"
    },
)
def start_year_policy_phaseout_oil_for_heat():
    """
    From customized year, start policy phase-out oil for heat.
    """
    return _ext_constant_start_year_policy_phaseout_oil_for_heat()


_ext_constant_start_year_policy_phaseout_oil_for_heat = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E168",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_year_policy_phaseout_oil_for_heat",
)

_ext_constant_start_year_policy_phaseout_oil_for_heat.add(
    "inputs_EU.xlsx", "BAU", "E168", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_year_policy_phaseout_oil_for_heat.add(
    "inputs_EU.xlsx", "SCEN2", "E168", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_year_policy_phaseout_oil_for_heat.add(
    "inputs_EU.xlsx", "SCEN3", "E168", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_year_policy_phaseout_oil_for_heat.add(
    "inputs_EU.xlsx", "SCEN4", "E168", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_year_policy_phaseout_oil_for_heat.add(
    "inputs_EU.xlsx", "User defined", "E168", {"scenarios": ["User defined"]}
)


@component.add(
    name="share liquids for heat plants",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "historic_share_liquids_for_heat_plants": 3,
        "start_year_policy_phaseout_oil_for_heat": 1,
        "p_share_oil_for_heat": 1,
        "phaseout_oil_for_heat": 1,
    },
)
def share_liquids_for_heat_plants():
    """
    Oil share of heat demand.
    """
    return if_then_else(
        time() < 2014,
        lambda: xr.DataArray(
            historic_share_liquids_for_heat_plants(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            phaseout_oil_for_heat() == 0,
            lambda: xr.DataArray(
                historic_share_liquids_for_heat_plants(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                time() < start_year_policy_phaseout_oil_for_heat(),
                lambda: xr.DataArray(
                    historic_share_liquids_for_heat_plants(),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: p_share_oil_for_heat(),
            ),
        ),
    )


@component.add(
    name="share oil for Elec",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "switch_scarcityps_elec_substit": 1,
        "hist_share_oilff_elec": 3,
        "start_year_policy_phaseout_oil_for_elec": 1,
        "future_share_oilff_for_elec": 1,
        "time": 2,
        "p_share_oil_for_elec": 1,
        "phaseout_oil_for_electricity": 1,
    },
)
def share_oil_for_elec():
    """
    Oil share of electricity demand.
    """
    return if_then_else(
        switch_scarcityps_elec_substit() == 0,
        lambda: xr.DataArray(
            hist_share_oilff_elec(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            time() < 2016,
            lambda: xr.DataArray(
                hist_share_oilff_elec(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                phaseout_oil_for_electricity() == 0,
                lambda: future_share_oilff_for_elec(),
                lambda: if_then_else(
                    time() < start_year_policy_phaseout_oil_for_elec(),
                    lambda: xr.DataArray(
                        hist_share_oilff_elec(),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                    lambda: p_share_oil_for_elec(),
                ),
            ),
        ),
    )


@component.add(
    name="PE traditional biomass consum EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"consum_forest_energy_traditional_ej": 1},
)
def pe_traditional_biomass_consum_ej():
    """
    Annual primary energy consumption of traditional biomass. It also includes charcoal and biosolids for solids. It's limited by the maximum given by the stock of forests MAX(max E forest traditional EJ[scenarios],Households final energy demand[scenarios,solids]*share trad biomass vs solids in households)
    """
    return consum_forest_energy_traditional_ej()


@component.add(
    name="scarcity resources counter",
    subscripts=["materials", "scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_scarcity_resources_counter": 1},
    other_deps={
        "_integ_scarcity_resources_counter": {
            "initial": {},
            "step": {"materials_availability_resources": 1},
        }
    },
)
def scarcity_resources_counter():
    return _integ_scarcity_resources_counter()


_integ_scarcity_resources_counter = Integ(
    lambda: if_then_else(
        materials_availability_resources() == 0,
        lambda: xr.DataArray(
            1,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
        lambda: xr.DataArray(
            0,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
    ),
    lambda: xr.DataArray(
        0,
        {
            "materials": _subscript_dict["materials"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["materials", "scenarios"],
    ),
    "_integ_scarcity_resources_counter",
)


@component.add(
    name="Scarcity resources flag",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"scarcity_resources_counter": 1},
)
def scarcity_resources_flag():
    """
    Scarcity indicator for materials resources.
    """
    return if_then_else(
        scarcity_resources_counter() > 1,
        lambda: xr.DataArray(
            1,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
        lambda: xr.DataArray(
            0,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
    )


@component.add(
    name="Percent RES vs TPES",
    units="percent",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_res_vs_tpes": 1},
)
def percent_res_vs_tpes():
    """
    Percent of primary energy from RES in the TPES.
    """
    return share_res_vs_tpes() * 100


@component.add(
    name="Year init scarcity final fuels",
    subscripts=["scenarios", "final sources"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_year_init_scarcity_final_fuels": 1},
    other_deps={
        "_integ_year_init_scarcity_final_fuels": {
            "initial": {},
            "step": {
                "scarcity_final_fuels_flags": 1,
                "scarcity_final_fuels_counter": 1,
                "time_step": 1,
                "time": 1,
            },
        }
    },
)
def year_init_scarcity_final_fuels():
    """
    Initial year of scarcity of final fuels.
    """
    return _integ_year_init_scarcity_final_fuels()


_integ_year_init_scarcity_final_fuels = Integ(
    lambda: if_then_else(
        scarcity_final_fuels_flags() == 1,
        lambda: if_then_else(
            scarcity_final_fuels_counter() == 1,
            lambda: xr.DataArray(
                time() * 1 / time_step() - 20,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "final sources": _subscript_dict["final sources"],
                },
                ["scenarios", "final sources"],
            ),
            lambda: xr.DataArray(
                0,
                {
                    "scenarios": _subscript_dict["scenarios"],
                    "final sources": _subscript_dict["final sources"],
                },
                ["scenarios", "final sources"],
            ),
        ),
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "final sources": _subscript_dict["final sources"],
            },
            ["scenarios", "final sources"],
        ),
    ),
    lambda: xr.DataArray(
        0,
        {
            "scenarios": _subscript_dict["scenarios"],
            "final sources": _subscript_dict["final sources"],
        },
        ["scenarios", "final sources"],
    ),
    "_integ_year_init_scarcity_final_fuels",
)


@component.add(
    name="Year init scarcity reserves",
    subscripts=["materials", "scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_year_init_scarcity_reserves": 1},
    other_deps={
        "_integ_year_init_scarcity_reserves": {
            "initial": {},
            "step": {
                "materials_availability_reserves": 1,
                "scarcity_reserves_counter": 1,
                "time_step": 1,
                "time": 1,
            },
        }
    },
)
def year_init_scarcity_reserves():
    """
    Initial year of scarcity of material reserves.
    """
    return _integ_year_init_scarcity_reserves()


_integ_year_init_scarcity_reserves = Integ(
    lambda: if_then_else(
        materials_availability_reserves() == 0,
        lambda: if_then_else(
            scarcity_reserves_counter() == 1,
            lambda: xr.DataArray(
                time() * 1 / time_step(),
                {
                    "materials": _subscript_dict["materials"],
                    "scenarios": _subscript_dict["scenarios"],
                },
                ["materials", "scenarios"],
            ),
            lambda: xr.DataArray(
                0,
                {
                    "materials": _subscript_dict["materials"],
                    "scenarios": _subscript_dict["scenarios"],
                },
                ["materials", "scenarios"],
            ),
        ),
        lambda: xr.DataArray(
            0,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
    ),
    lambda: xr.DataArray(
        0,
        {
            "materials": _subscript_dict["materials"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["materials", "scenarios"],
    ),
    "_integ_year_init_scarcity_reserves",
)


@component.add(
    name="Percent tot monet invest RESelec vs GDP",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_tot_monet_invest_elec_res_vs_gdp": 1},
)
def percent_tot_monet_invest_reselec_vs_gdp():
    """
    Annual total monetary investment for RES for electricity as a share of the annual GDP ( in percentage ).
    """
    return share_tot_monet_invest_elec_res_vs_gdp() * 100


@component.add(
    name="scarcity final fuels counter",
    subscripts=["scenarios", "final sources"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_scarcity_final_fuels_counter": 1},
    other_deps={
        "_integ_scarcity_final_fuels_counter": {
            "initial": {},
            "step": {"scarcity_final_fuels_flags": 1},
        }
    },
)
def scarcity_final_fuels_counter():
    return _integ_scarcity_final_fuels_counter()


_integ_scarcity_final_fuels_counter = Integ(
    lambda: if_then_else(
        scarcity_final_fuels_flags() == 1,
        lambda: xr.DataArray(
            1,
            {
                "scenarios": _subscript_dict["scenarios"],
                "final sources": _subscript_dict["final sources"],
            },
            ["scenarios", "final sources"],
        ),
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "final sources": _subscript_dict["final sources"],
            },
            ["scenarios", "final sources"],
        ),
    ),
    lambda: xr.DataArray(
        0,
        {
            "scenarios": _subscript_dict["scenarios"],
            "final sources": _subscript_dict["final sources"],
        },
        ["scenarios", "final sources"],
    ),
    "_integ_scarcity_final_fuels_counter",
)


@component.add(
    name="scarcity reserves counter",
    subscripts=["materials", "scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_scarcity_reserves_counter": 1},
    other_deps={
        "_integ_scarcity_reserves_counter": {
            "initial": {},
            "step": {"materials_availability_reserves": 1},
        }
    },
)
def scarcity_reserves_counter():
    return _integ_scarcity_reserves_counter()


_integ_scarcity_reserves_counter = Integ(
    lambda: if_then_else(
        materials_availability_reserves() == 0,
        lambda: xr.DataArray(
            1,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
        lambda: xr.DataArray(
            0,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
    ),
    lambda: xr.DataArray(
        0,
        {
            "materials": _subscript_dict["materials"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["materials", "scenarios"],
    ),
    "_integ_scarcity_reserves_counter",
)


@component.add(
    name="Year final scarcity reserves",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"scarcity_reserves_counter": 2, "year_init_scarcity_reserves": 1},
)
def year_final_scarcity_reserves():
    """
    Final year of scarcity of material reserves.
    """
    return if_then_else(
        scarcity_reserves_counter() > 0,
        lambda: year_init_scarcity_reserves() + scarcity_reserves_counter() - 1,
        lambda: xr.DataArray(
            0,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
    )


@component.add(
    name="Year final scarcity resources",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"scarcity_resources_counter": 2, "year_init_scarcity_resources": 1},
)
def year_final_scarcity_resources():
    """
    Final year of scarcity of materials resources.
    """
    return if_then_else(
        scarcity_resources_counter() > 0,
        lambda: year_init_scarcity_resources() + scarcity_resources_counter() - 1,
        lambda: xr.DataArray(
            0,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
    )


@component.add(
    name="Scarcity fuels flag",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"scarcity_final_fuels_counter": 1},
)
def scarcity_fuels_flag():
    """
    Scarcity indicator for final fuels.
    """
    return if_then_else(
        scarcity_final_fuels_counter() > 1,
        lambda: xr.DataArray(
            1,
            {
                "scenarios": _subscript_dict["scenarios"],
                "final sources": _subscript_dict["final sources"],
            },
            ["scenarios", "final sources"],
        ),
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "final sources": _subscript_dict["final sources"],
            },
            ["scenarios", "final sources"],
        ),
    )


@component.add(
    name="Scarcity reserves flag",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"scarcity_reserves_counter": 1},
)
def scarcity_reserves_flag():
    """
    Scarcity indicator for materials reserves.
    """
    return if_then_else(
        scarcity_reserves_counter() > 1,
        lambda: xr.DataArray(
            1,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
        lambda: xr.DataArray(
            0,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
    )


@component.add(
    name="Year init scarcity resources",
    subscripts=["materials", "scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_year_init_scarcity_resources": 1},
    other_deps={
        "_integ_year_init_scarcity_resources": {
            "initial": {},
            "step": {
                "materials_availability_resources": 1,
                "scarcity_resources_counter": 1,
                "time_step": 1,
                "time": 1,
            },
        }
    },
)
def year_init_scarcity_resources():
    """
    Initial year of scarcity of material resources.
    """
    return _integ_year_init_scarcity_resources()


_integ_year_init_scarcity_resources = Integ(
    lambda: if_then_else(
        materials_availability_resources() == 0,
        lambda: if_then_else(
            scarcity_resources_counter() == 1,
            lambda: xr.DataArray(
                time() * 1 / time_step(),
                {
                    "materials": _subscript_dict["materials"],
                    "scenarios": _subscript_dict["scenarios"],
                },
                ["materials", "scenarios"],
            ),
            lambda: xr.DataArray(
                0,
                {
                    "materials": _subscript_dict["materials"],
                    "scenarios": _subscript_dict["scenarios"],
                },
                ["materials", "scenarios"],
            ),
        ),
        lambda: xr.DataArray(
            0,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
    ),
    lambda: xr.DataArray(
        0,
        {
            "materials": _subscript_dict["materials"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["materials", "scenarios"],
    ),
    "_integ_year_init_scarcity_resources",
)


@component.add(
    name="Percent remaining potential tot RES heat",
    units="percent",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"remaining_potential_tot_res_heat": 1},
)
def percent_remaining_potential_tot_res_heat():
    """
    Remaining potential available as a percentage.
    """
    return remaining_potential_tot_res_heat() * 100


@component.add(
    name="Abundance final fuels",
    subscripts=["scenarios", "final sources1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "abundance_liquids": 1,
        "abundance_gases": 1,
        "abundance_solids": 1,
        "abundance_electricity": 1,
        "abundance_heat": 1,
    },
)
def abundance_final_fuels():
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "final sources1": _subscript_dict["final sources1"],
        },
        ["scenarios", "final sources1"],
    )
    value.loc[:, ["liquids"]] = (
        abundance_liquids().expand_dims({"final sources1": ["liquids"]}, 1).values
    )
    value.loc[:, ["gases"]] = (
        abundance_gases().expand_dims({"final sources1": ["gases"]}, 1).values
    )
    value.loc[:, ["solids"]] = (
        abundance_solids().expand_dims({"final sources1": ["solids"]}, 1).values
    )
    value.loc[:, ["electricity"]] = (
        abundance_electricity()
        .expand_dims({"final sources1": ["electricity"]}, 1)
        .values
    )
    value.loc[:, ["heat"]] = (
        abundance_heat().expand_dims({"final sources1": ["heat"]}, 1).values
    )
    return value


@component.add(
    name="scarcity final fuels flags",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_final_fuels": 1},
)
def scarcity_final_fuels_flags():
    return if_then_else(
        abundance_final_fuels().rename({"final sources1": "final sources"}) < 0.999,
        lambda: xr.DataArray(
            1,
            {
                "scenarios": _subscript_dict["scenarios"],
                "final sources": _subscript_dict["final sources"],
            },
            ["scenarios", "final sources"],
        ),
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "final sources": _subscript_dict["final sources"],
            },
            ["scenarios", "final sources"],
        ),
    )


@component.add(
    name="Percent remaining potential tot RES elec",
    units="percent",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"remaining_potential_tot_res_elec": 1},
)
def percent_remaining_potential_tot_res_elec():
    """
    Remaining potential available as a percentage.
    """
    return remaining_potential_tot_res_elec() * 100


@component.add(
    name="Year final scarcity final fuels",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"scarcity_final_fuels_counter": 2, "year_init_scarcity_final_fuels": 1},
)
def year_final_scarcity_final_fuels():
    """
    Final year of scarcity of final fuels.
    """
    return if_then_else(
        scarcity_final_fuels_counter() > 0,
        lambda: year_init_scarcity_final_fuels() + scarcity_final_fuels_counter() - 1,
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "final sources": _subscript_dict["final sources"],
            },
            ["scenarios", "final sources"],
        ),
    )


@component.add(
    name="share blue water use vs AR",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_water_use_by_type": 1, "dam3_per_km3": 1, "ar_water": 1},
)
def share_blue_water_use_vs_ar():
    """
    Share of blue water used vs accessible runoff water.
    """
    return total_water_use_by_type().loc[:, "blue water"].reset_coords(drop=True) / (
        ar_water() * dam3_per_km3()
    )


@component.add(
    name="AR water",
    units="km3",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ar_water"},
)
def ar_water():
    """
    Accessible runnoff water. Source: UN (2003).
    """
    return _ext_constant_ar_water()


_ext_constant_ar_water = ExtConstant(
    "inputs_EU.xlsx", "Parameters", "G76", {}, _root, {}, "_ext_constant_ar_water"
)


@component.add(
    name="share total water use vs AR",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_water_use": 1, "dam3_per_km3": 1, "ar_water": 1},
)
def share_total_water_use_vs_ar():
    """
    Share of total water used vs accessible runnoff water.
    """
    return total_water_use() / (ar_water() * dam3_per_km3())


@component.add(
    name="shortage BioE non trad",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "consum_forest_energy_non_traditional_ej": 1,
        "demand_forest_energy_non_tradition_ej": 1,
    },
)
def shortage_bioe_non_trad():
    """
    Shortage of bioenergy for modern energy uses (no traditional).
    """
    return zidz(
        consum_forest_energy_non_traditional_ej(),
        demand_forest_energy_non_tradition_ej(),
    )


@component.add(
    name="Renewable water resources",
    units="km3",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_renewable_water_resources"},
)
def renewable_water_resources():
    return _ext_constant_renewable_water_resources()


_ext_constant_renewable_water_resources = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G75",
    {},
    _root,
    {},
    "_ext_constant_renewable_water_resources",
)


@component.add(
    name="share blue water use vs renewable water resources",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_water_use_by_type": 1,
        "renewable_water_resources": 1,
        "dam3_per_km3": 1,
    },
)
def share_blue_water_use_vs_renewable_water_resources():
    """
    Share of blue water used vs renewable water resources.
    """
    return total_water_use_by_type().loc[:, "blue water"].reset_coords(drop=True) / (
        renewable_water_resources() * dam3_per_km3()
    )


@component.add(
    name="dam3 per km3",
    units="km3",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_dam3_per_km3"},
)
def dam3_per_km3():
    return _ext_constant_dam3_per_km3()


_ext_constant_dam3_per_km3 = ExtConstant(
    "inputs_EU.xlsx", "Constants", "G16", {}, _root, {}, "_ext_constant_dam3_per_km3"
)


@component.add(
    name="share total water use vs renewable water resources",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_water_use": 1,
        "renewable_water_resources": 1,
        "dam3_per_km3": 1,
    },
)
def share_total_water_use_vs_renewable_water_resources():
    """
    Share of total water used vs renewable water resources.
    """
    return total_water_use() / (renewable_water_resources() * dam3_per_km3())


@component.add(
    name="Total PE solid bioE potential EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_e_forest_energy_non_trad": 1},
)
def total_pe_solid_bioe_potential_ej():
    """
    If switch land 1 =1 the land restrictions are used, otherwise a fixed potential is used
    """
    return max_e_forest_energy_non_trad()


@component.add(
    name="shortage BioE for heat",
    units="Dmnl",
    subscripts=["RES heat", "scenarios"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"shortage_bioe_non_trad_delayed_1yr": 1},
)
def shortage_bioe_for_heat():
    """
    Shortage of bioenergy for supplying RES power plants for heat generation.
    """
    value = xr.DataArray(
        np.nan,
        {
            "RES heat": _subscript_dict["RES heat"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES heat", "scenarios"],
    )
    value.loc[['"solar-heat"'], :] = 1
    value.loc[['"geot-heat"'], :] = 1
    value.loc[['"solid bioE-heat"'], :] = (
        shortage_bioe_non_trad_delayed_1yr()
        .expand_dims({"RES heat": ['"solid bioE-heat"']}, 0)
        .values
    )
    return value


@component.add(
    name="Cp RES for heat",
    units="Dmnl",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"cpini_res_for_heat": 1, "shortage_bioe_for_heat": 1},
)
def cp_res_for_heat():
    return cpini_res_for_heat() * shortage_bioe_for_heat()


@component.add(
    name="shortage BioE non trad delayed 1yr",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_shortage_bioe_non_trad_delayed_1yr": 1},
    other_deps={
        "_delayfixed_shortage_bioe_non_trad_delayed_1yr": {
            "initial": {},
            "step": {"shortage_bioe_non_trad": 1},
        }
    },
)
def shortage_bioe_non_trad_delayed_1yr():
    """
    Shortage of bioenergy for modern energy uses (no traditional) delayed 1 year.
    """
    return _delayfixed_shortage_bioe_non_trad_delayed_1yr()


_delayfixed_shortage_bioe_non_trad_delayed_1yr = DelayFixed(
    lambda: shortage_bioe_non_trad(),
    lambda: 1,
    lambda: xr.DataArray(1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_shortage_bioe_non_trad_delayed_1yr",
)


@component.add(
    name='"potential FES RES for heat-com EJ"',
    units="EJ",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"potential_fes_res_for_heatcom_twh": 1, "ej_per_twh": 1},
)
def potential_fes_res_for_heatcom_ej():
    """
    Potential final energy supply renewables for commercial heat given the installed capacity.
    """
    return potential_fes_res_for_heatcom_twh() * ej_per_twh()


@component.add(
    name='"potential FES RES for heat-com TWh"',
    units="TWh",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "installed_capacity_res_heatcom_tw": 1,
        "efficiency_res_heat": 1,
        "cp_res_for_heat": 1,
        "twe_per_twh": 1,
    },
)
def potential_fes_res_for_heatcom_twh():
    """
    Potential final energy supply renewables for commercial heat given the installed capacity.
    """
    return (
        installed_capacity_res_heatcom_tw()
        * efficiency_res_heat()
        * cp_res_for_heat()
        / twe_per_twh()
    )


@component.add(
    name="real generation RES elec TWh",
    units="TWh",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_generation_res_elec_twh": 1,
        "res_elec_tot_overcapacity": 1,
        "shortage_bioe_for_elec": 1,
    },
)
def real_generation_res_elec_twh():
    """
    Electricity generation by RES technology.
    """
    return (
        potential_generation_res_elec_twh()
        * (1 - res_elec_tot_overcapacity())
        * shortage_bioe_for_elec()
    )


@component.add(
    name='"potential FES RES for heat-nc TWh"',
    units="TWh",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "installed_capacity_res_heatnc_tw": 1,
        "efficiency_res_heat": 1,
        "cp_res_for_heat": 1,
        "twe_per_twh": 1,
    },
)
def potential_fes_res_for_heatnc_twh():
    """
    Potential final energy supply renewables for non-commercial heat given the installed capacity.
    """
    return (
        installed_capacity_res_heatnc_tw()
        * efficiency_res_heat()
        * cp_res_for_heat()
        / twe_per_twh()
    )


@component.add(
    name="shortage BioE for elec",
    units="Dmnl",
    subscripts=["RES elec", "scenarios"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"shortage_bioe_non_trad_delayed_1yr": 1},
)
def shortage_bioe_for_elec():
    """
    Shortage of bioenergy for supplying RES power plants for electricity generation.
    """
    value = xr.DataArray(
        np.nan,
        {
            "RES elec": _subscript_dict["RES elec"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES elec", "scenarios"],
    )
    value.loc[["hydro"], :] = 1
    value.loc[['"geot-elec"'], :] = 1
    value.loc[['"solid bioE-elec"'], :] = (
        shortage_bioe_non_trad_delayed_1yr()
        .expand_dims({"RES elec": ['"solid bioE-elec"']}, 0)
        .values
    )
    value.loc[["oceanic"], :] = 1
    value.loc[["wind onshore"], :] = 1
    value.loc[["wind offshore"], :] = 1
    value.loc[["solar PV"], :] = 1
    value.loc[["CSP"], :] = 1
    return value


@component.add(
    name="replacement capacity RES elec",
    units="TW/Year",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "replacement_rate_res_elec": 1,
        "wear_res_elec": 1,
        "res_elec_tot_overcapacity": 1,
        "constraint_elec_storage_availability": 1,
        "shortage_bioe_for_elec": 1,
    },
)
def replacement_capacity_res_elec():
    """
    Annual replacement of RES infrastructure for electricity generation by technology. It is assumed that the step of planning the replaced infrastructure can be done while the infraestructure to be replaced is still under operation. For replaced infraestructures, the construction time should be smaller than for new infaestructures, however we compensate for this assuming that the demantling time is included in onstruction time for replaced infrastructure.
    """
    return (
        if_then_else(
            time() < 2015,
            lambda: xr.DataArray(
                0,
                {
                    "RES elec": _subscript_dict["RES elec"],
                    "scenarios": _subscript_dict["scenarios"],
                },
                ["RES elec", "scenarios"],
            ),
            lambda: replacement_rate_res_elec()
            * wear_res_elec()
            * (1 - res_elec_tot_overcapacity()),
        )
        * constraint_elec_storage_availability().transpose("RES elec", "scenarios")
        * shortage_bioe_for_elec() ** 2
    )


@component.add(
    name="Cp RES elec",
    units="Dmnl",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "min_cp_baseload_res": 1,
        "cpini_res_elec": 1,
        "cp_exogenous_res_elec_reduction": 1,
        "shortage_bioe_for_elec": 1,
    },
)
def cp_res_elec():
    """
    Capacity factor of RES technologies (after accounting for the overcapacities required to manage the intermittency of RES elec variables).
    """
    return np.maximum(
        min_cp_baseload_res(),
        cpini_res_elec() * cp_exogenous_res_elec_reduction() * shortage_bioe_for_elec(),
    )


@component.add(
    name='"replacement RES for heat-nc TW"',
    units="TW/Year",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "wear_res_capacity_for_heatnc_tw": 1,
        "replacement_res_for_heatnc": 1,
        "res_heatnc_tot_overcapacity": 1,
        "shortage_bioe_for_heat": 1,
    },
)
def replacement_res_for_heatnc_tw():
    """
    Annual replacement of RES for non-commercial heat by technology.
    """
    return (
        wear_res_capacity_for_heatnc_tw()
        * replacement_res_for_heatnc()
        * (1 - res_heatnc_tot_overcapacity())
        * shortage_bioe_for_heat() ** 2
    )


@component.add(
    name='"replacement RES for heat-com TW"',
    units="TW/Year",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "wear_res_capacity_for_heatcom_tw": 1,
        "replacement_res_for_heatcom": 1,
        "res_heatcom_tot_overcapacity": 1,
        "shortage_bioe_for_heat": 1,
    },
)
def replacement_res_for_heatcom_tw():
    """
    Annual replacement of RES for commercial heat by technology.
    """
    return (
        wear_res_capacity_for_heatcom_tw()
        * replacement_res_for_heatcom()
        * (1 - res_heatcom_tot_overcapacity())
        * shortage_bioe_for_heat() ** 2
    )


@component.add(
    name="demand forest energy non tradition EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "solid_bioe_emissions_relevant_ej": 1,
        "pe_bioe_residues_nonbiofuels_ej": 1,
    },
)
def demand_forest_energy_non_tradition_ej():
    """
    Demand of forest products for energy uses in non traditional uses, in terms of energy. Residuals and traditional biomass not included.
    """
    return np.maximum(
        0, solid_bioe_emissions_relevant_ej() - pe_bioe_residues_nonbiofuels_ej()
    )


@component.add(
    name="max E forest available non trad",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_e_tot_forest_available": 1,
        "demand_forest_energy_traditional_ej": 1,
    },
)
def max_e_forest_available_non_trad():
    """
    Maximum energy from forest available excluding traditional use of biomasss.
    """
    return np.maximum(
        0, max_e_tot_forest_available() - demand_forest_energy_traditional_ej()
    )


@component.add(
    name="max E tot forest available",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "available_forest_area": 1,
        "forest_extraction_per_ha": 1,
        "p_forest_overexplotation": 1,
    },
)
def max_e_tot_forest_available():
    """
    Potential energy from total forest available (including overexploitation).
    """
    return (
        available_forest_area()
        * forest_extraction_per_ha()
        * (1 + p_forest_overexplotation())
    )


@component.add(
    name="max E forest energy non trad",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_e_forest_available_non_trad": 1, "consum_wood_products_ej": 1},
)
def max_e_forest_energy_non_trad():
    """
    Maximum energy (NPP) from forest available for modern energy uses (i.e. excluding traditional use of biomasss).
    """
    return np.maximum(0, max_e_forest_available_non_trad() - consum_wood_products_ej())


@component.add(
    name="max EROI FC", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def max_eroi_fc():
    """
    (ad hoc) Maximum value of EROI FC to introduce in the model in the case that the EROIst system <= 1 (in this case the "EROI FC system from 2015" reports an error).
    """
    return 5


@component.add(
    name="EROI FC system from 2015 1",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "eroist_system_delayed_1yr": 3,
        "max_eroi_fc": 2,
        "eroist_system_until_2015": 2,
    },
)
def eroi_fc_system_from_2015_1():
    """
    EROI Feedback Coeficient. This coeficient allows to feedback the yearly change of the total EROI of the system on the real energy consuption of the system, taking as reference year 2015. IF THEN ELSE("Activate EROI FC feedback?"=0,1,(EROEI Delayed 1yr[scenarios]/(EROEI Delayed 1yr[scenarios] - 1))*((EROEI Delayed 2yr[scenarios] -1)/EROEI Delayed 2yr[scenarios]))
    """
    return if_then_else(
        time() < 2016,
        lambda: xr.DataArray(
            1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            eroist_system_delayed_1yr() > 1,
            lambda: np.minimum(
                max_eroi_fc(),
                (eroist_system_delayed_1yr() / (eroist_system_delayed_1yr() - 1))
                * ((eroist_system_until_2015() - 1) / eroist_system_until_2015()),
            ),
            lambda: xr.DataArray(
                max_eroi_fc(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
        ),
    )


@component.add(
    name="P rr Ti Rest",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_ti_rest"},
)
def p_rr_ti_rest():
    return _ext_constant_p_rr_ti_rest()


_ext_constant_p_rr_ti_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E303",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_ti_rest",
)

_ext_constant_p_rr_ti_rest.add(
    "inputs_EU.xlsx", "SCEN1", "E303", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_ti_rest.add(
    "inputs_EU.xlsx", "SCEN2", "E303", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_ti_rest.add(
    "inputs_EU.xlsx", "SCEN3", "E303", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_ti_rest.add(
    "inputs_EU.xlsx", "SCEN4", "E303", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_ti_rest.add(
    "inputs_EU.xlsx", "User defined", "E303", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Li Rest",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_li_rest"},
)
def p_rr_li_rest():
    return _ext_constant_p_rr_li_rest()


_ext_constant_p_rr_li_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E294",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_li_rest",
)

_ext_constant_p_rr_li_rest.add(
    "inputs_EU.xlsx", "SCEN1", "E294", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_li_rest.add(
    "inputs_EU.xlsx", "SCEN2", "E294", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_li_rest.add(
    "inputs_EU.xlsx", "SCEN3", "E294", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_li_rest.add(
    "inputs_EU.xlsx", "SCEN4", "E294", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_li_rest.add(
    "inputs_EU.xlsx", "User defined", "E294", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr V Rest",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_v_rest"},
)
def p_rr_v_rest():
    return _ext_constant_p_rr_v_rest()


_ext_constant_p_rr_v_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E304",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_v_rest",
)

_ext_constant_p_rr_v_rest.add(
    "inputs_EU.xlsx", "SCEN1", "E304", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_v_rest.add(
    "inputs_EU.xlsx", "SCEN2", "E304", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_v_rest.add(
    "inputs_EU.xlsx", "SCEN3", "E304", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_v_rest.add(
    "inputs_EU.xlsx", "SCEN4", "E304", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_v_rest.add(
    "inputs_EU.xlsx", "User defined", "E304", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Mg Rest",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_mg_rest"},
)
def p_rr_mg_rest():
    return _ext_constant_p_rr_mg_rest()


_ext_constant_p_rr_mg_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E295",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_mg_rest",
)

_ext_constant_p_rr_mg_rest.add(
    "inputs_EU.xlsx", "SCEN1", "E295", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_mg_rest.add(
    "inputs_EU.xlsx", "SCEN2", "E295", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_mg_rest.add(
    "inputs_EU.xlsx", "SCEN3", "E295", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_mg_rest.add(
    "inputs_EU.xlsx", "SCEN4", "E295", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_mg_rest.add(
    "inputs_EU.xlsx", "User defined", "E295", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Zn Rest",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_zn_rest"},
)
def p_rr_zn_rest():
    return _ext_constant_p_rr_zn_rest()


_ext_constant_p_rr_zn_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E305",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_zn_rest",
)

_ext_constant_p_rr_zn_rest.add(
    "inputs_EU.xlsx", "SCEN1", "E305", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_zn_rest.add(
    "inputs_EU.xlsx", "SCEN2", "E305", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_zn_rest.add(
    "inputs_EU.xlsx", "SCEN3", "E305", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_zn_rest.add(
    "inputs_EU.xlsx", "SCEN4", "E305", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_zn_rest.add(
    "inputs_EU.xlsx", "User defined", "E305", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr minerals Rest",
    units="Dmnl",
    subscripts=["materials", "scenarios"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "p_rr_al_rest": 1,
        "p_rr_cd_rest": 1,
        "p_rr_cr_rest": 1,
        "p_rr_cu_rest": 1,
        "p_rr_ga_rest": 1,
        "p_rr_in_rest": 1,
        "p_rr_fe_rest": 1,
        "p_rr_li_rest": 1,
        "p_rr_mg_rest": 1,
        "p_rr_mn_rest": 1,
        "p_rr_mo_rest": 1,
        "p_rr_ni_rest": 1,
        "p_rr_pb_rest": 1,
        "p_rr_ag_rest": 1,
        "p_rr_sn_rest": 1,
        "p_rr_te_rest": 1,
        "p_rr_ti_rest": 1,
        "p_rr_v_rest": 1,
        "p_rr_zn_rest": 1,
    },
)
def p_rr_minerals_rest():
    """
    Recycling rates by mineral for the rest of the economy selected by user by scenario.
    """
    value = xr.DataArray(
        np.nan,
        {
            "materials": _subscript_dict["materials"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["materials", "scenarios"],
    )
    value.loc[["Adhesive"], :] = 0
    value.loc[["Aluminium"], :] = (
        p_rr_al_rest().expand_dims({"materials": ["Aluminium"]}, 0).values
    )
    value.loc[["Aluminium mirrors"], :] = 0
    value.loc[["Cadmium"], :] = (
        p_rr_cd_rest().expand_dims({"materials": ["Cadmium"]}, 0).values
    )
    value.loc[["Carbon fiber"], :] = 0
    value.loc[["Cement"], :] = 0
    value.loc[["Chromium"], :] = (
        p_rr_cr_rest().expand_dims({"materials": ["Chromium"]}, 0).values
    )
    value.loc[["Copper"], :] = (
        p_rr_cu_rest().expand_dims({"materials": ["Copper"]}, 0).values
    )
    value.loc[["diesel"], :] = 0
    value.loc[["Dy"], :] = 0
    value.loc[['"Electric/electronic components"'], :] = 0
    value.loc[["Evacuation lines"], :] = 0
    value.loc[["Fiberglass"], :] = 0
    value.loc[["Foam glass"], :] = 0
    value.loc[["Galium"], :] = (
        p_rr_ga_rest().expand_dims({"materials": ["Galium"]}, 0).values
    )
    value.loc[["Glass"], :] = 0
    value.loc[["Glass reinforcing plastic"], :] = 0
    value.loc[["gravel"], :] = 0
    value.loc[["Indium"], :] = (
        p_rr_in_rest().expand_dims({"materials": ["Indium"]}, 0).values
    )
    value.loc[["Iron"], :] = (
        p_rr_fe_rest().expand_dims({"materials": ["Iron"]}, 0).values
    )
    value.loc[["KNO3 mined"], :] = 0
    value.loc[["Asphalt"], :] = 0
    value.loc[["Lime"], :] = 0
    value.loc[["Limestone"], :] = 0
    value.loc[["Lithium"], :] = (
        p_rr_li_rest().expand_dims({"materials": ["Lithium"]}, 0).values
    )
    value.loc[["Lubricant"], :] = 0
    value.loc[["Magnesium"], :] = (
        p_rr_mg_rest().expand_dims({"materials": ["Magnesium"]}, 0).values
    )
    value.loc[["Manganese"], :] = (
        p_rr_mn_rest().expand_dims({"materials": ["Manganese"]}, 0).values
    )
    value.loc[["Heavy equipment"], :] = 0
    value.loc[["Concrete"], :] = 0
    value.loc[["Molybdenum"], :] = (
        p_rr_mo_rest().expand_dims({"materials": ["Molybdenum"]}, 0).values
    )
    value.loc[["NaNO3 mined"], :] = 0
    value.loc[["NaNO3 synthetic"], :] = 0
    value.loc[["Neodymium"], :] = 0
    value.loc[["Nickel"], :] = (
        p_rr_ni_rest().expand_dims({"materials": ["Nickel"]}, 0).values
    )
    value.loc[['"Over grid (15%)"'], :] = 0
    value.loc[['"Over grid (5%)"'], :] = 0
    value.loc[["Paint"], :] = 0
    value.loc[["Lead"], :] = (
        p_rr_pb_rest().expand_dims({"materials": ["Lead"]}, 0).values
    )
    value.loc[["Plastics"], :] = 0
    value.loc[["Polypropylene"], :] = 0
    value.loc[["Rock"], :] = 0
    value.loc[["Rock wool"], :] = 0
    value.loc[["Sand"], :] = 0
    value.loc[["Silicon sand"], :] = 0
    value.loc[["Silicon wafer modules"], :] = 0
    value.loc[["Silver"], :] = (
        p_rr_ag_rest().expand_dims({"materials": ["Silver"]}, 0).values
    )
    value.loc[["Site preparation"], :] = 0
    value.loc[["Tin"], :] = p_rr_sn_rest().expand_dims({"materials": ["Tin"]}, 0).values
    value.loc[["soda ash"], :] = 0
    value.loc[["steel"], :] = 0
    value.loc[["synthetic oil"], :] = 0
    value.loc[["tellurium"], :] = (
        p_rr_te_rest().expand_dims({"materials": ["tellurium"]}, 0).values
    )
    value.loc[["titanium"], :] = (
        p_rr_ti_rest().expand_dims({"materials": ["titanium"]}, 0).values
    )
    value.loc[["titanium dioxide"], :] = 0
    value.loc[["vanadium"], :] = (
        p_rr_v_rest().expand_dims({"materials": ["vanadium"]}, 0).values
    )
    value.loc[["wires"], :] = 0
    value.loc[["zinc"], :] = (
        p_rr_zn_rest().expand_dims({"materials": ["zinc"]}, 0).values
    )
    return value


@component.add(
    name="P rr Cd Rest",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_cd_rest"},
)
def p_rr_cd_rest():
    return _ext_constant_p_rr_cd_rest()


_ext_constant_p_rr_cd_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E288",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_cd_rest",
)

_ext_constant_p_rr_cd_rest.add(
    "inputs_EU.xlsx", "SCEN1", "E288", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_cd_rest.add(
    "inputs_EU.xlsx", "SCEN2", "E288", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_cd_rest.add(
    "inputs_EU.xlsx", "SCEN3", "E288", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_cd_rest.add(
    "inputs_EU.xlsx", "SCEN4", "E288", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_cd_rest.add(
    "inputs_EU.xlsx", "User defined", "E288", {"scenarios": ["User defined"]}
)


@component.add(
    name="improvement recycling rates minerals Rest",
    units="Dmnl",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "historic_improvement_recycling_rates_minerals": 1,
        "recycling_rates_minerals_rest": 1,
        "choose_targets_mineral_recycling_rates": 1,
        "common_rr_minerals_variation_rest": 1,
        "by_mineral_rr_variation_rest": 1,
        "constrain_rr_improv_for_rest_per_mineral": 1,
    },
)
def improvement_recycling_rates_minerals_rest():
    """
    Annual improvement of the recycling rates of minerals for the rest of the economy.
    """
    return (
        if_then_else(
            time() < 2015,
            lambda: historic_improvement_recycling_rates_minerals().expand_dims(
                {"scenarios": _subscript_dict["scenarios"]}, 1
            ),
            lambda: if_then_else(
                (choose_targets_mineral_recycling_rates() == 2).expand_dims(
                    {"materials": _subscript_dict["materials"]}, 1
                ),
                lambda: (
                    common_rr_minerals_variation_rest()
                    * recycling_rates_minerals_rest()
                ).transpose("scenarios", "materials"),
                lambda: by_mineral_rr_variation_rest().transpose(
                    "scenarios", "materials"
                ),
            ).transpose("materials", "scenarios"),
        )
        * constrain_rr_improv_for_rest_per_mineral()
    )


@component.add(
    name="b lineal regr rr alt techn",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "p_rr_minerals_alt_techn": 1,
        "a_lineal_regr_rr_alt_techn": 1,
        "target_year_p_rr_minerals_alt_techn": 1,
    },
)
def b_lineal_regr_rr_alt_techn():
    """
    b parameter of lineal regression "y=a*TIME+b" where y corresponds to the evolution of the recycling rate of each mineral over time ("by mineral rr alt technology").
    """
    return (
        p_rr_minerals_alt_techn()
        - a_lineal_regr_rr_alt_techn() * target_year_p_rr_minerals_alt_techn()
    )


@component.add(
    name="b lineal regr rr Rest",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "p_rr_minerals_rest": 1,
        "target_year_p_rr_minerals_rest": 1,
        "a_lineal_regr_rr_rest": 1,
    },
)
def b_lineal_regr_rr_rest():
    """
    b parameter of lineal regression "y=a*TIME+b" where y corresponds to the evolution of the recycling rate of each mineral over time ("by mineral rr Rest").
    """
    return (
        p_rr_minerals_rest()
        - a_lineal_regr_rr_rest() * target_year_p_rr_minerals_rest()
    )


@component.add(
    name="by mineral rr Rest 1yr",
    units="Dmnl",
    subscripts=["materials", "scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_by_mineral_rr_rest_1yr": 1},
    other_deps={
        "_delayfixed_by_mineral_rr_rest_1yr": {
            "initial": {"current_recycling_rates_minerals_alt_techn": 1},
            "step": {"by_mineral_rr_rest": 1},
        }
    },
)
def by_mineral_rr_rest_1yr():
    """
    Recycling rates over time delayed 1 year by mineral for the rest of the economy.
    """
    return _delayfixed_by_mineral_rr_rest_1yr()


_delayfixed_by_mineral_rr_rest_1yr = DelayFixed(
    lambda: by_mineral_rr_rest(),
    lambda: 1,
    lambda: current_recycling_rates_minerals_alt_techn().expand_dims(
        {"scenarios": _subscript_dict["scenarios"]}, 1
    ),
    time_step,
    "_delayfixed_by_mineral_rr_rest_1yr",
)


@component.add(
    name="P rr Cu Rest",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_cu_rest"},
)
def p_rr_cu_rest():
    return _ext_constant_p_rr_cu_rest()


_ext_constant_p_rr_cu_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E290",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_cu_rest",
)

_ext_constant_p_rr_cu_rest.add(
    "inputs_EU.xlsx", "SCEN1", "E290", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_cu_rest.add(
    "inputs_EU.xlsx", "SCEN2", "E290", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_cu_rest.add(
    "inputs_EU.xlsx", "SCEN3", "E290", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_cu_rest.add(
    "inputs_EU.xlsx", "SCEN4", "E290", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_cu_rest.add(
    "inputs_EU.xlsx", "User defined", "E290", {"scenarios": ["User defined"]}
)


@component.add(
    name="a lineal regr rr alt techn",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "p_rr_minerals_alt_techn": 1,
        "current_recycling_rates_minerals_alt_techn": 1,
        "start_year_p_rr_minerals_alt_techn": 1,
        "target_year_p_rr_minerals_alt_techn": 1,
    },
)
def a_lineal_regr_rr_alt_techn():
    """
    a parameter of lineal regression "y=a*TIME+b" where y corresponds to the evolution of the recycling rate of each mineral over time ("by mineral rr alt technology").
    """
    return (
        p_rr_minerals_alt_techn() - current_recycling_rates_minerals_alt_techn()
    ) / (target_year_p_rr_minerals_alt_techn() - start_year_p_rr_minerals_alt_techn())


@component.add(
    name="a lineal regr rr Rest",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "p_rr_minerals_rest": 1,
        "current_recycling_rates_minerals": 1,
        "target_year_p_rr_minerals_rest": 1,
        "start_year_p_rr_minerals_rest": 1,
    },
)
def a_lineal_regr_rr_rest():
    """
    a parameter of lineal regression "y=a*TIME+b" where y corresponds to the evolution of the recycling rate of each mineral over time ("by mineral rr Rest").
    """
    return (p_rr_minerals_rest() - current_recycling_rates_minerals()) / (
        target_year_p_rr_minerals_rest() - start_year_p_rr_minerals_rest()
    )


@component.add(
    name="start year P rr minerals Rest",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_start_year_p_rr_minerals_rest"},
)
def start_year_p_rr_minerals_rest():
    """
    Start year of variation recycling rate of minerals for the rest of the economy.
    """
    return _ext_constant_start_year_p_rr_minerals_rest()


_ext_constant_start_year_p_rr_minerals_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B286",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_year_p_rr_minerals_rest",
)

_ext_constant_start_year_p_rr_minerals_rest.add(
    "inputs_EU.xlsx", "SCEN1", "B286", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_year_p_rr_minerals_rest.add(
    "inputs_EU.xlsx", "SCEN2", "B286", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_year_p_rr_minerals_rest.add(
    "inputs_EU.xlsx", "SCEN3", "B286", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_year_p_rr_minerals_rest.add(
    "inputs_EU.xlsx", "SCEN4", "B286", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_year_p_rr_minerals_rest.add(
    "inputs_EU.xlsx", "User defined", "B286", {"scenarios": ["User defined"]}
)


@component.add(
    name="common rr minerals variation Rest",
    units="Dmnl",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "start_year_p_common_rr_minerals_rest": 1,
        "historic_improvement_recycling_rates_minerals": 1,
        "p_common_rr_minerals_variation_rest": 1,
    },
)
def common_rr_minerals_variation_rest():
    """
    Recycling rates of minererals (common annual variation).
    """
    return if_then_else(
        (time() < start_year_p_common_rr_minerals_rest()).expand_dims(
            {"materials": _subscript_dict["materials"]}, 1
        ),
        lambda: historic_improvement_recycling_rates_minerals().expand_dims(
            {"scenarios": _subscript_dict["scenarios"]}, 0
        ),
        lambda: p_common_rr_minerals_variation_rest().expand_dims(
            {"materials": _subscript_dict["materials"]}, 1
        ),
    ).transpose("materials", "scenarios")


@component.add(
    name="P rr In Rest",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_in_rest"},
)
def p_rr_in_rest():
    return _ext_constant_p_rr_in_rest()


_ext_constant_p_rr_in_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E292",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_in_rest",
)

_ext_constant_p_rr_in_rest.add(
    "inputs_EU.xlsx", "SCEN1", "E292", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_in_rest.add(
    "inputs_EU.xlsx", "SCEN2", "E292", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_in_rest.add(
    "inputs_EU.xlsx", "SCEN3", "E292", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_in_rest.add(
    "inputs_EU.xlsx", "SCEN4", "E292", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_in_rest.add(
    "inputs_EU.xlsx", "User defined", "E292", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Te Rest",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_te_rest"},
)
def p_rr_te_rest():
    return _ext_constant_p_rr_te_rest()


_ext_constant_p_rr_te_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E302",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_te_rest",
)

_ext_constant_p_rr_te_rest.add(
    "inputs_EU.xlsx", "SCEN1", "E302", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_te_rest.add(
    "inputs_EU.xlsx", "SCEN2", "E302", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_te_rest.add(
    "inputs_EU.xlsx", "SCEN3", "E302", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_te_rest.add(
    "inputs_EU.xlsx", "SCEN4", "E302", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_te_rest.add(
    "inputs_EU.xlsx", "User defined", "E302", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Mo Rest",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_mo_rest"},
)
def p_rr_mo_rest():
    return _ext_constant_p_rr_mo_rest()


_ext_constant_p_rr_mo_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E297",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_mo_rest",
)

_ext_constant_p_rr_mo_rest.add(
    "inputs_EU.xlsx", "SCEN1", "E297", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_mo_rest.add(
    "inputs_EU.xlsx", "SCEN2", "E297", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_mo_rest.add(
    "inputs_EU.xlsx", "SCEN3", "E297", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_mo_rest.add(
    "inputs_EU.xlsx", "SCEN4", "E297", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_mo_rest.add(
    "inputs_EU.xlsx", "User defined", "E297", {"scenarios": ["User defined"]}
)


@component.add(
    name="by mineral rr Rest",
    units="Dmnl",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"a_lineal_regr_rr_rest": 1, "time": 1, "b_lineal_regr_rr_rest": 1},
)
def by_mineral_rr_rest():
    """
    Recycling rates over time by mineral for the rest of the economy.
    """
    return a_lineal_regr_rr_rest() * time() + b_lineal_regr_rr_rest()


@component.add(
    name="P rr Ag Rest",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_ag_rest"},
)
def p_rr_ag_rest():
    return _ext_constant_p_rr_ag_rest()


_ext_constant_p_rr_ag_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E300",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_ag_rest",
)

_ext_constant_p_rr_ag_rest.add(
    "inputs_EU.xlsx", "SCEN1", "E300", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_ag_rest.add(
    "inputs_EU.xlsx", "SCEN2", "E300", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_ag_rest.add(
    "inputs_EU.xlsx", "SCEN3", "E300", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_ag_rest.add(
    "inputs_EU.xlsx", "SCEN4", "E300", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_ag_rest.add(
    "inputs_EU.xlsx", "User defined", "E300", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Mn Rest",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_mn_rest"},
)
def p_rr_mn_rest():
    return _ext_constant_p_rr_mn_rest()


_ext_constant_p_rr_mn_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E296",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_mn_rest",
)

_ext_constant_p_rr_mn_rest.add(
    "inputs_EU.xlsx", "SCEN1", "E296", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_mn_rest.add(
    "inputs_EU.xlsx", "SCEN2", "E296", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_mn_rest.add(
    "inputs_EU.xlsx", "SCEN3", "E296", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_mn_rest.add(
    "inputs_EU.xlsx", "SCEN4", "E296", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_mn_rest.add(
    "inputs_EU.xlsx", "User defined", "E296", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Al Rest",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_al_rest"},
)
def p_rr_al_rest():
    return _ext_constant_p_rr_al_rest()


_ext_constant_p_rr_al_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E287",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_al_rest",
)

_ext_constant_p_rr_al_rest.add(
    "inputs_EU.xlsx", "SCEN1", "E287", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_al_rest.add(
    "inputs_EU.xlsx", "SCEN2", "E287", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_al_rest.add(
    "inputs_EU.xlsx", "SCEN3", "E287", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_al_rest.add(
    "inputs_EU.xlsx", "SCEN4", "E287", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_al_rest.add(
    "inputs_EU.xlsx", "User defined", "E287", {"scenarios": ["User defined"]}
)


@component.add(
    name="target year P rr minerals Rest",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_target_year_p_rr_minerals_rest"},
)
def target_year_p_rr_minerals_rest():
    """
    Target year of variation recycling rate of minerals for the rest of the economy.
    """
    return _ext_constant_target_year_p_rr_minerals_rest()


_ext_constant_target_year_p_rr_minerals_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B285",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_target_year_p_rr_minerals_rest",
)

_ext_constant_target_year_p_rr_minerals_rest.add(
    "inputs_EU.xlsx", "SCEN1", "B285", {"scenarios": ["SCEN1"]}
)

_ext_constant_target_year_p_rr_minerals_rest.add(
    "inputs_EU.xlsx", "SCEN2", "B285", {"scenarios": ["SCEN2"]}
)

_ext_constant_target_year_p_rr_minerals_rest.add(
    "inputs_EU.xlsx", "SCEN3", "B285", {"scenarios": ["SCEN3"]}
)

_ext_constant_target_year_p_rr_minerals_rest.add(
    "inputs_EU.xlsx", "SCEN4", "B285", {"scenarios": ["SCEN4"]}
)

_ext_constant_target_year_p_rr_minerals_rest.add(
    "inputs_EU.xlsx", "User defined", "B285", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Ga Rest",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_ga_rest"},
)
def p_rr_ga_rest():
    return _ext_constant_p_rr_ga_rest()


_ext_constant_p_rr_ga_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E291",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_ga_rest",
)

_ext_constant_p_rr_ga_rest.add(
    "inputs_EU.xlsx", "SCEN1", "E291", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_ga_rest.add(
    "inputs_EU.xlsx", "SCEN2", "E291", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_ga_rest.add(
    "inputs_EU.xlsx", "SCEN3", "E291", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_ga_rest.add(
    "inputs_EU.xlsx", "SCEN4", "E291", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_ga_rest.add(
    "inputs_EU.xlsx", "User defined", "E291", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Sn Rest",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_sn_rest"},
)
def p_rr_sn_rest():
    return _ext_constant_p_rr_sn_rest()


_ext_constant_p_rr_sn_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E301",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_sn_rest",
)

_ext_constant_p_rr_sn_rest.add(
    "inputs_EU.xlsx", "SCEN1", "E301", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_sn_rest.add(
    "inputs_EU.xlsx", "SCEN2", "E301", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_sn_rest.add(
    "inputs_EU.xlsx", "SCEN3", "E301", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_sn_rest.add(
    "inputs_EU.xlsx", "SCEN4", "E301", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_sn_rest.add(
    "inputs_EU.xlsx", "User defined", "E301", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Pb Rest",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_pb_rest"},
)
def p_rr_pb_rest():
    return _ext_constant_p_rr_pb_rest()


_ext_constant_p_rr_pb_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E299",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_pb_rest",
)

_ext_constant_p_rr_pb_rest.add(
    "inputs_EU.xlsx", "SCEN1", "E299", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_pb_rest.add(
    "inputs_EU.xlsx", "SCEN2", "E299", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_pb_rest.add(
    "inputs_EU.xlsx", "SCEN3", "E299", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_pb_rest.add(
    "inputs_EU.xlsx", "SCEN4", "E299", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_pb_rest.add(
    "inputs_EU.xlsx", "User defined", "E299", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Cr Rest",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_cr_rest"},
)
def p_rr_cr_rest():
    return _ext_constant_p_rr_cr_rest()


_ext_constant_p_rr_cr_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E289",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_cr_rest",
)

_ext_constant_p_rr_cr_rest.add(
    "inputs_EU.xlsx", "SCEN1", "E289", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_cr_rest.add(
    "inputs_EU.xlsx", "SCEN2", "E289", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_cr_rest.add(
    "inputs_EU.xlsx", "SCEN3", "E289", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_cr_rest.add(
    "inputs_EU.xlsx", "SCEN4", "E289", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_cr_rest.add(
    "inputs_EU.xlsx", "User defined", "E289", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Ni Rest",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_ni_rest"},
)
def p_rr_ni_rest():
    return _ext_constant_p_rr_ni_rest()


_ext_constant_p_rr_ni_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E298",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_ni_rest",
)

_ext_constant_p_rr_ni_rest.add(
    "inputs_EU.xlsx", "SCEN1", "E298", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_ni_rest.add(
    "inputs_EU.xlsx", "SCEN2", "E298", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_ni_rest.add(
    "inputs_EU.xlsx", "SCEN3", "E298", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_ni_rest.add(
    "inputs_EU.xlsx", "SCEN4", "E298", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_ni_rest.add(
    "inputs_EU.xlsx", "User defined", "E298", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Fe Rest",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_fe_rest"},
)
def p_rr_fe_rest():
    return _ext_constant_p_rr_fe_rest()


_ext_constant_p_rr_fe_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E293",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_fe_rest",
)

_ext_constant_p_rr_fe_rest.add(
    "inputs_EU.xlsx", "SCEN1", "E293", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_fe_rest.add(
    "inputs_EU.xlsx", "SCEN2", "E293", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_fe_rest.add(
    "inputs_EU.xlsx", "SCEN3", "E293", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_fe_rest.add(
    "inputs_EU.xlsx", "SCEN4", "E293", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_fe_rest.add(
    "inputs_EU.xlsx", "User defined", "E293", {"scenarios": ["User defined"]}
)


@component.add(
    name="by mineral rr variation Rest",
    units="Dmnl",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "historic_improvement_recycling_rates_minerals": 2,
        "by_mineral_rr_rest_1yr": 1,
        "by_mineral_rr_rest": 1,
        "start_year_p_rr_minerals_rest": 1,
    },
)
def by_mineral_rr_variation_rest():
    """
    Variation of recycling rates per mineral for the rest of the economy.
    """
    return if_then_else(
        time() < 2015,
        lambda: historic_improvement_recycling_rates_minerals().expand_dims(
            {"scenarios": _subscript_dict["scenarios"]}, 1
        ),
        lambda: if_then_else(
            (time() < start_year_p_rr_minerals_rest()).expand_dims(
                {"materials": _subscript_dict["materials"]}, 1
            ),
            lambda: historic_improvement_recycling_rates_minerals().expand_dims(
                {"scenarios": _subscript_dict["scenarios"]}, 0
            ),
            lambda: (by_mineral_rr_rest() - by_mineral_rr_rest_1yr()).transpose(
                "scenarios", "materials"
            ),
        ).transpose("materials", "scenarios"),
    )


@component.add(
    name="current recycling rates minerals alt techn",
    units="Dmnl",
    subscripts=["materials"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "current_recycling_rates_minerals": 1,
        "eolrr_minerals_alt_techn_res_vs_total_economy": 1,
    },
)
def current_recycling_rates_minerals_alt_techn():
    """
    Current recycling rates of minerales for alternative technologies. Since these technologies are novel and often include materials which are used in small quantities in complex products, the recycling rates of the used minerals are lower than for the whole economy (following the parameter "EOL-RR minerals alt techn RES vs. total economy").
    """
    return (
        current_recycling_rates_minerals()
        * eolrr_minerals_alt_techn_res_vs_total_economy()
    )


@component.add(
    name="P rr Mg alt techn",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_mg_alt_techn"},
)
def p_rr_mg_alt_techn():
    return _ext_constant_p_rr_mg_alt_techn()


_ext_constant_p_rr_mg_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D295",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_mg_alt_techn",
)

_ext_constant_p_rr_mg_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "D295", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_mg_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "D295", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_mg_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "D295", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_mg_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "D295", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_mg_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "D295", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr minerals alt techn",
    units="Dmnl",
    subscripts=["materials", "scenarios"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "p_rr_al_alt_techn": 1,
        "p_rr_cd_alt_techn": 1,
        "p_rr_cr_alt_techn": 1,
        "p_rr_cu_alt_techn": 1,
        "p_rr_ga_alt_techn": 1,
        "p_rr_in_alt_techn": 1,
        "p_rr_fe_alt_techn": 1,
        "p_rr_li_alt_techn": 1,
        "p_rr_mg_alt_techn": 1,
        "p_rr_mn_alt_techn": 1,
        "p_rr_mo_alt_techn": 1,
        "p_rr_ni_alt_techn": 1,
        "p_rr_pb_alt_techn": 1,
        "p_rr_ag_alt_techn": 1,
        "p_rr_sn_alt_techn": 1,
        "p_rr_te_alt_techn": 1,
        "p_rr_ti_alt_techn": 1,
        "p_rr_v_alt_techn": 1,
        "p_rr_zn_alt_techn": 1,
    },
)
def p_rr_minerals_alt_techn():
    """
    Recycling rates by mineral for alternative technologies (RES elec & EV batteries) selected by user by scenario.
    """
    value = xr.DataArray(
        np.nan,
        {
            "materials": _subscript_dict["materials"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["materials", "scenarios"],
    )
    value.loc[["Adhesive"], :] = 0
    value.loc[["Aluminium"], :] = (
        p_rr_al_alt_techn().expand_dims({"materials": ["Aluminium"]}, 0).values
    )
    value.loc[["Aluminium mirrors"], :] = 0
    value.loc[["Cadmium"], :] = (
        p_rr_cd_alt_techn().expand_dims({"materials": ["Cadmium"]}, 0).values
    )
    value.loc[["Carbon fiber"], :] = 0
    value.loc[["Cement"], :] = 0
    value.loc[["Chromium"], :] = (
        p_rr_cr_alt_techn().expand_dims({"materials": ["Chromium"]}, 0).values
    )
    value.loc[["Copper"], :] = (
        p_rr_cu_alt_techn().expand_dims({"materials": ["Copper"]}, 0).values
    )
    value.loc[["diesel"], :] = 0
    value.loc[["Dy"], :] = 0
    value.loc[['"Electric/electronic components"'], :] = 0
    value.loc[["Evacuation lines"], :] = 0
    value.loc[["Fiberglass"], :] = 0
    value.loc[["Foam glass"], :] = 0
    value.loc[["Galium"], :] = (
        p_rr_ga_alt_techn().expand_dims({"materials": ["Galium"]}, 0).values
    )
    value.loc[["Glass"], :] = 0
    value.loc[["Glass reinforcing plastic"], :] = 0
    value.loc[["gravel"], :] = 0
    value.loc[["Indium"], :] = (
        p_rr_in_alt_techn().expand_dims({"materials": ["Indium"]}, 0).values
    )
    value.loc[["Iron"], :] = (
        p_rr_fe_alt_techn().expand_dims({"materials": ["Iron"]}, 0).values
    )
    value.loc[["KNO3 mined"], :] = 0
    value.loc[["Asphalt"], :] = 0
    value.loc[["Lime"], :] = 0
    value.loc[["Limestone"], :] = 0
    value.loc[["Lithium"], :] = (
        p_rr_li_alt_techn().expand_dims({"materials": ["Lithium"]}, 0).values
    )
    value.loc[["Lubricant"], :] = 0
    value.loc[["Magnesium"], :] = (
        p_rr_mg_alt_techn().expand_dims({"materials": ["Magnesium"]}, 0).values
    )
    value.loc[["Manganese"], :] = (
        p_rr_mn_alt_techn().expand_dims({"materials": ["Manganese"]}, 0).values
    )
    value.loc[["Heavy equipment"], :] = 0
    value.loc[["Concrete"], :] = 0
    value.loc[["Molybdenum"], :] = (
        p_rr_mo_alt_techn().expand_dims({"materials": ["Molybdenum"]}, 0).values
    )
    value.loc[["NaNO3 mined"], :] = 0
    value.loc[["NaNO3 synthetic"], :] = 0
    value.loc[["Neodymium"], :] = 0
    value.loc[["Nickel"], :] = (
        p_rr_ni_alt_techn().expand_dims({"materials": ["Nickel"]}, 0).values
    )
    value.loc[['"Over grid (15%)"'], :] = 0
    value.loc[['"Over grid (5%)"'], :] = 0
    value.loc[["Paint"], :] = 0
    value.loc[["Lead"], :] = (
        p_rr_pb_alt_techn().expand_dims({"materials": ["Lead"]}, 0).values
    )
    value.loc[["Plastics"], :] = 0
    value.loc[["Polypropylene"], :] = 0
    value.loc[["Rock"], :] = 0
    value.loc[["Rock wool"], :] = 0
    value.loc[["Sand"], :] = 0
    value.loc[["Silicon sand"], :] = 0
    value.loc[["Silicon wafer modules"], :] = 0
    value.loc[["Silver"], :] = (
        p_rr_ag_alt_techn().expand_dims({"materials": ["Silver"]}, 0).values
    )
    value.loc[["Site preparation"], :] = 0
    value.loc[["Tin"], :] = (
        p_rr_sn_alt_techn().expand_dims({"materials": ["Tin"]}, 0).values
    )
    value.loc[["soda ash"], :] = 0
    value.loc[["steel"], :] = 0
    value.loc[["synthetic oil"], :] = 0
    value.loc[["tellurium"], :] = (
        p_rr_te_alt_techn().expand_dims({"materials": ["tellurium"]}, 0).values
    )
    value.loc[["titanium"], :] = (
        p_rr_ti_alt_techn().expand_dims({"materials": ["titanium"]}, 0).values
    )
    value.loc[["titanium dioxide"], :] = 0
    value.loc[["vanadium"], :] = (
        p_rr_v_alt_techn().expand_dims({"materials": ["vanadium"]}, 0).values
    )
    value.loc[["wires"], :] = 0
    value.loc[["zinc"], :] = (
        p_rr_zn_alt_techn().expand_dims({"materials": ["zinc"]}, 0).values
    )
    return value


@component.add(
    name="P rr Mn alt techn",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_mn_alt_techn"},
)
def p_rr_mn_alt_techn():
    return _ext_constant_p_rr_mn_alt_techn()


_ext_constant_p_rr_mn_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D296",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_mn_alt_techn",
)

_ext_constant_p_rr_mn_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "D296", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_mn_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "D296", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_mn_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "D296", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_mn_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "D296", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_mn_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "D296", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Mo alt techn",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_mo_alt_techn"},
)
def p_rr_mo_alt_techn():
    return _ext_constant_p_rr_mo_alt_techn()


_ext_constant_p_rr_mo_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D297",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_mo_alt_techn",
)

_ext_constant_p_rr_mo_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "D297", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_mo_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "D297", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_mo_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "D297", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_mo_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "D297", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_mo_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "D297", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Ni alt techn",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_ni_alt_techn"},
)
def p_rr_ni_alt_techn():
    return _ext_constant_p_rr_ni_alt_techn()


_ext_constant_p_rr_ni_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D298",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_ni_alt_techn",
)

_ext_constant_p_rr_ni_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "D298", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_ni_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "D298", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_ni_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "D298", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_ni_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "D298", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_ni_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "D298", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Pb alt techn",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_pb_alt_techn"},
)
def p_rr_pb_alt_techn():
    return _ext_constant_p_rr_pb_alt_techn()


_ext_constant_p_rr_pb_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D299",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_pb_alt_techn",
)

_ext_constant_p_rr_pb_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "D299", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_pb_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "D299", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_pb_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "D299", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_pb_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "D299", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_pb_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "D299", {"scenarios": ["User defined"]}
)


@component.add(
    name="by mineral rr alt techn",
    units="Dmnl",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "a_lineal_regr_rr_alt_techn": 1,
        "time": 1,
        "b_lineal_regr_rr_alt_techn": 1,
    },
)
def by_mineral_rr_alt_techn():
    """
    Recycling rates over time by mineral for alternative technologies (RES elec & EV batteries).
    """
    return a_lineal_regr_rr_alt_techn() * time() + b_lineal_regr_rr_alt_techn()


@component.add(
    name="by mineral rr alt techn 1yr",
    units="Dmnl",
    subscripts=["materials", "scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_by_mineral_rr_alt_techn_1yr": 1},
    other_deps={
        "_delayfixed_by_mineral_rr_alt_techn_1yr": {
            "initial": {"current_recycling_rates_minerals_alt_techn": 1},
            "step": {"by_mineral_rr_alt_techn": 1},
        }
    },
)
def by_mineral_rr_alt_techn_1yr():
    """
    Recycling rates over time delayed 1 year by mineral for alternative technologies (RES elec & EV batteries).
    """
    return _delayfixed_by_mineral_rr_alt_techn_1yr()


_delayfixed_by_mineral_rr_alt_techn_1yr = DelayFixed(
    lambda: by_mineral_rr_alt_techn(),
    lambda: 1,
    lambda: current_recycling_rates_minerals_alt_techn().expand_dims(
        {"scenarios": _subscript_dict["scenarios"]}, 1
    ),
    time_step,
    "_delayfixed_by_mineral_rr_alt_techn_1yr",
)


@component.add(
    name="P rr Al alt techn",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_al_alt_techn"},
)
def p_rr_al_alt_techn():
    return _ext_constant_p_rr_al_alt_techn()


_ext_constant_p_rr_al_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D287",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_al_alt_techn",
)

_ext_constant_p_rr_al_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "D287", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_al_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "D287", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_al_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "D287", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_al_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "D287", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_al_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "D287", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Cd alt techn",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_cd_alt_techn"},
)
def p_rr_cd_alt_techn():
    return _ext_constant_p_rr_cd_alt_techn()


_ext_constant_p_rr_cd_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D288",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_cd_alt_techn",
)

_ext_constant_p_rr_cd_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "D288", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_cd_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "D288", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_cd_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "D288", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_cd_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "D288", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_cd_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "D288", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Cu alt techn",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_cu_alt_techn"},
)
def p_rr_cu_alt_techn():
    return _ext_constant_p_rr_cu_alt_techn()


_ext_constant_p_rr_cu_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D290",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_cu_alt_techn",
)

_ext_constant_p_rr_cu_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "D290", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_cu_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "D290", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_cu_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "D290", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_cu_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "D290", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_cu_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "D290", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Fe alt techn",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_fe_alt_techn"},
)
def p_rr_fe_alt_techn():
    return _ext_constant_p_rr_fe_alt_techn()


_ext_constant_p_rr_fe_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D293",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_fe_alt_techn",
)

_ext_constant_p_rr_fe_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "D293", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_fe_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "D293", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_fe_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "D293", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_fe_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "D293", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_fe_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "D293", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Ga alt techn",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_ga_alt_techn"},
)
def p_rr_ga_alt_techn():
    return _ext_constant_p_rr_ga_alt_techn()


_ext_constant_p_rr_ga_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D291",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_ga_alt_techn",
)

_ext_constant_p_rr_ga_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "D291", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_ga_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "D291", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_ga_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "D291", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_ga_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "D291", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_ga_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "D291", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr In alt techn",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_in_alt_techn"},
)
def p_rr_in_alt_techn():
    return _ext_constant_p_rr_in_alt_techn()


_ext_constant_p_rr_in_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D292",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_in_alt_techn",
)

_ext_constant_p_rr_in_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "D292", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_in_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "D292", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_in_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "D292", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_in_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "D292", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_in_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "D292", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Li alt techn",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_li_alt_techn"},
)
def p_rr_li_alt_techn():
    return _ext_constant_p_rr_li_alt_techn()


_ext_constant_p_rr_li_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D294",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_li_alt_techn",
)

_ext_constant_p_rr_li_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "D294", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_li_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "D294", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_li_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "D294", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_li_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "D294", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_li_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "D294", {"scenarios": ["User defined"]}
)


@component.add(
    name="recycling rates minerals alt techn",
    units="Dmnl",
    subscripts=["materials", "scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rates_minerals_alt_techn": 1},
    other_deps={
        "_integ_recycling_rates_minerals_alt_techn": {
            "initial": {
                "current_recycling_rates_minerals_alt_techn": 1,
                "all_minerals_virgin": 1,
            },
            "step": {"improvement_recycling_rates_minerals_alt_techn": 1},
        }
    },
)
def recycling_rates_minerals_alt_techn():
    """
    Recycling rates minerals of alternative technologies (RES elec & EV batteries).
    """
    return _integ_recycling_rates_minerals_alt_techn()


_integ_recycling_rates_minerals_alt_techn = Integ(
    lambda: improvement_recycling_rates_minerals_alt_techn(),
    lambda: (
        current_recycling_rates_minerals_alt_techn() * all_minerals_virgin()
    ).expand_dims({"scenarios": _subscript_dict["scenarios"]}, 1),
    "_integ_recycling_rates_minerals_alt_techn",
)


@component.add(
    name="P rr V alt techn",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_v_alt_techn"},
)
def p_rr_v_alt_techn():
    return _ext_constant_p_rr_v_alt_techn()


_ext_constant_p_rr_v_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D304",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_v_alt_techn",
)

_ext_constant_p_rr_v_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "D304", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_v_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "D304", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_v_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "D304", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_v_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "D304", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_v_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "D304", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Zn alt techn",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_zn_alt_techn"},
)
def p_rr_zn_alt_techn():
    return _ext_constant_p_rr_zn_alt_techn()


_ext_constant_p_rr_zn_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D305",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_zn_alt_techn",
)

_ext_constant_p_rr_zn_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "D305", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_zn_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "D305", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_zn_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "D305", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_zn_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "D305", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_zn_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "D305", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Ti alt techn",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_ti_alt_techn"},
)
def p_rr_ti_alt_techn():
    return _ext_constant_p_rr_ti_alt_techn()


_ext_constant_p_rr_ti_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D303",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_ti_alt_techn",
)

_ext_constant_p_rr_ti_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "D303", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_ti_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "D303", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_ti_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "D303", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_ti_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "D303", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_ti_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "D303", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Cr alt techn",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_cr_alt_techn"},
)
def p_rr_cr_alt_techn():
    return _ext_constant_p_rr_cr_alt_techn()


_ext_constant_p_rr_cr_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D289",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_cr_alt_techn",
)

_ext_constant_p_rr_cr_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "D289", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_cr_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "D289", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_cr_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "D289", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_cr_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "D289", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_cr_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "D289", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Ag alt techn",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_ag_alt_techn"},
)
def p_rr_ag_alt_techn():
    return _ext_constant_p_rr_ag_alt_techn()


_ext_constant_p_rr_ag_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D300",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_ag_alt_techn",
)

_ext_constant_p_rr_ag_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "D300", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_ag_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "D300", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_ag_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "D300", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_ag_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "D300", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_ag_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "D300", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Sn alt techn",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_sn_alt_techn"},
)
def p_rr_sn_alt_techn():
    return _ext_constant_p_rr_sn_alt_techn()


_ext_constant_p_rr_sn_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D301",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_sn_alt_techn",
)

_ext_constant_p_rr_sn_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "D301", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_sn_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "D301", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_sn_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "D301", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_sn_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "D301", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_sn_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "D301", {"scenarios": ["User defined"]}
)


@component.add(
    name="P rr Te alt techn",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_rr_te_alt_techn"},
)
def p_rr_te_alt_techn():
    return _ext_constant_p_rr_te_alt_techn()


_ext_constant_p_rr_te_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D302",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_rr_te_alt_techn",
)

_ext_constant_p_rr_te_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "D302", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_rr_te_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "D302", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_rr_te_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "D302", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_rr_te_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "D302", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_rr_te_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "D302", {"scenarios": ["User defined"]}
)


@component.add(
    name="improvement recycling rates minerals alt techn",
    units="Dmnl",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "historic_improvement_recycling_rates_minerals": 1,
        "common_rr_minerals_variation_alt_techn": 1,
        "choose_targets_mineral_recycling_rates": 1,
        "by_mineral_rr_variation_alt_techn": 1,
        "recycling_rates_minerals_alt_techn": 1,
        "constrain_rr_improv_for_alt_techn_per_mineral": 1,
    },
)
def improvement_recycling_rates_minerals_alt_techn():
    """
    Annual improvement of the recycling rates of minerals for alternative technologies (RES elec & EV batteries).
    """
    return (
        if_then_else(
            time() < 2015,
            lambda: historic_improvement_recycling_rates_minerals().expand_dims(
                {"scenarios": _subscript_dict["scenarios"]}, 1
            ),
            lambda: if_then_else(
                (choose_targets_mineral_recycling_rates() == 2).expand_dims(
                    {"materials": _subscript_dict["materials"]}, 1
                ),
                lambda: (
                    common_rr_minerals_variation_alt_techn()
                    * recycling_rates_minerals_alt_techn()
                ).transpose("scenarios", "materials"),
                lambda: by_mineral_rr_variation_alt_techn().transpose(
                    "scenarios", "materials"
                ),
            ).transpose("materials", "scenarios"),
        )
        * constrain_rr_improv_for_alt_techn_per_mineral()
    )


@component.add(
    name="by mineral rr variation alt techn",
    units="Dmnl",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "historic_improvement_recycling_rates_minerals": 2,
        "by_mineral_rr_alt_techn_1yr": 1,
        "by_mineral_rr_alt_techn": 1,
        "start_year_p_rr_minerals_alt_techn": 1,
    },
)
def by_mineral_rr_variation_alt_techn():
    """
    Variation of recycling rates per mineral for alternative technologies (RES elec & EV batteries).
    """
    return if_then_else(
        time() < 2015,
        lambda: historic_improvement_recycling_rates_minerals().expand_dims(
            {"scenarios": _subscript_dict["scenarios"]}, 1
        ),
        lambda: if_then_else(
            (time() < start_year_p_rr_minerals_alt_techn()).expand_dims(
                {"materials": _subscript_dict["materials"]}, 1
            ),
            lambda: historic_improvement_recycling_rates_minerals().expand_dims(
                {"scenarios": _subscript_dict["scenarios"]}, 0
            ),
            lambda: (
                by_mineral_rr_alt_techn() - by_mineral_rr_alt_techn_1yr()
            ).transpose("scenarios", "materials"),
        ).transpose("materials", "scenarios"),
    )


@component.add(
    name="start year P rr minerals alt techn",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_start_year_p_rr_minerals_alt_techn"},
)
def start_year_p_rr_minerals_alt_techn():
    """
    Start year of variation recycling rate of minerals for alternative technologies (RES elec & EV batteries).
    """
    return _ext_constant_start_year_p_rr_minerals_alt_techn()


_ext_constant_start_year_p_rr_minerals_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B286",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_year_p_rr_minerals_alt_techn",
)

_ext_constant_start_year_p_rr_minerals_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "B286", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_year_p_rr_minerals_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "B286", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_year_p_rr_minerals_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "B286", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_year_p_rr_minerals_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "B286", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_year_p_rr_minerals_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "B286", {"scenarios": ["User defined"]}
)


@component.add(
    name="target year P rr minerals alt techn",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_target_year_p_rr_minerals_alt_techn"},
)
def target_year_p_rr_minerals_alt_techn():
    """
    Target year of variation recycling rate of minerals for alternative technologies (RES elec & EV batteries).
    """
    return _ext_constant_target_year_p_rr_minerals_alt_techn()


_ext_constant_target_year_p_rr_minerals_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B285",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_target_year_p_rr_minerals_alt_techn",
)

_ext_constant_target_year_p_rr_minerals_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "B285", {"scenarios": ["SCEN1"]}
)

_ext_constant_target_year_p_rr_minerals_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "B285", {"scenarios": ["SCEN2"]}
)

_ext_constant_target_year_p_rr_minerals_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "B285", {"scenarios": ["SCEN3"]}
)

_ext_constant_target_year_p_rr_minerals_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "B285", {"scenarios": ["SCEN4"]}
)

_ext_constant_target_year_p_rr_minerals_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "B285", {"scenarios": ["User defined"]}
)


@component.add(
    name="SF6 emissions RCP",
    units="tons/Year",
    subscripts=["RCP Scenario"],
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_sf6_emissions_rcp",
        "__data__": "_ext_data_sf6_emissions_rcp",
        "time": 1,
    },
)
def sf6_emissions_rcp():
    """
    Historic data + projections "Representative Concentration Pathways" (RCPs, see http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare)
    """
    return _ext_data_sf6_emissions_rcp(time())


_ext_data_sf6_emissions_rcp = ExtData(
    "inputs_EU.xlsx",
    "Climate",
    "50",
    "J63",
    "interpolate",
    {"RCP Scenario": ["RCP26"]},
    _root,
    {"RCP Scenario": _subscript_dict["RCP Scenario"]},
    "_ext_data_sf6_emissions_rcp",
)

_ext_data_sf6_emissions_rcp.add(
    "inputs_EU.xlsx", "Climate", "50", "J64", "interpolate", {"RCP Scenario": ["RCP45"]}
)

_ext_data_sf6_emissions_rcp.add(
    "inputs_EU.xlsx", "Climate", "50", "J65", "interpolate", {"RCP Scenario": ["RCP60"]}
)

_ext_data_sf6_emissions_rcp.add(
    "inputs_EU.xlsx", "Climate", "50", "J66", "interpolate", {"RCP Scenario": ["RCP85"]}
)


@component.add(
    name="Choose RCP",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_choose_rcp"},
)
def choose_rcp():
    """
    Choose RCP (Representative Concentration Pathway) 1. RCP 2.6 2. RCP 4.5 3. RCP 6.0 4. RCP 8.5
    """
    return _ext_constant_choose_rcp()


_ext_constant_choose_rcp = ExtConstant(
    "inputs_EU.xlsx",
    "SCEN1",
    "G116",
    {"scenarios": ["SCEN1"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_choose_rcp",
)

_ext_constant_choose_rcp.add(
    "inputs_EU.xlsx", "SCEN2", "G116", {"scenarios": ["SCEN2"]}
)

_ext_constant_choose_rcp.add(
    "inputs_EU.xlsx", "SCEN3", "G116", {"scenarios": ["SCEN3"]}
)

_ext_constant_choose_rcp.add(
    "inputs_EU.xlsx", "SCEN4", "G116", {"scenarios": ["SCEN4"]}
)

_ext_constant_choose_rcp.add("inputs_EU.xlsx", "BAU", "G116", {"scenarios": ["BAU"]})

_ext_constant_choose_rcp.add(
    "inputs_EU.xlsx", "User defined", "G116", {"scenarios": ["User defined"]}
)


@component.add(
    name="CH4 anthro emissions RCP",
    units="Mton/Year",
    subscripts=["RCP Scenario"],
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_ch4_anthro_emissions_rcp",
        "__data__": "_ext_data_ch4_anthro_emissions_rcp",
        "time": 1,
    },
)
def ch4_anthro_emissions_rcp():
    """
    "Representative Concentration Pathways" (RCPs, see http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare)
    """
    return _ext_data_ch4_anthro_emissions_rcp(time())


_ext_data_ch4_anthro_emissions_rcp = ExtData(
    "inputs_EU.xlsx",
    "Climate",
    "50",
    "J51",
    "interpolate",
    {"RCP Scenario": ["RCP26"]},
    _root,
    {"RCP Scenario": _subscript_dict["RCP Scenario"]},
    "_ext_data_ch4_anthro_emissions_rcp",
)

_ext_data_ch4_anthro_emissions_rcp.add(
    "inputs_EU.xlsx", "Climate", "50", "J52", "interpolate", {"RCP Scenario": ["RCP45"]}
)

_ext_data_ch4_anthro_emissions_rcp.add(
    "inputs_EU.xlsx", "Climate", "50", "J53", "interpolate", {"RCP Scenario": ["RCP60"]}
)

_ext_data_ch4_anthro_emissions_rcp.add(
    "inputs_EU.xlsx", "Climate", "50", "J54", "interpolate", {"RCP Scenario": ["RCP85"]}
)


@component.add(
    name="HFC emissions",
    units="tons/Year",
    subscripts=["HFC type", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "choose_rcp": 27,
        "hfc_emissions_rcp_26": 9,
        "hfc_emissions_rcp_60": 9,
        "hfc_emissions_rcp_45": 9,
        "hfc_emissions_rcp_85": 9,
    },
)
def hfc_emissions():
    """
    Historic data + projections "Representative Concentration Pathways" (RCPs, see http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare) Choose RCP: 1. RCP 2.6 2. RCP 4.5 3. RCP 6.0 4. RCP 8.5
    """
    value = xr.DataArray(
        np.nan,
        {
            "HFC type": _subscript_dict["HFC type"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["HFC type", "scenarios"],
    )
    value.loc[["HFC134a"], :] = (
        if_then_else(
            choose_rcp() == 1,
            lambda: xr.DataArray(
                float(hfc_emissions_rcp_26().loc["HFC134a"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                choose_rcp() == 2,
                lambda: xr.DataArray(
                    float(hfc_emissions_rcp_45().loc["HFC134a"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    choose_rcp() == 3,
                    lambda: xr.DataArray(
                        float(hfc_emissions_rcp_60().loc["HFC134a"]),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                    lambda: xr.DataArray(
                        float(hfc_emissions_rcp_85().loc["HFC134a"]),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                ),
            ),
        )
        .expand_dims({"GHGs": ["HFC134a"]}, 0)
        .values
    )
    value.loc[["HFC23"], :] = (
        if_then_else(
            choose_rcp() == 1,
            lambda: xr.DataArray(
                float(hfc_emissions_rcp_26().loc["HFC23"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                choose_rcp() == 2,
                lambda: xr.DataArray(
                    float(hfc_emissions_rcp_45().loc["HFC23"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    choose_rcp() == 3,
                    lambda: xr.DataArray(
                        float(hfc_emissions_rcp_60().loc["HFC23"]),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                    lambda: xr.DataArray(
                        float(hfc_emissions_rcp_85().loc["HFC23"]),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                ),
            ),
        )
        .expand_dims({"GHGs": ["HFC23"]}, 0)
        .values
    )
    value.loc[["HFC32"], :] = (
        if_then_else(
            choose_rcp() == 1,
            lambda: xr.DataArray(
                float(hfc_emissions_rcp_26().loc["HFC32"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                choose_rcp() == 2,
                lambda: xr.DataArray(
                    float(hfc_emissions_rcp_45().loc["HFC32"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    choose_rcp() == 3,
                    lambda: xr.DataArray(
                        float(hfc_emissions_rcp_60().loc["HFC32"]),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                    lambda: xr.DataArray(
                        float(hfc_emissions_rcp_85().loc["HFC32"]),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                ),
            ),
        )
        .expand_dims({"GHGs": ["HFC32"]}, 0)
        .values
    )
    value.loc[["HFC125"], :] = (
        if_then_else(
            choose_rcp() == 1,
            lambda: xr.DataArray(
                float(hfc_emissions_rcp_26().loc["HFC125"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                choose_rcp() == 2,
                lambda: xr.DataArray(
                    float(hfc_emissions_rcp_45().loc["HFC125"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    choose_rcp() == 3,
                    lambda: xr.DataArray(
                        float(hfc_emissions_rcp_60().loc["HFC125"]),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                    lambda: xr.DataArray(
                        float(hfc_emissions_rcp_85().loc["HFC125"]),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                ),
            ),
        )
        .expand_dims({"GHGs": ["HFC125"]}, 0)
        .values
    )
    value.loc[["HFC143a"], :] = (
        if_then_else(
            choose_rcp() == 1,
            lambda: xr.DataArray(
                float(hfc_emissions_rcp_26().loc["HFC143a"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                choose_rcp() == 2,
                lambda: xr.DataArray(
                    float(hfc_emissions_rcp_45().loc["HFC143a"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    choose_rcp() == 3,
                    lambda: xr.DataArray(
                        float(hfc_emissions_rcp_60().loc["HFC143a"]),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                    lambda: xr.DataArray(
                        float(hfc_emissions_rcp_85().loc["HFC143a"]),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                ),
            ),
        )
        .expand_dims({"GHGs": ["HFC143a"]}, 0)
        .values
    )
    value.loc[["HFC152a"], :] = (
        if_then_else(
            choose_rcp() == 1,
            lambda: xr.DataArray(
                float(hfc_emissions_rcp_26().loc["HFC152a"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                choose_rcp() == 2,
                lambda: xr.DataArray(
                    float(hfc_emissions_rcp_45().loc["HFC152a"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    choose_rcp() == 3,
                    lambda: xr.DataArray(
                        float(hfc_emissions_rcp_60().loc["HFC152a"]),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                    lambda: xr.DataArray(
                        float(hfc_emissions_rcp_85().loc["HFC152a"]),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                ),
            ),
        )
        .expand_dims({"GHGs": ["HFC152a"]}, 0)
        .values
    )
    value.loc[["HFC227ea"], :] = (
        if_then_else(
            choose_rcp() == 1,
            lambda: xr.DataArray(
                float(hfc_emissions_rcp_26().loc["HFC227ea"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                choose_rcp() == 2,
                lambda: xr.DataArray(
                    float(hfc_emissions_rcp_45().loc["HFC227ea"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    choose_rcp() == 3,
                    lambda: xr.DataArray(
                        float(hfc_emissions_rcp_60().loc["HFC227ea"]),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                    lambda: xr.DataArray(
                        float(hfc_emissions_rcp_85().loc["HFC227ea"]),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                ),
            ),
        )
        .expand_dims({"GHGs": ["HFC227ea"]}, 0)
        .values
    )
    value.loc[["HFC245ca"], :] = (
        if_then_else(
            choose_rcp() == 1,
            lambda: xr.DataArray(
                float(hfc_emissions_rcp_26().loc["HFC245ca"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                choose_rcp() == 2,
                lambda: xr.DataArray(
                    float(hfc_emissions_rcp_45().loc["HFC245ca"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    choose_rcp() == 3,
                    lambda: xr.DataArray(
                        float(hfc_emissions_rcp_60().loc["HFC245ca"]),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                    lambda: xr.DataArray(
                        float(hfc_emissions_rcp_85().loc["HFC245ca"]),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                ),
            ),
        )
        .expand_dims({"GHGs": ["HFC245ca"]}, 0)
        .values
    )
    value.loc[["HFC4310mee"], :] = (
        if_then_else(
            choose_rcp() == 1,
            lambda: xr.DataArray(
                float(hfc_emissions_rcp_26().loc["HFC4310mee"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                choose_rcp() == 2,
                lambda: xr.DataArray(
                    float(hfc_emissions_rcp_45().loc["HFC4310mee"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    choose_rcp() == 3,
                    lambda: xr.DataArray(
                        float(hfc_emissions_rcp_60().loc["HFC4310mee"]),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                    lambda: xr.DataArray(
                        float(hfc_emissions_rcp_85().loc["HFC4310mee"]),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                ),
            ),
        )
        .expand_dims({"GHGs": ["HFC4310mee"]}, 0)
        .values
    )
    return value


@component.add(
    name='"HFC emissions RCP 2.6"',
    units="tons/Year",
    subscripts=["HFC type"],
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_hfc_emissions_rcp_26",
        "__data__": "_ext_data_hfc_emissions_rcp_26",
        "time": 1,
    },
)
def hfc_emissions_rcp_26():
    """
    Historic data + projections "Representative Concentration Pathways" (RCPs, see http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare)
    """
    return _ext_data_hfc_emissions_rcp_26(time())


_ext_data_hfc_emissions_rcp_26 = ExtData(
    "inputs_EU.xlsx",
    "Climate",
    "50",
    "J68",
    "interpolate",
    {"HFC type": ["HFC134a"]},
    _root,
    {"HFC type": _subscript_dict["HFC type"]},
    "_ext_data_hfc_emissions_rcp_26",
)

_ext_data_hfc_emissions_rcp_26.add(
    "inputs_EU.xlsx", "Climate", "50", "J72", "interpolate", {"HFC type": ["HFC23"]}
)

_ext_data_hfc_emissions_rcp_26.add(
    "inputs_EU.xlsx", "Climate", "50", "J76", "interpolate", {"HFC type": ["HFC32"]}
)

_ext_data_hfc_emissions_rcp_26.add(
    "inputs_EU.xlsx", "Climate", "50", "J80", "interpolate", {"HFC type": ["HFC125"]}
)

_ext_data_hfc_emissions_rcp_26.add(
    "inputs_EU.xlsx", "Climate", "50", "J84", "interpolate", {"HFC type": ["HFC143a"]}
)

_ext_data_hfc_emissions_rcp_26.add(
    "inputs_EU.xlsx", "Climate", "50", "J88", "interpolate", {"HFC type": ["HFC152a"]}
)

_ext_data_hfc_emissions_rcp_26.add(
    "inputs_EU.xlsx", "Climate", "50", "J92", "interpolate", {"HFC type": ["HFC227ea"]}
)

_ext_data_hfc_emissions_rcp_26.add(
    "inputs_EU.xlsx", "Climate", "50", "J96", "interpolate", {"HFC type": ["HFC245ca"]}
)

_ext_data_hfc_emissions_rcp_26.add(
    "inputs_EU.xlsx",
    "Climate",
    "50",
    "J100",
    "interpolate",
    {"HFC type": ["HFC4310mee"]},
)


@component.add(
    name='"HFC emissions RCP 4.5"',
    units="tons/Year",
    subscripts=["HFC type"],
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_hfc_emissions_rcp_45",
        "__data__": "_ext_data_hfc_emissions_rcp_45",
        "time": 1,
    },
)
def hfc_emissions_rcp_45():
    """
    Historic data + projections "Representative Concentration Pathways" (RCPs, see http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare)
    """
    return _ext_data_hfc_emissions_rcp_45(time())


_ext_data_hfc_emissions_rcp_45 = ExtData(
    "inputs_EU.xlsx",
    "Climate",
    "50",
    "J69",
    "interpolate",
    {"HFC type": ["HFC134a"]},
    _root,
    {"HFC type": _subscript_dict["HFC type"]},
    "_ext_data_hfc_emissions_rcp_45",
)

_ext_data_hfc_emissions_rcp_45.add(
    "inputs_EU.xlsx", "Climate", "50", "J73", "interpolate", {"HFC type": ["HFC23"]}
)

_ext_data_hfc_emissions_rcp_45.add(
    "inputs_EU.xlsx", "Climate", "50", "J77", "interpolate", {"HFC type": ["HFC32"]}
)

_ext_data_hfc_emissions_rcp_45.add(
    "inputs_EU.xlsx", "Climate", "50", "J81", "interpolate", {"HFC type": ["HFC125"]}
)

_ext_data_hfc_emissions_rcp_45.add(
    "inputs_EU.xlsx", "Climate", "50", "J85", "interpolate", {"HFC type": ["HFC143a"]}
)

_ext_data_hfc_emissions_rcp_45.add(
    "inputs_EU.xlsx", "Climate", "50", "J89", "interpolate", {"HFC type": ["HFC152a"]}
)

_ext_data_hfc_emissions_rcp_45.add(
    "inputs_EU.xlsx", "Climate", "50", "J93", "interpolate", {"HFC type": ["HFC227ea"]}
)

_ext_data_hfc_emissions_rcp_45.add(
    "inputs_EU.xlsx", "Climate", "50", "J97", "interpolate", {"HFC type": ["HFC245ca"]}
)

_ext_data_hfc_emissions_rcp_45.add(
    "inputs_EU.xlsx",
    "Climate",
    "50",
    "J101",
    "interpolate",
    {"HFC type": ["HFC4310mee"]},
)


@component.add(
    name='"HFC emissions RCP 6.0"',
    units="tons/Year",
    subscripts=["HFC type"],
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_hfc_emissions_rcp_60",
        "__data__": "_ext_data_hfc_emissions_rcp_60",
        "time": 1,
    },
)
def hfc_emissions_rcp_60():
    """
    Historic data + projections "Representative Concentration Pathways" (RCPs, see http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare)
    """
    return _ext_data_hfc_emissions_rcp_60(time())


_ext_data_hfc_emissions_rcp_60 = ExtData(
    "inputs_EU.xlsx",
    "Climate",
    "50",
    "J70",
    "interpolate",
    {"HFC type": ["HFC134a"]},
    _root,
    {"HFC type": _subscript_dict["HFC type"]},
    "_ext_data_hfc_emissions_rcp_60",
)

_ext_data_hfc_emissions_rcp_60.add(
    "inputs_EU.xlsx", "Climate", "50", "J74", "interpolate", {"HFC type": ["HFC23"]}
)

_ext_data_hfc_emissions_rcp_60.add(
    "inputs_EU.xlsx", "Climate", "50", "J78", "interpolate", {"HFC type": ["HFC32"]}
)

_ext_data_hfc_emissions_rcp_60.add(
    "inputs_EU.xlsx", "Climate", "50", "J82", "interpolate", {"HFC type": ["HFC125"]}
)

_ext_data_hfc_emissions_rcp_60.add(
    "inputs_EU.xlsx", "Climate", "50", "J86", "interpolate", {"HFC type": ["HFC143a"]}
)

_ext_data_hfc_emissions_rcp_60.add(
    "inputs_EU.xlsx", "Climate", "50", "J90", "interpolate", {"HFC type": ["HFC152a"]}
)

_ext_data_hfc_emissions_rcp_60.add(
    "inputs_EU.xlsx", "Climate", "50", "J94", "interpolate", {"HFC type": ["HFC227ea"]}
)

_ext_data_hfc_emissions_rcp_60.add(
    "inputs_EU.xlsx", "Climate", "50", "J98", "interpolate", {"HFC type": ["HFC245ca"]}
)

_ext_data_hfc_emissions_rcp_60.add(
    "inputs_EU.xlsx",
    "Climate",
    "50",
    "J102",
    "interpolate",
    {"HFC type": ["HFC4310mee"]},
)


@component.add(
    name="PFC emissions",
    units="tons/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"choose_rcp": 3, "pfc_emissions_rcp": 4},
)
def pfc_emissions():
    """
    Historic data + projections "Representative Concentration Pathways" (RCPs, see http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare) Choose RCP: 1. RCP 2.6 2. RCP 4.5 3. RCP 6.0 4. RCP 8.5
    """
    return if_then_else(
        choose_rcp() == 1,
        lambda: xr.DataArray(
            float(pfc_emissions_rcp().loc["RCP26"]),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            choose_rcp() == 2,
            lambda: xr.DataArray(
                float(pfc_emissions_rcp().loc["RCP45"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                choose_rcp() == 3,
                lambda: xr.DataArray(
                    float(pfc_emissions_rcp().loc["RCP60"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: xr.DataArray(
                    float(pfc_emissions_rcp().loc["RCP85"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
            ),
        ),
    )


@component.add(
    name="PFC emissions RCP",
    units="tons/Year",
    subscripts=["RCP Scenario"],
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_pfc_emissions_rcp",
        "__data__": "_ext_data_pfc_emissions_rcp",
        "time": 1,
    },
)
def pfc_emissions_rcp():
    """
    Historic data + projections "Representative Concentration Pathways" (RCPs, see http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare)
    """
    return _ext_data_pfc_emissions_rcp(time())


_ext_data_pfc_emissions_rcp = ExtData(
    "inputs_EU.xlsx",
    "Climate",
    "50",
    "J59",
    "interpolate",
    {"RCP Scenario": ["RCP26"]},
    _root,
    {"RCP Scenario": _subscript_dict["RCP Scenario"]},
    "_ext_data_pfc_emissions_rcp",
)

_ext_data_pfc_emissions_rcp.add(
    "inputs_EU.xlsx", "Climate", "50", "J60", "interpolate", {"RCP Scenario": ["RCP45"]}
)

_ext_data_pfc_emissions_rcp.add(
    "inputs_EU.xlsx", "Climate", "50", "J61", "interpolate", {"RCP Scenario": ["RCP60"]}
)

_ext_data_pfc_emissions_rcp.add(
    "inputs_EU.xlsx", "Climate", "50", "J62", "interpolate", {"RCP Scenario": ["RCP85"]}
)


@component.add(
    name="SF6 emissions",
    units="tons/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"choose_rcp": 3, "sf6_emissions_rcp": 4},
)
def sf6_emissions():
    """
    Historic data + projections "Representative Concentration Pathways" (RCPs, see http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare) Choose RCP: 1. RCP 2.6 2. RCP 4.5 3. RCP 6.0 4. RCP 8.5
    """
    return if_then_else(
        choose_rcp() == 1,
        lambda: xr.DataArray(
            float(sf6_emissions_rcp().loc["RCP26"]),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            choose_rcp() == 2,
            lambda: xr.DataArray(
                float(sf6_emissions_rcp().loc["RCP45"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                choose_rcp() == 3,
                lambda: xr.DataArray(
                    float(sf6_emissions_rcp().loc["RCP60"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: xr.DataArray(
                    float(sf6_emissions_rcp().loc["RCP85"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
            ),
        ),
    )


@component.add(
    name="N2O Anthro Emissions",
    units="Mton N/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"choose_rcp": 3, "n2o_anthro_emissions_rcp": 4},
)
def n2o_anthro_emissions():
    """
    Historic data + projections "Representative Concentration Pathways" (RCPs, see http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare) Choose RCP: 1. RCP 2.6 2. RCP 4.5 3. RCP 6.0 4. RCP 8.5
    """
    return if_then_else(
        choose_rcp() == 1,
        lambda: xr.DataArray(
            float(n2o_anthro_emissions_rcp().loc["RCP26"]),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            choose_rcp() == 2,
            lambda: xr.DataArray(
                float(n2o_anthro_emissions_rcp().loc["RCP45"]),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                choose_rcp() == 3,
                lambda: xr.DataArray(
                    float(n2o_anthro_emissions_rcp().loc["RCP60"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: xr.DataArray(
                    float(n2o_anthro_emissions_rcp().loc["RCP85"]),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
            ),
        ),
    )


@component.add(
    name="N2O Anthro Emissions RCP",
    units="Mton N/Year",
    subscripts=["RCP Scenario"],
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_n2o_anthro_emissions_rcp",
        "__data__": "_ext_data_n2o_anthro_emissions_rcp",
        "time": 1,
    },
)
def n2o_anthro_emissions_rcp():
    """
    Historic data + projections "Representative Concentration Pathways" (RCPs, see http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare)
    """
    return _ext_data_n2o_anthro_emissions_rcp(time())


_ext_data_n2o_anthro_emissions_rcp = ExtData(
    "inputs_EU.xlsx",
    "Climate",
    "50",
    "J55",
    "interpolate",
    {"RCP Scenario": ["RCP26"]},
    _root,
    {"RCP Scenario": _subscript_dict["RCP Scenario"]},
    "_ext_data_n2o_anthro_emissions_rcp",
)

_ext_data_n2o_anthro_emissions_rcp.add(
    "inputs_EU.xlsx", "Climate", "50", "J56", "interpolate", {"RCP Scenario": ["RCP45"]}
)

_ext_data_n2o_anthro_emissions_rcp.add(
    "inputs_EU.xlsx", "Climate", "50", "J57", "interpolate", {"RCP Scenario": ["RCP60"]}
)

_ext_data_n2o_anthro_emissions_rcp.add(
    "inputs_EU.xlsx", "Climate", "50", "J58", "interpolate", {"RCP Scenario": ["RCP85"]}
)


@component.add(
    name='"HFC emissions RCP 8.5"',
    units="tons/Year",
    subscripts=["HFC type"],
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_hfc_emissions_rcp_85",
        "__data__": "_ext_data_hfc_emissions_rcp_85",
        "time": 1,
    },
)
def hfc_emissions_rcp_85():
    """
    Historic data + projections "Representative Concentration Pathways" (RCPs, see http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare)
    """
    return _ext_data_hfc_emissions_rcp_85(time())


_ext_data_hfc_emissions_rcp_85 = ExtData(
    "inputs_EU.xlsx",
    "Climate",
    "50",
    "J71",
    "interpolate",
    {"HFC type": ["HFC134a"]},
    _root,
    {"HFC type": _subscript_dict["HFC type"]},
    "_ext_data_hfc_emissions_rcp_85",
)

_ext_data_hfc_emissions_rcp_85.add(
    "inputs_EU.xlsx", "Climate", "50", "J75", "interpolate", {"HFC type": ["HFC23"]}
)

_ext_data_hfc_emissions_rcp_85.add(
    "inputs_EU.xlsx", "Climate", "50", "J79", "interpolate", {"HFC type": ["HFC32"]}
)

_ext_data_hfc_emissions_rcp_85.add(
    "inputs_EU.xlsx", "Climate", "50", "J83", "interpolate", {"HFC type": ["HFC125"]}
)

_ext_data_hfc_emissions_rcp_85.add(
    "inputs_EU.xlsx", "Climate", "50", "J87", "interpolate", {"HFC type": ["HFC143a"]}
)

_ext_data_hfc_emissions_rcp_85.add(
    "inputs_EU.xlsx", "Climate", "50", "J91", "interpolate", {"HFC type": ["HFC152a"]}
)

_ext_data_hfc_emissions_rcp_85.add(
    "inputs_EU.xlsx", "Climate", "50", "J95", "interpolate", {"HFC type": ["HFC227ea"]}
)

_ext_data_hfc_emissions_rcp_85.add(
    "inputs_EU.xlsx", "Climate", "50", "J99", "interpolate", {"HFC type": ["HFC245ca"]}
)

_ext_data_hfc_emissions_rcp_85.add(
    "inputs_EU.xlsx",
    "Climate",
    "50",
    "J103",
    "interpolate",
    {"HFC type": ["HFC4310mee"]},
)


@component.add(
    name="common rr minerals variation alt techn",
    units="Dmnl",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "start_year_p_common_rr_minerals_alt_techn": 1,
        "historic_improvement_recycling_rates_minerals": 1,
        "p_common_rr_minerals_variation_alt_techn": 1,
    },
)
def common_rr_minerals_variation_alt_techn():
    """
    Recycling rates of minererals (common annual variation).
    """
    return if_then_else(
        (time() < start_year_p_common_rr_minerals_alt_techn()).expand_dims(
            {"materials": _subscript_dict["materials"]}, 1
        ),
        lambda: historic_improvement_recycling_rates_minerals().expand_dims(
            {"scenarios": _subscript_dict["scenarios"]}, 0
        ),
        lambda: p_common_rr_minerals_variation_alt_techn().expand_dims(
            {"materials": _subscript_dict["materials"]}, 1
        ),
    ).transpose("materials", "scenarios")


@component.add(
    name="choose targets mineral recycling rates",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_choose_targets_mineral_recycling_rates"},
)
def choose_targets_mineral_recycling_rates():
    """
    1- Disaggregated by mineral. 2- Common annual variation for all minerals.
    """
    return _ext_constant_choose_targets_mineral_recycling_rates()


_ext_constant_choose_targets_mineral_recycling_rates = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D283",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_choose_targets_mineral_recycling_rates",
)

_ext_constant_choose_targets_mineral_recycling_rates.add(
    "inputs_EU.xlsx", "SCEN1", "D283", {"scenarios": ["SCEN1"]}
)

_ext_constant_choose_targets_mineral_recycling_rates.add(
    "inputs_EU.xlsx", "SCEN2", "D283", {"scenarios": ["SCEN2"]}
)

_ext_constant_choose_targets_mineral_recycling_rates.add(
    "inputs_EU.xlsx", "SCEN3", "D283", {"scenarios": ["SCEN3"]}
)

_ext_constant_choose_targets_mineral_recycling_rates.add(
    "inputs_EU.xlsx", "SCEN4", "D283", {"scenarios": ["SCEN4"]}
)

_ext_constant_choose_targets_mineral_recycling_rates.add(
    "inputs_EU.xlsx", "User defined", "D283", {"scenarios": ["User defined"]}
)


@component.add(
    name="Total water use per capita",
    units="dam3/person",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_water_use": 1, "population": 1},
)
def total_water_use_per_capita():
    """
    Total water use (all types aggregated) per capita.
    """
    return total_water_use() / population()


@component.add(
    name="Total water use",
    units="dam3",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_water_use_by_type": 1},
)
def total_water_use():
    """
    Total water use (all types aggregated).
    """
    return sum(total_water_use_by_type().rename({"water": "water!"}), dim=["water!"])


@component.add(
    name="Water use per type per capita",
    units="dam3/person",
    subscripts=["scenarios", "water"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_water_use_by_type": 1, "population": 1},
)
def water_use_per_type_per_capita():
    """
    Water use per type per capita.
    """
    return total_water_use_by_type() / population()


@component.add(
    name="Variation water intensity by sector",
    units="dam3/$1995",
    subscripts=["scenarios", "sectors", "water"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "historic_water_by_type_intensities_by_sector": 1,
        "historic_water_intensities_by_sector_delayed_1yr": 1,
    },
)
def variation_water_intensity_by_sector():
    """
    Variation of water intensity by type, sector and year.
    """
    return if_then_else(
        time() < 2008,
        lambda: historic_water_by_type_intensities_by_sector()
        - historic_water_intensities_by_sector_delayed_1yr(),
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "sectors": _subscript_dict["sectors"],
                "water": _subscript_dict["water"],
            },
            ["scenarios", "sectors", "water"],
        ),
    )


@component.add(
    name="Historic water intensities by sector delayed 1yr",
    units="dam3/Mdollars",
    subscripts=["scenarios", "sectors", "water"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_historic_water_intensities_by_sector_delayed_1yr": 1},
    other_deps={
        "_delayfixed_historic_water_intensities_by_sector_delayed_1yr": {
            "initial": {"initial_water_intensity_by_sector": 1},
            "step": {"historic_water_by_type_intensities_by_sector": 1},
        }
    },
)
def historic_water_intensities_by_sector_delayed_1yr():
    return _delayfixed_historic_water_intensities_by_sector_delayed_1yr()


_delayfixed_historic_water_intensities_by_sector_delayed_1yr = DelayFixed(
    lambda: historic_water_by_type_intensities_by_sector(),
    lambda: 1,
    lambda: initial_water_intensity_by_sector(),
    time_step,
    "_delayfixed_historic_water_intensities_by_sector_delayed_1yr",
)


@component.add(
    name="Historic water intensities for households delayed 1yr",
    units="dam3/Mdollars",
    subscripts=["scenarios", "water"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_historic_water_intensities_for_households_delayed_1yr": 1},
    other_deps={
        "_delayfixed_historic_water_intensities_for_households_delayed_1yr": {
            "initial": {"initial_water_intensity_for_households": 1},
            "step": {"historic_water_by_type_intensities_for_households": 1},
        }
    },
)
def historic_water_intensities_for_households_delayed_1yr():
    return _delayfixed_historic_water_intensities_for_households_delayed_1yr()


_delayfixed_historic_water_intensities_for_households_delayed_1yr = DelayFixed(
    lambda: historic_water_by_type_intensities_for_households(),
    lambda: 1,
    lambda: initial_water_intensity_for_households(),
    time_step,
    "_delayfixed_historic_water_intensities_for_households_delayed_1yr",
)


@component.add(
    name="Variation water intensity households",
    units="dam3/Mdollars",
    subscripts=["scenarios", "water"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "historic_water_by_type_intensities_for_households": 1,
        "historic_water_intensities_for_households_delayed_1yr": 1,
    },
)
def variation_water_intensity_households():
    """
    Variation of water intensity for households by type and year.
    """
    return if_then_else(
        time() < 2008,
        lambda: historic_water_by_type_intensities_for_households()
        - historic_water_intensities_for_households_delayed_1yr(),
        lambda: xr.DataArray(
            0,
            {
                "scenarios": _subscript_dict["scenarios"],
                "water": _subscript_dict["water"],
            },
            ["scenarios", "water"],
        ),
    )


@component.add(
    name="Water intensity for households",
    units="dam3/$1995",
    subscripts=["scenarios", "water"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_water_intensity_for_households": 1},
    other_deps={
        "_integ_water_intensity_for_households": {
            "initial": {"initial_water_intensity_for_households": 1},
            "step": {"variation_water_intensity_households": 1},
        }
    },
)
def water_intensity_for_households():
    return _integ_water_intensity_for_households()


_integ_water_intensity_for_households = Integ(
    lambda: variation_water_intensity_households(),
    lambda: initial_water_intensity_for_households(),
    "_integ_water_intensity_for_households",
)


@component.add(
    name="P minimum forest",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_minimum_forest"},
)
def p_minimum_forest():
    """
    Minimum surface of forest land accepted.
    """
    return _ext_constant_p_minimum_forest()


_ext_constant_p_minimum_forest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C270",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_minimum_forest",
)

_ext_constant_p_minimum_forest.add(
    "inputs_EU.xlsx", "SCEN1", "C270", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_minimum_forest.add(
    "inputs_EU.xlsx", "SCEN2", "C270", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_minimum_forest.add(
    "inputs_EU.xlsx", "SCEN3", "C270", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_minimum_forest.add(
    "inputs_EU.xlsx", "SCEN4", "C270", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_minimum_forest.add(
    "inputs_EU.xlsx", "User defined", "C270", {"scenarios": ["User defined"]}
)


@component.add(
    name="forest extraction per Ha",
    units="EJ/MHa",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_forest_extraction_per_ha"},
)
def forest_extraction_per_ha():
    """
    Wood extration from forest in 2015, we assume this extraction is sustainable and it might grow slightly 10% because of better management, average last years
    """
    return _ext_constant_forest_extraction_per_ha()


_ext_constant_forest_extraction_per_ha = ExtConstant(
    "inputs_EU.xlsx",
    "Land",
    "C3",
    {},
    _root,
    {},
    "_ext_constant_forest_extraction_per_ha",
)


@component.add(
    name="max sustainable forest extraction EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"available_forest_area": 1, "forest_extraction_per_ha": 1},
)
def max_sustainable_forest_extraction_ej():
    """
    Wood that might be extracted from forest according to usable foresta area in terms of energy equivalent
    """
    return available_forest_area() * forest_extraction_per_ha()


@component.add(
    name="demand forest wood products pc",
    units="m3/people",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_demand_forest_wood_products_pc"},
)
def demand_forest_wood_products_pc():
    """
    Demand of forest non energy products per capita, data FAO2016
    """
    return _ext_constant_demand_forest_wood_products_pc()


_ext_constant_demand_forest_wood_products_pc = ExtConstant(
    "inputs_EU.xlsx",
    "Land",
    "C2",
    {},
    _root,
    {},
    "_ext_constant_demand_forest_wood_products_pc",
)


@component.add(
    name="demand wood products m3",
    units="m3",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"demand_forest_wood_products_pc": 1, "population": 1},
)
def demand_wood_products_m3():
    """
    Demand of non-energy product forests
    """
    return demand_forest_wood_products_pc() * population()


@component.add(
    name="Past trends CO2 LUCF",
    units="GtCO2",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_past_trends_co2_lucf",
        "__data__": "_ext_data_past_trends_co2_lucf",
        "time": 1,
    },
)
def past_trends_co2_lucf():
    """
    Historic CO2 emissions from Land-Use Change and Forestry.
    """
    return _ext_data_past_trends_co2_lucf(time())


_ext_data_past_trends_co2_lucf = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "25",
    "H44",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_past_trends_co2_lucf",
)


@component.add(
    name="deficit wood products",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"demand_wood_products_ej": 2, "consum_wood_products_ej": 1},
)
def deficit_wood_products():
    """
    Percent of the demand of wood products that cannot be met. I should influence the corresponding economic sector but it does not
    """
    return (
        demand_wood_products_ej() - consum_wood_products_ej()
    ) / demand_wood_products_ej()


@component.add(
    name="unsustainable loggin",
    units="MHa/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "forest_extraction_ej": 1,
        "max_sustainable_forest_extraction_ej": 1,
        "forest_stock_ratio": 1,
    },
)
def unsustainable_loggin():
    """
    Loss of forest land due to overexplotation of forest for energy uses.
    """
    return np.maximum(
        0,
        (forest_extraction_ej() - max_sustainable_forest_extraction_ej())
        * forest_stock_ratio(),
    )


@component.add(
    name="wood energy density",
    units="EJ/m3",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_wood_energy_density"},
)
def wood_energy_density():
    """
    Average energy of wood products.
    """
    return _ext_constant_wood_energy_density()


_ext_constant_wood_energy_density = ExtConstant(
    "inputs_EU.xlsx", "Land", "C4", {}, _root, {}, "_ext_constant_wood_energy_density"
)


@component.add(
    name="demand wood products EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"demand_wood_products_m3": 1, "wood_energy_density": 1},
)
def demand_wood_products_ej():
    """
    Demand of non energy forest products expressed as energy (to compare with other uses)
    """
    return demand_wood_products_m3() * wood_energy_density()


@component.add(
    name="total demand forest biomass EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "demand_forest_energy_non_tradition_ej": 1,
        "demand_forest_energy_traditional_ej": 1,
        "demand_wood_products_ej": 1,
    },
)
def total_demand_forest_biomass_ej():
    """
    Total demand of wood products from forest for all uses
    """
    return (
        demand_forest_energy_non_tradition_ej()
        + demand_forest_energy_traditional_ej()
        + demand_wood_products_ej()
    )


@component.add(
    name="demand forest energy traditional EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pe_traditional_biomass_demand_ej": 1},
)
def demand_forest_energy_traditional_ej():
    """
    Demand of tradition biomass in terms of EJ
    """
    return pe_traditional_biomass_demand_ej()


@component.add(
    name="Historic water use by type sectors",
    units="dam3/$",
    subscripts=["sectors1", "water"],
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_water_use_by_type_sectors",
        "__lookup__": "_ext_lookup_historic_water_use_by_type_sectors",
    },
)
def historic_water_use_by_type_sectors(x, final_subs=None):
    """
    Historic water use by type for 35 WIOD sectors.
    """
    return _ext_lookup_historic_water_use_by_type_sectors(x, final_subs)


_ext_lookup_historic_water_use_by_type_sectors = ExtLookup(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B2",
    {"sectors1": ["Agriculture Hunting Forestry and Fishing"], "water": ["blue water"]},
    _root,
    {"sectors1": _subscript_dict["sectors1"], "water": _subscript_dict["water"]},
    "_ext_lookup_historic_water_use_by_type_sectors",
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B3",
    {"sectors1": ["Mining and Quarrying"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B4",
    {"sectors1": ["Food Beverages and Tobacco"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B5",
    {"sectors1": ["Textiles and Textile Products"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B6",
    {"sectors1": ["Leather Leather and Footwear"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B7",
    {"sectors1": ["Wood and Products of Woood and Cork"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B8",
    {"sectors1": ["Pulp Paper Printing and Publishing"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B9",
    {"sectors1": ["Coke Refined Petroleum and Nuclear Fuel"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B10",
    {"sectors1": ["Chemicals and Chemical products"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B11",
    {"sectors1": ["Rubber and Plastics"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B12",
    {"sectors1": ["Other Non Metalic Mineral"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B13",
    {"sectors1": ["Basic Metals and Fabricated Metal"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B14",
    {"sectors1": ["Machinery Nec"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B15",
    {"sectors1": ["Electrical and Optical Equipment"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B16",
    {"sectors1": ["Transport Equipment"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B17",
    {"sectors1": ["Manufacturing Nec Recycling"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B18",
    {"sectors1": ["Electricity Gas and Water Supply"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B19",
    {"sectors1": ["Construction"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B20",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "water": ["blue water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B21",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "water": ["blue water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B22",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "water": ["blue water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B23",
    {"sectors1": ["Hotels and Restaurants"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B24",
    {"sectors1": ["Inland Transport"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B25",
    {"sectors1": ["Water Transport"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B26",
    {"sectors1": ["Air Transport"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B27",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "water": ["blue water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B28",
    {"sectors1": ["Post and Telecommunications"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B29",
    {"sectors1": ["Financial Intermedation"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B30",
    {"sectors1": ["Real Estate Activities"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B31",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "water": ["blue water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B32",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "water": ["blue water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B33",
    {"sectors1": ["Education"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B34",
    {"sectors1": ["Health and Social Work"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B35",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "water": ["blue water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B36",
    {"sectors1": ["Private Households with Employed Persons"], "water": ["blue water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B40",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "water": ["green water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B41",
    {"sectors1": ["Mining and Quarrying"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B42",
    {"sectors1": ["Food Beverages and Tobacco"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B43",
    {"sectors1": ["Textiles and Textile Products"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B44",
    {"sectors1": ["Leather Leather and Footwear"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B45",
    {"sectors1": ["Wood and Products of Woood and Cork"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B46",
    {"sectors1": ["Pulp Paper Printing and Publishing"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B47",
    {"sectors1": ["Coke Refined Petroleum and Nuclear Fuel"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B48",
    {"sectors1": ["Chemicals and Chemical products"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B49",
    {"sectors1": ["Rubber and Plastics"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B50",
    {"sectors1": ["Other Non Metalic Mineral"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B51",
    {"sectors1": ["Basic Metals and Fabricated Metal"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B52",
    {"sectors1": ["Machinery Nec"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B53",
    {"sectors1": ["Electrical and Optical Equipment"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B54",
    {"sectors1": ["Transport Equipment"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B55",
    {"sectors1": ["Manufacturing Nec Recycling"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B56",
    {"sectors1": ["Electricity Gas and Water Supply"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B57",
    {"sectors1": ["Construction"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B58",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "water": ["green water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B59",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "water": ["green water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B60",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "water": ["green water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B61",
    {"sectors1": ["Hotels and Restaurants"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B62",
    {"sectors1": ["Inland Transport"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B63",
    {"sectors1": ["Water Transport"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B64",
    {"sectors1": ["Air Transport"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B65",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "water": ["green water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B66",
    {"sectors1": ["Post and Telecommunications"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B67",
    {"sectors1": ["Financial Intermedation"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B68",
    {"sectors1": ["Real Estate Activities"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B69",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "water": ["green water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B70",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "water": ["green water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B71",
    {"sectors1": ["Education"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B72",
    {"sectors1": ["Health and Social Work"], "water": ["green water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B73",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "water": ["green water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B74",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "water": ["green water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B78",
    {"sectors1": ["Agriculture Hunting Forestry and Fishing"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B79",
    {"sectors1": ["Mining and Quarrying"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B80",
    {"sectors1": ["Food Beverages and Tobacco"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B81",
    {"sectors1": ["Textiles and Textile Products"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B82",
    {"sectors1": ["Leather Leather and Footwear"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B83",
    {"sectors1": ["Wood and Products of Woood and Cork"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B84",
    {"sectors1": ["Pulp Paper Printing and Publishing"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B85",
    {"sectors1": ["Coke Refined Petroleum and Nuclear Fuel"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B86",
    {"sectors1": ["Chemicals and Chemical products"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B87",
    {"sectors1": ["Rubber and Plastics"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B88",
    {"sectors1": ["Other Non Metalic Mineral"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B89",
    {"sectors1": ["Basic Metals and Fabricated Metal"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B90",
    {"sectors1": ["Machinery Nec"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B91",
    {"sectors1": ["Electrical and Optical Equipment"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B92",
    {"sectors1": ["Transport Equipment"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B93",
    {"sectors1": ["Manufacturing Nec Recycling"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B94",
    {"sectors1": ["Electricity Gas and Water Supply"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B95",
    {"sectors1": ["Construction"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B96",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "water": ["gray water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B97",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "water": ["gray water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B98",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "water": ["gray water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B99",
    {"sectors1": ["Hotels and Restaurants"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B100",
    {"sectors1": ["Inland Transport"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B101",
    {"sectors1": ["Water Transport"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B102",
    {"sectors1": ["Air Transport"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B103",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "water": ["gray water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B104",
    {"sectors1": ["Post and Telecommunications"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B105",
    {"sectors1": ["Financial Intermedation"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B106",
    {"sectors1": ["Real Estate Activities"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B107",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "water": ["gray water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B108",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "water": ["gray water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B109",
    {"sectors1": ["Education"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B110",
    {"sectors1": ["Health and Social Work"], "water": ["gray water"]},
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B111",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "water": ["gray water"],
    },
)

_ext_lookup_historic_water_use_by_type_sectors.add(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B112",
    {"sectors1": ["Private Households with Employed Persons"], "water": ["gray water"]},
)


@component.add(
    name="Historic water by type intensities by sector",
    units="dam3/Mdollars",
    subscripts=["scenarios", "sectors", "water"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "real_total_output_by_sector_eu": 1,
        "historic_water_use_by_type_sectors": 1,
    },
)
def historic_water_by_type_intensities_by_sector():
    return if_then_else(
        time() < 2009,
        lambda: historic_water_use_by_type_sectors(time()).rename(
            {"sectors1": "sectors"}
        )
        / real_total_output_by_sector_eu().transpose("sectors", "scenarios"),
        lambda: xr.DataArray(
            0,
            {
                "sectors": _subscript_dict["sectors"],
                "water": _subscript_dict["water"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["sectors", "water", "scenarios"],
        ),
    ).transpose("scenarios", "sectors", "water")


@component.add(
    name="Total water use by type",
    units="dam3",
    subscripts=["scenarios", "water"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "water_use_by_sector": 1,
        "water_use_by_households": 1,
        "total_water_for_om_required_by_res_elec_dam3": 1,
    },
)
def total_water_use_by_type():
    """
    Total water consumption by type (green, blue, grey).
    """
    return (
        sum(water_use_by_sector().rename({"sectors": "sectors!"}), dim=["sectors!"])
        + water_use_by_households()
        + total_water_for_om_required_by_res_elec_dam3()
    )


@component.add(
    name='"Total water for O&M required by RES elec dam3"',
    units="dam3",
    subscripts=["scenarios", "water"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_water_for_om_required_by_res_elec": 1, "mt_to_dam3": 1},
)
def total_water_for_om_required_by_res_elec_dam3():
    return total_water_for_om_required_by_res_elec() * mt_to_dam3()


@component.add(
    name="Water intensity by sector",
    units="dam3/$1995",
    subscripts=["scenarios", "sectors", "water"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_water_intensity_by_sector": 1},
    other_deps={
        "_integ_water_intensity_by_sector": {
            "initial": {"initial_water_intensity_by_sector": 1},
            "step": {"variation_water_intensity_by_sector": 1},
        }
    },
)
def water_intensity_by_sector():
    return _integ_water_intensity_by_sector()


_integ_water_intensity_by_sector = Integ(
    lambda: variation_water_intensity_by_sector(),
    lambda: initial_water_intensity_by_sector(),
    "_integ_water_intensity_by_sector",
)


@component.add(
    name="Water use by sector",
    units="dam3",
    subscripts=["scenarios", "sectors", "water"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"water_intensity_by_sector": 1, "real_total_output_by_sector_eu": 1},
)
def water_use_by_sector():
    """
    Water use by type by sector.
    """
    return water_intensity_by_sector() * real_total_output_by_sector_eu()


@component.add(
    name="Total CO2 emissions GTCO2",
    units="GtCO2/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "co2_fossil_fuel_emissions": 1,
        "co2_soillucf_emissions": 1,
        "bioe_co2_emissions": 1,
        "co2_emissions_peat": 1,
        "afforestation_program_2020_gtco2": 1,
    },
)
def total_co2_emissions_gtco2():
    """
    Total annual CO2 emissions. Original unit: "mill Tn CO2"
    """
    return (
        co2_fossil_fuel_emissions()
        + co2_soillucf_emissions()
        + bioe_co2_emissions()
        + co2_emissions_peat()
        - afforestation_program_2020_gtco2()
    )


@component.add(
    name="PE traditional biomass EJ delayed 1yr",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_pe_traditional_biomass_ej_delayed_1yr": 1},
    other_deps={
        "_delayfixed_pe_traditional_biomass_ej_delayed_1yr": {
            "initial": {"time_step": 1},
            "step": {"pe_traditional_biomass_consum_ej": 1},
        }
    },
)
def pe_traditional_biomass_ej_delayed_1yr():
    """
    Annual primary energy consumption of traditional biomass. It also includes charcoal and biosolids for solids.
    """
    return _delayfixed_pe_traditional_biomass_ej_delayed_1yr()


_delayfixed_pe_traditional_biomass_ej_delayed_1yr = DelayFixed(
    lambda: pe_traditional_biomass_consum_ej(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_pe_traditional_biomass_ej_delayed_1yr",
)


@component.add(
    name="Population dependent on trad biomass",
    units="people",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pe_traditional_biomass_consum_ej": 1,
        "pepc_consumption_people_depending_on_trad_biomass": 1,
    },
)
def population_dependent_on_trad_biomass():
    """
    Population dependent on traditional biomass.
    """
    return zidz(
        pe_traditional_biomass_consum_ej(),
        pepc_consumption_people_depending_on_trad_biomass(),
    )


@component.add(
    name="Mt to dam3",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_mt_to_dam3"},
)
def mt_to_dam3():
    return _ext_constant_mt_to_dam3()


_ext_constant_mt_to_dam3 = ExtConstant(
    "inputs_EU.xlsx", "Constants", "G17", {}, _root, {}, "_ext_constant_mt_to_dam3"
)


@component.add(
    name='"Total water for O&M required by RES elec"',
    units="Mt",
    subscripts=["scenarios", "water"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_water_for_om_required_by_res_elec_per_techn": 1},
)
def total_water_for_om_required_by_res_elec():
    value = xr.DataArray(
        np.nan,
        {"scenarios": _subscript_dict["scenarios"], "water": _subscript_dict["water"]},
        ["scenarios", "water"],
    )
    value.loc[:, ["blue water"]] = (
        sum(
            total_water_for_om_required_by_res_elec_per_techn().rename(
                {"RES elec": "RES elec!"}
            ),
            dim=["RES elec!"],
        )
        .expand_dims({"water": ["blue water"]}, 1)
        .values
    )
    value.loc[:, ["green water"]] = 0
    value.loc[:, ["gray water"]] = 0
    return value


@component.add(
    name="Historic water use by type for households",
    units="Mdollars",
    subscripts=["water"],
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_water_use_by_type_for_households",
        "__lookup__": "_ext_lookup_historic_water_use_by_type_for_households",
    },
)
def historic_water_use_by_type_for_households(x, final_subs=None):
    """
    Historic water use by type for households.
    """
    return _ext_lookup_historic_water_use_by_type_for_households(x, final_subs)


_ext_lookup_historic_water_use_by_type_for_households = ExtLookup(
    "inputs_EU.xlsx",
    "Water",
    "1",
    "B37",
    {"water": ["blue water"]},
    _root,
    {"water": _subscript_dict["water"]},
    "_ext_lookup_historic_water_use_by_type_for_households",
)

_ext_lookup_historic_water_use_by_type_for_households.add(
    "inputs_EU.xlsx", "Water", "1", "B75", {"water": ["green water"]}
)

_ext_lookup_historic_water_use_by_type_for_households.add(
    "inputs_EU.xlsx", "Water", "1", "B113", {"water": ["gray water"]}
)


@component.add(
    name="Initial water intensity by sector",
    units="dam3/Mdollars",
    subscripts=["scenarios", "sectors", "water"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "real_total_output_by_sector_eu": 1,
        "initial_water_use_by_sector": 1,
    },
)
def initial_water_intensity_by_sector():
    return if_then_else(
        time() < 1996,
        lambda: initial_water_use_by_sector().rename({"sectors1": "sectors"})
        / real_total_output_by_sector_eu().transpose("sectors", "scenarios"),
        lambda: xr.DataArray(
            0,
            {
                "sectors": _subscript_dict["sectors"],
                "water": _subscript_dict["water"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["sectors", "water", "scenarios"],
        ),
    ).transpose("scenarios", "sectors", "water")


@component.add(
    name="Initial water use by households",
    units="dam3",
    subscripts=["water"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_water_use_by_households"},
)
def initial_water_use_by_households():
    """
    Water use by type by households in the year 1995 (WIOD database).
    """
    return _ext_constant_initial_water_use_by_households()


_ext_constant_initial_water_use_by_households = ExtConstant(
    "inputs_EU.xlsx",
    "Water",
    "B37",
    {"water": ["blue water"]},
    _root,
    {"water": _subscript_dict["water"]},
    "_ext_constant_initial_water_use_by_households",
)

_ext_constant_initial_water_use_by_households.add(
    "inputs_EU.xlsx", "Water", "B75", {"water": ["green water"]}
)

_ext_constant_initial_water_use_by_households.add(
    "inputs_EU.xlsx", "Water", "B113", {"water": ["gray water"]}
)


@component.add(
    name="Initial water use by sector",
    units="dam3/$",
    subscripts=["sectors1", "water"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_water_use_by_sector"},
)
def initial_water_use_by_sector():
    """
    Water use by type and sector in the year 1995 (WIOD database).
    """
    return _ext_constant_initial_water_use_by_sector()


_ext_constant_initial_water_use_by_sector = ExtConstant(
    "inputs_EU.xlsx",
    "Water",
    "B2",
    {"sectors1": ["Agriculture Hunting Forestry and Fishing"], "water": ["blue water"]},
    _root,
    {"sectors1": _subscript_dict["sectors1"], "water": _subscript_dict["water"]},
    "_ext_constant_initial_water_use_by_sector",
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B3",
    {"sectors1": ["Mining and Quarrying"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B4",
    {"sectors1": ["Food Beverages and Tobacco"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B5",
    {"sectors1": ["Textiles and Textile Products"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B6",
    {"sectors1": ["Leather Leather and Footwear"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B7",
    {"sectors1": ["Wood and Products of Woood and Cork"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B8",
    {"sectors1": ["Pulp Paper Printing and Publishing"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B9",
    {"sectors1": ["Coke Refined Petroleum and Nuclear Fuel"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B10",
    {"sectors1": ["Chemicals and Chemical products"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B11",
    {"sectors1": ["Rubber and Plastics"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B12",
    {"sectors1": ["Other Non Metalic Mineral"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B13",
    {"sectors1": ["Basic Metals and Fabricated Metal"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B14",
    {"sectors1": ["Machinery Nec"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B15",
    {"sectors1": ["Electrical and Optical Equipment"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B16",
    {"sectors1": ["Transport Equipment"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B17",
    {"sectors1": ["Manufacturing Nec Recycling"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B18",
    {"sectors1": ["Electricity Gas and Water Supply"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B19",
    {"sectors1": ["Construction"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B20",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "water": ["blue water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B21",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "water": ["blue water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B22",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "water": ["blue water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B23",
    {"sectors1": ["Hotels and Restaurants"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B24",
    {"sectors1": ["Inland Transport"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B25",
    {"sectors1": ["Water Transport"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B26",
    {"sectors1": ["Air Transport"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B27",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "water": ["blue water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B28",
    {"sectors1": ["Post and Telecommunications"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B29",
    {"sectors1": ["Financial Intermedation"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B30",
    {"sectors1": ["Real Estate Activities"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B31",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "water": ["blue water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B32",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "water": ["blue water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B33",
    {"sectors1": ["Education"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B34",
    {"sectors1": ["Health and Social Work"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B35",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "water": ["blue water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B36",
    {"sectors1": ["Private Households with Employed Persons"], "water": ["blue water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B40",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "water": ["green water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B41",
    {"sectors1": ["Mining and Quarrying"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B42",
    {"sectors1": ["Food Beverages and Tobacco"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B43",
    {"sectors1": ["Textiles and Textile Products"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B44",
    {"sectors1": ["Leather Leather and Footwear"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B45",
    {"sectors1": ["Wood and Products of Woood and Cork"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B46",
    {"sectors1": ["Pulp Paper Printing and Publishing"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B47",
    {"sectors1": ["Coke Refined Petroleum and Nuclear Fuel"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B48",
    {"sectors1": ["Chemicals and Chemical products"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B49",
    {"sectors1": ["Rubber and Plastics"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B50",
    {"sectors1": ["Other Non Metalic Mineral"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B51",
    {"sectors1": ["Basic Metals and Fabricated Metal"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B52",
    {"sectors1": ["Machinery Nec"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B53",
    {"sectors1": ["Electrical and Optical Equipment"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B54",
    {"sectors1": ["Transport Equipment"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B55",
    {"sectors1": ["Manufacturing Nec Recycling"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B56",
    {"sectors1": ["Electricity Gas and Water Supply"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B57",
    {"sectors1": ["Construction"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B58",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "water": ["green water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B59",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "water": ["green water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B60",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "water": ["green water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B61",
    {"sectors1": ["Hotels and Restaurants"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B62",
    {"sectors1": ["Inland Transport"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B63",
    {"sectors1": ["Water Transport"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B64",
    {"sectors1": ["Air Transport"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B65",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "water": ["green water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B66",
    {"sectors1": ["Post and Telecommunications"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B67",
    {"sectors1": ["Financial Intermedation"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B68",
    {"sectors1": ["Real Estate Activities"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B69",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "water": ["green water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B70",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "water": ["green water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B71",
    {"sectors1": ["Education"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B72",
    {"sectors1": ["Health and Social Work"], "water": ["green water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B73",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "water": ["green water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B74",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "water": ["green water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B78",
    {"sectors1": ["Agriculture Hunting Forestry and Fishing"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B79",
    {"sectors1": ["Mining and Quarrying"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B80",
    {"sectors1": ["Food Beverages and Tobacco"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B81",
    {"sectors1": ["Textiles and Textile Products"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B82",
    {"sectors1": ["Leather Leather and Footwear"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B83",
    {"sectors1": ["Wood and Products of Woood and Cork"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B84",
    {"sectors1": ["Pulp Paper Printing and Publishing"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B85",
    {"sectors1": ["Coke Refined Petroleum and Nuclear Fuel"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B86",
    {"sectors1": ["Chemicals and Chemical products"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B87",
    {"sectors1": ["Rubber and Plastics"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B88",
    {"sectors1": ["Other Non Metalic Mineral"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B89",
    {"sectors1": ["Basic Metals and Fabricated Metal"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B90",
    {"sectors1": ["Machinery Nec"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B91",
    {"sectors1": ["Electrical and Optical Equipment"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B92",
    {"sectors1": ["Transport Equipment"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B93",
    {"sectors1": ["Manufacturing Nec Recycling"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B94",
    {"sectors1": ["Electricity Gas and Water Supply"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B95",
    {"sectors1": ["Construction"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B96",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "water": ["gray water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B97",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "water": ["gray water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B98",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "water": ["gray water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B99",
    {"sectors1": ["Hotels and Restaurants"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B100",
    {"sectors1": ["Inland Transport"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B101",
    {"sectors1": ["Water Transport"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B102",
    {"sectors1": ["Air Transport"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B103",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "water": ["gray water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B104",
    {"sectors1": ["Post and Telecommunications"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B105",
    {"sectors1": ["Financial Intermedation"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B106",
    {"sectors1": ["Real Estate Activities"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B107",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "water": ["gray water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B108",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "water": ["gray water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B109",
    {"sectors1": ["Education"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B110",
    {"sectors1": ["Health and Social Work"], "water": ["gray water"]},
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B111",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "water": ["gray water"],
    },
)

_ext_constant_initial_water_use_by_sector.add(
    "inputs_EU.xlsx",
    "Water",
    "B112",
    {"sectors1": ["Private Households with Employed Persons"], "water": ["gray water"]},
)


@component.add(
    name="deficit forest biomass",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_sustainable_forest_extraction_ej": 2,
        "total_demand_forest_biomass_ej": 3,
    },
)
def deficit_forest_biomass():
    """
    Percent of deficit of forest biomass, in terms of forest extraction demand. If maximun extration is greater than demand it is 0
    """
    return if_then_else(
        max_sustainable_forest_extraction_ej() > total_demand_forest_biomass_ej(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: (
            total_demand_forest_biomass_ej() - max_sustainable_forest_extraction_ej()
        )
        / total_demand_forest_biomass_ej(),
    )


@component.add(
    name="total demand energy forest EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "demand_forest_energy_non_tradition_ej": 1,
        "demand_forest_energy_traditional_ej": 1,
    },
)
def total_demand_energy_forest_ej():
    """
    Total demand of forest energy.
    """
    return (
        demand_forest_energy_non_tradition_ej() + demand_forest_energy_traditional_ej()
    )


@component.add(
    name="P forest overexplotation",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_forest_overexplotation"},
)
def p_forest_overexplotation():
    """
    Policy of forest extraction for energy uses. Describes the percent of deficit of forest biomass acepted. If gives the percent at which wood for energy and non energy uses must adapt to sustainable potencial. If it's greater than 0 means that overexplotaion of forest leads to forest stock destruction.
    """
    return _ext_constant_p_forest_overexplotation()


_ext_constant_p_forest_overexplotation = ExtConstant(
    "inputs_EU.xlsx",
    "User defined",
    "C268",
    {"scenarios": ["User defined"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_forest_overexplotation",
)

_ext_constant_p_forest_overexplotation.add(
    "inputs_EU.xlsx", "BAU", "C268", {"scenarios": ["BAU"]}
)

_ext_constant_p_forest_overexplotation.add(
    "inputs_EU.xlsx", "SCEN1", "C268", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_forest_overexplotation.add(
    "inputs_EU.xlsx", "SCEN2", "C268", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_forest_overexplotation.add(
    "inputs_EU.xlsx", "SCEN3", "C268", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_forest_overexplotation.add(
    "inputs_EU.xlsx", "SCEN4", "C268", {"scenarios": ["SCEN4"]}
)


@component.add(
    name="adapt growth waste",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 3, "past_waste_growth": 3, "time_dmnl": 1, "waste_change": 2},
)
def adapt_growth_waste():
    """
    Modeling of a soft transition from current historic annual growth to reach the policy-objective 5 years later.
    """
    return if_then_else(
        time() < 2015,
        lambda: xr.DataArray(
            past_waste_growth(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            time() < 2020,
            lambda: past_waste_growth()
            + (waste_change() - past_waste_growth()) * (time_dmnl(time()) - 2015) / 5,
            lambda: waste_change(),
        ),
    )


@component.add(
    name="Adapt CO2 emissions unconv gas",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 4, "time_dmnl": 2},
)
def adapt_co2_emissions_unconv_gas():
    """
    Unconventional gas emissions are 3,53 tCO2/toe vs 2,35 for conventional. Since we have all natural gas modeled in an aggregated manner, this function corrects these emissions assuming that unconventional gas would follow the share un relation to natural gas as estimated by [Mohr&Evans2011](BG) for 2050 and 2100 (linear interpolation).
    """
    return if_then_else(
        time() < 2050,
        lambda: 0.01 + (0.22 - 0.01) * (time_dmnl(time()) - 2000) / 50,
        lambda: if_then_else(
            time() < 2100,
            lambda: 0.22 + (0.6 - 0.22) * (time_dmnl(time()) - 2050) / 50,
            lambda: xr.DataArray(
                0.6, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        ),
    )


@component.add(
    name="Adapt emissions shale oil",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 4, "time_dmnl": 2},
)
def adapt_emissions_shale_oil():
    """
    Shale oil emissions are 6,14tCO2/toe vs 3,84 for unconventional oil. Since we have unconventional oils in an aggregated manner, this functions corrects these emissions assuming that shale oil would follow the share in relation to the total unconventional oil as estimated by [Mohr&Evans2010](Low Case) for 2050 and 2100 (linear interpolation)
    """
    return if_then_else(
        time() < 2050,
        lambda: 0.001 + (0.15 - 0.001) * (time_dmnl(time()) - 2000) / 50,
        lambda: if_then_else(
            time() < 2100,
            lambda: 0.15 + (0.72 - 0.15) * (time_dmnl(time()) - 2050) / 50,
            lambda: xr.DataArray(
                0.72, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        ),
    )


@component.add(
    name="adapt growth biofuels 2gen",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 3,
        "past_biofuels_2gen": 2,
        "p_biofuels_2gen_land_compet": 2,
        "time_dmnl": 1,
    },
)
def adapt_growth_biofuels_2gen():
    """
    Modeling of a soft transition from current historic annual growth to reach the policy-objective 5 years later. Growth for 2nd generation biofuels in competition and marginal lands.
    """
    return if_then_else(
        time() < 2015,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            time() < 2020,
            lambda: past_biofuels_2gen()
            + (p_biofuels_2gen_land_compet() - past_biofuels_2gen())
            * (time_dmnl(time()) - 2015)
            / 5,
            lambda: p_biofuels_2gen_land_compet(),
        ),
    )


@component.add(
    name="demand by sector FD adjusted",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"demand_by_sector_fd_eu": 1, "diff_demand_eu": 1},
)
def demand_by_sector_fd_adjusted():
    """
    Demand by sector after adjustment to match the desired GDP level.
    """
    return demand_by_sector_fd_eu() * diff_demand_eu()


@component.add(
    name="total demand adjusted",
    units="Tdollars",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"demand_by_sector_fd_adjusted": 1},
)
def total_demand_adjusted():
    """
    Total demand after adjustment of the demand function.
    """
    return (
        sum(
            demand_by_sector_fd_adjusted().rename({"sectors": "sectors!"}),
            dim=["sectors!"],
        )
        / 1000000.0
    )


@component.add(
    name="Domestic demand by sector",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"demand_by_sector_fd_adjusted": 1},
)
def domestic_demand_by_sector():
    """
    EU28 total final demand by sector
    """
    return demand_by_sector_fd_adjusted()


@component.add(
    name="aux4",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux4": 1},
    other_deps={
        "_delayfixed_aux4": {
            "initial": {"time_step": 1},
            "step": {"eroist_system_until_2015": 1},
        }
    },
)
def aux4():
    """
    Auxiliary variable to estimate the EROIst of the system in the year 2015.
    """
    return _delayfixed_aux4()


_delayfixed_aux4 = DelayFixed(
    lambda: eroist_system_until_2015(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux4",
)


@component.add(
    name='"1 year"', units="Year", comp_type="Constant", comp_subtype="Normal"
)
def nvs_1_year():
    return 1


@component.add(
    name="EPTB dynamic",
    units="Year",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"lifetime_res_elec": 1, "dynamic_eroi_res_elec_var": 1},
)
def eptb_dynamic():
    return zidz(
        lifetime_res_elec().expand_dims({"scenarios": _subscript_dict["scenarios"]}, 1),
        dynamic_eroi_res_elec_var(),
    )


@component.add(
    name="EROIst system delayed",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_eroist_system_delayed": 1},
    other_deps={
        "_delayfixed_eroist_system_delayed": {
            "initial": {"time_step": 1},
            "step": {"eroist_system": 1},
        }
    },
)
def eroist_system_delayed():
    """
    EROIst of the system delayed. This variable is introduced to avoid simultaneous equations.
    """
    return _delayfixed_eroist_system_delayed()


_delayfixed_eroist_system_delayed = DelayFixed(
    lambda: eroist_system(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_eroist_system_delayed",
)


@component.add(
    name="EROIst system delayed 1yr",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_eroist_system_delayed_1yr": 1},
    other_deps={
        "_delayfixed_eroist_system_delayed_1yr": {
            "initial": {},
            "step": {"eroist_system": 1},
        }
    },
)
def eroist_system_delayed_1yr():
    """
    EROIst of the system delayed 1 year.
    """
    return _delayfixed_eroist_system_delayed_1yr()


_delayfixed_eroist_system_delayed_1yr = DelayFixed(
    lambda: eroist_system(),
    lambda: 1,
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_eroist_system_delayed_1yr",
)


@component.add(
    name="IA Matrix",
    subscripts=["sectors", "sectors1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ia_matrix_for_python": 1},
)
def ia_matrix():
    """
    IA Matrix Code for Vensim: IF THEN ELSE("calculate Leontief matrix?"=1, IA Matrix endogenous[sectors,sectors1], IA matrix for Python[sectors,sectors1]) Code for Python: IA matrix for Python[sectors,sectors1]
    """
    return ia_matrix_for_python()


@component.add(
    name="IA matrix 2002",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_2002"},
)
def ia_matrix_2002():
    return _ext_constant_ia_matrix_2002()


_ext_constant_ia_matrix_2002 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "IL609",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_2002",
)


@component.add(
    name="IA matrix 2003",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_2003"},
)
def ia_matrix_2003():
    return _ext_constant_ia_matrix_2003()


_ext_constant_ia_matrix_2003 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "JU609",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_2003",
)


@component.add(
    name="IA matrix 2004",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_2004"},
)
def ia_matrix_2004():
    return _ext_constant_ia_matrix_2004()


_ext_constant_ia_matrix_2004 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "LD609",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_2004",
)


@component.add(
    name="IA matrix 2005",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_2005"},
)
def ia_matrix_2005():
    return _ext_constant_ia_matrix_2005()


_ext_constant_ia_matrix_2005 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "MM609",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_2005",
)


@component.add(
    name="IA matrix 2006",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_2006"},
)
def ia_matrix_2006():
    return _ext_constant_ia_matrix_2006()


_ext_constant_ia_matrix_2006 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "NV609",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_2006",
)


@component.add(
    name="IA matrix 2007",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_2007"},
)
def ia_matrix_2007():
    return _ext_constant_ia_matrix_2007()


_ext_constant_ia_matrix_2007 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "PE609",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_2007",
)


@component.add(
    name="IA matrix 2008",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_2008"},
)
def ia_matrix_2008():
    return _ext_constant_ia_matrix_2008()


_ext_constant_ia_matrix_2008 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "QN609",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_2008",
)


@component.add(
    name="IA matrix for Python",
    units="Dmnl",
    subscripts=["sectors", "sectors1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 14,
        "ia_matrix_1995": 1,
        "ia_matrix_2000": 1,
        "ia_matrix_1999": 1,
        "ia_matrix_1998": 1,
        "ia_matrix_2008": 1,
        "ia_matrix_2007": 1,
        "ia_matrix_2006": 1,
        "ia_matrix_2001": 1,
        "ia_matrix_2002": 1,
        "ia_matrix_1997": 1,
        "ia_matrix_1996": 1,
        "ia_matrix_2004": 1,
        "ia_matrix_2003": 1,
        "ia_matrix_2005": 1,
        "ia_matrix_2009": 1,
    },
)
def ia_matrix_for_python():
    """
    IA matrix WIOD database
    """
    return if_then_else(
        time() < 1996,
        lambda: ia_matrix_1995(),
        lambda: if_then_else(
            time() < 1997,
            lambda: ia_matrix_1996(),
            lambda: if_then_else(
                time() < 1998,
                lambda: ia_matrix_1997(),
                lambda: if_then_else(
                    time() < 1999,
                    lambda: ia_matrix_1998(),
                    lambda: if_then_else(
                        time() < 2000,
                        lambda: ia_matrix_1999(),
                        lambda: if_then_else(
                            time() < 2001,
                            lambda: ia_matrix_2000(),
                            lambda: if_then_else(
                                time() < 2002,
                                lambda: ia_matrix_2001(),
                                lambda: if_then_else(
                                    time() < 2003,
                                    lambda: ia_matrix_2002(),
                                    lambda: if_then_else(
                                        time() < 2004,
                                        lambda: ia_matrix_2003(),
                                        lambda: if_then_else(
                                            time() < 2005,
                                            lambda: ia_matrix_2004(),
                                            lambda: if_then_else(
                                                time() < 2006,
                                                lambda: ia_matrix_2005(),
                                                lambda: if_then_else(
                                                    time() < 2007,
                                                    lambda: ia_matrix_2006(),
                                                    lambda: if_then_else(
                                                        time() < 2008,
                                                        lambda: ia_matrix_2007(),
                                                        lambda: if_then_else(
                                                            time() < 2009,
                                                            lambda: ia_matrix_2008(),
                                                            lambda: ia_matrix_2009(),
                                                        ),
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="IA matrix 1995",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_1995"},
)
def ia_matrix_1995():
    return _ext_constant_ia_matrix_1995()


_ext_constant_ia_matrix_1995 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "A609",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_1995",
)


@component.add(
    name="IA matrix 1996",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_1996"},
)
def ia_matrix_1996():
    return _ext_constant_ia_matrix_1996()


_ext_constant_ia_matrix_1996 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "AJ609",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_1996",
)


@component.add(
    name="IA matrix 1997",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_1997"},
)
def ia_matrix_1997():
    return _ext_constant_ia_matrix_1997()


_ext_constant_ia_matrix_1997 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "BS609",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_1997",
)


@component.add(
    name="IA matrix 1998",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_1998"},
)
def ia_matrix_1998():
    return _ext_constant_ia_matrix_1998()


_ext_constant_ia_matrix_1998 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "DB609",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_1998",
)


@component.add(
    name="IA matrix 1999",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_1999"},
)
def ia_matrix_1999():
    return _ext_constant_ia_matrix_1999()


_ext_constant_ia_matrix_1999 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "EK609",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_1999",
)


@component.add(
    name="IA matrix 2000",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_2000"},
)
def ia_matrix_2000():
    return _ext_constant_ia_matrix_2000()


_ext_constant_ia_matrix_2000 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "FT609",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_2000",
)


@component.add(
    name="IA matrix 2001",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_2001"},
)
def ia_matrix_2001():
    return _ext_constant_ia_matrix_2001()


_ext_constant_ia_matrix_2001 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "HC609",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_2001",
)


@component.add(
    name="IA matrix 2009",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ia_matrix_2009"},
)
def ia_matrix_2009():
    return _ext_constant_ia_matrix_2009()


_ext_constant_ia_matrix_2009 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "RW609",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_ia_matrix_2009",
)


@component.add(
    name="Leontief Matrix domestic",
    units="Dmnl",
    subscripts=["sectors", "sectors1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"leontief_matrix_for_python": 1},
)
def leontief_matrix_domestic():
    """
    Leontieff matrix in interregional Input-Output Analysis can be divided in submatrixes. Domestic submatrix (upper-left quadrant) gives the sensitiveness of domestic production to domestic final demand of EU28 products. Code for Vensim: IF THEN ELSE("calculate Leontief matrix?"=1, Leontief Matrix endogenous[sectors,sectors1], Leontief matrix for Python[sectors,sectors1]) Code for Python: Leontief matrix for Python[sectors,sectors1])
    """
    return leontief_matrix_for_python()


@component.add(
    name="Leontief matrix for Python",
    units="Dmnl",
    subscripts=["sectors", "sectors1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 14,
        "leontief_matrix_1995": 1,
        "leontief_matrix_2003": 1,
        "leontief_matrix_2000": 1,
        "leontief_matrix_1997": 1,
        "leontief_matrix_2006": 1,
        "leontief_matrix_2001": 1,
        "leontief_matrix_1999": 1,
        "leontief_matrix_2005": 1,
        "leontief_matrix_1998": 1,
        "leontief_matrix_2002": 1,
        "leontief_matrix_2007": 1,
        "leontief_matrix_1996": 1,
        "leontief_matrix_2008": 1,
        "leontief_matrix_2004": 1,
        "leontief_matrix_2009": 1,
    },
)
def leontief_matrix_for_python():
    """
    Leontief Matrix (1995-2009). WIOD data
    """
    return if_then_else(
        time() < 1996,
        lambda: leontief_matrix_1995(),
        lambda: if_then_else(
            time() < 1997,
            lambda: leontief_matrix_1996(),
            lambda: if_then_else(
                time() < 1998,
                lambda: leontief_matrix_1997(),
                lambda: if_then_else(
                    time() < 1999,
                    lambda: leontief_matrix_1998(),
                    lambda: if_then_else(
                        time() < 2000,
                        lambda: leontief_matrix_1999(),
                        lambda: if_then_else(
                            time() < 2001,
                            lambda: leontief_matrix_2000(),
                            lambda: if_then_else(
                                time() < 2002,
                                lambda: leontief_matrix_2001(),
                                lambda: if_then_else(
                                    time() < 2003,
                                    lambda: leontief_matrix_2002(),
                                    lambda: if_then_else(
                                        time() < 2004,
                                        lambda: leontief_matrix_2003(),
                                        lambda: if_then_else(
                                            time() < 2005,
                                            lambda: leontief_matrix_2004(),
                                            lambda: if_then_else(
                                                time() < 2006,
                                                lambda: leontief_matrix_2005(),
                                                lambda: if_then_else(
                                                    time() < 2007,
                                                    lambda: leontief_matrix_2006(),
                                                    lambda: if_then_else(
                                                        time() < 2008,
                                                        lambda: leontief_matrix_2007(),
                                                        lambda: if_then_else(
                                                            time() < 2009,
                                                            lambda: leontief_matrix_2008(),
                                                            lambda: leontief_matrix_2009(),
                                                        ),
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="Leontief matrix 1996",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_1996"},
)
def leontief_matrix_1996():
    return _ext_constant_leontief_matrix_1996()


_ext_constant_leontief_matrix_1996 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "AJ571",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_1996",
)


@component.add(
    name="Leontief matrix 1997",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_1997"},
)
def leontief_matrix_1997():
    return _ext_constant_leontief_matrix_1997()


_ext_constant_leontief_matrix_1997 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "BS571",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_1997",
)


@component.add(
    name="Leontief matrix 1998",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_1998"},
)
def leontief_matrix_1998():
    return _ext_constant_leontief_matrix_1998()


_ext_constant_leontief_matrix_1998 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "DB571",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_1998",
)


@component.add(
    name="Leontief matrix 1999",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_1999"},
)
def leontief_matrix_1999():
    return _ext_constant_leontief_matrix_1999()


_ext_constant_leontief_matrix_1999 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "EK571",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_1999",
)


@component.add(
    name="Leontief matrix 2000",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_2000"},
)
def leontief_matrix_2000():
    return _ext_constant_leontief_matrix_2000()


_ext_constant_leontief_matrix_2000 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "FT571",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_2000",
)


@component.add(
    name="Leontief matrix 2001",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_2001"},
)
def leontief_matrix_2001():
    return _ext_constant_leontief_matrix_2001()


_ext_constant_leontief_matrix_2001 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "HC571",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_2001",
)


@component.add(
    name="Leontief matrix 2002",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_2002"},
)
def leontief_matrix_2002():
    return _ext_constant_leontief_matrix_2002()


_ext_constant_leontief_matrix_2002 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "IL571",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_2002",
)


@component.add(
    name="Leontief matrix 2003",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_2003"},
)
def leontief_matrix_2003():
    return _ext_constant_leontief_matrix_2003()


_ext_constant_leontief_matrix_2003 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "JU571",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_2003",
)


@component.add(
    name="Leontief matrix 2004",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_2004"},
)
def leontief_matrix_2004():
    return _ext_constant_leontief_matrix_2004()


_ext_constant_leontief_matrix_2004 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "LD571",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_2004",
)


@component.add(
    name="Leontief matrix 2005",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_2005"},
)
def leontief_matrix_2005():
    return _ext_constant_leontief_matrix_2005()


_ext_constant_leontief_matrix_2005 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "MM571",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_2005",
)


@component.add(
    name="Leontief matrix 2006",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_2006"},
)
def leontief_matrix_2006():
    return _ext_constant_leontief_matrix_2006()


_ext_constant_leontief_matrix_2006 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "NV571",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_2006",
)


@component.add(
    name="Leontief matrix 2007",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_2007"},
)
def leontief_matrix_2007():
    return _ext_constant_leontief_matrix_2007()


_ext_constant_leontief_matrix_2007 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "PE571",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_2007",
)


@component.add(
    name="Leontief matrix 2008",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_2008"},
)
def leontief_matrix_2008():
    return _ext_constant_leontief_matrix_2008()


_ext_constant_leontief_matrix_2008 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "QN571",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_2008",
)


@component.add(
    name="Leontief matrix 2009",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_2009"},
)
def leontief_matrix_2009():
    return _ext_constant_leontief_matrix_2009()


_ext_constant_leontief_matrix_2009 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "RW571",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_2009",
)


@component.add(
    name="Leontief matrix 1995",
    subscripts=["sectors", "sectors1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_leontief_matrix_1995"},
)
def leontief_matrix_1995():
    return _ext_constant_leontief_matrix_1995()


_ext_constant_leontief_matrix_1995 = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "A571",
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    _root,
    {"sectors": _subscript_dict["sectors"], "sectors1": _subscript_dict["sectors1"]},
    "_ext_constant_leontief_matrix_1995",
)


@component.add(
    name="replacement batteries",
    units="batteries/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"discarded_batteries": 1},
)
def replacement_batteries():
    """
    Replacement of electric batteries.due to degradation of existing ones
    """
    return discarded_batteries()


@component.add(
    name="share of electric light vehicles",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_number_elec_light_vehicles": 1,
        "total_number_light_vehicles": 1,
    },
)
def share_of_electric_light_vehicles():
    """
    Share of electric LD vehicles
    """
    return total_number_elec_light_vehicles() / total_number_light_vehicles()


@component.add(
    name='"share elec+hyb light vehicles"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_number_hybrid_light_vehicles": 1,
        "total_number_elec_light_vehicles": 1,
        "total_number_light_vehicles": 1,
    },
)
def share_elechyb_light_vehicles():
    """
    Share of electricity+hybrid LD vehicles
    """
    return (
        total_number_hybrid_light_vehicles() + total_number_elec_light_vehicles()
    ) / total_number_light_vehicles()


@component.add(
    name="T fin inlandT",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_t_fin_inlandt"},
)
def t_fin_inlandt():
    """
    Time of begining of inland transport policies
    """
    return _ext_constant_t_fin_inlandt()


_ext_constant_t_fin_inlandt = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C175",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_t_fin_inlandt",
)

_ext_constant_t_fin_inlandt.add(
    "inputs_EU.xlsx", "SCEN1", "C175", {"scenarios": ["SCEN1"]}
)

_ext_constant_t_fin_inlandt.add(
    "inputs_EU.xlsx", "SCEN2", "C175", {"scenarios": ["SCEN2"]}
)

_ext_constant_t_fin_inlandt.add(
    "inputs_EU.xlsx", "SCEN3", "C175", {"scenarios": ["SCEN3"]}
)

_ext_constant_t_fin_inlandt.add(
    "inputs_EU.xlsx", "SCEN4", "C175", {"scenarios": ["SCEN4"]}
)

_ext_constant_t_fin_inlandt.add(
    "inputs_EU.xlsx", "User defined", "C175", {"scenarios": ["User defined"]}
)


@component.add(
    name="T fin Hveh",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_t_fin_hveh"},
)
def t_fin_hveh():
    """
    Time when policies of change in percentages of household vehicles start
    """
    return _ext_constant_t_fin_hveh()


_ext_constant_t_fin_hveh = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C173",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_t_fin_hveh",
)

_ext_constant_t_fin_hveh.add(
    "inputs_EU.xlsx", "SCEN1", "C173", {"scenarios": ["SCEN1"]}
)

_ext_constant_t_fin_hveh.add(
    "inputs_EU.xlsx", "SCEN2", "C173", {"scenarios": ["SCEN2"]}
)

_ext_constant_t_fin_hveh.add(
    "inputs_EU.xlsx", "SCEN3", "C173", {"scenarios": ["SCEN3"]}
)

_ext_constant_t_fin_hveh.add(
    "inputs_EU.xlsx", "SCEN4", "C173", {"scenarios": ["SCEN4"]}
)

_ext_constant_t_fin_hveh.add(
    "inputs_EU.xlsx", "User defined", "C173", {"scenarios": ["User defined"]}
)


@component.add(
    name="T ini Hveh",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_t_ini_hveh"},
)
def t_ini_hveh():
    """
    Time when policies of change in percentages of household vehicles start
    """
    return _ext_constant_t_ini_hveh()


_ext_constant_t_ini_hveh = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C172",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_t_ini_hveh",
)

_ext_constant_t_ini_hveh.add(
    "inputs_EU.xlsx", "SCEN1", "C172", {"scenarios": ["SCEN1"]}
)

_ext_constant_t_ini_hveh.add(
    "inputs_EU.xlsx", "SCEN2", "C172", {"scenarios": ["SCEN2"]}
)

_ext_constant_t_ini_hveh.add(
    "inputs_EU.xlsx", "SCEN3", "C172", {"scenarios": ["SCEN3"]}
)

_ext_constant_t_ini_hveh.add(
    "inputs_EU.xlsx", "SCEN4", "C172", {"scenarios": ["SCEN4"]}
)

_ext_constant_t_ini_hveh.add(
    "inputs_EU.xlsx", "User defined", "C172", {"scenarios": ["User defined"]}
)


@component.add(
    name="variation pop SSP4",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 3, "pop_ssp4": 2},
)
def variation_pop_ssp4():
    """
    Variation of population in SSP4.
    """
    return if_then_else(
        time() < 2010, lambda: 0, lambda: -1 + pop_ssp4(time() + 1) / pop_ssp4(time())
    )


@component.add(
    name="variation pop SSP5",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 3, "pop_ssp5": 2},
)
def variation_pop_ssp5():
    """
    Variation of population in SSP5.
    """
    return if_then_else(
        time() < 2010, lambda: 0, lambda: -1 + pop_ssp5(time() + 1) / pop_ssp5(time())
    )


@component.add(
    name="start year P common rr minerals alt techn",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_start_year_p_common_rr_minerals_alt_techn"
    },
)
def start_year_p_common_rr_minerals_alt_techn():
    """
    Start year of variation recycling rate of minerals for alternative technologies (RES elec & EV batteries).
    """
    return _ext_constant_start_year_p_common_rr_minerals_alt_techn()


_ext_constant_start_year_p_common_rr_minerals_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F308",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_year_p_common_rr_minerals_alt_techn",
)

_ext_constant_start_year_p_common_rr_minerals_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "F308", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_year_p_common_rr_minerals_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "F308", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_year_p_common_rr_minerals_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "F308", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_year_p_common_rr_minerals_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "F308", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_year_p_common_rr_minerals_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "F308", {"scenarios": ["User defined"]}
)


@component.add(
    name="start year P common rr minerals Rest",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_start_year_p_common_rr_minerals_rest"},
)
def start_year_p_common_rr_minerals_rest():
    """
    Start year of variation recycling rate of minerals of the rest of the economy.
    """
    return _ext_constant_start_year_p_common_rr_minerals_rest()


_ext_constant_start_year_p_common_rr_minerals_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F307",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_year_p_common_rr_minerals_rest",
)

_ext_constant_start_year_p_common_rr_minerals_rest.add(
    "inputs_EU.xlsx", "SCEN1", "F307", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_year_p_common_rr_minerals_rest.add(
    "inputs_EU.xlsx", "SCEN2", "F307", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_year_p_common_rr_minerals_rest.add(
    "inputs_EU.xlsx", "SCEN3", "F307", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_year_p_common_rr_minerals_rest.add(
    "inputs_EU.xlsx", "SCEN4", "F307", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_year_p_common_rr_minerals_rest.add(
    "inputs_EU.xlsx", "User defined", "F307", {"scenarios": ["User defined"]}
)


@component.add(
    name="select pop SSPs",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_select_pop_ssps"},
)
def select_pop_ssps():
    """
    1=SSP1, 2=SSP2, 3=SSP3, 4=SSP4, 5=SSP5
    """
    return _ext_constant_select_pop_ssps()


_ext_constant_select_pop_ssps = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D11",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_select_pop_ssps",
)

_ext_constant_select_pop_ssps.add(
    "inputs_EU.xlsx", "SCEN1", "D11", {"scenarios": ["SCEN1"]}
)

_ext_constant_select_pop_ssps.add(
    "inputs_EU.xlsx", "SCEN2", "D11", {"scenarios": ["SCEN2"]}
)

_ext_constant_select_pop_ssps.add(
    "inputs_EU.xlsx", "SCEN3", "D11", {"scenarios": ["SCEN3"]}
)

_ext_constant_select_pop_ssps.add(
    "inputs_EU.xlsx", "SCEN4", "D11", {"scenarios": ["SCEN4"]}
)

_ext_constant_select_pop_ssps.add(
    "inputs_EU.xlsx", "User defined", "D11", {"scenarios": ["User defined"]}
)


@component.add(
    name="variation pop SSP1",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 3, "pop_ssp1": 2},
)
def variation_pop_ssp1():
    """
    Variation of population in SSP1.
    """
    return if_then_else(
        time() < 2010, lambda: 0, lambda: -1 + pop_ssp1(time() + 1) / pop_ssp1(time())
    )


@component.add(
    name="variation pop SSP2",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 3, "pop_ssp2": 2},
)
def variation_pop_ssp2():
    """
    Variation of population in SSP2.
    """
    return if_then_else(
        time() < 2010, lambda: 0, lambda: -1 + pop_ssp2(time() + 1) / pop_ssp2(time())
    )


@component.add(
    name="variation pop SSP3",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 3, "pop_ssp3": 2},
)
def variation_pop_ssp3():
    """
    Variation of population in SSP3.
    """
    return if_then_else(
        time() < 2010, lambda: 0, lambda: -1 + pop_ssp3(time() + 1) / pop_ssp3(time())
    )


@component.add(
    name="Annual population growth rate",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "select_population_evolution_input": 2,
        "variation_pop_ssps": 1,
        "p_customized_cte_pop_variation": 1,
        "p_customized_year_pop_evolution": 1,
        "p_timeseries_pop_growth_rate": 2,
        "time": 1,
    },
)
def annual_population_growth_rate():
    return if_then_else(
        select_population_evolution_input() == 0,
        lambda: variation_pop_ssps(),
        lambda: if_then_else(
            select_population_evolution_input() == 1,
            lambda: p_timeseries_pop_growth_rate(),
            lambda: if_then_else(
                time() < p_customized_year_pop_evolution(),
                lambda: p_timeseries_pop_growth_rate(),
                lambda: p_customized_cte_pop_variation(),
            ),
        ),
    )


@component.add(
    name="variation pop SSPs",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "select_pop_ssps": 4,
        "variation_pop_ssp1": 1,
        "variation_pop_ssp5": 1,
        "variation_pop_ssp2": 1,
        "variation_pop_ssp4": 1,
        "variation_pop_ssp3": 1,
    },
)
def variation_pop_ssps():
    return if_then_else(
        select_pop_ssps() == 1,
        lambda: xr.DataArray(
            variation_pop_ssp1(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            select_pop_ssps() == 2,
            lambda: xr.DataArray(
                variation_pop_ssp2(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                select_pop_ssps() == 3,
                lambda: xr.DataArray(
                    variation_pop_ssp3(),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    select_pop_ssps() == 4,
                    lambda: xr.DataArray(
                        variation_pop_ssp4(),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                    lambda: xr.DataArray(
                        variation_pop_ssp5(),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="Pop SSP2",
    units="Mpeople",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_pop_ssp2",
        "__lookup__": "_ext_lookup_pop_ssp2",
    },
)
def pop_ssp2(x, final_subs=None):
    return _ext_lookup_pop_ssp2(x, final_subs)


_ext_lookup_pop_ssp2 = ExtLookup(
    "inputs_EU.xlsx",
    "Result comparison",
    "25",
    "C28",
    {},
    _root,
    {},
    "_ext_lookup_pop_ssp2",
)


@component.add(
    name="Pop SSP4",
    units="Mpeople",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_pop_ssp4",
        "__lookup__": "_ext_lookup_pop_ssp4",
    },
)
def pop_ssp4(x, final_subs=None):
    return _ext_lookup_pop_ssp4(x, final_subs)


_ext_lookup_pop_ssp4 = ExtLookup(
    "inputs_EU.xlsx",
    "Result comparison",
    "25",
    "C30",
    {},
    _root,
    {},
    "_ext_lookup_pop_ssp4",
)


@component.add(
    name="Pop SSP1",
    units="Mpeople",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_pop_ssp1",
        "__lookup__": "_ext_lookup_pop_ssp1",
    },
)
def pop_ssp1(x, final_subs=None):
    return _ext_lookup_pop_ssp1(x, final_subs)


_ext_lookup_pop_ssp1 = ExtLookup(
    "inputs_EU.xlsx",
    "Result comparison",
    "25",
    "C27",
    {},
    _root,
    {},
    "_ext_lookup_pop_ssp1",
)


@component.add(
    name="Pop SSP5",
    units="Mpeople",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_pop_ssp5",
        "__lookup__": "_ext_lookup_pop_ssp5",
    },
)
def pop_ssp5(x, final_subs=None):
    return _ext_lookup_pop_ssp5(x, final_subs)


_ext_lookup_pop_ssp5 = ExtLookup(
    "inputs_EU.xlsx",
    "Result comparison",
    "25",
    "C31",
    {},
    _root,
    {},
    "_ext_lookup_pop_ssp5",
)


@component.add(
    name="Pop SSP3",
    units="Mpeople",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_pop_ssp3",
        "__lookup__": "_ext_lookup_pop_ssp3",
    },
)
def pop_ssp3(x, final_subs=None):
    return _ext_lookup_pop_ssp3(x, final_subs)


_ext_lookup_pop_ssp3 = ExtLookup(
    "inputs_EU.xlsx",
    "Result comparison",
    "25",
    "C29",
    {},
    _root,
    {},
    "_ext_lookup_pop_ssp3",
)


@component.add(
    name="Cp EV batteries for elec storage",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "cp_ev_batteries_required": 1,
        "max_cp_ev_batteries_for_elec_storage": 1,
    },
)
def cp_ev_batteries_for_elec_storage():
    """
    Dynamic evolution of the Cp of EV batteries for electricity storage.
    """
    return np.minimum(
        cp_ev_batteries_required(), max_cp_ev_batteries_for_elec_storage()
    )


@component.add(
    name="max Cp EV batteries for elec storage",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"cp_ev_batteries_for_transp": 1},
)
def max_cp_ev_batteries_for_elec_storage():
    """
    We assume a maximum Cp of EV batteries dedicated for electric storage which equates the use for Transportation uses.
    """
    return cp_ev_batteries_for_transp()


@component.add(
    name="TFEC intensity until 2009",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "tfes_intensity_ej_t": 1, "aux15": 1},
)
def tfec_intensity_until_2009():
    """
    TFEC intensity until the year 2009.
    """
    return if_then_else(time() < 2009, lambda: tfes_intensity_ej_t(), lambda: aux15())


@component.add(
    name="Cumulative TFEC intensity change from 2009",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "tfes_intensity_ej_t": 1, "tfec_intensity_until_2009": 1},
)
def cumulative_tfec_intensity_change_from_2009():
    return if_then_else(
        time() < 2009,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: -1 + tfes_intensity_ej_t() / tfec_intensity_until_2009(),
    )


@component.add(
    name="lifetime EV batteries",
    units="Years",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "net_stored_energy_ev_battery_over_lifetime": 1,
        "cp_ev_batteries_for_transp": 1,
        "kw_per_mw": 1,
        "kw_per_battery_ev": 1,
        "cp_ev_batteries_for_elec_storage": 1,
        "mw_in_1_year_to_mj": 1,
    },
)
def lifetime_ev_batteries():
    """
    Lifetime of standard EV batteries considered.
    """
    return zidz(
        xr.DataArray(
            net_stored_energy_ev_battery_over_lifetime(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        (cp_ev_batteries_for_elec_storage() + cp_ev_batteries_for_transp())
        * mw_in_1_year_to_mj()
        * (kw_per_battery_ev() / kw_per_mw()),
    )


@component.add(
    name="TFEC per capita",
    units="GJ/person",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_tfec": 1, "gj_per_ej": 1, "population": 1},
)
def tfec_per_capita():
    return zidz(real_tfec() * gj_per_ej(), population())


@component.add(
    name="aux15",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux15": 1},
    other_deps={
        "_delayfixed_aux15": {
            "initial": {"time_step": 1},
            "step": {"tfec_intensity_until_2009": 1},
        }
    },
)
def aux15():
    """
    Auxiliary variable to estimate the cumulative TFEC intensity change until 2009.
    """
    return _delayfixed_aux15()


_delayfixed_aux15 = DelayFixed(
    lambda: tfec_intensity_until_2009(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux15",
)


@component.add(
    name="Cp EV batteries for Transp",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def cp_ev_batteries_for_transp():
    return 0.0055


@component.add(
    name="Annual growth rate electricity generation RES elec tot",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_tot_generation_all_res_elec_twh": 1,
        "fe_tot_generation_all_res_elec_twh_delayed_1yr": 1,
    },
)
def annual_growth_rate_electricity_generation_res_elec_tot():
    """
    Annual growth rate of electricity generation from RES.
    """
    return (
        -1
        + fe_tot_generation_all_res_elec_twh()
        / fe_tot_generation_all_res_elec_twh_delayed_1yr()
    )


@component.add(
    name="Annual growth rate RES for heat",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fes_res_for_heat_ej": 1, "fes_res_for_heat_delayed_1yr": 1},
)
def annual_growth_rate_res_for_heat():
    """
    Annual growth rate of heat generation from RES.
    """
    return -1 + fes_res_for_heat_ej() / fes_res_for_heat_delayed_1yr()


@component.add(
    name="P customized year pop evolution",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_customized_year_pop_evolution"},
)
def p_customized_year_pop_evolution():
    """
    From customized year, set annual constant variation.
    """
    return _ext_constant_p_customized_year_pop_evolution()


_ext_constant_p_customized_year_pop_evolution = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E14",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_customized_year_pop_evolution",
)

_ext_constant_p_customized_year_pop_evolution.add(
    "inputs_EU.xlsx", "BAU", "E14", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_customized_year_pop_evolution.add(
    "inputs_EU.xlsx", "SCEN2", "E14", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_customized_year_pop_evolution.add(
    "inputs_EU.xlsx", "SCEN3", "E14", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_customized_year_pop_evolution.add(
    "inputs_EU.xlsx", "SCEN4", "E14", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_customized_year_pop_evolution.add(
    "inputs_EU.xlsx", "User defined", "E14", {"scenarios": ["User defined"]}
)


@component.add(
    name="select Population evolution input",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_select_population_evolution_input"},
)
def select_population_evolution_input():
    """
    0. From SSPs 1. Timeseries 2. From cusotmized year, set annual constant variation
    """
    return _ext_constant_select_population_evolution_input()


_ext_constant_select_population_evolution_input = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B11",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_select_population_evolution_input",
)

_ext_constant_select_population_evolution_input.add(
    "inputs_EU.xlsx", "SCEN1", "B11", {"scenarios": ["SCEN1"]}
)

_ext_constant_select_population_evolution_input.add(
    "inputs_EU.xlsx", "SCEN2", "B11", {"scenarios": ["SCEN2"]}
)

_ext_constant_select_population_evolution_input.add(
    "inputs_EU.xlsx", "SCEN3", "B11", {"scenarios": ["SCEN3"]}
)

_ext_constant_select_population_evolution_input.add(
    "inputs_EU.xlsx", "SCEN4", "B11", {"scenarios": ["SCEN4"]}
)

_ext_constant_select_population_evolution_input.add(
    "inputs_EU.xlsx", "User defined", "B11", {"scenarios": ["User defined"]}
)


@component.add(
    name="FE tot generation all RES elec TWh delayed 1yr",
    units="Tdollars/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_fe_tot_generation_all_res_elec_twh_delayed_1yr": 1},
    other_deps={
        "_delayfixed_fe_tot_generation_all_res_elec_twh_delayed_1yr": {
            "initial": {},
            "step": {"fe_tot_generation_all_res_elec_twh": 1},
        }
    },
)
def fe_tot_generation_all_res_elec_twh_delayed_1yr():
    """
    Electricity generation from all RES technologies. delayed 1 year.
    """
    return _delayfixed_fe_tot_generation_all_res_elec_twh_delayed_1yr()


_delayfixed_fe_tot_generation_all_res_elec_twh_delayed_1yr = DelayFixed(
    lambda: fe_tot_generation_all_res_elec_twh(),
    lambda: 1,
    lambda: xr.DataArray(
        396.6, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    time_step,
    "_delayfixed_fe_tot_generation_all_res_elec_twh_delayed_1yr",
)


@component.add(
    name="P customized cte pop variation",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_customized_cte_pop_variation"},
)
def p_customized_cte_pop_variation():
    """
    From customized year, set annual constant variation.
    """
    return _ext_constant_p_customized_cte_pop_variation()


_ext_constant_p_customized_cte_pop_variation = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "G14",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_customized_cte_pop_variation",
)

_ext_constant_p_customized_cte_pop_variation.add(
    "inputs_EU.xlsx", "BAU", "G14", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_customized_cte_pop_variation.add(
    "inputs_EU.xlsx", "SCEN2", "G14", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_customized_cte_pop_variation.add(
    "inputs_EU.xlsx", "SCEN3", "G14", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_customized_cte_pop_variation.add(
    "inputs_EU.xlsx", "SCEN4", "G14", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_customized_cte_pop_variation.add(
    "inputs_EU.xlsx", "User defined", "G14", {"scenarios": ["User defined"]}
)


@component.add(
    name="FES RES for heat delayed 1yr",
    units="Tdollars/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_fes_res_for_heat_delayed_1yr": 1},
    other_deps={
        "_delayfixed_fes_res_for_heat_delayed_1yr": {
            "initial": {},
            "step": {"fes_res_for_heat_ej": 1},
        }
    },
)
def fes_res_for_heat_delayed_1yr():
    """
    Heat from renewable energy sources delayed 1 year.
    """
    return _delayfixed_fes_res_for_heat_delayed_1yr()


_delayfixed_fes_res_for_heat_delayed_1yr = DelayFixed(
    lambda: fes_res_for_heat_ej(),
    lambda: 1,
    lambda: xr.DataArray(
        3.488, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    time_step,
    "_delayfixed_fes_res_for_heat_delayed_1yr",
)


@component.add(
    name="TPES intensity until 2009",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "tpes_intensity_ej_t": 1, "aux14": 1},
)
def tpes_intensity_until_2009():
    """
    TPES intensity until the year 2009.
    """
    return if_then_else(time() < 2009, lambda: tpes_intensity_ej_t(), lambda: aux14())


@component.add(
    name="aux13",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux13": 1},
    other_deps={
        "_delayfixed_aux13": {
            "initial": {"time_step": 1},
            "step": {"tfec_intensity_until_2009_without_eroi": 1},
        }
    },
)
def aux13():
    """
    Auxiliary variable to estimate the cumulative TFEC intensity change until 2009.
    """
    return _delayfixed_aux13()


_delayfixed_aux13 = DelayFixed(
    lambda: tfec_intensity_until_2009_without_eroi(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux13",
)


@component.add(
    name="aux14",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux14": 1},
    other_deps={
        "_delayfixed_aux14": {
            "initial": {"time_step": 1},
            "step": {"tpes_intensity_until_2009": 1},
        }
    },
)
def aux14():
    """
    Auxiliary variable to estimate the cumulative TPES intensity change until 2009.
    """
    return _delayfixed_aux14()


_delayfixed_aux14 = DelayFixed(
    lambda: tpes_intensity_until_2009(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux14",
)


@component.add(
    name="Cumulative TPES intensity change from 2009",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "tpes_intensity_ej_t": 1, "tpes_intensity_until_2009": 1},
)
def cumulative_tpes_intensity_change_from_2009():
    """
    Cumulative TPES intensity change from 2009.
    """
    return if_then_else(
        time() < 2009,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: -1 + tpes_intensity_ej_t() / tpes_intensity_until_2009(),
    )


@component.add(
    name="Cumulative TFEC intensity change from 2009 without EROI",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "tfes_intensity_ej_t_without_eroi": 1,
        "tfec_intensity_until_2009_without_eroi": 1,
    },
)
def cumulative_tfec_intensity_change_from_2009_without_eroi():
    return if_then_else(
        time() < 2009,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: -1
        + tfes_intensity_ej_t_without_eroi() / tfec_intensity_until_2009_without_eroi(),
    )


@component.add(
    name="TFEC intensity until 2009 without EROI",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "tfes_intensity_ej_t_without_eroi": 1, "aux13": 1},
)
def tfec_intensity_until_2009_without_eroi():
    """
    TFEC intensity without EROI until the year 2009.
    """
    return if_then_else(
        time() < 2009, lambda: tfes_intensity_ej_t_without_eroi(), lambda: aux13()
    )


@component.add(
    name="Annual TFES intensity change rate without EROI",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "tfes_intensity_ej_t_without_eroi": 1,
        "tfes_intensity_without_eroi_delayed_1yr": 1,
    },
)
def annual_tfes_intensity_change_rate_without_eroi():
    """
    Annual TFES intensity change rate without EROI.
    """
    return -1 + zidz(
        tfes_intensity_ej_t_without_eroi(), tfes_intensity_without_eroi_delayed_1yr()
    )


@component.add(
    name="TFES intensity without EROI delayed 1yr",
    units="Tdollars/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_tfes_intensity_without_eroi_delayed_1yr": 1},
    other_deps={
        "_delayfixed_tfes_intensity_without_eroi_delayed_1yr": {
            "initial": {},
            "step": {"tfes_intensity_ej_t_without_eroi": 1},
        }
    },
)
def tfes_intensity_without_eroi_delayed_1yr():
    """
    TFES intensity delayed 1 year.
    """
    return _delayfixed_tfes_intensity_without_eroi_delayed_1yr()


_delayfixed_tfes_intensity_without_eroi_delayed_1yr = DelayFixed(
    lambda: tfes_intensity_ej_t_without_eroi(),
    lambda: 1,
    lambda: xr.DataArray(
        8.827, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    time_step,
    "_delayfixed_tfes_intensity_without_eroi_delayed_1yr",
)


@component.add(
    name="required TFED sectors",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"required_fed_sectors_by_fuel": 1},
)
def required_tfed_sectors():
    return sum(
        required_fed_sectors_by_fuel().rename({"final sources": "final sources!"}),
        dim=["final sources!"],
    )


@component.add(
    name="ratio FED households vs sectors",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"households_total_final_energy_demand": 1, "required_tfed_sectors": 1},
)
def ratio_fed_households_vs_sectors():
    """
    Ratio of final energy demand of households vs 35 WIOD sectors.
    """
    return zidz(households_total_final_energy_demand(), required_tfed_sectors())


@component.add(
    name="TFES intensity EJ T$ without EROI",
    units="EJ/T$",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_tfec": 1, "eroi_fc_system_from_2015": 1, "gdp_eu": 1},
)
def tfes_intensity_ej_t_without_eroi():
    return zidz(real_tfec() / eroi_fc_system_from_2015(), gdp_eu())


@component.add(
    name="Cumulative CO2e GHG emissions",
    units="GTCO2e/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cumulative_co2e_ghg_emissions": 1},
    other_deps={
        "_integ_cumulative_co2e_ghg_emissions": {
            "initial": {},
            "step": {"total_co2e_ce": 1},
        }
    },
)
def cumulative_co2e_ghg_emissions():
    return _integ_cumulative_co2e_ghg_emissions()


_integ_cumulative_co2e_ghg_emissions = Integ(
    lambda: total_co2e_ce(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    "_integ_cumulative_co2e_ghg_emissions",
)


@component.add(
    name="Target year P growth RES elec",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_target_year_p_growth_res_elec"},
)
def target_year_p_growth_res_elec():
    """
    Target year of the policy growth of RES technologies for generating electricity.
    """
    return _ext_constant_target_year_p_growth_res_elec()


_ext_constant_target_year_p_growth_res_elec = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F33",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_target_year_p_growth_res_elec",
)

_ext_constant_target_year_p_growth_res_elec.add(
    "inputs_EU.xlsx", "SCEN1", "F33", {"scenarios": ["SCEN1"]}
)

_ext_constant_target_year_p_growth_res_elec.add(
    "inputs_EU.xlsx", "SCEN2", "F33", {"scenarios": ["SCEN2"]}
)

_ext_constant_target_year_p_growth_res_elec.add(
    "inputs_EU.xlsx", "SCEN3", "F33", {"scenarios": ["SCEN3"]}
)

_ext_constant_target_year_p_growth_res_elec.add(
    "inputs_EU.xlsx", "SCEN4", "F33", {"scenarios": ["SCEN4"]}
)

_ext_constant_target_year_p_growth_res_elec.add(
    "inputs_EU.xlsx", "User defined", "F33", {"scenarios": ["User defined"]}
)


@component.add(
    name="Target year P growth RES heat",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_target_year_p_growth_res_heat"},
)
def target_year_p_growth_res_heat():
    """
    Target year of the policy growth of RES technologies for generating heat.
    """
    return _ext_constant_target_year_p_growth_res_heat()


_ext_constant_target_year_p_growth_res_heat = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C59",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_target_year_p_growth_res_heat",
)

_ext_constant_target_year_p_growth_res_heat.add(
    "inputs_EU.xlsx", "SCEN1", "C59", {"scenarios": ["SCEN1"]}
)

_ext_constant_target_year_p_growth_res_heat.add(
    "inputs_EU.xlsx", "SCEN2", "C59", {"scenarios": ["SCEN2"]}
)

_ext_constant_target_year_p_growth_res_heat.add(
    "inputs_EU.xlsx", "SCEN3", "C59", {"scenarios": ["SCEN3"]}
)

_ext_constant_target_year_p_growth_res_heat.add(
    "inputs_EU.xlsx", "SCEN4", "C59", {"scenarios": ["SCEN4"]}
)

_ext_constant_target_year_p_growth_res_heat.add(
    "inputs_EU.xlsx", "User defined", "C58", {"scenarios": ["User defined"]}
)


@component.add(
    name='"Total GHG emissions BAU-CAT MEDEAS D3.2"',
    units="GTCO2e/Year",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_total_ghg_emissions_baucat_medeas_d32",
        "__data__": "_ext_data_total_ghg_emissions_baucat_medeas_d32",
        "time": 1,
    },
)
def total_ghg_emissions_baucat_medeas_d32():
    return _ext_data_total_ghg_emissions_baucat_medeas_d32(time())


_ext_data_total_ghg_emissions_baucat_medeas_d32 = ExtData(
    "inputs_EU.xlsx",
    "Result comparison",
    "18",
    "C20",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_total_ghg_emissions_baucat_medeas_d32",
)


@component.add(
    name='"Total GHG emissions MLT2030 MEDEAS D3.2"',
    units="GTCO2e/Year",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_total_ghg_emissions_mlt2030_medeas_d32",
        "__data__": "_ext_data_total_ghg_emissions_mlt2030_medeas_d32",
        "time": 1,
    },
)
def total_ghg_emissions_mlt2030_medeas_d32():
    return _ext_data_total_ghg_emissions_mlt2030_medeas_d32(time())


_ext_data_total_ghg_emissions_mlt2030_medeas_d32 = ExtData(
    "inputs_EU.xlsx",
    "Result comparison",
    "18",
    "C23",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_total_ghg_emissions_mlt2030_medeas_d32",
)


@component.add(
    name='"Total GHG emissions MLT2020 MEDEAS D3.2"',
    units="GTCO2e/Year",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_total_ghg_emissions_mlt2020_medeas_d32",
        "__data__": "_ext_data_total_ghg_emissions_mlt2020_medeas_d32",
        "time": 1,
    },
)
def total_ghg_emissions_mlt2020_medeas_d32():
    return _ext_data_total_ghg_emissions_mlt2020_medeas_d32(time())


_ext_data_total_ghg_emissions_mlt2020_medeas_d32 = ExtData(
    "inputs_EU.xlsx",
    "Result comparison",
    "18",
    "C22",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_total_ghg_emissions_mlt2020_medeas_d32",
)


@component.add(
    name="Low range FEC good standard of living",
    units="GJ/(Year*people)",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_low_range_fec_good_standard_of_living"},
)
def low_range_fec_good_standard_of_living():
    """
    30 GJ/yr per capita: low range FEC good standard of living (Lamb & Steinberger (2017), i.e. above 70 years life expectancy, full access to water, sanitation, electricity and other basic infrastructures.
    """
    return _ext_constant_low_range_fec_good_standard_of_living()


_ext_constant_low_range_fec_good_standard_of_living = ExtConstant(
    "inputs_EU.xlsx",
    "Result comparison",
    "C6",
    {},
    _root,
    {},
    "_ext_constant_low_range_fec_good_standard_of_living",
)


@component.add(
    name="Threshold FEC 'high development'",
    units="GJ/(Year*people)",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_threshold_fec_high_development"},
)
def threshold_fec_high_development():
    """
    75 GJ/yr per capita. Minimum final energy consumption threshold approximating a "high development" standard of living (Arto et al. (2016)), i.e. HDI>0.8.
    """
    return _ext_constant_threshold_fec_high_development()


_ext_constant_threshold_fec_high_development = ExtConstant(
    "inputs_EU.xlsx",
    "Result comparison",
    "C8",
    {},
    _root,
    {},
    "_ext_constant_threshold_fec_high_development",
)


@component.add(
    name="High range FEC good standard of living",
    units="GJ/(Year*people)",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_high_range_fec_good_standard_of_living"},
)
def high_range_fec_good_standard_of_living():
    """
    40 GJ/yr per capita: high range FEC good standard of living (Lamb & Steinberger (2017), i.e. above 70 years life expectancy, full access to water, sanitation, electricity and other basic infrastructures.
    """
    return _ext_constant_high_range_fec_good_standard_of_living()


_ext_constant_high_range_fec_good_standard_of_living = ExtConstant(
    "inputs_EU.xlsx",
    "Result comparison",
    "C7",
    {},
    _root,
    {},
    "_ext_constant_high_range_fec_good_standard_of_living",
)


@component.add(
    name="minimum fraction",
    subscripts=["scenarios", "sectors1", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_minimum_fraction"},
)
def minimum_fraction():
    return _ext_constant_minimum_fraction()


_ext_constant_minimum_fraction = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "sectors1": _subscript_dict["sectors1"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_minimum_fraction",
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "G213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "L213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "Q213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "V213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "AA213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "AF213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "AK213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "AP213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "AU213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "AZ213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "BE213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "BJ213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "BO213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "BT213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "BY213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "CD213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "CI213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "CN213",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "CS213",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "CX213",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "DC213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "DH213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "DM213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "DR213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "DW213",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "EB213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "EG213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "EL213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "EQ213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "EV213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "FA213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "FF213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "FK213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "BAU",
    "FP213",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "B213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "B213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "B213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "B213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "B213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "G213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "G213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "G213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "G213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "G213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "L213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "L213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "L213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "L213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "L213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "V213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "V213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "V213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "V213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "V213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AA213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AA213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AA213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AA213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "AA213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AF213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AF213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AF213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AF213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "AF213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AK213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AK213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AK213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AK213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "AK213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AP213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AP213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AP213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AP213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "AP213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AU213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AU213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AU213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AU213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "AU213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AZ213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AZ213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AZ213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AZ213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "AZ213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BE213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BE213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BE213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BE213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "BE213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BJ213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BJ213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BJ213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BJ213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "BJ213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BO213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BO213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BO213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BO213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "BO213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BT213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BT213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BT213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BT213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "BT213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BY213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BY213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BY213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BY213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "BY213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CD213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CD213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CD213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CD213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "CD213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CI213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CI213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CI213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CI213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "CI213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CN213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CN213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CN213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CN213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "CN213",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CS213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CS213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CS213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CS213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "CS213",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CX213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CX213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CX213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CX213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "CX213",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DC213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DC213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DC213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DC213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "DC213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DH213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DH213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DH213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DH213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "DH213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DM213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DM213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DM213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DM213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "DM213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DR213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DR213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DR213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DR213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "DR213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DW213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DW213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DW213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DW213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "DW213",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EB213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EB213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EB213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EB213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "EB213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EG213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EG213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EG213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EG213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "EG213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EL213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EL213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EL213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EL213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "EL213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EQ213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EQ213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EQ213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EQ213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "EQ213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EV213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EV213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EV213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EV213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "EV213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FA213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FA213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FA213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FA213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "FA213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FF213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FF213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FF213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FF213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "FF213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FK213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FK213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FK213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FK213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "FK213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FP213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FP213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FP213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FP213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "FP213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "Q213",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "Q213",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "Q213",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "Q213",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_minimum_fraction.add(
    "inputs_EU.xlsx",
    "User defined",
    "Q213",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)


@component.add(
    name="Max yearly change",
    subscripts=["scenarios", "sectors1", "final sources"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_max_yearly_change"},
)
def max_yearly_change():
    return _ext_constant_max_yearly_change()


_ext_constant_max_yearly_change = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
    _root,
    {
        "scenarios": _subscript_dict["scenarios"],
        "sectors1": _subscript_dict["sectors1"],
        "final sources": _subscript_dict["final sources"],
    },
    "_ext_constant_max_yearly_change",
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "G214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "L214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "Q214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "V214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "AA214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "AF214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "AK214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "AP214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "AU214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "AZ214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "BE214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "BJ214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "BO214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "BT214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "BY214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "CD214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "CI214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "CN214",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "CS214",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "CX214",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "DC214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "DH214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "DM214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "DR214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "DW214",
    {
        "scenarios": ["BAU"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "EB214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "EG214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "EL214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "EQ214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "EV214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "FA214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "FF214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "FK214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "BAU",
    "FP214",
    {
        "scenarios": ["BAU"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "B214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "B214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "B214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "B214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "B214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "G214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "G214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "G214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "G214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "G214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Mining and Quarrying"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "L214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "L214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "L214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "L214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "L214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "V214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "V214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "V214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "V214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "V214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AA214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AA214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AA214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AA214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "AA214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AF214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AF214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AF214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AF214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "AF214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AK214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AK214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AK214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AK214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "AK214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AP214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AP214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AP214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AP214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "AP214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AU214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AU214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AU214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AU214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "AU214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Rubber and Plastics"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "AZ214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "AZ214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "AZ214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "AZ214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "AZ214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BE214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BE214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BE214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BE214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "BE214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BJ214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BJ214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BJ214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BJ214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "BJ214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Machinery Nec"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BO214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BO214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BO214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BO214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "BO214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BT214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BT214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BT214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BT214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "BT214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Transport Equipment"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "BY214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "BY214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "BY214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "BY214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "BY214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CD214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CD214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CD214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CD214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "CD214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CI214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CI214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CI214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CI214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "CI214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Construction"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CN214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CN214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CN214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CN214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "CN214",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CS214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CS214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CS214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CS214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "CS214",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "CX214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "CX214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "CX214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "CX214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "CX214",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DC214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DC214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DC214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DC214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "DC214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Hotels and Restaurants"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DH214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DH214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DH214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DH214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "DH214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Inland Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DM214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DM214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DM214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DM214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "DM214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Water Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DR214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DR214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DR214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DR214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "DR214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Air Transport"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "DW214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "DW214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "DW214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "DW214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "DW214",
    {
        "scenarios": ["User defined"],
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EB214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EB214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EB214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EB214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "EB214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Post and Telecommunications"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EG214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EG214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EG214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EG214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "EG214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Financial Intermedation"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EL214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EL214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EL214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EL214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "EL214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Real Estate Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EQ214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EQ214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EQ214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EQ214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "EQ214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "EV214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "EV214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "EV214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "EV214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "EV214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FA214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FA214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FA214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FA214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "FA214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Education"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FF214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FF214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FF214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FF214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "FF214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Health and Social Work"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FK214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FK214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FK214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FK214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "FK214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "FP214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "FP214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "FP214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "FP214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "FP214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN1",
    "Q214",
    {
        "scenarios": ["SCEN1"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN2",
    "Q214",
    {
        "scenarios": ["SCEN2"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN3",
    "Q214",
    {
        "scenarios": ["SCEN3"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "SCEN4",
    "Q214",
    {
        "scenarios": ["SCEN4"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)

_ext_constant_max_yearly_change.add(
    "inputs_EU.xlsx",
    "User defined",
    "Q214",
    {
        "scenarios": ["User defined"],
        "sectors1": ["Textiles and Textile Products"],
        "final sources": _subscript_dict["final sources"],
    },
)


@component.add(name="GWP 100 years CH4", comp_type="Constant", comp_subtype="Normal")
def gwp_100_years_ch4():
    return 34


@component.add(
    name="correction factor all GHGs",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def correction_factor_all_ghgs():
    """
    Taking as reference data for 2012 (comparing MEDEAS outputs and CAT from INSTM report).
    """
    return 1.22


@component.add(
    name='"Activate energy scarcity feedback?"',
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def activate_energy_scarcity_feedback():
    """
    0- NOT activated 1- ACTIVATED
    """
    return 1


@component.add(
    name="max potential PHS TWh",
    units="TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_capacity_potential_phs": 1, "cp_phs": 1, "twe_per_twh": 1},
)
def max_potential_phs_twh():
    return max_capacity_potential_phs() * cp_phs() / twe_per_twh()


@component.add(
    name="replacement rate PHS",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_fe_elec_stored_phs_twh": 1, "max_potential_phs_twh": 1},
)
def replacement_rate_phs():
    """
    Replacement rate of PHS infrastructure: by default all decommissioned capacity is replaced (=1). In the case of overcapacity in relation to the potential, we reduce the annual replacement rate to 0.8.
    """
    return if_then_else(
        real_fe_elec_stored_phs_twh() < max_potential_phs_twh(),
        lambda: xr.DataArray(
            1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: xr.DataArray(
            0.8, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="real FE elec stored EV batteries TWh",
    units="TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"used_ev_batteries_for_elec_storage": 1, "twe_per_twh": 1},
)
def real_fe_elec_stored_ev_batteries_twh():
    """
    installed capacity PHS TW[scenarios]*Cp PHS/TWe per TWh Electricity stored in EV batteries. It does not add up to the electricity generation of other sources since this electricity has already been accounted for! (stored).
    """
    return used_ev_batteries_for_elec_storage() / twe_per_twh()


@component.add(
    name="share tot FEI RES elec var",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_final_energy_invested_res_elec_var": 1, "total_dyn_fei_res": 1},
)
def share_tot_fei_res_elec_var():
    return total_final_energy_invested_res_elec_var() / total_dyn_fei_res()


@component.add(
    name="Cp EV batteries required",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"demand_ev_batteries_for_elec_storage": 1, "ev_batteries_tw": 1},
)
def cp_ev_batteries_required():
    return np.maximum(0, demand_ev_batteries_for_elec_storage() / ev_batteries_tw())


@component.add(
    name="output EV bateries for storage over lifetime",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "cp_ev_batteries_for_elec_storage": 1,
        "newreplaced_batteries_tw": 1,
        "twe_per_twh": 1,
        "lifetime_ev_batteries": 1,
        "ej_per_twh": 1,
    },
)
def output_ev_bateries_for_storage_over_lifetime():
    """
    Total electricity output generated over the full operation of the infrastructure of the new capacity installed.
    """
    return (
        cp_ev_batteries_for_elec_storage()
        * newreplaced_batteries_tw()
        * (1 / twe_per_twh())
        * lifetime_ev_batteries()
        * ej_per_twh()
    )


@component.add(
    name="discarded batteries",
    units="batteries",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"batteries_evhib2we": 1, "lifetime_ev_batteries": 1},
)
def discarded_batteries():
    """
    Discarded electric batteries due to wear.
    """
    return np.maximum(0, zidz(batteries_evhib2we(), lifetime_ev_batteries()))


@component.add(
    name="ESOI elec storage",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "esoi_phs": 1,
        "installed_capacity_phs_tw": 1,
        "esoi_ev_batteries": 1,
        "used_ev_batteries_for_elec_storage": 1,
        "total_capacity_elec_storage_tw": 1,
    },
)
def esoi_elec_storage():
    """
    ESOI of electric storage (PHS and EV batteries).
    """
    return (
        esoi_phs() * installed_capacity_phs_tw()
        + esoi_ev_batteries() * used_ev_batteries_for_elec_storage()
    ) / total_capacity_elec_storage_tw()


@component.add(
    name="ESOI EV batteries",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "lifetime_ev_batteries": 1,
        "cp_ev_batteries_for_elec_storage": 1,
        "mw_in_1_year_to_mj": 1,
        "gquality_of_electricity": 1,
        "energy_intensity_construction_ev_batteries_mjmw": 1,
        "grid_correction_factor_ev_batteries": 1,
        "share_energy_requirements_for_decom_ev_batteries": 1,
    },
)
def esoi_ev_batteries():
    """
    ESOI batteries of electric vehicles for electricity storage. (To estimate the ESOI static: g=0.7 and constant recycling rates)
    """
    return (
        lifetime_ev_batteries()
        * cp_ev_batteries_for_elec_storage()
        * mw_in_1_year_to_mj()
        / (
            gquality_of_electricity()
            * energy_intensity_construction_ev_batteries_mjmw()
            * (
                1
                + share_energy_requirements_for_decom_ev_batteries()
                + grid_correction_factor_ev_batteries()
            )
        )
    )


@component.add(
    name="rt elec storage efficiency",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rt_storage_efficiency_phs": 1,
        "installed_capacity_phs_tw": 1,
        "rt_storage_efficiency_ev_batteries": 1,
        "used_ev_batteries_for_elec_storage": 1,
        "total_capacity_elec_storage_tw": 1,
    },
)
def rt_elec_storage_efficiency():
    """
    Round-trip storage efficiency of electric storage (PHS and EV batteries).
    """
    return (
        rt_storage_efficiency_phs() * installed_capacity_phs_tw()
        + rt_storage_efficiency_ev_batteries() * used_ev_batteries_for_elec_storage()
    ) / total_capacity_elec_storage_tw()


@component.add(
    name="abundance storage",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"demand_storage_capacity": 2, "total_capacity_elec_storage_tw": 3},
)
def abundance_storage():
    """
    Increases the planning of PHS if there is a deficit of electric storage.
    """
    return 1 - if_then_else(
        demand_storage_capacity() <= total_capacity_elec_storage_tw(),
        lambda: xr.DataArray(
            1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: np.maximum(
            0,
            1
            - (demand_storage_capacity() - total_capacity_elec_storage_tw())
            / total_capacity_elec_storage_tw(),
        ),
    )


@component.add(
    name="Used EV batteries for elec storage",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ev_batteries_tw": 1, "cp_ev_batteries_for_elec_storage": 1},
)
def used_ev_batteries_for_elec_storage():
    """
    Bateries from electric vehicles used for electric storage.
    """
    return ev_batteries_tw() * cp_ev_batteries_for_elec_storage()


@component.add(
    name="max Cp EV batteries",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "net_stored_energy_ev_battery_over_lifetime": 1,
        "min_lifetime_ev_batteries": 1,
        "mw_in_1_year_to_mj": 1,
        "kw_per_battery_ev": 1,
        "kw_per_mw": 1,
    },
)
def max_cp_ev_batteries():
    """
    Maximum Cp allowed associated to the minimum lifetime.
    """
    return net_stored_energy_ev_battery_over_lifetime() / (
        min_lifetime_ev_batteries()
        * mw_in_1_year_to_mj()
        * (kw_per_battery_ev() / kw_per_mw())
    )


@component.add(
    name="Total capacity elec storage TW",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "installed_capacity_phs_tw": 1,
        "used_ev_batteries_for_elec_storage": 1,
    },
)
def total_capacity_elec_storage_tw():
    """
    Total capacity electricity storage installed.
    """
    return installed_capacity_phs_tw() + used_ev_batteries_for_elec_storage()


@component.add(
    name="demand EV batteries for elec storage",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"demand_storage_capacity": 1, "installed_capacity_phs_tw": 1},
)
def demand_ev_batteries_for_elec_storage():
    """
    Demand of EV batteries for storage of electricity.
    """
    return np.maximum(0, demand_storage_capacity() - installed_capacity_phs_tw())


@component.add(
    name="CED per TW over lifetime PHS",
    units="EJ/TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "cp_phs": 1,
        "lifetime_res_elec": 1,
        "ej_per_twh": 1,
        "twe_per_twh": 1,
        "esoi_static_phs": 1,
        "quality_of_electricity_2015": 1,
    },
)
def ced_per_tw_over_lifetime_phs():
    return zidz(
        xr.DataArray(
            cp_phs()
            * float(lifetime_res_elec().loc["hydro"])
            * ej_per_twh()
            / twe_per_twh(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        esoi_static_phs() * quality_of_electricity_2015(),
    )


@component.add(
    name="remaining potential constraint on new PHS capacity",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "remaining_potential_phs": 2,
        "threshold_remaining_potential_new_capacity": 2,
    },
)
def remaining_potential_constraint_on_new_phs_capacity():
    return if_then_else(
        remaining_potential_phs() > threshold_remaining_potential_new_capacity(),
        lambda: xr.DataArray(
            1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: remaining_potential_phs()
        * (1 / threshold_remaining_potential_new_capacity()),
    )


@component.add(
    name="new required PHS capacity",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "total_time_planconstr_res_elec": 1,
        "historic_new_required_capacity_phs": 1,
        "adapt_growth_phs": 1,
        "installed_capacity_phs_tw": 1,
        "remaining_potential_constraint_on_new_phs_capacity": 1,
    },
)
def new_required_phs_capacity():
    """
    IF THEN ELSE(Time<(2014-"total time plan+constr RES elec"[RES elec]), Historic new required capacity RES elec[RES elec],installed capacity RES elec TW[RES elec, scenarios]*adapt growth RES elec after allocation[RES elec,scenarios]*remaining potential constraint on new RES elec capacity[RES elec,scenarios]*abundance RES elec2[scenarios]) 0.9*installed capacity PHS TW[scenarios]*(1-(installed capacity PHS TW[scenarios]/demand storage capacity[scenarios]))
    """
    return if_then_else(
        time() < 2014 - float(total_time_planconstr_res_elec().loc["hydro"]),
        lambda: xr.DataArray(
            historic_new_required_capacity_phs(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: installed_capacity_phs_tw()
        * adapt_growth_phs()
        * remaining_potential_constraint_on_new_phs_capacity(),
    )


@component.add(
    name="share dyn FEI for RES vs TFEC",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_dyn_fei_res": 1, "real_tfec": 1},
)
def share_dyn_fei_for_res_vs_tfec():
    """
    Share of dynamic final energy investments for RES technologies vs TFES.
    """
    return total_dyn_fei_res() / real_tfec()


@component.add(
    name="FEI EV batteries",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "output_ev_bateries_for_storage_over_lifetime": 1,
        "esoi_ev_batteries": 1,
    },
)
def fei_ev_batteries():
    """
    Final energy invested (equivalent to the denominator of the EROI (=CED*g).
    """
    return zidz(output_ev_bateries_for_storage_over_lifetime(), esoi_ev_batteries())


@component.add(
    name="output PHS over lifetime",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "cp_phs": 1,
        "phs_capacity_under_construction": 1,
        "twe_per_twh": 1,
        "lifetime_res_elec": 1,
        "ej_per_twh": 1,
    },
)
def output_phs_over_lifetime():
    """
    Total electricity output generated over the full operation of the infrastructure of the new capacity installed.
    """
    return (
        cp_phs()
        * phs_capacity_under_construction()
        * (1 / twe_per_twh())
        * float(lifetime_res_elec().loc["hydro"])
        * ej_per_twh()
    )


@component.add(
    name="ESOI static PHS",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"a_lineal_regr": 1, "installed_capacity_phs_tw": 1, "b_lineal_regr": 1},
)
def esoi_static_phs():
    """
    ESOI of the PHS without accounting for endogenous dynamic variations.
    """
    return np.maximum(
        5, a_lineal_regr() * installed_capacity_phs_tw() + b_lineal_regr()
    )


@component.add(
    name="Total dyn FEI RES",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_final_energy_invested_res_elec_var": 1,
        "fei_ev_batteries": 1,
        "total_fei_over_lifetime_res_elec_dispatch": 1,
        "final_energy_invested_phs": 1,
    },
)
def total_dyn_fei_res():
    """
    Total (dynamic) final energy investment for RES.
    """
    return (
        total_final_energy_invested_res_elec_var()
        + fei_ev_batteries()
        + total_fei_over_lifetime_res_elec_dispatch()
        + final_energy_invested_phs()
    )


@component.add(
    name="adapt growth RES elec after allocation",
    units="Dmnl",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "activate_eroi_allocation_rule": 1,
        "adapt_growth_res_elec": 2,
        "eroi_allocation_rule_per_res_elec": 1,
        "constraint_elec_storage_availability": 1,
    },
)
def adapt_growth_res_elec_after_allocation():
    """
    Annual growth per RES elec technology after accounting for the allocation rule.
    """
    return if_then_else(
        activate_eroi_allocation_rule() == 0,
        lambda: adapt_growth_res_elec(),
        lambda: adapt_growth_res_elec() * eroi_allocation_rule_per_res_elec(),
    ) * constraint_elec_storage_availability().transpose("RES elec", "scenarios")


@component.add(
    name="ESOI PHS",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "output_phs_over_lifetime": 1,
        "gquality_of_electricity": 1,
        "cedtot_over_lifetime_phs": 1,
    },
)
def esoi_phs():
    """
    ESOI of pumped hydro storage. *lifetime RES elec[hydro]
    """
    return zidz(
        output_phs_over_lifetime(),
        cedtot_over_lifetime_phs() * gquality_of_electricity(),
    )


@component.add(
    name="P PHS growth",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_phs_growth"},
)
def p_phs_growth():
    """
    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_phs_growth()


_ext_constant_p_phs_growth = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F37",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_phs_growth",
)

_ext_constant_p_phs_growth.add(
    "inputs_EU.xlsx", "SCEN1", "F37", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_phs_growth.add(
    "inputs_EU.xlsx", "SCEN2", "F37", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_phs_growth.add(
    "inputs_EU.xlsx", "SCEN3", "F37", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_phs_growth.add(
    "inputs_EU.xlsx", "SCEN4", "F37", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_phs_growth.add(
    "inputs_EU.xlsx", "User defined", "F37", {"scenarios": ["User defined"]}
)


@component.add(
    name="constraint elec storage availability",
    units="Dmnl",
    subscripts=["scenarios", "RES elec"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "res_elec_variables": 1,
        "total_capacity_elec_storage_tw": 3,
        "demand_storage_capacity": 2,
    },
)
def constraint_elec_storage_availability():
    """
    Remaining potential available as a fraction of unity. This feedback ensures that the electricity storage levels required by the penetration of the RES variables for the generation of electricity are respected.
    """
    return if_then_else(
        (res_elec_variables() == 0).expand_dims(
            {"scenarios": _subscript_dict["scenarios"]}, 1
        ),
        lambda: xr.DataArray(
            1,
            {
                "RES elec": _subscript_dict["RES elec"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["RES elec", "scenarios"],
        ),
        lambda: if_then_else(
            demand_storage_capacity() <= total_capacity_elec_storage_tw(),
            lambda: xr.DataArray(
                1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: np.maximum(
                0,
                1
                - (demand_storage_capacity() - total_capacity_elec_storage_tw())
                / total_capacity_elec_storage_tw(),
            ),
        ).expand_dims({"RES elec": _subscript_dict["RES elec"]}, 0),
    ).transpose("scenarios", "RES elec")


@component.add(
    name="initial instal cap PHS",
    units="TW",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_instal_cap_phs"},
)
def initial_instal_cap_phs():
    """
    Installed capacity of PHS in the initial year 1995.
    """
    return _ext_constant_initial_instal_cap_phs()


_ext_constant_initial_instal_cap_phs = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "H182",
    {},
    _root,
    {},
    "_ext_constant_initial_instal_cap_phs",
)


@component.add(
    name="CEDtot over lifetime PHS",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "phs_capacity_under_construction": 1,
        "ced_per_tw_over_lifetime_phs": 1,
    },
)
def cedtot_over_lifetime_phs():
    return phs_capacity_under_construction() * ced_per_tw_over_lifetime_phs()


@component.add(
    name="installed capacity PHS TW",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_installed_capacity_phs_tw": 1},
    other_deps={
        "_integ_installed_capacity_phs_tw": {
            "initial": {"initial_instal_cap_phs": 1},
            "step": {"phs_capacity_under_construction": 1, "wear_phs": 1},
        }
    },
)
def installed_capacity_phs_tw():
    return _integ_installed_capacity_phs_tw()


_integ_installed_capacity_phs_tw = Integ(
    lambda: phs_capacity_under_construction() - wear_phs(),
    lambda: xr.DataArray(
        initial_instal_cap_phs(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_installed_capacity_phs_tw",
)


@component.add(
    name="PHS capacity under construction",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"phs_planned_capacity": 1, "time_construction_res_elec": 1},
)
def phs_capacity_under_construction():
    return phs_planned_capacity() / float(time_construction_res_elec().loc["hydro"])


@component.add(
    name="past PHS capacity growth",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_past_phs_capacity_growth"},
)
def past_phs_capacity_growth():
    """
    Current growth levels.
    """
    return _ext_constant_past_phs_capacity_growth()


_ext_constant_past_phs_capacity_growth = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C84",
    {},
    _root,
    {},
    "_ext_constant_past_phs_capacity_growth",
)


@component.add(
    name="new PHS capacity under planning",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"required_capacity_phs": 1, "time_planification_res_elec": 1},
)
def new_phs_capacity_under_planning():
    return required_capacity_phs() / float(time_planification_res_elec().loc["hydro"])


@component.add(
    name="wear PHS",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "lifetime_res_elec": 1, "installed_capacity_phs_tw": 1},
)
def wear_phs():
    return if_then_else(
        time() < 2015,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: installed_capacity_phs_tw() / float(lifetime_res_elec().loc["hydro"]),
    )


@component.add(
    name="replacement capacity PHS",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "replacement_rate_phs": 1, "wear_phs": 1},
)
def replacement_capacity_phs():
    """
    IF THEN ELSE(Time<2015,0,replacement rate PHS*wear PHS[scenarios]*(1-RES elec tot overcapacity[scenarios]))*remaining potential elec storage by RES techn2[scenarios,RES elec]
    """
    return if_then_else(
        time() < 2015,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: replacement_rate_phs() * wear_phs(),
    )


@component.add(
    name="real FE elec stored PHS TWh",
    units="TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"installed_capacity_phs_tw": 1, "cp_phs": 1, "twe_per_twh": 1},
)
def real_fe_elec_stored_phs_twh():
    """
    Electricity stored in pumped hydro storage plants. It does not add up to the electricity generation of other sources since this electricity has already been accounted for! (stored).
    """
    return installed_capacity_phs_tw() * cp_phs() / twe_per_twh()


@component.add(
    name="PHS planned capacity",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_phs_planned_capacity": 1},
    other_deps={
        "_integ_phs_planned_capacity": {
            "initial": {"initial_capacity_in_construction_phs": 1},
            "step": {
                "new_phs_capacity_under_planning": 1,
                "replacement_capacity_phs": 1,
                "phs_capacity_under_construction": 1,
            },
        }
    },
)
def phs_planned_capacity():
    return _integ_phs_planned_capacity()


_integ_phs_planned_capacity = Integ(
    lambda: new_phs_capacity_under_planning()
    + replacement_capacity_phs()
    - phs_capacity_under_construction(),
    lambda: xr.DataArray(
        initial_capacity_in_construction_phs(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_phs_planned_capacity",
)


@component.add(
    name="Final energy invested PHS",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_fe_elec_stored_phs_twh": 1, "ej_per_twh": 1, "esoi_phs": 1},
)
def final_energy_invested_phs():
    """
    Final energy invested is equivalent to the denominator of the EROI (=CED*g).
    """
    return real_fe_elec_stored_phs_twh() * ej_per_twh() / esoi_phs()


@component.add(
    name="remaining potential PHS",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_capacity_potential_phs": 3, "installed_capacity_phs_tw": 2},
)
def remaining_potential_phs():
    return if_then_else(
        max_capacity_potential_phs() > installed_capacity_phs_tw(),
        lambda: (max_capacity_potential_phs() - installed_capacity_phs_tw())
        / max_capacity_potential_phs(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="Historic new required capacity PHS",
    units="TW",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "total_time_planconstr_res_elec": 2,
        "table_hist_capacity_phs": 2,
    },
)
def historic_new_required_capacity_phs():
    """
    (Assuming 100% of planned was planned and constructed).
    """
    return table_hist_capacity_phs(
        time() + float(total_time_planconstr_res_elec().loc["hydro"]) + 1
    ) - table_hist_capacity_phs(
        time() + float(total_time_planconstr_res_elec().loc["hydro"])
    )


@component.add(
    name="table hist capacity PHS",
    units="TW/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_hist_capacity_phs",
        "__lookup__": "_ext_lookup_table_hist_capacity_phs",
    },
)
def table_hist_capacity_phs(x, final_subs=None):
    return _ext_lookup_table_hist_capacity_phs(x, final_subs)


_ext_lookup_table_hist_capacity_phs = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "172",
    "H182",
    {},
    _root,
    {},
    "_ext_lookup_table_hist_capacity_phs",
)


@component.add(
    name="initial capacity in construction PHS",
    units="TW",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"initial_required_capacity_phs": 1},
)
def initial_capacity_in_construction_phs():
    """
    Initial capacity of PHS in construction (year 1995). We assume that it is the same than the additional installed capacity between 1995 and 1996.
    """
    return initial_required_capacity_phs()


@component.add(
    name="required capacity PHS",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_required_capacity_phs": 1},
    other_deps={
        "_integ_required_capacity_phs": {
            "initial": {"initial_required_capacity_phs": 1},
            "step": {
                "new_required_phs_capacity": 1,
                "new_phs_capacity_under_planning": 1,
            },
        }
    },
)
def required_capacity_phs():
    return _integ_required_capacity_phs()


_integ_required_capacity_phs = Integ(
    lambda: new_required_phs_capacity() - new_phs_capacity_under_planning(),
    lambda: xr.DataArray(
        initial_required_capacity_phs(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_required_capacity_phs",
)


@component.add(
    name="initial required capacity PHS",
    units="TW",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"table_hist_capacity_phs": 2},
)
def initial_required_capacity_phs():
    """
    Initial required capacity of PHS (year 1995). We assume that it is the same than the additional installed capacity between 1995 and 1996.
    """
    return table_hist_capacity_phs(1996) - table_hist_capacity_phs(1995)


@component.add(
    name="Total FEI over lifetime RES elec dispatch",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fei_over_lifetime_res_elec_dispatch": 1},
)
def total_fei_over_lifetime_res_elec_dispatch():
    return sum(
        fei_over_lifetime_res_elec_dispatch().rename({"RES elec": "RES elec!"}),
        dim=["RES elec!"],
    )


@component.add(
    name="min lifetime EV batteries",
    units="Years",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_min_lifetime_ev_batteries"},
)
def min_lifetime_ev_batteries():
    """
    User-selection of the minimum lifetime of the batteries for electric vehicles given the issues arising from ain increased Cp for electric storage, i.e. a reduced lifetime of the battery (lower availability for the user, replace more often the battery, worsening of EROI of the system, etc.). It would be more interesting that Governments invest in electric batteries for storage if the performance of the electric vehicles would be significantly negatively affected.
    """
    return _ext_constant_min_lifetime_ev_batteries()


_ext_constant_min_lifetime_ev_batteries = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G45",
    {},
    _root,
    {},
    "_ext_constant_min_lifetime_ev_batteries",
)


@component.add(
    name="Total final energy invested RES elec var",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fei_res_elec_var": 1},
)
def total_final_energy_invested_res_elec_var():
    """
    Final energy invested is equivalent to the denominator of the EROI (=CED*g).
    """
    return sum(fei_res_elec_var().rename({"RES elec": "RES elec!"}), dim=["RES elec!"])


@component.add(
    name="materials required for EV batteries Mt",
    units="Mt",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "newreplaced_batteries_tw": 1,
        "materials_per_new_capacity_installed_ev_batteries": 1,
        "m_per_t": 1,
        "kg_per_mt": 1,
    },
)
def materials_required_for_ev_batteries_mt():
    """
    Annual materials required for the fabrication of EV batteries.
    """
    return (
        newreplaced_batteries_tw()
        * materials_per_new_capacity_installed_ev_batteries()
        * m_per_t()
        / kg_per_mt()
    ).transpose("materials", "scenarios")


@component.add(
    name='"new+replaced batteries TW"',
    units="batteries/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "new_batteries": 1,
        "replacement_batteries": 1,
        "kw_per_battery_ev": 1,
        "kwh_per_twh": 1,
    },
)
def newreplaced_batteries_tw():
    """
    New and replaced electric batteries.
    """
    return (
        (new_batteries() + replacement_batteries())
        * kw_per_battery_ev()
        / kwh_per_twh()
    )


@component.add(
    name='"Energy intensity construction EV batteries MJ/MW"',
    units="MJ/MW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_energy_required_for_total_material_consumption_for_ev_batteries": 1,
        "mj_per_ej": 1,
        "m_per_t": 1,
        "newreplaced_batteries_tw": 1,
    },
)
def energy_intensity_construction_ev_batteries_mjmw():
    """
    Energy intensity of the construction of EV batteries. Dynamic variable affected by recycling policies.
    """
    return zidz(
        total_energy_required_for_total_material_consumption_for_ev_batteries()
        * mj_per_ej(),
        newreplaced_batteries_tw() * m_per_t(),
    )


@component.add(
    name="new batteries",
    units="batteries/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"required_number_standard_batteries": 1, "batteries_evhib2we": 1},
)
def new_batteries():
    """
    New standard electric batteries. The number of batteries converges to the desired number via a logistic funcion. Number 10 is an arbitrary parameter, the bigger the faster the convergence to the desired number of batteries. 5*"batteries EV+hib+2wE"[scenarios]*(1-(MIN(1,"batteries EV+hib+2wE"[scenarios]/required number standard batteries[scenarios])))
    """
    return required_number_standard_batteries() - batteries_evhib2we()


@component.add(
    name='"batteries EV+hib+2wE"',
    units="batteries",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_batteries_evhib2we": 1},
    other_deps={
        "_integ_batteries_evhib2we": {
            "initial": {},
            "step": {
                "new_batteries": 1,
                "replacement_batteries": 1,
                "discarded_batteries": 1,
            },
        }
    },
)
def batteries_evhib2we():
    """
    Number of batteries required for electric and hybrid mobility espreseed in termos of "standard" electric batteries of 21,3KWh
    """
    return _integ_batteries_evhib2we()


_integ_batteries_evhib2we = Integ(
    lambda: new_batteries() + replacement_batteries() - discarded_batteries(),
    lambda: xr.DataArray(1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    "_integ_batteries_evhib2we",
)


@component.add(
    name="kW per MW",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_kw_per_mw"},
)
def kw_per_mw():
    """
    1000 kW = 1 MW.
    """
    return _ext_constant_kw_per_mw()


_ext_constant_kw_per_mw = ExtConstant(
    "inputs_EU.xlsx", "Constants", "G14", {}, _root, {}, "_ext_constant_kw_per_mw"
)


@component.add(
    name="Net stored energy EV battery over lifetime",
    units="MJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_net_stored_energy_ev_battery_over_lifetime"
    },
)
def net_stored_energy_ev_battery_over_lifetime():
    """
    Net stored energy EV battery in whole lifetime.
    """
    return _ext_constant_net_stored_energy_ev_battery_over_lifetime()


_ext_constant_net_stored_energy_ev_battery_over_lifetime = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G48",
    {},
    _root,
    {},
    "_ext_constant_net_stored_energy_ev_battery_over_lifetime",
)


@component.add(
    name="Grid correction factor EV batteries",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_grid_correction_factor_ev_batteries"},
)
def grid_correction_factor_ev_batteries():
    return _ext_constant_grid_correction_factor_ev_batteries()


_ext_constant_grid_correction_factor_ev_batteries = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "F64",
    {},
    _root,
    {},
    "_ext_constant_grid_correction_factor_ev_batteries",
)


@component.add(
    name="Share energy requirements for decom EV batteries",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_share_energy_requirements_for_decom_ev_batteries"
    },
)
def share_energy_requirements_for_decom_ev_batteries():
    return _ext_constant_share_energy_requirements_for_decom_ev_batteries()


_ext_constant_share_energy_requirements_for_decom_ev_batteries = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "F122",
    {},
    _root,
    {},
    "_ext_constant_share_energy_requirements_for_decom_ev_batteries",
)


@component.add(
    name="Working hours per year",
    units="Hour*person/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"working_hours_per_day": 1, "days_per_year": 1},
)
def working_hours_per_year():
    return working_hours_per_day() * days_per_year()


@component.add(
    name="days per year",
    units="days/Year",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_days_per_year"},
)
def days_per_year():
    """
    Constant: 365 days in a year.
    """
    return _ext_constant_days_per_year()


_ext_constant_days_per_year = ExtConstant(
    "inputs_EU.xlsx", "Constants", "G5", {}, _root, {}, "_ext_constant_days_per_year"
)


@component.add(
    name="Total energy required for material consumption for RES elec",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_required_for_material_consumption_per_res_elec": 1},
)
def total_energy_required_for_material_consumption_for_res_elec():
    """
    Total energy required for material consumption for RES elec.
    """
    return sum(
        energy_required_for_material_consumption_per_res_elec().rename(
            {"RES elec": "RES elec!", "materials": "materials!"}
        ),
        dim=["RES elec!", "materials!"],
    )


@component.add(
    name="Total energy required for material consumption per RES elec",
    units="EJ",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_required_for_material_consumption_per_res_elec": 1},
)
def total_energy_required_for_material_consumption_per_res_elec():
    """
    Total energy required for material consumption per RES elec
    """
    return sum(
        energy_required_for_material_consumption_per_res_elec().rename(
            {"materials": "materials!"}
        ),
        dim=["materials!"],
    )


@component.add(
    name="MW in 1 year to MJ",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_mw_in_1_year_to_mj"},
)
def mw_in_1_year_to_mj():
    """
    Conversion factor MW in 1 year to MJ.
    """
    return _ext_constant_mw_in_1_year_to_mj()


_ext_constant_mw_in_1_year_to_mj = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "G18",
    {},
    _root,
    {},
    "_ext_constant_mw_in_1_year_to_mj",
)


@component.add(
    name="Working hours per day",
    units="Hour*people",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_working_hours_per_day"},
)
def working_hours_per_day():
    """
    Working hours per day.
    """
    return _ext_constant_working_hours_per_day()


_ext_constant_working_hours_per_day = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G40",
    {},
    _root,
    {},
    "_ext_constant_working_hours_per_day",
)


@component.add(
    name="Annual work hours for RES",
    units="Hours/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_jobs_res": 1, "working_hours_per_year": 1},
)
def annual_work_hours_for_res():
    return total_jobs_res() * working_hours_per_year()


@component.add(
    name="Hours work per GJ RES delivered",
    units="Hours/GJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"annual_work_hours_for_res": 1, "gj_per_ej": 1, "tfec_res_ej": 1},
)
def hours_work_per_gj_res_delivered():
    """
    Hours of work per GJ of RES delivered (final energy).
    """
    return zidz(annual_work_hours_for_res(), tfec_res_ej() * gj_per_ej())


@component.add(
    name="Total energy required for total material consumption for EV batteries",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_required_for_material_consumption_for_ev_batteries": 1},
)
def total_energy_required_for_total_material_consumption_for_ev_batteries():
    """
    Total energy required for total material consumption for EV batteries.
    """
    return sum(
        energy_required_for_material_consumption_for_ev_batteries().rename(
            {"materials": "materials!"}
        ),
        dim=["materials!"],
    )


@component.add(
    name="TFE required for total material consumption for alt techn",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_energy_required_for_material_consumption_for_res_elec": 1,
        "total_energy_required_for_total_material_consumption_for_ev_batteries": 1,
    },
)
def tfe_required_for_total_material_consumption_for_alt_techn():
    """
    Total final energy required for total material consumption for alternative technologies (RES elec & EV Batteries).
    """
    return (
        total_energy_required_for_material_consumption_for_res_elec()
        + total_energy_required_for_total_material_consumption_for_ev_batteries()
    )


@component.add(
    name="Energy required for material consumption per RES elec",
    units="EJ/Year",
    subscripts=["RES elec", "materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "energy_required_for_material_consumption_for_om_res_elec": 1,
        "energy_required_for_material_consumption_for_new_res_elec": 1,
    },
)
def energy_required_for_material_consumption_per_res_elec():
    """
    Energy required for material consumption per material per RES elec technologies.
    """
    return (
        energy_required_for_material_consumption_for_om_res_elec()
        + energy_required_for_material_consumption_for_new_res_elec()
    )


@component.add(
    name="Total energy required per material for alt techn",
    units="EJ/Year",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "energy_required_for_material_consumption_per_res_elec": 1,
        "energy_required_for_material_consumption_for_ev_batteries": 1,
    },
)
def total_energy_required_per_material_for_alt_techn():
    """
    Total energy required for total material consumption per material for alternative technologies (RES elec & EV Batteries).
    """
    return (
        sum(
            energy_required_for_material_consumption_per_res_elec().rename(
                {"RES elec": "RES elec!"}
            ),
            dim=["RES elec!"],
        )
        + energy_required_for_material_consumption_for_ev_batteries()
    )


@component.add(
    name="Total jobs RES elec",
    units="people",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_di_jobs_res_elec_per_techn": 1},
)
def total_jobs_res_elec():
    """
    Total jobs RES elec.
    """
    return sum(
        total_di_jobs_res_elec_per_techn().rename({"RES elec": "RES elec!"}),
        dim=["RES elec!"],
    )


@component.add(
    name="total jobs biofuels",
    units="people",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"employment_factor_biofuels": 1, "fes_total_biofuels_production_ej": 1},
)
def total_jobs_biofuels():
    """
    Total (direct+indirect) jobs biofuels.
    """
    return employment_factor_biofuels() * fes_total_biofuels_production_ej()


@component.add(
    name="Total jobs RES",
    units="people",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_jobs_res_elec": 1,
        "total_jobs_res_heat": 1,
        "d_jobs_fuel_supply_solids_bioe": 1,
        "total_jobs_biofuels": 1,
    },
)
def total_jobs_res():
    """
    Total jobs RES.
    """
    return (
        total_jobs_res_elec()
        + total_jobs_res_heat()
        + d_jobs_fuel_supply_solids_bioe()
        + total_jobs_biofuels()
    )


@component.add(
    name='"Total D+I jobs RES heat per techn"',
    units="people",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_d_jobs_res_heat_per_techn": 1,
        "ratio_total_vs_d_jobs_res_heat": 1,
    },
)
def total_di_jobs_res_heat_per_techn():
    """
    Total (direct+indirect) jobs RES heat per technology.
    """
    return total_d_jobs_res_heat_per_techn() * ratio_total_vs_d_jobs_res_heat()


@component.add(
    name="Total jobs RES heat",
    units="people",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_di_jobs_res_heat_per_techn": 1},
)
def total_jobs_res_heat():
    """
    Total jobs RES heat.
    """
    return sum(
        total_di_jobs_res_heat_per_techn().rename({"RES heat": "RES heat!"}),
        dim=["RES heat!"],
    )


@component.add(
    name='"Total D+I jobs RES elec per techn"',
    units="people",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_d_jobs_res_elec_per_techn": 1,
        "ratio_total_vs_d_jobs_res_elec": 1,
    },
)
def total_di_jobs_res_elec_per_techn():
    """
    Total (direct+indirect) jobs RES elec per technology.
    """
    return total_d_jobs_res_elec_per_techn() * ratio_total_vs_d_jobs_res_elec()


@component.add(
    name="Ratio total vs D jobs RES heat",
    units="people*Year/MW",
    subscripts=["RES heat"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ratio_total_vs_d_jobs_res_heat"},
)
def ratio_total_vs_d_jobs_res_heat():
    """
    Ratio total (direct+indirect) vs direct jobs RES heat.
    """
    return _ext_constant_ratio_total_vs_d_jobs_res_heat()


_ext_constant_ratio_total_vs_d_jobs_res_heat = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "AB17",
    {"RES heat": ['"solar-heat"']},
    _root,
    {"RES heat": _subscript_dict["RES heat"]},
    "_ext_constant_ratio_total_vs_d_jobs_res_heat",
)

_ext_constant_ratio_total_vs_d_jobs_res_heat.add(
    "inputs_EU.xlsx", "Parameters", "AB18", {"RES heat": ['"geot-heat"']}
)

_ext_constant_ratio_total_vs_d_jobs_res_heat.add(
    "inputs_EU.xlsx", "Parameters", "AB19", {"RES heat": ['"solid bioE-heat"']}
)


@component.add(
    name="Ratio total vs D jobs RES elec",
    units="people*Year/MW",
    subscripts=["RES elec"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ratio_total_vs_d_jobs_res_elec"},
)
def ratio_total_vs_d_jobs_res_elec():
    """
    Ratio total (direct+indirect) vs direct jobs RES elec.
    """
    return _ext_constant_ratio_total_vs_d_jobs_res_elec()


_ext_constant_ratio_total_vs_d_jobs_res_elec = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "AB13",
    {"RES elec": ["hydro"]},
    _root,
    {"RES elec": _subscript_dict["RES elec"]},
    "_ext_constant_ratio_total_vs_d_jobs_res_elec",
)

_ext_constant_ratio_total_vs_d_jobs_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "AB7", {"RES elec": ['"geot-elec"']}
)

_ext_constant_ratio_total_vs_d_jobs_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "AB8", {"RES elec": ['"solid bioE-elec"']}
)

_ext_constant_ratio_total_vs_d_jobs_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "AB9", {"RES elec": ["oceanic"]}
)

_ext_constant_ratio_total_vs_d_jobs_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "AB10", {"RES elec": ["wind onshore"]}
)

_ext_constant_ratio_total_vs_d_jobs_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "AB12", {"RES elec": ["wind offshore"]}
)

_ext_constant_ratio_total_vs_d_jobs_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "AB11", {"RES elec": ["solar PV"]}
)

_ext_constant_ratio_total_vs_d_jobs_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "AB16", {"RES elec": ["CSP"]}
)


@component.add(
    name="Employment factor biofuels",
    units="people/EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_employment_factor_biofuels"},
)
def employment_factor_biofuels():
    """
    Employment factor (direct+indirect) biofuels.
    """
    return _ext_constant_employment_factor_biofuels()


_ext_constant_employment_factor_biofuels = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "Y21",
    {},
    _root,
    {},
    "_ext_constant_employment_factor_biofuels",
)


@component.add(
    name="installed capacity RES elec delayed 1yr",
    units="TW",
    subscripts=["RES elec", "scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_installed_capacity_res_elec_delayed_1yr": 1},
    other_deps={
        "_delayfixed_installed_capacity_res_elec_delayed_1yr": {
            "initial": {},
            "step": {"installed_capacity_res_elec_tw": 1},
        }
    },
)
def installed_capacity_res_elec_delayed_1yr():
    """
    Annual installed capacity of RES elec technologies for electricity generation delayed 1 year.
    """
    return _delayfixed_installed_capacity_res_elec_delayed_1yr()


_delayfixed_installed_capacity_res_elec_delayed_1yr = DelayFixed(
    lambda: installed_capacity_res_elec_tw(),
    lambda: 1,
    lambda: xr.DataArray(
        0,
        {
            "RES elec": _subscript_dict["RES elec"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES elec", "scenarios"],
    ),
    time_step,
    "_delayfixed_installed_capacity_res_elec_delayed_1yr",
)


@component.add(
    name='"Jobs O&M RES heat per techn"',
    units="people",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "installed_capacity_res_heatcom_tw": 1,
        "installed_capacity_res_heatnc_tw": 1,
        "employment_factors_om_res_heat": 1,
        "m_per_t": 1,
    },
)
def jobs_om_res_heat_per_techn():
    """
    Annual jobs operation&maintenance of RES heat per technology.
    """
    return (
        (installed_capacity_res_heatcom_tw() + installed_capacity_res_heatnc_tw())
        * employment_factors_om_res_heat()
        * m_per_t()
    )


@component.add(
    name="D jobs new installed RES heat per techn",
    units="people",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "new_res_capacity_for_heatcom_tw": 1,
        "replacement_res_for_heatcom_tw": 1,
        "new_res_capacity_for_heatnc_tw": 1,
        "replacement_res_for_heatnc_tw": 1,
        "employment_factors_new_res_heat": 1,
        "m_per_t": 1,
    },
)
def d_jobs_new_installed_res_heat_per_techn():
    """
    Annual direct jobs new installed RES heat per technology.
    """
    return (
        (
            new_res_capacity_for_heatcom_tw()
            + replacement_res_for_heatcom_tw()
            + new_res_capacity_for_heatnc_tw()
            + replacement_res_for_heatnc_tw()
        )
        * employment_factors_new_res_heat()
        * m_per_t()
    )


@component.add(
    name="D jobs fuel supply solids bioE",
    units="people",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_solids_bioe_ej": 1,
        "employment_factor_fuel_supply_solids_bioe": 1,
    },
)
def d_jobs_fuel_supply_solids_bioe():
    """
    Direct jobs in fuel supply of solids bioenergy.
    """
    return pes_solids_bioe_ej() * employment_factor_fuel_supply_solids_bioe() * 1000


@component.add(
    name="new capacity installed growth rate RES elec",
    units="Dmnl",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "installed_capacity_res_elec_tw": 1,
        "installed_capacity_res_elec_delayed_1yr": 1,
    },
)
def new_capacity_installed_growth_rate_res_elec():
    """
    Annual RES elec capacity installed growth rate.
    """
    return -1 + zidz(
        installed_capacity_res_elec_tw(), installed_capacity_res_elec_delayed_1yr()
    )


@component.add(
    name="Employment factor fuel supply solids bioE",
    units="people/EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_employment_factor_fuel_supply_solids_bioe"
    },
)
def employment_factor_fuel_supply_solids_bioe():
    """
    Employment factor of the direct jobs in fuel supply of solids bioE.
    """
    return _ext_constant_employment_factor_fuel_supply_solids_bioe()


_ext_constant_employment_factor_fuel_supply_solids_bioe = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "AA8",
    {},
    _root,
    {},
    "_ext_constant_employment_factor_fuel_supply_solids_bioe",
)


@component.add(
    name="Exogenous growth GTL",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "hist_growth_gtl": 2,
        "abundance_liquids": 1,
        "crash_programme_gtl": 2,
        "p_gtl": 2,
    },
)
def exogenous_growth_gtl():
    """
    If there is not scarcity of liquids, GTL production increases at historical past rates.
    """
    return if_then_else(
        time() < 2015,
        lambda: xr.DataArray(
            hist_growth_gtl(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            crash_programme_gtl() == 0,
            lambda: p_gtl(),
            lambda: if_then_else(
                np.logical_and(crash_programme_gtl() == 1, abundance_liquids() >= 1),
                lambda: xr.DataArray(
                    hist_growth_gtl(),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: p_gtl(),
            ),
        ),
    )


@component.add(
    name="replacement GTL",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "check_liquids": 1,
        "constrain_liquids_exogenous_growth": 1,
        "wear_gtl": 2,
        "crash_programme_gtl": 1,
        "scarcity_conv_oil": 1,
    },
)
def replacement_gtl():
    """
    Replacement of GTL.
    """
    return (
        if_then_else(
            time() < 2015,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                crash_programme_gtl() == 0,
                lambda: xr.DataArray(
                    0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
                ),
                lambda: if_then_else(
                    check_liquids() < 0,
                    lambda: constrain_liquids_exogenous_growth() * wear_gtl(),
                    lambda: wear_gtl(),
                ),
            ),
        )
        * scarcity_conv_oil()
    )


@component.add(
    name='"Crash programme GTL?"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_crash_programme_gtl"},
)
def crash_programme_gtl():
    """
    0- Crash programme GTL NOT activated 1- Crash programme GTL activated
    """
    return _ext_constant_crash_programme_gtl()


_ext_constant_crash_programme_gtl = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D112",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_crash_programme_gtl",
)

_ext_constant_crash_programme_gtl.add(
    "inputs_EU.xlsx", "SCEN1", "D112", {"scenarios": ["SCEN1"]}
)

_ext_constant_crash_programme_gtl.add(
    "inputs_EU.xlsx", "SCEN2", "D112", {"scenarios": ["SCEN2"]}
)

_ext_constant_crash_programme_gtl.add(
    "inputs_EU.xlsx", "SCEN3", "D112", {"scenarios": ["SCEN3"]}
)

_ext_constant_crash_programme_gtl.add(
    "inputs_EU.xlsx", "SCEN4", "D112", {"scenarios": ["SCEN4"]}
)

_ext_constant_crash_programme_gtl.add(
    "inputs_EU.xlsx", "User defined", "D112", {"scenarios": ["User defined"]}
)


@component.add(
    name='"Activate EROI FC system feedback?"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_activate_eroi_fc_system_feedback"},
)
def activate_eroi_fc_system_feedback():
    """
    0- EROI FC tot feedback NOT activated 1- EROI FC tot feedback activated
    """
    return _ext_constant_activate_eroi_fc_system_feedback()


_ext_constant_activate_eroi_fc_system_feedback = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C312",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_activate_eroi_fc_system_feedback",
)

_ext_constant_activate_eroi_fc_system_feedback.add(
    "inputs_EU.xlsx", "SCEN1", "C312", {"scenarios": ["SCEN1"]}
)

_ext_constant_activate_eroi_fc_system_feedback.add(
    "inputs_EU.xlsx", "SCEN2", "C312", {"scenarios": ["SCEN2"]}
)

_ext_constant_activate_eroi_fc_system_feedback.add(
    "inputs_EU.xlsx", "SCEN3", "C312", {"scenarios": ["SCEN3"]}
)

_ext_constant_activate_eroi_fc_system_feedback.add(
    "inputs_EU.xlsx", "SCEN4", "C312", {"scenarios": ["SCEN4"]}
)

_ext_constant_activate_eroi_fc_system_feedback.add(
    "inputs_EU.xlsx", "User defined", "C312", {"scenarios": ["User defined"]}
)


@component.add(
    name="Exogenous growth CTL",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "hist_growth_ctl": 2,
        "abundance_liquids": 1,
        "crash_programme_ctl": 2,
        "p_ctl": 2,
    },
)
def exogenous_growth_ctl():
    """
    If there is not scarcity of liquids, CTL production increases at historical past rates.
    """
    return if_then_else(
        time() < 2015,
        lambda: xr.DataArray(
            hist_growth_ctl(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            crash_programme_ctl() == 0,
            lambda: p_ctl(),
            lambda: if_then_else(
                np.logical_and(crash_programme_ctl() == 1, abundance_liquids() >= 1),
                lambda: xr.DataArray(
                    hist_growth_ctl(),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: p_ctl(),
            ),
        ),
    )


@component.add(
    name="replacement CTL",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "constrain_liquids_exogenous_growth": 1,
        "check_liquids": 1,
        "crash_programme_ctl": 1,
        "wear_ctl": 2,
        "scarcity_conv_oil": 1,
    },
)
def replacement_ctl():
    """
    Replacement of CTL.
    """
    return (
        if_then_else(
            time() < 2015,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                crash_programme_ctl() == 0,
                lambda: xr.DataArray(
                    0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
                ),
                lambda: if_then_else(
                    check_liquids() < 0,
                    lambda: constrain_liquids_exogenous_growth() * wear_ctl(),
                    lambda: wear_ctl(),
                ),
            ),
        )
        * scarcity_conv_oil()
    )


@component.add(
    name="table max extraction ASPO oil EJ 0 1 0",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_max_extraction_aspo_oil_ej_0_1_0"
    },
)
def table_max_extraction_aspo_oil_ej_0_1_0(x, final_subs=None):
    """
    Curva ASPO de extracción de oil hasta 2050. Unidades: EJ. Para los puntos a partir del 2050 se ha realizado una exponencial negativa hasta anular las reservas en 2100. /*Considera crude y unconvencional oil, así que una vez separado no vale esta tabla*/
    """
    return _hardcodedlookup_table_max_extraction_aspo_oil_ej_0_1_0(x, final_subs)


_hardcodedlookup_table_max_extraction_aspo_oil_ej_0_1_0 = HardcodedLookups(
    [
        0.0,
        600.0,
        1200.0,
        1800.0,
        2400.0,
        3000.0,
        3600.0,
        4200.0,
        4800.0,
        5400.0,
        6000.0,
        6600.0,
        7200.0,
        7800.0,
        8400.0,
        9000.0,
        9600.0,
        10200.0,
        10800.0,
        11400.0,
        12000.0,
        12600.0,
        13200.0,
    ],
    [
        0.0,
        29.9783,
        46.7403,
        59.4953,
        71.3603,
        84.9357,
        96.0997,
        107.465,
        118.46,
        127.537,
        137.018,
        145.888,
        152.005,
        156.288,
        162.47,
        166.659,
        171.044,
        171.044,
        171.044,
        171.044,
        171.044,
        171.044,
        171.044,
    ],
    {"scenarios": ["SCEN1", "SCEN2", "SCEN3", "SCEN4", "BAU", "User defined"]},
    "interpolate",
    {"scenarios": _subscript_dict["scenarios"]},
    "_hardcodedlookup_table_max_extraction_aspo_oil_ej_0_1_0",
)


@component.add(
    name="aux12",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux12": 1},
    other_deps={
        "_delayfixed_aux12": {
            "initial": {"time_step": 1},
            "step": {"rurr_coal_start_year_plg": 1},
        }
    },
)
def aux12():
    return _delayfixed_aux12()


_delayfixed_aux12 = DelayFixed(
    lambda: rurr_coal_start_year_plg(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux12",
)


@component.add(
    name="coal to leave underground",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "start_policy_leave_in_ground_coal": 1,
        "rurr_coal_start_year_plg": 1,
        "share_rurr_coal_to_leave_underground": 1,
    },
)
def coal_to_leave_underground():
    """
    Coal to be left underground due to the application of a policy.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_coal(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: share_rurr_coal_to_leave_underground() * rurr_coal_start_year_plg(),
    )


@component.add(
    name="RURR coal start year PLG",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "start_policy_leave_in_ground_coal": 1,
        "rurr_coal": 1,
        "aux12": 1,
    },
)
def rurr_coal_start_year_plg():
    """
    RURR until the start of the policy to leave in the ground (PLG) the resource.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_coal(),
        lambda: rurr_coal(),
        lambda: aux12(),
    )


@component.add(
    name="RURR conv oil until start year PLG",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "start_policy_leave_in_ground_conv_oil": 1,
        "rurr_conv_oil": 1,
        "aux6": 1,
    },
)
def rurr_conv_oil_until_start_year_plg():
    """
    RURR until the start of the policy to leave in the ground (PLG) the resource.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_conv_oil(),
        lambda: rurr_conv_oil(),
        lambda: aux6(),
    )


@component.add(
    name="conv gas to leave underground",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "start_policy_leave_in_ground_conv_gas": 1,
        "share_rurr_conv_gas_to_leave_underground": 1,
        "rurr_conv_gas_until_start_year_plg": 1,
    },
)
def conv_gas_to_leave_underground():
    """
    Conventional natural gas to be left underground due to the application of a policy.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_conv_gas(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: rurr_conv_gas_until_start_year_plg()
        * share_rurr_conv_gas_to_leave_underground(),
    )


@component.add(
    name="conv oil to leave underground",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "start_policy_leave_in_ground_conv_oil": 1,
        "rurr_conv_oil_until_start_year_plg": 1,
        "share_rurr_conv_oil_to_leave_underground": 1,
    },
)
def conv_oil_to_leave_underground():
    """
    Conventional oil to be left underground due to the application of a policy.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_conv_oil(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: rurr_conv_oil_until_start_year_plg()
        * share_rurr_conv_oil_to_leave_underground(),
    )


@component.add(
    name="RURR unconv oil until start year PLG",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "start_policy_leave_in_ground_unconv_oil": 1,
        "rurr_unconv_oil_ej": 1,
        "aux7": 1,
    },
)
def rurr_unconv_oil_until_start_year_plg():
    """
    RURR until the start of the policy to leave in the ground (PLG) the resource.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_unconv_oil(),
        lambda: rurr_unconv_oil_ej(),
        lambda: aux7(),
    )


@component.add(
    name="RURR unconv gas until start year PLG",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "start_policy_leave_in_ground_unconv_gas": 1,
        "rurr_unconv_gas": 1,
        "aux10": 1,
    },
)
def rurr_unconv_gas_until_start_year_plg():
    """
    RURR until the start of the policy to leave in the ground (PLG) the resource.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_unconv_gas(),
        lambda: rurr_unconv_gas(),
        lambda: aux10(),
    )


@component.add(
    name="unconv gas to leave underground",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "start_policy_leave_in_ground_unconv_gas": 1,
        "share_rurr_unconv_gas_to_leave_underground": 1,
        "rurr_unconv_gas_until_start_year_plg": 1,
    },
)
def unconv_gas_to_leave_underground():
    """
    Unconventional natural gas to be left underground due to the application of a policy.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_unconv_gas(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: rurr_unconv_gas_until_start_year_plg()
        * share_rurr_unconv_gas_to_leave_underground(),
    )


@component.add(
    name="tot agg gas to leave underground",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "start_policy_leave_in_ground_tot_agg_gas": 1,
        "share_rurr_tot_agg_gas_to_leave_underground": 1,
        "rurr_tot_gas_until_start_year_plg": 1,
    },
)
def tot_agg_gas_to_leave_underground():
    """
    Total aggregated natural gas to be left underground due to the application of a policy.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_tot_agg_gas(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: rurr_tot_gas_until_start_year_plg()
        * share_rurr_tot_agg_gas_to_leave_underground(),
    )


@component.add(
    name="unconv oil to leave underground",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "start_policy_leave_in_ground_unconv_oil": 1,
        "share_rurr_unconv_oil_to_leave_underground": 1,
        "rurr_unconv_oil_until_start_year_plg": 1,
    },
)
def unconv_oil_to_leave_underground():
    """
    Unconventional oil to be left underground due to the application of a policy.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_unconv_oil(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: rurr_unconv_oil_until_start_year_plg()
        * share_rurr_unconv_oil_to_leave_underground(),
    )


@component.add(
    name="aux11",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux11": 1},
    other_deps={
        "_delayfixed_aux11": {
            "initial": {"time_step": 1},
            "step": {"rurr_tot_gas_until_start_year_plg": 1},
        }
    },
)
def aux11():
    return _delayfixed_aux11()


_delayfixed_aux11 = DelayFixed(
    lambda: rurr_tot_gas_until_start_year_plg(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux11",
)


@component.add(
    name="tot agg oil to leave underground",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "start_policy_leave_in_ground_tot_agg_oil": 1,
        "share_rurr_tot_agg_oil_to_leave_underground": 1,
        "rurr_tot_oil_until_start_year_plg": 1,
    },
)
def tot_agg_oil_to_leave_underground():
    """
    Total aggregated oil to be left underground due to the application of a policy.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_tot_agg_oil(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: rurr_tot_oil_until_start_year_plg()
        * share_rurr_tot_agg_oil_to_leave_underground(),
    )


@component.add(
    name="aux6",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux6": 1},
    other_deps={
        "_delayfixed_aux6": {
            "initial": {"time_step": 1},
            "step": {"rurr_conv_oil_until_start_year_plg": 1},
        }
    },
)
def aux6():
    return _delayfixed_aux6()


_delayfixed_aux6 = DelayFixed(
    lambda: rurr_conv_oil_until_start_year_plg(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux6",
)


@component.add(
    name="aux7",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux7": 1},
    other_deps={
        "_delayfixed_aux7": {
            "initial": {"time_step": 1},
            "step": {"rurr_unconv_oil_until_start_year_plg": 1},
        }
    },
)
def aux7():
    return _delayfixed_aux7()


_delayfixed_aux7 = DelayFixed(
    lambda: rurr_unconv_oil_until_start_year_plg(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux7",
)


@component.add(
    name="aux8",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux8": 1},
    other_deps={
        "_delayfixed_aux8": {
            "initial": {"time_step": 1},
            "step": {"rurr_tot_oil_until_start_year_plg": 1},
        }
    },
)
def aux8():
    return _delayfixed_aux8()


_delayfixed_aux8 = DelayFixed(
    lambda: rurr_tot_oil_until_start_year_plg(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux8",
)


@component.add(
    name="aux9",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux9": 1},
    other_deps={
        "_delayfixed_aux9": {
            "initial": {"time_step": 1},
            "step": {"rurr_conv_gas_until_start_year_plg": 1},
        }
    },
)
def aux9():
    return _delayfixed_aux9()


_delayfixed_aux9 = DelayFixed(
    lambda: rurr_conv_gas_until_start_year_plg(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux9",
)


@component.add(
    name="RURR conv gas until start year PLG",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "start_policy_leave_in_ground_conv_gas": 1,
        "rurr_conv_gas": 1,
        "aux9": 1,
    },
)
def rurr_conv_gas_until_start_year_plg():
    """
    RURR until the start of the policy to leave in the ground (PLG) the resource.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_conv_gas(),
        lambda: rurr_conv_gas(),
        lambda: aux9(),
    )


@component.add(
    name="aux10",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux10": 1},
    other_deps={
        "_delayfixed_aux10": {
            "initial": {"time_step": 1},
            "step": {"rurr_unconv_gas_until_start_year_plg": 1},
        }
    },
)
def aux10():
    return _delayfixed_aux10()


_delayfixed_aux10 = DelayFixed(
    lambda: rurr_unconv_gas_until_start_year_plg(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_aux10",
)


@component.add(
    name="table max extraction ASPO oil EJ 0 1",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_table_max_extraction_aspo_oil_ej_0_1"},
)
def table_max_extraction_aspo_oil_ej_0_1(x, final_subs=None):
    """
    Curva ASPO de extracción de oil hasta 2050. Unidades: EJ. Para los puntos a partir del 2050 se ha realizado una exponencial negativa hasta anular las reservas en 2100. /*Considera crude y unconvencional oil, así que una vez separado no vale esta tabla*/
    """
    return _hardcodedlookup_table_max_extraction_aspo_oil_ej_0_1(x, final_subs)


_hardcodedlookup_table_max_extraction_aspo_oil_ej_0_1 = HardcodedLookups(
    [
        0.0,
        600.0,
        1200.0,
        1800.0,
        2400.0,
        3000.0,
        3600.0,
        4200.0,
        4800.0,
        5400.0,
        6000.0,
        6600.0,
        7200.0,
        7800.0,
        8400.0,
        9000.0,
        9600.0,
        10200.0,
        10800.0,
        11400.0,
        12000.0,
        12600.0,
        13200.0,
    ],
    [
        0.0,
        29.9783,
        46.7403,
        59.4953,
        71.3603,
        84.9357,
        96.0997,
        107.465,
        118.46,
        127.537,
        137.018,
        145.888,
        152.005,
        156.288,
        162.47,
        166.659,
        171.044,
        171.044,
        171.044,
        171.044,
        171.044,
        171.044,
        171.044,
    ],
    {"scenarios": ["SCEN1", "SCEN2", "SCEN3", "SCEN4", "BAU", "User defined"]},
    "interpolate",
    {"scenarios": _subscript_dict["scenarios"]},
    "_hardcodedlookup_table_max_extraction_aspo_oil_ej_0_1",
)


@component.add(
    name="table max extraction ASPO oil EJ 0",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_table_max_extraction_aspo_oil_ej_0"},
)
def table_max_extraction_aspo_oil_ej_0(x, final_subs=None):
    """
    Curva ASPO de extracción de oil hasta 2050. Unidades: EJ. Para los puntos a partir del 2050 se ha realizado una exponencial negativa hasta anular las reservas en 2100. /*Considera crude y unconvencional oil, así que una vez separado no vale esta tabla*/
    """
    return _hardcodedlookup_table_max_extraction_aspo_oil_ej_0(x, final_subs)


_hardcodedlookup_table_max_extraction_aspo_oil_ej_0 = HardcodedLookups(
    [
        0.0,
        600.0,
        1200.0,
        1800.0,
        2400.0,
        3000.0,
        3600.0,
        4200.0,
        4800.0,
        5400.0,
        6000.0,
        6600.0,
        7200.0,
        7800.0,
        8400.0,
        9000.0,
        9600.0,
        10200.0,
        10800.0,
        11400.0,
        12000.0,
        12600.0,
        13200.0,
    ],
    [
        0.0,
        29.9783,
        46.7403,
        59.4953,
        71.3603,
        84.9357,
        96.0997,
        107.465,
        118.46,
        127.537,
        137.018,
        145.888,
        152.005,
        156.288,
        162.47,
        166.659,
        171.044,
        171.044,
        171.044,
        171.044,
        171.044,
        171.044,
        171.044,
    ],
    {"scenarios": ["SCEN1", "SCEN2", "SCEN3", "SCEN4", "BAU", "User defined"]},
    "interpolate",
    {"scenarios": _subscript_dict["scenarios"]},
    "_hardcodedlookup_table_max_extraction_aspo_oil_ej_0",
)


@component.add(
    name="table max extraction ASPO oil EJ 0 0",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_table_max_extraction_aspo_oil_ej_0_0"},
)
def table_max_extraction_aspo_oil_ej_0_0(x, final_subs=None):
    """
    Curva ASPO de extracción de oil hasta 2050. Unidades: EJ. Para los puntos a partir del 2050 se ha realizado una exponencial negativa hasta anular las reservas en 2100. /*Considera crude y unconvencional oil, así que una vez separado no vale esta tabla*/
    """
    return _hardcodedlookup_table_max_extraction_aspo_oil_ej_0_0(x, final_subs)


_hardcodedlookup_table_max_extraction_aspo_oil_ej_0_0 = HardcodedLookups(
    [
        0.0,
        600.0,
        1200.0,
        1800.0,
        2400.0,
        3000.0,
        3600.0,
        4200.0,
        4800.0,
        5400.0,
        6000.0,
        6600.0,
        7200.0,
        7800.0,
        8400.0,
        9000.0,
        9600.0,
        10200.0,
        10800.0,
        11400.0,
        12000.0,
        12600.0,
        13200.0,
    ],
    [
        0.0,
        29.9783,
        46.7403,
        59.4953,
        71.3603,
        84.9357,
        96.0997,
        107.465,
        118.46,
        127.537,
        137.018,
        145.888,
        152.005,
        156.288,
        162.47,
        166.659,
        171.044,
        171.044,
        171.044,
        171.044,
        171.044,
        171.044,
        171.044,
    ],
    {"scenarios": ["SCEN1", "SCEN2", "SCEN3", "SCEN4", "BAU", "User defined"]},
    "interpolate",
    {"scenarios": _subscript_dict["scenarios"]},
    "_hardcodedlookup_table_max_extraction_aspo_oil_ej_0_0",
)


@component.add(
    name="RURR tot gas until start year PLG",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "start_policy_leave_in_ground_tot_agg_gas": 1,
        "rurr_tot_agg_gas": 1,
        "aux11": 1,
    },
)
def rurr_tot_gas_until_start_year_plg():
    """
    RURR until the start of the policy to leave in the ground (PLG) the resource.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_tot_agg_gas(),
        lambda: rurr_tot_agg_gas(),
        lambda: aux11(),
    )


@component.add(
    name="RURR tot oil until start year PLG",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "start_policy_leave_in_ground_tot_agg_oil": 1,
        "rurr_tot_agg_oil": 1,
        "aux8": 1,
    },
)
def rurr_tot_oil_until_start_year_plg():
    """
    RURR until the start of the policy to leave in the ground (PLG) the resource.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_tot_agg_oil(),
        lambda: rurr_tot_agg_oil(),
        lambda: aux8(),
    )


@component.add(
    name="share Elec demand covered by RES",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_fe_elec_demand_twh": 2, "fe_tot_generation_all_res_elec_twh": 1},
)
def share_elec_demand_covered_by_res():
    """
    Share of the electricity demand covered by RES. Condition to avoid error when the denominator is zero (0.5 is an arbitrary value).
    """
    return if_then_else(
        total_fe_elec_demand_twh() > 0,
        lambda: np.minimum(
            1, fe_tot_generation_all_res_elec_twh() / total_fe_elec_demand_twh()
        ),
        lambda: xr.DataArray(
            0.5, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="RURR conv gas",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_rurr_conv_gas": 1},
    other_deps={
        "_integ_rurr_conv_gas": {
            "initial": {
                "urr_conv_gas": 1,
                "cumulated_conv_gas_extraction_to_1995": 1,
                "separate_conv_and_unconv_gas": 1,
            },
            "step": {"extraction_conv_gas_ej": 1, "flow_conv_gas_left_in_ground": 1},
        }
    },
)
def rurr_conv_gas():
    """
    RURR conventional gas.
    """
    return _integ_rurr_conv_gas()


_integ_rurr_conv_gas = Integ(
    lambda: -extraction_conv_gas_ej() - flow_conv_gas_left_in_ground(),
    lambda: urr_conv_gas()
    - cumulated_conv_gas_extraction_to_1995() * separate_conv_and_unconv_gas(),
    "_integ_rurr_conv_gas",
)


@component.add(
    name="RURR unconv gas",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_rurr_unconv_gas": 1},
    other_deps={
        "_integ_rurr_unconv_gas": {
            "initial": {
                "urr_unconv_gas": 1,
                "cumulated_unconv_gas_extraction_to_1995": 1,
                "separate_conv_and_unconv_gas": 1,
            },
            "step": {
                "extraction_unconv_gas_ej": 1,
                "flow_unconv_gas_left_in_ground": 1,
            },
        }
    },
)
def rurr_unconv_gas():
    """
    RURR unconventional gas.
    """
    return _integ_rurr_unconv_gas()


_integ_rurr_unconv_gas = Integ(
    lambda: -extraction_unconv_gas_ej() - flow_unconv_gas_left_in_ground(),
    lambda: urr_unconv_gas()
    - cumulated_unconv_gas_extraction_to_1995() * separate_conv_and_unconv_gas(),
    "_integ_rurr_unconv_gas",
)


@component.add(
    name="RURR conv oil",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_rurr_conv_oil": 1},
    other_deps={
        "_integ_rurr_conv_oil": {
            "initial": {
                "urr_conv_oil": 1,
                "cumulated_conv_oil_extraction_to_1995": 1,
                "separate_conv_and_unconv_oil": 1,
            },
            "step": {"extraction_conv_oil_ej": 1, "flow_conv_oil_left_in_ground": 1},
        }
    },
)
def rurr_conv_oil():
    """
    RURR conventional oil.
    """
    return _integ_rurr_conv_oil()


_integ_rurr_conv_oil = Integ(
    lambda: -extraction_conv_oil_ej() - flow_conv_oil_left_in_ground(),
    lambda: urr_conv_oil()
    - cumulated_conv_oil_extraction_to_1995() * separate_conv_and_unconv_oil(),
    "_integ_rurr_conv_oil",
)


@component.add(
    name='"variation share transm&distr losses elec"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "share_transmdistr_elec_losses_initial": 1,
        "share_res_electricity_generation": 1,
    },
)
def variation_share_transmdistr_losses_elec():
    """
    Relationship between transmission and distribution losses of electricity and the penetration of RES in the electricity mix. Source: NREL (2012).
    """
    return share_transmdistr_elec_losses_initial() * (
        0.0115 * np.exp(4.2297 * share_res_electricity_generation()) - 0.00251
    )


@component.add(
    name="Share demand solids in transport",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_demand_by_fuel_in_transport": 1},
)
def share_demand_solids_in_transport():
    """
    Share demand solids in transport
    """
    return share_demand_by_fuel_in_transport().loc[:, "solids"].reset_coords(drop=True)


@component.add(
    name="Share demand gas in transport",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_demand_by_fuel_in_transport": 1},
)
def share_demand_gas_in_transport():
    """
    Share of gas in transport
    """
    return share_demand_by_fuel_in_transport().loc[:, "gases"].reset_coords(drop=True)


@component.add(
    name="Share demand by fuel in transport",
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_transport_fed_by_fuel": 1, "transport_tfed": 1},
)
def share_demand_by_fuel_in_transport():
    """
    Share demand by fuel in transport
    """
    return total_transport_fed_by_fuel() / transport_tfed()


@component.add(
    name="Share demand electricity in transport",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_demand_by_fuel_in_transport": 1},
)
def share_demand_electricity_in_transport():
    """
    Share of electricity in transport
    """
    return (
        share_demand_by_fuel_in_transport()
        .loc[:, "electricity"]
        .reset_coords(drop=True)
    )


@component.add(
    name="Share demand heat in transport",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_demand_by_fuel_in_transport": 1},
)
def share_demand_heat_in_transport():
    """
    Share demand heat in transport
    """
    return share_demand_by_fuel_in_transport().loc[:, "heat"].reset_coords(drop=True)


@component.add(
    name="Share demand liquids in transport",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_demand_by_fuel_in_transport": 1},
)
def share_demand_liquids_in_transport():
    """
    Share of liquids in transport
    """
    return share_demand_by_fuel_in_transport().loc[:, "liquids"].reset_coords(drop=True)


@component.add(
    name="CO2 emissions per value added",
    units="GtCO2/(Year*T$)",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_co2_emissions_gtco2": 1, "gdp_eu": 1},
)
def co2_emissions_per_value_added():
    """
    CO2 emissions per value added (GDP).
    """
    return zidz(total_co2_emissions_gtco2(), gdp_eu())


@component.add(
    name="liquids per X bus",
    units="EJ/T$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "energy_initial_inland_transport": 1,
        "adjust_energy_for_transport_to_inland_transport": 1,
        "initial_xt_inland": 1,
    },
)
def liquids_per_x_bus():
    """
    EJ/T$economic activity Average consumption of vehicles from historical data= energy used in that kind of transport/ economic activity of the sector data 'International Energy Agency (2016), Energy Technology Perspectives 2016, OECD/IEA,data data 'International Energy Agency (2016), Energy Technology Perspectives 2016, OECD/IEA, for energy number of buses from http://www.theicct.org/global-transportation-roadmap-model
    """
    return (
        float(energy_initial_inland_transport().loc["bus liq"])
        * adjust_energy_for_transport_to_inland_transport()
        / initial_xt_inland()
    )


@component.add(
    name="liquids per X HV",
    units="EJ/T$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "energy_initial_inland_transport": 1,
        "adjust_energy_for_transport_to_inland_transport": 1,
        "initial_xt_inland": 1,
    },
)
def liquids_per_x_hv():
    """
    EJ/T$economic activity Average consumption of vehicles from historical data= energy used in that kind of transport/ economic activity of the sector data 'International Energy Agency (2016), Energy Technology Perspectives 2016, OECD/IEA,
    """
    return (
        float(energy_initial_inland_transport().loc["HV liq"])
        * adjust_energy_for_transport_to_inland_transport()
        / initial_xt_inland()
    )


@component.add(
    name="liquids per X LV",
    units="EJ/T$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "energy_initial_inland_transport": 1,
        "adjust_energy_for_transport_to_inland_transport": 1,
        "initial_xt_inland": 1,
    },
)
def liquids_per_x_lv():
    """
    EJ/T$economic activity Average consumption of vehicles from historical data= energy used in that kind of transport/ economic activity of the sector data 'International Energy Agency (2016), Energy Technology Perspectives 2016, OECD/IEA,data
    """
    return (
        float(energy_initial_inland_transport().loc["LV liq"])
        * adjust_energy_for_transport_to_inland_transport()
        / initial_xt_inland()
    )


@component.add(
    name="energy per X train",
    units="EJ/T$",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "energy_initial_inland_transport": 1,
        "adjust_energy_for_transport_to_inland_transport": 1,
        "initial_xt_inland": 1,
    },
)
def energy_per_x_train():
    """
    EJ/T$economic activity Average consumption of vehicles from historical data= energy used in that kind of transport/ economic activity of the sector In the case of trains the number of vehicles is set to 1 since there are no data of the number of trains
    """
    return xr.DataArray(
        float(energy_initial_inland_transport().loc["train liq"])
        * adjust_energy_for_transport_to_inland_transport()
        / initial_xt_inland(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    )


@component.add(
    name="adjust energy for transport to inland transport",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_adjust_energy_for_transport_to_inland_transport"
    },
)
def adjust_energy_for_transport_to_inland_transport():
    """
    'International Energy Agency (2016), Energy Technology Perspectives 2016, OECD/IEA, considers in 2015 about 34 EJ of liquids for commercial transport. However WIOD database considers to inland transport sector about 12 EJ. Provisionally, we adjust OECD/IEA data to WIOD. We consider OECD/IEA data in relative terms
    """
    return _ext_constant_adjust_energy_for_transport_to_inland_transport()


_ext_constant_adjust_energy_for_transport_to_inland_transport = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G72",
    {},
    _root,
    {},
    "_ext_constant_adjust_energy_for_transport_to_inland_transport",
)


@component.add(
    name='"effects shortage elec on EV/hib"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_electricity": 2},
)
def effects_shortage_elec_on_evhib():
    """
    The eventual scarcity of electricity would likely constrain the development of EVs. The proposed relationship avoids an abrupt limitation by introducing a range (1;0.8) in the electricity abundance that constrains the development of EVs.
    """
    return if_then_else(
        abundance_electricity() > 0.8,
        lambda: ((abundance_electricity() - 0.8) * 5) ** 2,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="required number standard batteries",
    units="batteries",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"bat_number_2w": 1, "bat_number_ev": 1, "bat_number_hib": 1},
)
def required_number_standard_batteries():
    """
    Required number of electric batteries taking as a stantad a 21,3KWh battery (average size of purely electric vehicle). The batteries of other vehicles are described in terms of this standard one using the batteries ratio coefficient, (relative to the size and amount of minerals). .
    """
    return bat_number_2w() + bat_number_ev() + bat_number_hib() + 1


@component.add(
    name="Transport TFED energy intensity",
    units="EJ/Tdollars",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"transport_tfed": 1, "gdp_eu": 1},
)
def transport_tfed_energy_intensity():
    return zidz(transport_tfed(), gdp_eu())


@component.add(
    name="total number light vehicles",
    units="Mvehicles",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"number_vehicles_h": 4, "vehicles_inlandt": 4},
)
def total_number_light_vehicles():
    """
    Total number of ligth duty vehicles (cargo+households)
    """
    return (
        number_vehicles_h().loc[:, "liq 4wheels"].reset_coords(drop=True)
        + number_vehicles_h().loc[:, "hib 4wheels"].reset_coords(drop=True)
        + number_vehicles_h().loc[:, "elec 4wheels"].reset_coords(drop=True)
        + number_vehicles_h().loc[:, "gas 4wheels"].reset_coords(drop=True)
        + vehicles_inlandt().loc[:, "LV liq"].reset_coords(drop=True)
        + vehicles_inlandt().loc[:, "LV elec"].reset_coords(drop=True)
        + vehicles_inlandt().loc[:, "LV hib"].reset_coords(drop=True)
        + vehicles_inlandt().loc[:, "LV gas"].reset_coords(drop=True)
    )


@component.add(
    name="Transport TFED",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_transport_fed_by_fuel": 1},
)
def transport_tfed():
    """
    Total Final Energy demand in transport
    """
    return sum(
        total_transport_fed_by_fuel().rename({"final sources": "final sources!"}),
        dim=["final sources!"],
    )


@component.add(
    name="CO2 emissions unconv gas",
    units="GtCO2/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_extraction_unconv_gas_emissions_relevant_ej": 1,
        "gco2_per_mj_unconv_gas": 1,
        "mj_per_ej": 1,
        "g_per_gt": 1,
    },
)
def co2_emissions_unconv_gas():
    """
    CO2 emissions from unconventional gas.
    """
    return (
        real_extraction_unconv_gas_emissions_relevant_ej()
        * gco2_per_mj_unconv_gas()
        * mj_per_ej()
        / g_per_gt()
    )


@component.add(
    name='"phase-out oil for electricity?"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_phaseout_oil_for_electricity"},
)
def phaseout_oil_for_electricity():
    """
    Activation of a policies to reduce oil contribution in electricity linearly: If=1: ACTIVATED, If=0: DEACTIVATED.
    """
    return _ext_constant_phaseout_oil_for_electricity()


_ext_constant_phaseout_oil_for_electricity = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C167",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_phaseout_oil_for_electricity",
)

_ext_constant_phaseout_oil_for_electricity.add(
    "inputs_EU.xlsx", "SCEN1", "C167", {"scenarios": ["SCEN1"]}
)

_ext_constant_phaseout_oil_for_electricity.add(
    "inputs_EU.xlsx", "SCEN2", "C167", {"scenarios": ["SCEN2"]}
)

_ext_constant_phaseout_oil_for_electricity.add(
    "inputs_EU.xlsx", "SCEN3", "C167", {"scenarios": ["SCEN3"]}
)

_ext_constant_phaseout_oil_for_electricity.add(
    "inputs_EU.xlsx", "SCEN4", "C167", {"scenarios": ["SCEN4"]}
)

_ext_constant_phaseout_oil_for_electricity.add(
    "inputs_EU.xlsx", "BAU", "C167", {"scenarios": ["User defined"]}
)


@component.add(
    name="Total CH4 emissions fossil fuels",
    units="MtCH4",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ch4_emissions_conv_gas_without_gtl": 1,
        "ch4_emissions_unconv_gas": 1,
        "ch4_emissions_coal_without_ctl": 1,
        "ch4_emissions_oil": 1,
        "ch4_emissions_ctl": 1,
        "ch4_emissions_gtl": 1,
    },
)
def total_ch4_emissions_fossil_fuels():
    """
    Total CH4 emissions from fossil fuels.
    """
    return (
        ch4_emissions_conv_gas_without_gtl()
        + ch4_emissions_unconv_gas()
        + ch4_emissions_coal_without_ctl()
        + ch4_emissions_oil()
        + ch4_emissions_ctl()
        + ch4_emissions_gtl()
    )


@component.add(
    name="max CSP TWe",
    units="TWe",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_csp_on_land_mha": 1, "power_density_csp": 1},
)
def max_csp_twe():
    """
    Techno-ecological potential of solar CSP. This potential depends on the assumed land availability for solar CSP power plants ("max solar PV on land MHa") and its power density (1 TWe = 8760 TWh in one year).
    """
    return max_csp_on_land_mha() * power_density_csp()


@component.add(
    name="gCH4 per MJ GTL",
    units="GtCO2/MToe",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_gch4_per_mj_gtl"},
)
def gch4_per_mj_gtl():
    """
    CH4 emission factor of GTL.
    """
    return _ext_constant_gch4_per_mj_gtl()


_ext_constant_gch4_per_mj_gtl = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G94",
    {},
    _root,
    {},
    "_ext_constant_gch4_per_mj_gtl",
)


@component.add(
    name="CH4 emissions GTL",
    units="MtCH4",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ped_nat_gas_for_gtl_ej": 1,
        "gch4_per_mj_gtl": 1,
        "mj_per_ej": 1,
        "g_per_mt": 1,
    },
)
def ch4_emissions_gtl():
    """
    CH4 emissions GTL.
    """
    return ped_nat_gas_for_gtl_ej() * gch4_per_mj_gtl() * mj_per_ej() / g_per_mt()


@component.add(
    name='"phase-out oil for heat?"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_phaseout_oil_for_heat"},
)
def phaseout_oil_for_heat():
    """
    Activation of a policies to reduce oil contribution in heat commercial linearly: If=1: ACTIVATED, If=0: DEACTIVATED.
    """
    return _ext_constant_phaseout_oil_for_heat()


_ext_constant_phaseout_oil_for_heat = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C168",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_phaseout_oil_for_heat",
)

_ext_constant_phaseout_oil_for_heat.add(
    "inputs_EU.xlsx", "SCEN1", "C168", {"scenarios": ["SCEN1"]}
)

_ext_constant_phaseout_oil_for_heat.add(
    "inputs_EU.xlsx", "SCEN2", "C168", {"scenarios": ["SCEN2"]}
)

_ext_constant_phaseout_oil_for_heat.add(
    "inputs_EU.xlsx", "SCEN3", "C168", {"scenarios": ["SCEN3"]}
)

_ext_constant_phaseout_oil_for_heat.add(
    "inputs_EU.xlsx", "SCEN4", "C168", {"scenarios": ["SCEN4"]}
)

_ext_constant_phaseout_oil_for_heat.add(
    "inputs_EU.xlsx", "BAU", "C168", {"scenarios": ["User defined"]}
)


@component.add(
    name="gCH4 per MJ CTL",
    units="GtCO2/MToe",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_gch4_per_mj_ctl"},
)
def gch4_per_mj_ctl():
    """
    CH4 emission factor of CTL.
    """
    return _ext_constant_gch4_per_mj_ctl()


_ext_constant_gch4_per_mj_ctl = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G93",
    {},
    _root,
    {},
    "_ext_constant_gch4_per_mj_ctl",
)


@component.add(
    name="g per Gt",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_g_per_gt"},
)
def g_per_gt():
    """
    Unit conversion.
    """
    return _ext_constant_g_per_gt()


_ext_constant_g_per_gt = ExtConstant(
    "inputs_EU.xlsx", "Constants", "G15", {}, _root, {}, "_ext_constant_g_per_gt"
)


@component.add(
    name="BioE CO2 emissions",
    units="GtCO2/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "gco2_per_mj_conv_gas": 1,
        "oil_liquids_saved_by_biofuels_ej": 1,
        "pes_tot_biogas_for_heatcom": 1,
        "solid_bioe_emissions_relevant_ej": 1,
        "mj_per_ej": 1,
        "g_per_gt": 1,
    },
)
def bioe_co2_emissions():
    """
    CO2 emissions from biomass. We assume that biofuels have an emission intensity similar to natural gas (due to ILUCs, see Technical Report), and for the rest (traditional biomass, biomass for electricity and biomass for heat) we asssume that the carbon balance is null.
    """
    return (
        gco2_per_mj_conv_gas()
        * (
            oil_liquids_saved_by_biofuels_ej()
            + solid_bioe_emissions_relevant_ej()
            + pes_tot_biogas_for_heatcom()
        )
        * mj_per_ej()
        / g_per_gt()
    )


@component.add(
    name="P H vehicle",
    units="Dmnl",
    subscripts=["scenarios", "Households vehicles"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "p_share_2wheelers": 6,
        "p_percent_gas_hveh": 2,
        "p_percent_elec_hveh": 2,
        "p_percent_hyb_hveh": 2,
        "p_percent_2w_elec": 2,
    },
)
def p_h_vehicle():
    """
    desired percent of vehicles from each type in T fin. These are percentages relatives TO THE TOTAL AMOUNT OF VEHICLES ( 2 wheelers + 4 wheelers).
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "Households vehicles": _subscript_dict["Households vehicles"],
        },
        ["scenarios", "Households vehicles"],
    )
    value.loc[:, ["liq 4wheels"]] = (
        (
            (1 - p_share_2wheelers() / 100)
            * (
                100
                - p_percent_elec_hveh()
                - p_percent_gas_hveh()
                - p_percent_hyb_hveh()
            )
        )
        .expand_dims({"Households vehicles": ["liq 4wheels"]}, 1)
        .values
    )
    value.loc[:, ["elec 4wheels"]] = (
        (p_percent_elec_hveh() * (1 - p_share_2wheelers() / 100))
        .expand_dims({"Households vehicles": ["elec 4wheels"]}, 1)
        .values
    )
    value.loc[:, ["hib 4wheels"]] = (
        (p_percent_hyb_hveh() * (1 - p_share_2wheelers() / 100))
        .expand_dims({"Households vehicles": ["hib 4wheels"]}, 1)
        .values
    )
    value.loc[:, ["gas 4wheels"]] = (
        (p_percent_gas_hveh() * (1 - p_share_2wheelers() / 100))
        .expand_dims({"Households vehicles": ["gas 4wheels"]}, 1)
        .values
    )
    value.loc[:, ["liq 2wheels"]] = (
        ((p_share_2wheelers() / 100) * (100 - p_percent_2w_elec()))
        .expand_dims({"Households vehicles": ["liq 2wheels"]}, 1)
        .values
    )
    value.loc[:, ["elec 2wheels"]] = (
        ((p_share_2wheelers() / 100) * p_percent_2w_elec())
        .expand_dims({"Households vehicles": ["elec 2wheels"]}, 1)
        .values
    )
    return value


@component.add(
    name="EROIst system until 2015",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "eroist_system_delayed": 1, "aux4": 1},
)
def eroist_system_until_2015():
    """
    EROIst of the energy system until the year 2015.
    """
    return if_then_else(time() < 2015, lambda: eroist_system_delayed(), lambda: aux4())


@component.add(
    name="remaining potential elec storage by RES techn",
    units="Dmnl",
    subscripts=["scenarios", "RES elec"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_capacity_elec_storage": 3, "demand_storage_capacity": 2},
)
def remaining_potential_elec_storage_by_res_techn():
    """
    Remaining potential available as a fraction of unity.
    """
    return if_then_else(
        max_capacity_elec_storage() >= demand_storage_capacity(),
        lambda: (max_capacity_elec_storage() - demand_storage_capacity())
        / max_capacity_elec_storage(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    ).expand_dims({"RES elec": _subscript_dict["RES elec"]}, 1)


@component.add(
    name="Cp hydro 2015",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_cp_hydro_2015"},
)
def cp_hydro_2015():
    """
    Cp conventional hydro in 2015.
    """
    return _ext_constant_cp_hydro_2015()


_ext_constant_cp_hydro_2015 = ExtConstant(
    "inputs_EU.xlsx", "Parameters", "I13", {}, _root, {}, "_ext_constant_cp_hydro_2015"
)


@component.add(
    name="ESOI PHS full potential",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"eroiini_res_elec_dispatch": 1, "cp_hydro_2015": 1, "cp_phs": 1},
)
def esoi_phs_full_potential():
    """
    ESOI of PHS when the full potential is available.
    """
    return float(eroiini_res_elec_dispatch().loc["hydro"]) * (
        cp_phs() / cp_hydro_2015()
    )


@component.add(
    name="max capacity elec storage",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_capacity_potential_phs": 1,
        "used_ev_batteries_for_elec_storage": 1,
    },
)
def max_capacity_elec_storage():
    """
    Maximum capacity potential of electricity storage (PHS and electric bateries).
    """
    return max_capacity_potential_phs() + used_ev_batteries_for_elec_storage()


@component.add(
    name='"EOL-RR minerals alt techn RES vs. total economy"',
    units="Dnml",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_eolrr_minerals_alt_techn_res_vs_total_economy"
    },
)
def eolrr_minerals_alt_techn_res_vs_total_economy():
    """
    Recycling rate of minerals used in variable RES technologies in relation to the total economy. Since these technologies are novel and often include materials which are used in small quantities in complex products, the recycling rates of the used minerals are lower than for the whole economy.
    """
    return _ext_constant_eolrr_minerals_alt_techn_res_vs_total_economy()


_ext_constant_eolrr_minerals_alt_techn_res_vs_total_economy = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G57",
    {},
    _root,
    {},
    "_ext_constant_eolrr_minerals_alt_techn_res_vs_total_economy",
)


@component.add(
    name='"Crash programme CTL?"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_crash_programme_ctl"},
)
def crash_programme_ctl():
    """
    0- Crash programme CTL NOT activated 1- Crash programme CTL activated
    """
    return _ext_constant_crash_programme_ctl()


_ext_constant_crash_programme_ctl = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D110",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_crash_programme_ctl",
)

_ext_constant_crash_programme_ctl.add(
    "inputs_EU.xlsx", "SCEN1", "D110", {"scenarios": ["SCEN1"]}
)

_ext_constant_crash_programme_ctl.add(
    "inputs_EU.xlsx", "SCEN2", "D110", {"scenarios": ["SCEN2"]}
)

_ext_constant_crash_programme_ctl.add(
    "inputs_EU.xlsx", "SCEN3", "D110", {"scenarios": ["SCEN3"]}
)

_ext_constant_crash_programme_ctl.add(
    "inputs_EU.xlsx", "SCEN4", "D110", {"scenarios": ["SCEN4"]}
)

_ext_constant_crash_programme_ctl.add(
    "inputs_EU.xlsx", "User defined", "D110", {"scenarios": ["User defined"]}
)


@component.add(
    name="recycling rates minerals Rest",
    units="Dmnl",
    subscripts=["materials", "scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rates_minerals_rest": 1},
    other_deps={
        "_integ_recycling_rates_minerals_rest": {
            "initial": {
                "current_recycling_rates_minerals": 1,
                "all_minerals_virgin": 1,
            },
            "step": {"improvement_recycling_rates_minerals_rest": 1},
        }
    },
)
def recycling_rates_minerals_rest():
    """
    Recycling rates minerals for the rest of the economy.
    """
    return _integ_recycling_rates_minerals_rest()


_integ_recycling_rates_minerals_rest = Integ(
    lambda: improvement_recycling_rates_minerals_rest(),
    lambda: (current_recycling_rates_minerals() * all_minerals_virgin()).expand_dims(
        {"scenarios": _subscript_dict["scenarios"]}, 1
    ),
    "_integ_recycling_rates_minerals_rest",
)


@component.add(
    name="P percent elec Hveh",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_percent_elec_hveh"},
)
def p_percent_elec_hveh():
    """
    Desired percent of electrical vehicles (4 wheelers) in T fin our of TOTAL 4 WHEEL vehicles
    """
    return _ext_constant_p_percent_elec_hveh()


_ext_constant_p_percent_elec_hveh = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C177",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_percent_elec_hveh",
)

_ext_constant_p_percent_elec_hveh.add(
    "inputs_EU.xlsx", "SCEN1", "C177", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_percent_elec_hveh.add(
    "inputs_EU.xlsx", "SCEN2", "C177", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_percent_elec_hveh.add(
    "inputs_EU.xlsx", "SCEN3", "C177", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_percent_elec_hveh.add(
    "inputs_EU.xlsx", "SCEN4", "C177", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_percent_elec_hveh.add(
    "inputs_EU.xlsx", "User defined", "C177", {"scenarios": ["User defined"]}
)


@component.add(
    name="percents H vehicles",
    units="Dmnl",
    subscripts=["scenarios", "Households vehicles"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_percents_h_vehicles": 1,
        "_integ_percents_h_vehicles_1": 1,
        "_integ_percents_h_vehicles_2": 1,
        "_integ_percents_h_vehicles_3": 1,
        "_integ_percents_h_vehicles_4": 1,
        "_integ_percents_h_vehicles_5": 1,
    },
    other_deps={
        "_integ_percents_h_vehicles": {
            "initial": {"initial_2w_percent": 1},
            "step": {"var_percents_h_vehicles": 1},
        },
        "_integ_percents_h_vehicles_1": {
            "initial": {},
            "step": {"var_percents_h_vehicles": 1},
        },
        "_integ_percents_h_vehicles_2": {
            "initial": {},
            "step": {"var_percents_h_vehicles": 1},
        },
        "_integ_percents_h_vehicles_3": {
            "initial": {},
            "step": {"var_percents_h_vehicles": 1},
        },
        "_integ_percents_h_vehicles_4": {
            "initial": {"initial_2w_percent": 1},
            "step": {"var_percents_h_vehicles": 1},
        },
        "_integ_percents_h_vehicles_5": {
            "initial": {},
            "step": {"var_percents_h_vehicles": 1},
        },
    },
)
def percents_h_vehicles():
    """
    Percent relative to total number of vehicles 2w+4w. Initial percentages in 1995 of alternative vehicles are considered cero, This is done that way in order to allow a lineal growth that matches historical vehaviour from 2005 to 2015. Percents relative to total 4w+2w.
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "Households vehicles": _subscript_dict["Households vehicles"],
        },
        ["scenarios", "Households vehicles"],
    )
    value.loc[:, ["liq 4wheels"]] = _integ_percents_h_vehicles().values
    value.loc[:, ["elec 4wheels"]] = _integ_percents_h_vehicles_1().values
    value.loc[:, ["hib 4wheels"]] = _integ_percents_h_vehicles_2().values
    value.loc[:, ["gas 4wheels"]] = _integ_percents_h_vehicles_3().values
    value.loc[:, ["liq 2wheels"]] = _integ_percents_h_vehicles_4().values
    value.loc[:, ["elec 2wheels"]] = _integ_percents_h_vehicles_5().values
    return value


_integ_percents_h_vehicles = Integ(
    lambda: var_percents_h_vehicles()
    .loc[:, "liq 4wheels"]
    .reset_coords(drop=True)
    .expand_dims({"Households vehicles": ["liq 4wheels"]}, 1),
    lambda: xr.DataArray(
        100 - initial_2w_percent(),
        {
            "scenarios": _subscript_dict["scenarios"],
            "Households vehicles": ["liq 4wheels"],
        },
        ["scenarios", "Households vehicles"],
    ),
    "_integ_percents_h_vehicles",
)

_integ_percents_h_vehicles_1 = Integ(
    lambda: var_percents_h_vehicles()
    .loc[:, "elec 4wheels"]
    .reset_coords(drop=True)
    .expand_dims({"Households vehicles": ["elec 4wheels"]}, 1),
    lambda: xr.DataArray(
        0,
        {
            "scenarios": _subscript_dict["scenarios"],
            "Households vehicles": ["elec 4wheels"],
        },
        ["scenarios", "Households vehicles"],
    ),
    "_integ_percents_h_vehicles_1",
)

_integ_percents_h_vehicles_2 = Integ(
    lambda: var_percents_h_vehicles()
    .loc[:, "hib 4wheels"]
    .reset_coords(drop=True)
    .expand_dims({"Households vehicles": ["hib 4wheels"]}, 1),
    lambda: xr.DataArray(
        0,
        {
            "scenarios": _subscript_dict["scenarios"],
            "Households vehicles": ["hib 4wheels"],
        },
        ["scenarios", "Households vehicles"],
    ),
    "_integ_percents_h_vehicles_2",
)

_integ_percents_h_vehicles_3 = Integ(
    lambda: var_percents_h_vehicles()
    .loc[:, "gas 4wheels"]
    .reset_coords(drop=True)
    .expand_dims({"Households vehicles": ["gas 4wheels"]}, 1),
    lambda: xr.DataArray(
        0,
        {
            "scenarios": _subscript_dict["scenarios"],
            "Households vehicles": ["gas 4wheels"],
        },
        ["scenarios", "Households vehicles"],
    ),
    "_integ_percents_h_vehicles_3",
)

_integ_percents_h_vehicles_4 = Integ(
    lambda: var_percents_h_vehicles()
    .loc[:, "liq 2wheels"]
    .reset_coords(drop=True)
    .expand_dims({"Households vehicles": ["liq 2wheels"]}, 1),
    lambda: xr.DataArray(
        initial_2w_percent(),
        {
            "scenarios": _subscript_dict["scenarios"],
            "Households vehicles": ["liq 2wheels"],
        },
        ["scenarios", "Households vehicles"],
    ),
    "_integ_percents_h_vehicles_4",
)

_integ_percents_h_vehicles_5 = Integ(
    lambda: var_percents_h_vehicles()
    .loc[:, "elec 2wheels"]
    .reset_coords(drop=True)
    .expand_dims({"Households vehicles": ["elec 2wheels"]}, 1),
    lambda: xr.DataArray(
        0,
        {
            "scenarios": _subscript_dict["scenarios"],
            "Households vehicles": ["elec 2wheels"],
        },
        ["scenarios", "Households vehicles"],
    ),
    "_integ_percents_h_vehicles_5",
)


@component.add(
    name="T hist H transp",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def t_hist_h_transp():
    """
    Year used to calibrate the historical growth of vehicles, 2015
    """
    value = xr.DataArray(
        np.nan, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    )
    value.loc[["BAU"]] = 2015
    value.loc[["SCEN1"]] = 2015
    value.loc[["SCEN2"]] = 2015
    value.loc[["SCEN3"]] = 2015
    value.loc[["SCEN4"]] = 2015
    value.loc[["User defined"]] = 2015
    return value


@component.add(
    name="bat number 2w",
    units="batteries",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"number_vehicles_h": 1, "bateries_ratio_2w_e": 1},
)
def bat_number_2w():
    """
    Required number of electric batteries for 2w vehicles expressed in terms of a stantad a 21,3KWh battery, but taking into account the smaller size of 2 wheeler's batteries
    """
    return (
        number_vehicles_h().loc[:, "elec 2wheels"].reset_coords(drop=True)
        * bateries_ratio_2w_e()
    )


@component.add(
    name="bateries ratio 2w E",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_bateries_ratio_2w_e"},
)
def bateries_ratio_2w_e():
    """
    Ratio between the size of the electric 2 wheeler batteries and the standard 21,3KWh batteries, per vehicle
    """
    return _ext_constant_bateries_ratio_2w_e()


_ext_constant_bateries_ratio_2w_e = ExtConstant(
    "inputs_EU.xlsx",
    "Transportation",
    "B114",
    {},
    _root,
    {},
    "_ext_constant_bateries_ratio_2w_e",
)


@component.add(
    name="bat number EV",
    units="batteries",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "number_vehicles_h": 1,
        "vehicles_inlandt": 2,
        "bateries_ratio_bus_e": 1,
    },
)
def bat_number_ev():
    """
    Required number of electric batteries for hybrid vehicles expressed in terms of a stantad a 21,3KWh battery,
    """
    return (
        number_vehicles_h().loc[:, "elec 4wheels"].reset_coords(drop=True)
        + vehicles_inlandt().loc[:, "LV elec"].reset_coords(drop=True)
        + vehicles_inlandt().loc[:, "bus elec"].reset_coords(drop=True)
        * bateries_ratio_bus_e()
    )


@component.add(
    name="bat number hib",
    units="batteries",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "vehicles_inlandt": 3,
        "bateries_ratio_hib_lv": 2,
        "bateries_ratio_hib_hv": 1,
        "bateries_ratio_hib_bus": 1,
        "number_vehicles_h": 1,
    },
)
def bat_number_hib():
    """
    Required number of electric batteries for hybrid vehicles expressed in terms of a stantad a 21,3KWh battery, but taking into account the greater size of heavy vehicle's batteries and the smaller one of hybrid ligh vehicles
    """
    return (
        vehicles_inlandt().loc[:, "LV hib"].reset_coords(drop=True)
        * bateries_ratio_hib_lv()
        + vehicles_inlandt().loc[:, "HV hib"].reset_coords(drop=True)
        * bateries_ratio_hib_hv()
        + vehicles_inlandt().loc[:, "bus hib"].reset_coords(drop=True)
        * bateries_ratio_hib_bus()
        + number_vehicles_h().loc[:, "hib 4wheels"].reset_coords(drop=True)
        * bateries_ratio_hib_lv()
    )


@component.add(
    name="bateries ratio bus E",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_bateries_ratio_bus_e"},
)
def bateries_ratio_bus_e():
    """
    Ratio between the size of the electric bus batteries and the standard 21,3KWh batteries, per vehicle
    """
    return _ext_constant_bateries_ratio_bus_e()


_ext_constant_bateries_ratio_bus_e = ExtConstant(
    "inputs_EU.xlsx",
    "Transportation",
    "B112",
    {},
    _root,
    {},
    "_ext_constant_bateries_ratio_bus_e",
)


@component.add(
    name="bateries ratio hib bus",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_bateries_ratio_hib_bus"},
)
def bateries_ratio_hib_bus():
    """
    Ratio between the size of the hybrid bus batteries and the standard 21,3KWh batteries, per vehicle
    """
    return _ext_constant_bateries_ratio_hib_bus()


_ext_constant_bateries_ratio_hib_bus = ExtConstant(
    "inputs_EU.xlsx",
    "Transportation",
    "B113",
    {},
    _root,
    {},
    "_ext_constant_bateries_ratio_hib_bus",
)


@component.add(
    name="bateries ratio hib HV",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_bateries_ratio_hib_hv"},
)
def bateries_ratio_hib_hv():
    """
    Ratio between the size of the hybrid HV batteries and the standard 21,3KWh batteries, per vehicle
    """
    return _ext_constant_bateries_ratio_hib_hv()


_ext_constant_bateries_ratio_hib_hv = ExtConstant(
    "inputs_EU.xlsx",
    "Transportation",
    "B111",
    {},
    _root,
    {},
    "_ext_constant_bateries_ratio_hib_hv",
)


@component.add(
    name="bateries ratio hib LV",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_bateries_ratio_hib_lv"},
)
def bateries_ratio_hib_lv():
    """
    Ratio between the size of the electric LV hybrid batteries and the standard 21,3KWh batteries, per vehicle
    """
    return _ext_constant_bateries_ratio_hib_lv()


_ext_constant_bateries_ratio_hib_lv = ExtConstant(
    "inputs_EU.xlsx",
    "Transportation",
    "B110",
    {},
    _root,
    {},
    "_ext_constant_bateries_ratio_hib_lv",
)


@component.add(
    name="total number hybrid light vehicles",
    units="vehicle",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"number_vehicles_h": 1, "vehicles_inlandt": 1},
)
def total_number_hybrid_light_vehicles():
    """
    Total number of light hybrid vehicles, households+cargo
    """
    return number_vehicles_h().loc[:, "hib 4wheels"].reset_coords(
        drop=True
    ) + vehicles_inlandt().loc[:, "LV hib"].reset_coords(drop=True)


@component.add(
    name="total number elec light vehicles",
    units="vehicle",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"number_vehicles_h": 1, "vehicles_inlandt": 1},
)
def total_number_elec_light_vehicles():
    """
    Total number of light electric vehicles, households+cargo (battery based+plug in hybrid)
    """
    return number_vehicles_h().loc[:, "elec 4wheels"].reset_coords(
        drop=True
    ) + vehicles_inlandt().loc[:, "LV elec"].reset_coords(drop=True)


@component.add(
    name="total number gas light vehicles",
    units="vehicle",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"number_vehicles_h": 1, "vehicles_inlandt": 1},
)
def total_number_gas_light_vehicles():
    """
    Total number of light gas vehicles, households+cargo
    """
    return number_vehicles_h().loc[:, "gas 4wheels"].reset_coords(
        drop=True
    ) + vehicles_inlandt().loc[:, "LV gas"].reset_coords(drop=True)


@component.add(
    name="EV batteries TW",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"batteries_evhib2we": 1, "kw_per_battery_ev": 1, "kwh_per_twh": 1},
)
def ev_batteries_tw():
    """
    Electric batteries from electric vehicles, expresed in terms of power available (TW)
    """
    return batteries_evhib2we() * kw_per_battery_ev() / kwh_per_twh()


@component.add(
    name="var percent T vehicles",
    units="Dmnl",
    subscripts=["scenarios", "vehicleT"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 12,
        "t_ini_inlandt": 12,
        "aux_hist_tveh": 12,
        "adapt_var_inlandt": 18,
    },
)
def var_percent_t_vehicles():
    """
    growth of percents of inland transport vehicles, each type relative to its own: heavy vehicles (%liq+%hib+%gas) add 1, light vehicles (%liq+%elec+%gas+%hib) add 1, bus (%liq+%elec+%gas+%hib) add 1 and trains ((%liq+%elec) add 1. The growth of liquids allways adapts to the one of the rest, we assume that the policies are passing from liquids to other fuels
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "vehicleT": _subscript_dict["vehicleT"],
        },
        ["scenarios", "vehicleT"],
    )
    value.loc[:, ["HV liq"]] = (
        if_then_else(
            time() < t_ini_inlandt(),
            lambda: aux_hist_tveh().loc[:, "HV liq"].reset_coords(drop=True),
            lambda: -adapt_var_inlandt().loc[:, "HV hib"].reset_coords(drop=True)
            - adapt_var_inlandt().loc[:, "HV gas"].reset_coords(drop=True),
        )
        .expand_dims({"vehicleT": ["HV liq"]}, 1)
        .values
    )
    value.loc[:, ["HV hib"]] = (
        if_then_else(
            time() < t_ini_inlandt(),
            lambda: aux_hist_tveh().loc[:, "HV hib"].reset_coords(drop=True),
            lambda: adapt_var_inlandt().loc[:, "HV hib"].reset_coords(drop=True),
        )
        .expand_dims({"vehicleT": ["HV hib"]}, 1)
        .values
    )
    value.loc[:, ["HV gas"]] = (
        if_then_else(
            time() < t_ini_inlandt(),
            lambda: aux_hist_tveh().loc[:, "HV gas"].reset_coords(drop=True),
            lambda: adapt_var_inlandt().loc[:, "HV gas"].reset_coords(drop=True),
        )
        .expand_dims({"vehicleT": ["HV gas"]}, 1)
        .values
    )
    value.loc[:, ["LV liq"]] = (
        if_then_else(
            time() < t_ini_inlandt(),
            lambda: aux_hist_tveh().loc[:, "LV liq"].reset_coords(drop=True),
            lambda: -adapt_var_inlandt().loc[:, "LV hib"].reset_coords(drop=True)
            - adapt_var_inlandt().loc[:, "LV elec"].reset_coords(drop=True)
            - adapt_var_inlandt().loc[:, "LV gas"].reset_coords(drop=True),
        )
        .expand_dims({"vehicleT": ["LV liq"]}, 1)
        .values
    )
    value.loc[:, ["LV elec"]] = (
        if_then_else(
            time() < t_ini_inlandt(),
            lambda: aux_hist_tveh().loc[:, "LV elec"].reset_coords(drop=True),
            lambda: adapt_var_inlandt().loc[:, "LV elec"].reset_coords(drop=True),
        )
        .expand_dims({"vehicleT": ["LV elec"]}, 1)
        .values
    )
    value.loc[:, ["LV hib"]] = (
        if_then_else(
            time() < t_ini_inlandt(),
            lambda: aux_hist_tveh().loc[:, "LV hib"].reset_coords(drop=True),
            lambda: adapt_var_inlandt().loc[:, "LV hib"].reset_coords(drop=True),
        )
        .expand_dims({"vehicleT": ["LV hib"]}, 1)
        .values
    )
    value.loc[:, ["LV gas"]] = (
        if_then_else(
            time() < t_ini_inlandt(),
            lambda: aux_hist_tveh().loc[:, "LV gas"].reset_coords(drop=True),
            lambda: adapt_var_inlandt().loc[:, "LV gas"].reset_coords(drop=True),
        )
        .expand_dims({"vehicleT": ["LV gas"]}, 1)
        .values
    )
    value.loc[:, ["bus liq"]] = (
        if_then_else(
            time() < t_ini_inlandt(),
            lambda: aux_hist_tveh().loc[:, "bus liq"].reset_coords(drop=True),
            lambda: -adapt_var_inlandt().loc[:, "bus elec"].reset_coords(drop=True)
            - adapt_var_inlandt().loc[:, "bus hib"].reset_coords(drop=True)
            - adapt_var_inlandt().loc[:, "bus gas"].reset_coords(drop=True),
        )
        .expand_dims({"vehicleT": ["bus liq"]}, 1)
        .values
    )
    value.loc[:, ["bus hib"]] = (
        if_then_else(
            time() < t_ini_inlandt(),
            lambda: aux_hist_tveh().loc[:, "bus hib"].reset_coords(drop=True),
            lambda: adapt_var_inlandt().loc[:, "bus hib"].reset_coords(drop=True),
        )
        .expand_dims({"vehicleT": ["bus hib"]}, 1)
        .values
    )
    value.loc[:, ["bus gas"]] = (
        if_then_else(
            time() < t_ini_inlandt(),
            lambda: aux_hist_tveh().loc[:, "bus gas"].reset_coords(drop=True),
            lambda: adapt_var_inlandt().loc[:, "bus gas"].reset_coords(drop=True),
        )
        .expand_dims({"vehicleT": ["bus gas"]}, 1)
        .values
    )
    value.loc[:, ["train liq"]] = (
        if_then_else(
            time() < t_ini_inlandt(),
            lambda: aux_hist_tveh().loc[:, "train liq"].reset_coords(drop=True),
            lambda: -adapt_var_inlandt().loc[:, "train elec"].reset_coords(drop=True),
        )
        .expand_dims({"vehicleT": ["train liq"]}, 1)
        .values
    )
    value.loc[:, ["train elec"]] = (
        if_then_else(
            time() < t_ini_inlandt(),
            lambda: aux_hist_tveh().loc[:, "train elec"].reset_coords(drop=True),
            lambda: adapt_var_inlandt().loc[:, "train elec"].reset_coords(drop=True),
        )
        .expand_dims({"vehicleT": ["train elec"]}, 1)
        .values
    )
    value.loc[:, ["bus elec"]] = (
        adapt_var_inlandt()
        .loc[:, "bus elec"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["bus elec"]}, 1)
        .values
    )
    return value


@component.add(
    name="P percent train elec",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_percent_train_elec"},
)
def p_percent_train_elec():
    """
    Policy of change of trains. Desired percent of train electric in T fin relative to the total of trains
    """
    return _ext_constant_p_percent_train_elec()


_ext_constant_p_percent_train_elec = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C191",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_percent_train_elec",
)

_ext_constant_p_percent_train_elec.add(
    "inputs_EU.xlsx", "SCEN1", "C191", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_percent_train_elec.add(
    "inputs_EU.xlsx", "SCEN2", "C191", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_percent_train_elec.add(
    "inputs_EU.xlsx", "SCEN3", "C191", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_percent_train_elec.add(
    "inputs_EU.xlsx", "SCEN4", "C191", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_percent_train_elec.add(
    "inputs_EU.xlsx", "User defined", "C191", {"scenarios": ["User defined"]}
)


@component.add(
    name="P percent HV gas",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_percent_hv_gas"},
)
def p_percent_hv_gas():
    """
    Policy of change of heavy vehicles. Desired percent of HV gas in T fin relative to total Heavy Vehicles
    """
    return _ext_constant_p_percent_hv_gas()


_ext_constant_p_percent_hv_gas = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C184",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_percent_hv_gas",
)

_ext_constant_p_percent_hv_gas.add(
    "inputs_EU.xlsx", "SCEN1", "C184", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_percent_hv_gas.add(
    "inputs_EU.xlsx", "SCEN2", "C184", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_percent_hv_gas.add(
    "inputs_EU.xlsx", "SCEN3", "C184", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_percent_hv_gas.add(
    "inputs_EU.xlsx", "SCEN4", "C184", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_percent_hv_gas.add(
    "inputs_EU.xlsx", "User defined", "C184", {"scenarios": ["User defined"]}
)


@component.add(
    name="T ini inlandT",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_t_ini_inlandt"},
)
def t_ini_inlandt():
    """
    By this time the policy objectives defined in policies must be obtained
    """
    return _ext_constant_t_ini_inlandt()


_ext_constant_t_ini_inlandt = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C174",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_t_ini_inlandt",
)

_ext_constant_t_ini_inlandt.add(
    "inputs_EU.xlsx", "SCEN1", "C174", {"scenarios": ["SCEN1"]}
)

_ext_constant_t_ini_inlandt.add(
    "inputs_EU.xlsx", "SCEN2", "C174", {"scenarios": ["SCEN2"]}
)

_ext_constant_t_ini_inlandt.add(
    "inputs_EU.xlsx", "SCEN3", "C174", {"scenarios": ["SCEN3"]}
)

_ext_constant_t_ini_inlandt.add(
    "inputs_EU.xlsx", "SCEN4", "C174", {"scenarios": ["SCEN4"]}
)

_ext_constant_t_ini_inlandt.add(
    "inputs_EU.xlsx", "User defined", "C174", {"scenarios": ["User defined"]}
)


@component.add(
    name="P inlandT",
    units="Dmnl",
    subscripts=["scenarios", "vehicleT"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "p_percent_hv_gas": 2,
        "p_percent_hv_hyb": 2,
        "p_percent_lv_gas": 2,
        "p_percent_lv_elec": 2,
        "p_percent_lv_hyb": 2,
        "p_percent_bus_elec": 2,
        "p_percent_bus_gas": 2,
        "p_percent_bus_hyb": 2,
        "p_percent_train_elec": 2,
    },
)
def p_inlandt():
    """
    Desired percent each type of inland transport vehicle in T fin, Liquids policies are obtained by substracting the rest of vehicles, the sum of all policies must be 1 for each type of vehicle (HV, LV, bus, train).
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "vehicleT": _subscript_dict["vehicleT"],
        },
        ["scenarios", "vehicleT"],
    )
    value.loc[:, ["HV liq"]] = (
        (100 - p_percent_hv_gas() - p_percent_hv_hyb())
        .expand_dims({"vehicleT": ["HV liq"]}, 1)
        .values
    )
    value.loc[:, ["HV hib"]] = (
        p_percent_hv_hyb().expand_dims({"vehicleT": ["HV hib"]}, 1).values
    )
    value.loc[:, ["HV gas"]] = (
        p_percent_hv_gas().expand_dims({"vehicleT": ["HV gas"]}, 1).values
    )
    value.loc[:, ["LV liq"]] = (
        (100 - p_percent_lv_elec() - p_percent_lv_hyb() - p_percent_lv_gas())
        .expand_dims({"vehicleT": ["LV liq"]}, 1)
        .values
    )
    value.loc[:, ["LV elec"]] = (
        p_percent_lv_elec().expand_dims({"vehicleT": ["LV elec"]}, 1).values
    )
    value.loc[:, ["LV gas"]] = (
        p_percent_lv_gas().expand_dims({"vehicleT": ["LV gas"]}, 1).values
    )
    value.loc[:, ["bus liq"]] = (
        (100 - p_percent_bus_hyb() - p_percent_bus_gas() - p_percent_bus_elec())
        .expand_dims({"vehicleT": ["bus liq"]}, 1)
        .values
    )
    value.loc[:, ["bus elec"]] = (
        p_percent_bus_elec().expand_dims({"vehicleT": ["bus elec"]}, 1).values
    )
    value.loc[:, ["bus hib"]] = (
        p_percent_bus_hyb().expand_dims({"vehicleT": ["bus hib"]}, 1).values
    )
    value.loc[:, ["bus gas"]] = (
        p_percent_bus_gas().expand_dims({"vehicleT": ["bus gas"]}, 1).values
    )
    value.loc[:, ["train liq"]] = (
        (100 - p_percent_train_elec())
        .expand_dims({"vehicleT": ["train liq"]}, 1)
        .values
    )
    value.loc[:, ["train elec"]] = (
        p_percent_train_elec().expand_dims({"vehicleT": ["train elec"]}, 1).values
    )
    value.loc[:, ["LV hib"]] = (
        p_percent_lv_hyb().expand_dims({"vehicleT": ["LV hib"]}, 1).values
    )
    return value


@component.add(
    name="Activate policy inlandT",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_activate_policy_inlandt"},
)
def activate_policy_inlandt():
    """
    1 to set growth of alternative inland transportation, starting in T ini and ending in T fin with the desired share defined in policies, linear growth
    """
    return _ext_constant_activate_policy_inlandt()


_ext_constant_activate_policy_inlandt = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C171",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_activate_policy_inlandt",
)

_ext_constant_activate_policy_inlandt.add(
    "inputs_EU.xlsx", "SCEN1", "C171", {"scenarios": ["SCEN1"]}
)

_ext_constant_activate_policy_inlandt.add(
    "inputs_EU.xlsx", "SCEN2", "C171", {"scenarios": ["SCEN2"]}
)

_ext_constant_activate_policy_inlandt.add(
    "inputs_EU.xlsx", "SCEN3", "C171", {"scenarios": ["SCEN3"]}
)

_ext_constant_activate_policy_inlandt.add(
    "inputs_EU.xlsx", "SCEN4", "C171", {"scenarios": ["SCEN4"]}
)

_ext_constant_activate_policy_inlandt.add(
    "inputs_EU.xlsx", "User defined", "C171", {"scenarios": ["User defined"]}
)


@component.add(
    name="P percent LV elec",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_percent_lv_elec"},
)
def p_percent_lv_elec():
    """
    Policy of change of light cargo vehicles. Percent of LV electric in T fin relative to the total of Light Vehicles
    """
    return _ext_constant_p_percent_lv_elec()


_ext_constant_p_percent_lv_elec = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C185",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_percent_lv_elec",
)

_ext_constant_p_percent_lv_elec.add(
    "inputs_EU.xlsx", "SCEN1", "C185", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_percent_lv_elec.add(
    "inputs_EU.xlsx", "SCEN2", "C185", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_percent_lv_elec.add(
    "inputs_EU.xlsx", "SCEN3", "C185", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_percent_lv_elec.add(
    "inputs_EU.xlsx", "SCEN4", "C185", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_percent_lv_elec.add(
    "inputs_EU.xlsx", "User defined", "C185", {"scenarios": ["User defined"]}
)


@component.add(
    name="P percent LV hyb",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_percent_lv_hyb"},
)
def p_percent_lv_hyb():
    """
    Policy of change of light cargo vehicles. Desired percent of LV hibrid in T fin relative to the total Light Vehicles
    """
    return _ext_constant_p_percent_lv_hyb()


_ext_constant_p_percent_lv_hyb = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C186",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_percent_lv_hyb",
)

_ext_constant_p_percent_lv_hyb.add(
    "inputs_EU.xlsx", "SCEN1", "C186", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_percent_lv_hyb.add(
    "inputs_EU.xlsx", "SCEN2", "C186", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_percent_lv_hyb.add(
    "inputs_EU.xlsx", "SCEN3", "C186", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_percent_lv_hyb.add(
    "inputs_EU.xlsx", "SCEN4", "C186", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_percent_lv_hyb.add(
    "inputs_EU.xlsx", "User defined", "C186", {"scenarios": ["User defined"]}
)


@component.add(
    name="P percent bus elec",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_percent_bus_elec"},
)
def p_percent_bus_elec():
    """
    Policy of change of bus. Desired percent of bus electric in T fin relative to the total bus
    """
    return _ext_constant_p_percent_bus_elec()


_ext_constant_p_percent_bus_elec = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C188",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_percent_bus_elec",
)

_ext_constant_p_percent_bus_elec.add(
    "inputs_EU.xlsx", "SCEN1", "C188", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_percent_bus_elec.add(
    "inputs_EU.xlsx", "SCEN2", "C188", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_percent_bus_elec.add(
    "inputs_EU.xlsx", "SCEN3", "C188", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_percent_bus_elec.add(
    "inputs_EU.xlsx", "SCEN4", "C188", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_percent_bus_elec.add(
    "inputs_EU.xlsx", "User defined", "C188", {"scenarios": ["User defined"]}
)


@component.add(
    name="P percent bus gas",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_percent_bus_gas"},
)
def p_percent_bus_gas():
    """
    Policy of change of bus. Desired percent of bus gas in T fin relative to the total bus
    """
    return _ext_constant_p_percent_bus_gas()


_ext_constant_p_percent_bus_gas = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C190",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_percent_bus_gas",
)

_ext_constant_p_percent_bus_gas.add(
    "inputs_EU.xlsx", "SCEN1", "C190", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_percent_bus_gas.add(
    "inputs_EU.xlsx", "SCEN2", "C190", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_percent_bus_gas.add(
    "inputs_EU.xlsx", "SCEN3", "C190", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_percent_bus_gas.add(
    "inputs_EU.xlsx", "SCEN4", "C190", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_percent_bus_gas.add(
    "inputs_EU.xlsx", "User defined", "C190", {"scenarios": ["User defined"]}
)


@component.add(
    name="P percent bus hyb",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_percent_bus_hyb"},
)
def p_percent_bus_hyb():
    """
    Policy of change of bus. Desired percent of bus hibrid in T fin relative to the total of bus
    """
    return _ext_constant_p_percent_bus_hyb()


_ext_constant_p_percent_bus_hyb = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C189",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_percent_bus_hyb",
)

_ext_constant_p_percent_bus_hyb.add(
    "inputs_EU.xlsx", "SCEN1", "C189", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_percent_bus_hyb.add(
    "inputs_EU.xlsx", "SCEN2", "C189", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_percent_bus_hyb.add(
    "inputs_EU.xlsx", "SCEN3", "C189", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_percent_bus_hyb.add(
    "inputs_EU.xlsx", "SCEN4", "C189", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_percent_bus_hyb.add(
    "inputs_EU.xlsx", "User defined", "C189", {"scenarios": ["User defined"]}
)


@component.add(
    name="percents bus",
    units="Dmnl",
    subscripts=["scenarios", "vehicleT"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"percent_t_vehicles": 5},
)
def percents_bus():
    """
    percents of bus of inland transport sector realtive to all buses
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "vehicleT": _subscript_dict["vehicleT"],
        },
        ["scenarios", "vehicleT"],
    )
    value.loc[:, ["HV liq"]] = 0
    value.loc[:, ["HV hib"]] = 0
    value.loc[:, ["HV gas"]] = 0
    value.loc[:, ["LV liq"]] = 0
    value.loc[:, ["LV elec"]] = 0
    value.loc[:, ["LV gas"]] = 0
    value.loc[:, ["bus liq"]] = (
        percent_t_vehicles()
        .loc[:, "bus liq"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["bus liq"]}, 1)
        .values
    )
    value.loc[:, ["bus elec"]] = (
        percent_t_vehicles()
        .loc[:, "bus elec"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["bus elec"]}, 1)
        .values
    )
    value.loc[:, ["bus hib"]] = (
        percent_t_vehicles()
        .loc[:, "bus hib"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["bus hib"]}, 1)
        .values
    )
    value.loc[:, ["bus gas"]] = (
        percent_t_vehicles()
        .loc[:, "bus gas"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["bus gas"]}, 1)
        .values
    )
    value.loc[:, ["train liq"]] = 0
    value.loc[:, ["train elec"]] = 0
    value.loc[:, ["LV hib"]] = (
        percent_t_vehicles()
        .loc[:, "LV hib"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["LV hib"]}, 1)
        .values
    )
    return value


@component.add(
    name="percents train",
    units="Dmnl",
    subscripts=["scenarios", "vehicleT"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"percent_t_vehicles": 3},
)
def percents_train():
    """
    percents of trains of inland transport sector realtive to all trains
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "vehicleT": _subscript_dict["vehicleT"],
        },
        ["scenarios", "vehicleT"],
    )
    value.loc[:, ["HV liq"]] = 0
    value.loc[:, ["HV hib"]] = 0
    value.loc[:, ["HV gas"]] = 0
    value.loc[:, ["LV liq"]] = 0
    value.loc[:, ["LV elec"]] = 0
    value.loc[:, ["LV gas"]] = 0
    value.loc[:, ["bus liq"]] = 0
    value.loc[:, ["bus elec"]] = 0
    value.loc[:, ["bus hib"]] = 0
    value.loc[:, ["bus gas"]] = 0
    value.loc[:, ["train liq"]] = (
        percent_t_vehicles()
        .loc[:, "train liq"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["train liq"]}, 1)
        .values
    )
    value.loc[:, ["train elec"]] = (
        percent_t_vehicles()
        .loc[:, "train elec"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["train elec"]}, 1)
        .values
    )
    value.loc[:, ["LV hib"]] = (
        percent_t_vehicles()
        .loc[:, "LV hib"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["LV hib"]}, 1)
        .values
    )
    return value


@component.add(
    name="P percent HV hyb",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_percent_hv_hyb"},
)
def p_percent_hv_hyb():
    """
    Policy of change of heavy vehicles. Desired percent of HV hibrid in T fin relative to total Heavy Vehicles
    """
    return _ext_constant_p_percent_hv_hyb()


_ext_constant_p_percent_hv_hyb = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C183",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_percent_hv_hyb",
)

_ext_constant_p_percent_hv_hyb.add(
    "inputs_EU.xlsx", "SCEN1", "C183", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_percent_hv_hyb.add(
    "inputs_EU.xlsx", "SCEN2", "C183", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_percent_hv_hyb.add(
    "inputs_EU.xlsx", "SCEN3", "C183", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_percent_hv_hyb.add(
    "inputs_EU.xlsx", "SCEN4", "C183", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_percent_hv_hyb.add(
    "inputs_EU.xlsx", "User defined", "C183", {"scenarios": ["User defined"]}
)


@component.add(
    name="adapt var inlandT",
    units="Dmnl",
    subscripts=["scenarios", "vehicleT"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"aux_p_inland_transp": 1},
)
def adapt_var_inlandt():
    """
    Growth of percent of vehicles adapted to saturation and shorgate of energy
    """
    return aux_p_inland_transp()


@component.add(
    name="percents LV",
    units="Dmnl",
    subscripts=["scenarios", "vehicleT"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"percent_t_vehicles": 4},
)
def percents_lv():
    """
    percents of light cargo vehicles of inland transport sector realtive to all LV
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "vehicleT": _subscript_dict["vehicleT"],
        },
        ["scenarios", "vehicleT"],
    )
    value.loc[:, ["HV liq"]] = 0
    value.loc[:, ["HV hib"]] = 0
    value.loc[:, ["HV gas"]] = 0
    value.loc[:, ["LV liq"]] = (
        percent_t_vehicles()
        .loc[:, "LV liq"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["LV liq"]}, 1)
        .values
    )
    value.loc[:, ["LV elec"]] = (
        percent_t_vehicles()
        .loc[:, "LV elec"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["LV elec"]}, 1)
        .values
    )
    value.loc[:, ["LV gas"]] = (
        percent_t_vehicles()
        .loc[:, "LV gas"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["LV gas"]}, 1)
        .values
    )
    value.loc[:, ["bus liq"]] = 0
    value.loc[:, ["bus elec"]] = 0
    value.loc[:, ["bus hib"]] = 0
    value.loc[:, ["bus gas"]] = 0
    value.loc[:, ["train liq"]] = 0
    value.loc[:, ["train elec"]] = 0
    value.loc[:, ["LV hib"]] = (
        percent_t_vehicles()
        .loc[:, "LV hib"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["LV hib"]}, 1)
        .values
    )
    return value


@component.add(
    name="vehicles inlandT",
    units="vehicles",
    subscripts=["scenarios", "vehicleT"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "percent_t_vehicles": 1,
        "real_total_output_inland_transport": 1,
        "nx0_vehicles_per_xinland_t": 1,
    },
)
def vehicles_inlandt():
    """
    Estimation of the number of vehicles of inland transport sector by types, based on a constant ratio number ob vehicles per economic activity of the inland transport sector
    """
    return (
        (percent_t_vehicles() / 100)
        * real_total_output_inland_transport()
        * nx0_vehicles_per_xinland_t()
    )


@component.add(
    name="Efects shortage inlandT",
    units="Dmnl",
    subscripts=["scenarios", "vehicleT"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"effects_shortage_gas": 3, "effects_shortage_elec_on_ev": 3},
)
def efects_shortage_inlandt():
    """
    Efects of shortage of alternative fuels
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "vehicleT": _subscript_dict["vehicleT"],
        },
        ["scenarios", "vehicleT"],
    )
    value.loc[:, ["HV liq"]] = 1
    value.loc[:, ["HV hib"]] = 1
    value.loc[:, ["HV gas"]] = (
        effects_shortage_gas().expand_dims({"vehicleT": ["HV gas"]}, 1).values
    )
    value.loc[:, ["LV liq"]] = 1
    value.loc[:, ["LV elec"]] = (
        effects_shortage_elec_on_ev().expand_dims({"vehicleT": ["LV elec"]}, 1).values
    )
    value.loc[:, ["LV gas"]] = (
        effects_shortage_gas().expand_dims({"vehicleT": ["LV gas"]}, 1).values
    )
    value.loc[:, ["bus liq"]] = 1
    value.loc[:, ["bus elec"]] = (
        effects_shortage_elec_on_ev().expand_dims({"vehicleT": ["bus elec"]}, 1).values
    )
    value.loc[:, ["bus hib"]] = 1
    value.loc[:, ["bus gas"]] = (
        effects_shortage_gas().expand_dims({"vehicleT": ["bus gas"]}, 1).values
    )
    value.loc[:, ["train liq"]] = 1
    value.loc[:, ["train elec"]] = (
        effects_shortage_elec_on_ev()
        .expand_dims({"vehicleT": ["train elec"]}, 1)
        .values
    )
    value.loc[:, ["LV hib"]] = 1
    return value


@component.add(
    name="P percent LV gas",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_percent_lv_gas"},
)
def p_percent_lv_gas():
    """
    Policy of change of light cargo vehicles. Desired percent of LV gas in T fin relative to the total Light Vehicles
    """
    return _ext_constant_p_percent_lv_gas()


_ext_constant_p_percent_lv_gas = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C187",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_percent_lv_gas",
)

_ext_constant_p_percent_lv_gas.add(
    "inputs_EU.xlsx", "SCEN1", "C187", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_percent_lv_gas.add(
    "inputs_EU.xlsx", "SCEN2", "C187", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_percent_lv_gas.add(
    "inputs_EU.xlsx", "SCEN3", "C187", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_percent_lv_gas.add(
    "inputs_EU.xlsx", "SCEN4", "C187", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_percent_lv_gas.add(
    "inputs_EU.xlsx", "User defined", "C187", {"scenarios": ["User defined"]}
)


@component.add(
    name="percents HV",
    units="Dmnl",
    subscripts=["scenarios", "vehicleT"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"percent_t_vehicles": 3},
)
def percents_hv():
    """
    percents of heavy vehicles realtive to all HV.
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "vehicleT": _subscript_dict["vehicleT"],
        },
        ["scenarios", "vehicleT"],
    )
    value.loc[:, ["HV liq"]] = (
        percent_t_vehicles()
        .loc[:, "HV liq"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["HV liq"]}, 1)
        .values
    )
    value.loc[:, ["HV hib"]] = (
        percent_t_vehicles()
        .loc[:, "HV hib"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["HV hib"]}, 1)
        .values
    )
    value.loc[:, ["HV gas"]] = (
        percent_t_vehicles()
        .loc[:, "HV gas"]
        .reset_coords(drop=True)
        .expand_dims({"vehicleT": ["HV gas"]}, 1)
        .values
    )
    value.loc[:, ["LV liq"]] = 0
    value.loc[:, ["LV elec"]] = 0
    value.loc[:, ["LV gas"]] = 0
    value.loc[:, ["bus liq"]] = 0
    value.loc[:, ["bus elec"]] = 0
    value.loc[:, ["bus hib"]] = 0
    value.loc[:, ["bus gas"]] = 0
    value.loc[:, ["train liq"]] = 0
    value.loc[:, ["train elec"]] = 0
    value.loc[:, ["LV hib"]] = 0
    return value


@component.add(
    name="initial Xt inland",
    units="T$",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_xt_inland"},
)
def initial_xt_inland():
    """
    Economic activity of inland transport sector in the year of start of policies (2015 default) T$
    """
    return _ext_constant_initial_xt_inland()


_ext_constant_initial_xt_inland = ExtConstant(
    "inputs_EU.xlsx",
    "Transportation",
    "B79",
    {},
    _root,
    {},
    "_ext_constant_initial_xt_inland",
)


@component.add(
    name="NX bus inlandT",
    units="Mvehicles/Mdollar",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"n_vehicles_inland_t0": 4, "initial_xt_inland": 1},
)
def nx_bus_inlandt():
    """
    number of vehicles per unit of economic activity (e6 dollars) initial values in the year of initial policy (default 2015)
    """
    return (
        float(n_vehicles_inland_t0().loc["bus liq"])
        + float(n_vehicles_inland_t0().loc["bus hib"])
        + float(n_vehicles_inland_t0().loc["bus gas"])
        + float(n_vehicles_inland_t0().loc["bus elec"])
    ) / initial_xt_inland()


@component.add(
    name="NX HV inland T",
    units="vehicles/T$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"n_vehicles_inland_t0": 3, "initial_xt_inland": 1},
)
def nx_hv_inland_t():
    """
    number of vehicles per unit of economic activity (e12 dollars) initial values in the year of initial policy (default 2015)
    """
    return (
        float(n_vehicles_inland_t0().loc["HV liq"])
        + float(n_vehicles_inland_t0().loc["HV hib"])
        + float(n_vehicles_inland_t0().loc["HV gas"])
    ) / initial_xt_inland()


@component.add(
    name="NX LV inland T",
    units="vehicles/Tdollar",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"n_vehicles_inland_t0": 4, "initial_xt_inland": 1},
)
def nx_lv_inland_t():
    """
    number of vehicles per unit of economic activity (Tdollars) initial values in the year of initial policy (default 2015)
    """
    return (
        float(n_vehicles_inland_t0().loc["LV liq"])
        + float(n_vehicles_inland_t0().loc["LV elec"])
        + float(n_vehicles_inland_t0().loc["LV hib"])
        + float(n_vehicles_inland_t0().loc["LV gas"])
    ) / initial_xt_inland()


@component.add(
    name="N vehicles inland t0",
    units="vehicle",
    subscripts=["vehicleT"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_n_vehicles_inland_t0"},
)
def n_vehicles_inland_t0():
    """
    Initial number of vehicles in time TpolicyT, 2015 by default, vehicles 'International Energy Agency (2016), Energy Technology Perspectives 2016, OECD/IEA, Paris' No data for train vehicles
    """
    return _ext_constant_n_vehicles_inland_t0()


_ext_constant_n_vehicles_inland_t0 = ExtConstant(
    "inputs_EU.xlsx",
    "Transportation",
    "B12",
    {"vehicleT": ["HV liq"]},
    _root,
    {"vehicleT": _subscript_dict["vehicleT"]},
    "_ext_constant_n_vehicles_inland_t0",
)

_ext_constant_n_vehicles_inland_t0.add(
    "inputs_EU.xlsx", "Transportation", "B13", {"vehicleT": ["HV hib"]}
)

_ext_constant_n_vehicles_inland_t0.add(
    "inputs_EU.xlsx", "Transportation", "B14", {"vehicleT": ["HV gas"]}
)

_ext_constant_n_vehicles_inland_t0.add(
    "inputs_EU.xlsx", "Transportation", "B15", {"vehicleT": ["LV liq"]}
)

_ext_constant_n_vehicles_inland_t0.add(
    "inputs_EU.xlsx", "Transportation", "B16", {"vehicleT": ["LV elec"]}
)

_ext_constant_n_vehicles_inland_t0.add(
    "inputs_EU.xlsx", "Transportation", "B17", {"vehicleT": ["LV hib"]}
)

_ext_constant_n_vehicles_inland_t0.add(
    "inputs_EU.xlsx", "Transportation", "B18", {"vehicleT": ["LV gas"]}
)

_ext_constant_n_vehicles_inland_t0.add(
    "inputs_EU.xlsx", "Transportation", "B19", {"vehicleT": ["bus liq"]}
)

_ext_constant_n_vehicles_inland_t0.add(
    "inputs_EU.xlsx", "Transportation", "B21", {"vehicleT": ["bus elec"]}
)

_ext_constant_n_vehicles_inland_t0.add(
    "inputs_EU.xlsx", "Transportation", "B22", {"vehicleT": ["bus hib"]}
)

_ext_constant_n_vehicles_inland_t0.add(
    "inputs_EU.xlsx", "Transportation", "B20", {"vehicleT": ["bus gas"]}
)

_ext_constant_n_vehicles_inland_t0.add(
    "inputs_EU.xlsx", "Transportation", "B23", {"vehicleT": ["train liq"]}
)

_ext_constant_n_vehicles_inland_t0.add(
    "inputs_EU.xlsx", "Transportation", "B23", {"vehicleT": ["train elec"]}
)


@component.add(
    name="Energy initial inland transport",
    units="EJ",
    subscripts=["vehicleT"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_energy_initial_inland_transport"},
)
def energy_initial_inland_transport():
    """
    Initial energy consumed by the inland transport sector, before politics, TpolicyT (default 2015) data 'International Energy Agency (2016), Energy Technology Perspectives 2016, OECD/IEA,
    """
    return _ext_constant_energy_initial_inland_transport()


_ext_constant_energy_initial_inland_transport = ExtConstant(
    "inputs_EU.xlsx",
    "Transportation",
    "B62",
    {"vehicleT": ["HV liq"]},
    _root,
    {"vehicleT": _subscript_dict["vehicleT"]},
    "_ext_constant_energy_initial_inland_transport",
)

_ext_constant_energy_initial_inland_transport.add(
    "inputs_EU.xlsx", "Transportation", "B63", {"vehicleT": ["HV hib"]}
)

_ext_constant_energy_initial_inland_transport.add(
    "inputs_EU.xlsx", "Transportation", "B64", {"vehicleT": ["HV gas"]}
)

_ext_constant_energy_initial_inland_transport.add(
    "inputs_EU.xlsx", "Transportation", "B65", {"vehicleT": ["LV liq"]}
)

_ext_constant_energy_initial_inland_transport.add(
    "inputs_EU.xlsx", "Transportation", "B67", {"vehicleT": ["LV hib"]}
)

_ext_constant_energy_initial_inland_transport.add(
    "inputs_EU.xlsx", "Transportation", "C66", {"vehicleT": ["LV elec"]}
)

_ext_constant_energy_initial_inland_transport.add(
    "inputs_EU.xlsx", "Transportation", "B68", {"vehicleT": ["LV gas"]}
)

_ext_constant_energy_initial_inland_transport.add(
    "inputs_EU.xlsx", "Transportation", "B69", {"vehicleT": ["bus liq"]}
)

_ext_constant_energy_initial_inland_transport.add(
    "inputs_EU.xlsx", "Transportation", "C71", {"vehicleT": ["bus elec"]}
)

_ext_constant_energy_initial_inland_transport.add(
    "inputs_EU.xlsx", "Transportation", "B70", {"vehicleT": ["bus hib"]}
)

_ext_constant_energy_initial_inland_transport.add(
    "inputs_EU.xlsx", "Transportation", "B72", {"vehicleT": ["bus gas"]}
)

_ext_constant_energy_initial_inland_transport.add(
    "inputs_EU.xlsx", "Transportation", "B74", {"vehicleT": ["train liq"]}
)

_ext_constant_energy_initial_inland_transport.add(
    "inputs_EU.xlsx", "Transportation", "C75", {"vehicleT": ["train elec"]}
)


@component.add(
    name="energy per X t",
    units="EJ/T$",
    subscripts=["scenarios", "vehicleT"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "liquids_per_x_hv": 3,
        "saving_ratios_v": 11,
        "liquids_per_x_lv": 4,
        "liquids_per_x_bus": 4,
        "energy_per_x_train": 2,
    },
)
def energy_per_x_t():
    """
    Energy per T$ of economic activity of inland transport sector.
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "vehicleT": _subscript_dict["vehicleT"],
        },
        ["scenarios", "vehicleT"],
    )
    value.loc[:, ["HV liq"]] = liquids_per_x_hv() * float(
        saving_ratios_v().loc["HV liq"]
    )
    value.loc[:, ["HV hib"]] = liquids_per_x_hv() * float(
        saving_ratios_v().loc["HV hib"]
    )
    value.loc[:, ["HV gas"]] = liquids_per_x_hv() * float(
        saving_ratios_v().loc["HV gas"]
    )
    value.loc[:, ["LV liq"]] = liquids_per_x_lv() * float(
        saving_ratios_v().loc["LV liq"]
    )
    value.loc[:, ["LV elec"]] = liquids_per_x_lv() * float(
        saving_ratios_v().loc["LV elec"]
    )
    value.loc[:, ["LV hib"]] = liquids_per_x_lv() * float(
        saving_ratios_v().loc["LV hib"]
    )
    value.loc[:, ["LV gas"]] = liquids_per_x_lv() * float(
        saving_ratios_v().loc["LV gas"]
    )
    value.loc[:, ["bus liq"]] = liquids_per_x_bus() * float(
        saving_ratios_v().loc["bus liq"]
    )
    value.loc[:, ["bus hib"]] = liquids_per_x_bus() * float(
        saving_ratios_v().loc["bus hib"]
    )
    value.loc[:, ["bus gas"]] = liquids_per_x_bus() * float(
        saving_ratios_v().loc["bus gas"]
    )
    value.loc[:, ["train liq"]] = (
        (energy_per_x_train() * 0.8).expand_dims({"vehicleT": ["train liq"]}, 1).values
    )
    value.loc[:, ["train elec"]] = (
        (energy_per_x_train() * 0.2).expand_dims({"vehicleT": ["train elec"]}, 1).values
    )
    value.loc[:, ["bus elec"]] = liquids_per_x_bus() * float(
        saving_ratios_v().loc["bus elec"]
    )
    return value


@component.add(
    name="NX train inland T",
    units="vehicles/Tdollar",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"initial_xt_inland": 1},
)
def nx_train_inland_t():
    """
    no number of trains found in data, assume the number of trains is 1
    """
    return 1 / initial_xt_inland()


@component.add(
    name="H gas adapt growth",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"h_gas_initial_growth": 1},
)
def h_gas_adapt_growth():
    """
    Percent relative to total number of vehicles 2w+4w. growth of the percentage of gas vehicles is linear at first but adapted to the shortage of gas and slows down when the maximum is reached.
    """
    return h_gas_initial_growth()


@component.add(
    name="H hyb adapt growth",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"h_hyb_initial_growth": 1},
)
def h_hyb_adapt_growth():
    """
    Percent relative to total number of vehicles 2w+4w.growth of the percentage of hibrid vehicles is linear at first but slows down when the maximum is reached
    """
    return h_hyb_initial_growth()


@component.add(
    name="Activate policy H transp",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_activate_policy_h_transp"},
)
def activate_policy_h_transp():
    """
    1 to set growth of alternative households transportation based on desired share in 2050, 0 for BAU linear growth
    """
    return _ext_constant_activate_policy_h_transp()


_ext_constant_activate_policy_h_transp = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C170",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_activate_policy_h_transp",
)

_ext_constant_activate_policy_h_transp.add(
    "inputs_EU.xlsx", "SCEN1", "C170", {"scenarios": ["SCEN1"]}
)

_ext_constant_activate_policy_h_transp.add(
    "inputs_EU.xlsx", "SCEN2", "C170", {"scenarios": ["SCEN2"]}
)

_ext_constant_activate_policy_h_transp.add(
    "inputs_EU.xlsx", "SCEN3", "C170", {"scenarios": ["SCEN3"]}
)

_ext_constant_activate_policy_h_transp.add(
    "inputs_EU.xlsx", "SCEN4", "C170", {"scenarios": ["SCEN4"]}
)

_ext_constant_activate_policy_h_transp.add(
    "inputs_EU.xlsx", "User defined", "C170", {"scenarios": ["User defined"]}
)


@component.add(
    name="Initial energy intensity of households transport 2009",
    units="EJ/T$",
    subscripts=["final sources1"],
    comp_type="Constant",
    comp_subtype="Normal, External",
    depends_on={
        "__external__": "_ext_constant_initial_energy_intensity_of_households_transport_2009"
    },
)
def initial_energy_intensity_of_households_transport_2009():
    """
    Initial values of household trasnport intensity. Starting year = 2009, before that year alternative vehicles are neglictible
    """
    value = xr.DataArray(
        np.nan,
        {"final sources1": _subscript_dict["final sources1"]},
        ["final sources1"],
    )
    def_subs = xr.zeros_like(value, dtype=bool)
    def_subs.loc[["liquids"]] = True
    def_subs.loc[["gases"]] = True
    def_subs.loc[["electricity"]] = True
    value.values[
        def_subs.values
    ] = _ext_constant_initial_energy_intensity_of_households_transport_2009().values[
        def_subs.values
    ]
    value.loc[["solids"]] = 0
    value.loc[["heat"]] = 0
    return value


_ext_constant_initial_energy_intensity_of_households_transport_2009 = ExtConstant(
    "inputs_EU.xlsx",
    "Transportation",
    "B119",
    {"final sources1": ["liquids"]},
    _root,
    {"final sources1": _subscript_dict["final sources1"]},
    "_ext_constant_initial_energy_intensity_of_households_transport_2009",
)

_ext_constant_initial_energy_intensity_of_households_transport_2009.add(
    "inputs_EU.xlsx", "Transportation", "B121", {"final sources1": ["gases"]}
)

_ext_constant_initial_energy_intensity_of_households_transport_2009.add(
    "inputs_EU.xlsx", "Transportation", "B120", {"final sources1": ["electricity"]}
)


@component.add(
    name="H elec adapt growth",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"h_elec_initial_growth": 1},
)
def h_elec_adapt_growth():
    """
    Percent relative to total number of vehicles 2w+4w.growth of the percentage of EV vehicles is linear at first but adapted to the shortage of electricity and slows down when the maximum is reached
    """
    return h_elec_initial_growth()


@component.add(
    name="var IH E2",
    units="EJ/T$/yr",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "a1_coef_th": 1,
        "var_percents_h_vehicles": 2,
        "saving_ratios_v": 1,
        "saving_ratio_2we": 1,
        "a2_coef_th": 1,
    },
)
def var_ih_e2():
    """
    variation of the intensity of households transportation due of the change to electricity
    """
    return (
        a1_coef_th()
        * (
            var_percents_h_vehicles().loc[:, "elec 4wheels"].reset_coords(drop=True)
            / 100
        )
        * float(saving_ratios_v().loc["LV elec"])
        + a2_coef_th()
        * (
            var_percents_h_vehicles().loc[:, "elec 2wheels"].reset_coords(drop=True)
            / 100
        )
        * saving_ratio_2we()
    )


@component.add(
    name="var IH gas2",
    units="EJ/T$/yr",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"a1_coef_th": 1, "var_percents_h_vehicles": 1, "saving_ratios_v": 1},
)
def var_ih_gas2():
    """
    variation of the intensity of households transportation due of the change to gas
    """
    return (
        a1_coef_th()
        * (
            var_percents_h_vehicles().loc[:, "gas 4wheels"].reset_coords(drop=True)
            / 100
        )
        * float(saving_ratios_v().loc["LV gas"])
    )


@component.add(
    name="A1 coef tH",
    units="EJ/T$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"liq_4w": 1, "demand_h": 1, "percent_4w_liq": 1},
)
def a1_coef_th():
    """
    Coeficients for the calculation of variations of trasnport intensities
    """
    return liq_4w() / (demand_h() * (percent_4w_liq() / 100))


@component.add(
    name="var IH liq2",
    units="EJ/T$/yr",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"a1_coef_th": 2, "var_percents_h_vehicles": 3, "a2_coef_th": 1},
)
def var_ih_liq2():
    """
    variation of the intensity of households transportation due of the change in liquids
    """
    return (
        a1_coef_th()
        * (
            var_percents_h_vehicles().loc[:, "liq 4wheels"].reset_coords(drop=True)
            / 100
        )
        + a1_coef_th()
        * (
            var_percents_h_vehicles().loc[:, "hib 4wheels"].reset_coords(drop=True)
            / 100
        )
        + a2_coef_th()
        * (
            var_percents_h_vehicles().loc[:, "liq 2wheels"].reset_coords(drop=True)
            / 100
        )
    )


@component.add(
    name="Energy intensity of households transport",
    units="EJ/T$",
    subscripts=["scenarios", "final sources"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_energy_intensity_of_households_transport": 1},
    other_deps={
        "_integ_energy_intensity_of_households_transport": {
            "initial": {"initial_energy_intensity_of_households_transport_2009": 1},
            "step": {"variation_energy_intensity_of_households_transport": 1},
        }
    },
)
def energy_intensity_of_households_transport():
    return _integ_energy_intensity_of_households_transport()


_integ_energy_intensity_of_households_transport = Integ(
    lambda: variation_energy_intensity_of_households_transport().rename(
        {"final sources1": "final sources"}
    ),
    lambda: initial_energy_intensity_of_households_transport_2009()
    .rename({"final sources1": "final sources"})
    .expand_dims({"scenarios": _subscript_dict["scenarios"]}, 0),
    "_integ_energy_intensity_of_households_transport",
)


@component.add(
    name="H 2w elec adapt growth",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"h_2w_elec_initial_growth": 1},
)
def h_2w_elec_adapt_growth():
    """
    Percent relative to total number of vehicles 2w+4w. growth of the percentage of electric 2 wheelers vehicles is linear at first but slows down when the maximum is reached. No efects on the electricity shortage are noticed for these vehicles since their consumption is so low compared to others.
    """
    return h_2w_elec_initial_growth()


@component.add(
    name="Liq 4w",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_liq_4w"},
)
def liq_4w():
    """
    liquids userd in households 4 wheelers in the initial year of policy (2015 default) 45.9341
    """
    return _ext_constant_liq_4w()


_ext_constant_liq_4w = ExtConstant(
    "inputs_EU.xlsx", "Transportation", "B55", {}, _root, {}, "_ext_constant_liq_4w"
)


@component.add(
    name="percent 2w liq",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_percent_2w_liq"},
)
def percent_2w_liq():
    """
    Percent of 2wheelers of liquids in the initial year of policy (2015 default). percents relative to total number 4w+2w
    """
    return _ext_constant_percent_2w_liq()


_ext_constant_percent_2w_liq = ExtConstant(
    "inputs_EU.xlsx",
    "Transportation",
    "B30",
    {},
    _root,
    {},
    "_ext_constant_percent_2w_liq",
)


@component.add(
    name="percent 4w liq",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_percent_4w_liq"},
)
def percent_4w_liq():
    """
    Percent of 4wheelers of liquids in the initial year of policy (2015 default). percents relative to total number 4w+2w 0.658
    """
    return _ext_constant_percent_4w_liq()


_ext_constant_percent_4w_liq = ExtConstant(
    "inputs_EU.xlsx",
    "Transportation",
    "B26",
    {},
    _root,
    {},
    "_ext_constant_percent_4w_liq",
)


@component.add(
    name="N vehicles H",
    units="vehicles",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_n_vehicles_h"},
)
def n_vehicles_h():
    """
    Initial number of household vehicles in time 2015 vehicles 2w+4w 2476
    """
    return _ext_constant_n_vehicles_h()


_ext_constant_n_vehicles_h = ExtConstant(
    "inputs_EU.xlsx",
    "Transportation",
    "B10",
    {},
    _root,
    {},
    "_ext_constant_n_vehicles_h",
)


@component.add(
    name="Demand H",
    units="T$",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_demand_h"},
)
def demand_h():
    """
    Initial households economic demand in T dollars, in the year of start of alternative households vehicle policy (default 2015) 30.3 T$
    """
    return _ext_constant_demand_h()


_ext_constant_demand_h = ExtConstant(
    "inputs_EU.xlsx", "Transportation", "B81", {}, _root, {}, "_ext_constant_demand_h"
)


@component.add(
    name="ratio N veh Demand H",
    units="vehicles/T$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"n_vehicles_h": 1, "demand_h": 1},
)
def ratio_n_veh_demand_h():
    """
    Ration of number of vehicles by unit of household conomic demand, we assume that it is kept constant and variations are due to the change in the number of vehicles from one type to another
    """
    return n_vehicles_h() / demand_h()


@component.add(
    name="percents 2w H vehicles",
    units="Dmnl",
    subscripts=["scenarios", "Households vehicles"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"percents_h_vehicles": 6},
)
def percents_2w_h_vehicles():
    """
    Percent of electrical 2 wheeler as a percent of ONLY TWO WHEELERS
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "Households vehicles": _subscript_dict["Households vehicles"],
        },
        ["scenarios", "Households vehicles"],
    )
    value.loc[:, ["liq 2wheels"]] = (
        (
            percents_h_vehicles().loc[:, "liq 2wheels"].reset_coords(drop=True)
            / (
                percents_h_vehicles().loc[:, "elec 2wheels"].reset_coords(drop=True)
                + percents_h_vehicles().loc[:, "liq 2wheels"].reset_coords(drop=True)
            )
        )
        .expand_dims({"Households vehicles": ["liq 2wheels"]}, 1)
        .values
    )
    value.loc[:, ["elec 2wheels"]] = (
        (
            percents_h_vehicles().loc[:, "elec 2wheels"].reset_coords(drop=True)
            / (
                percents_h_vehicles().loc[:, "elec 2wheels"].reset_coords(drop=True)
                + percents_h_vehicles().loc[:, "liq 2wheels"].reset_coords(drop=True)
            )
        )
        .expand_dims({"Households vehicles": ["elec 2wheels"]}, 1)
        .values
    )
    value.loc[:, ["liq 4wheels"]] = 0
    value.loc[:, ["elec 4wheels"]] = 0
    value.loc[:, ["gas 4wheels"]] = 0
    value.loc[:, ["hib 4wheels"]] = 0
    return value


@component.add(
    name="percents 4w H vehicles",
    units="Dmnl",
    subscripts=["scenarios", "Households vehicles"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"percents_h_vehicles": 20},
)
def percents_4w_h_vehicles():
    """
    Percent of alternative 4 wheelers as a percent of ONLY 4 WHEELERS
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "Households vehicles": _subscript_dict["Households vehicles"],
        },
        ["scenarios", "Households vehicles"],
    )
    value.loc[:, ["liq 4wheels"]] = (
        (
            percents_h_vehicles().loc[:, "liq 4wheels"].reset_coords(drop=True)
            / (
                percents_h_vehicles().loc[:, "elec 4wheels"].reset_coords(drop=True)
                + percents_h_vehicles().loc[:, "hib 4wheels"].reset_coords(drop=True)
                + percents_h_vehicles().loc[:, "gas 4wheels"].reset_coords(drop=True)
                + percents_h_vehicles().loc[:, "liq 4wheels"].reset_coords(drop=True)
            )
        )
        .expand_dims({"Households vehicles": ["liq 4wheels"]}, 1)
        .values
    )
    value.loc[:, ["elec 4wheels"]] = (
        (
            percents_h_vehicles().loc[:, "elec 4wheels"].reset_coords(drop=True)
            / (
                percents_h_vehicles().loc[:, "elec 4wheels"].reset_coords(drop=True)
                + percents_h_vehicles().loc[:, "hib 4wheels"].reset_coords(drop=True)
                + percents_h_vehicles().loc[:, "gas 4wheels"].reset_coords(drop=True)
                + percents_h_vehicles().loc[:, "liq 4wheels"].reset_coords(drop=True)
            )
        )
        .expand_dims({"Households vehicles": ["elec 4wheels"]}, 1)
        .values
    )
    value.loc[:, ["hib 4wheels"]] = (
        (
            percents_h_vehicles().loc[:, "hib 4wheels"].reset_coords(drop=True)
            / (
                percents_h_vehicles().loc[:, "elec 4wheels"].reset_coords(drop=True)
                + percents_h_vehicles().loc[:, "hib 4wheels"].reset_coords(drop=True)
                + percents_h_vehicles().loc[:, "gas 4wheels"].reset_coords(drop=True)
                + percents_h_vehicles().loc[:, "liq 4wheels"].reset_coords(drop=True)
            )
        )
        .expand_dims({"Households vehicles": ["hib 4wheels"]}, 1)
        .values
    )
    value.loc[:, ["gas 4wheels"]] = (
        (
            percents_h_vehicles().loc[:, "gas 4wheels"].reset_coords(drop=True)
            / (
                percents_h_vehicles().loc[:, "elec 4wheels"].reset_coords(drop=True)
                + percents_h_vehicles().loc[:, "hib 4wheels"].reset_coords(drop=True)
                + percents_h_vehicles().loc[:, "gas 4wheels"].reset_coords(drop=True)
                + percents_h_vehicles().loc[:, "liq 4wheels"].reset_coords(drop=True)
            )
        )
        .expand_dims({"Households vehicles": ["gas 4wheels"]}, 1)
        .values
    )
    value.loc[:, ["liq 2wheels"]] = 0
    value.loc[:, ["elec 2wheels"]] = 0
    return value


@component.add(
    name="P percent 2w elec",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_percent_2w_elec"},
)
def p_percent_2w_elec():
    """
    Desired percent of electrical 2 wheelers in T fin our of TOTAL 2 WHEEL vehicles
    """
    return _ext_constant_p_percent_2w_elec()


_ext_constant_p_percent_2w_elec = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C180",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_percent_2w_elec",
)

_ext_constant_p_percent_2w_elec.add(
    "inputs_EU.xlsx", "SCEN1", "C180", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_percent_2w_elec.add(
    "inputs_EU.xlsx", "SCEN2", "C180", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_percent_2w_elec.add(
    "inputs_EU.xlsx", "SCEN3", "C180", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_percent_2w_elec.add(
    "inputs_EU.xlsx", "SCEN4", "C180", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_percent_2w_elec.add(
    "inputs_EU.xlsx", "User defined", "C180", {"scenarios": ["User defined"]}
)


@component.add(
    name="aux hist H",
    units="1/yr",
    subscripts=["scenarios", "Households vehicles"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"hist_var_percent_h": 8},
)
def aux_hist_h():
    """
    auxiliar variable to set the variation of liquid vehicles
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "Households vehicles": _subscript_dict["Households vehicles"],
        },
        ["scenarios", "Households vehicles"],
    )
    value.loc[:, ["liq 4wheels"]] = (
        (
            -hist_var_percent_h().loc[:, "hib 4wheels"].reset_coords(drop=True)
            - hist_var_percent_h().loc[:, "elec 4wheels"].reset_coords(drop=True)
            - hist_var_percent_h().loc[:, "gas 4wheels"].reset_coords(drop=True)
        )
        .expand_dims({"Households vehicles": ["liq 4wheels"]}, 1)
        .values
    )
    value.loc[:, ["hib 4wheels"]] = (
        hist_var_percent_h()
        .loc[:, "hib 4wheels"]
        .reset_coords(drop=True)
        .expand_dims({"Households vehicles": ["hib 4wheels"]}, 1)
        .values
    )
    value.loc[:, ["elec 4wheels"]] = (
        hist_var_percent_h()
        .loc[:, "elec 4wheels"]
        .reset_coords(drop=True)
        .expand_dims({"Households vehicles": ["elec 4wheels"]}, 1)
        .values
    )
    value.loc[:, ["liq 2wheels"]] = (
        (-hist_var_percent_h().loc[:, "elec 2wheels"].reset_coords(drop=True))
        .expand_dims({"Households vehicles": ["liq 2wheels"]}, 1)
        .values
    )
    value.loc[:, ["elec 2wheels"]] = (
        hist_var_percent_h()
        .loc[:, "elec 2wheels"]
        .reset_coords(drop=True)
        .expand_dims({"Households vehicles": ["elec 2wheels"]}, 1)
        .values
    )
    value.loc[:, ["gas 4wheels"]] = (
        hist_var_percent_h()
        .loc[:, "gas 4wheels"]
        .reset_coords(drop=True)
        .expand_dims({"Households vehicles": ["gas 4wheels"]}, 1)
        .values
    )
    return value


@component.add(
    name="P percent gas Hveh",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_percent_gas_hveh"},
)
def p_percent_gas_hveh():
    """
    Desired percent of gas vehicles (4 wheelers) in Tfin our of TOTAL 4 WHEEL vehicles
    """
    return _ext_constant_p_percent_gas_hveh()


_ext_constant_p_percent_gas_hveh = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C179",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_percent_gas_hveh",
)

_ext_constant_p_percent_gas_hveh.add(
    "inputs_EU.xlsx", "SCEN1", "C179", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_percent_gas_hveh.add(
    "inputs_EU.xlsx", "SCEN2", "C179", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_percent_gas_hveh.add(
    "inputs_EU.xlsx", "SCEN3", "C179", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_percent_gas_hveh.add(
    "inputs_EU.xlsx", "SCEN4", "C179", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_percent_gas_hveh.add(
    "inputs_EU.xlsx", "User defined", "C179", {"scenarios": ["User defined"]}
)


@component.add(
    name="P share 2wheelers",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_share_2wheelers"},
)
def p_share_2wheelers():
    """
    desired percent of all 2 WHEELS vehicles in T fin relative to total 2w+4w, initial value in 2015 is 0.34
    """
    return _ext_constant_p_share_2wheelers()


_ext_constant_p_share_2wheelers = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C181",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_share_2wheelers",
)

_ext_constant_p_share_2wheelers.add(
    "inputs_EU.xlsx", "SCEN1", "C181", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_share_2wheelers.add(
    "inputs_EU.xlsx", "SCEN2", "C181", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_share_2wheelers.add(
    "inputs_EU.xlsx", "SCEN3", "C181", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_share_2wheelers.add(
    "inputs_EU.xlsx", "SCEN4", "C181", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_share_2wheelers.add(
    "inputs_EU.xlsx", "User defined", "C181", {"scenarios": ["User defined"]}
)


@component.add(
    name="P percent hyb Hveh",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_percent_hyb_hveh"},
)
def p_percent_hyb_hveh():
    """
    Desired percent of hibrid vehicles (4 wheelers) in T fin our of TOTAL 4 WHEEL vehicles
    """
    return _ext_constant_p_percent_hyb_hveh()


_ext_constant_p_percent_hyb_hveh = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C178",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_percent_hyb_hveh",
)

_ext_constant_p_percent_hyb_hveh.add(
    "inputs_EU.xlsx", "SCEN1", "C178", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_percent_hyb_hveh.add(
    "inputs_EU.xlsx", "SCEN2", "C178", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_percent_hyb_hveh.add(
    "inputs_EU.xlsx", "SCEN3", "C178", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_percent_hyb_hveh.add(
    "inputs_EU.xlsx", "SCEN4", "C178", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_percent_hyb_hveh.add(
    "inputs_EU.xlsx", "User defined", "C178", {"scenarios": ["User defined"]}
)


@component.add(
    name="initial 2w percent",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_2w_percent"},
)
def initial_2w_percent():
    """
    2015 percent of 2 wheelers 0,332
    """
    return _ext_constant_initial_2w_percent()


_ext_constant_initial_2w_percent = ExtConstant(
    "inputs_EU.xlsx",
    "Transportation",
    "B33",
    {},
    _root,
    {},
    "_ext_constant_initial_2w_percent",
)


@component.add(
    name="share FEH over FED by final fuel",
    units="Dmnl",
    subscripts=["final sources1", "scenarios"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "share_feh_over_fed_oil": 1,
        "share_feh_over_fed_nat_gas": 1,
        "share_feh_over_fed_solid_bioe": 1,
        "share_feh_over_fed_coal": 1,
    },
)
def share_feh_over_fed_by_final_fuel():
    """
    Share FEH over FED by final fuel.
    """
    value = xr.DataArray(
        np.nan,
        {
            "final sources1": _subscript_dict["final sources1"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["final sources1", "scenarios"],
    )
    value.loc[["electricity"], :] = 0
    value.loc[["heat"], :] = 0
    value.loc[["liquids"], :] = share_feh_over_fed_oil()
    value.loc[["gases"], :] = share_feh_over_fed_nat_gas()
    value.loc[["solids"], :] = (
        share_feh_over_fed_coal() + share_feh_over_fed_solid_bioe()
    )
    return value


@component.add(
    name="share FEH over FED oil",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_feh_over_fed_oil"},
)
def share_feh_over_fed_oil():
    """
    Estimated share of FEH over FED for liquids (IEA, 2014 and own calculations). GET XLS CONSTANTS('inputs_EU.xlsx', 'Parameters', 'C65') FEH oil delayed[scenarios]/Required FED by fuel before heat correction[scenarios,liquids]
    """
    return _ext_constant_share_feh_over_fed_oil()


_ext_constant_share_feh_over_fed_oil = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C66",
    {},
    _root,
    {},
    "_ext_constant_share_feh_over_fed_oil",
)


@component.add(
    name="share FEH over FED coal",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_feh_over_fed_coal"},
)
def share_feh_over_fed_coal():
    """
    Estimated share of FEH over FED for coal solids (IEA, 2014 and own calculations). GET XLS CONSTANTS('inputs_EU.xlsx', 'Parameters', 'C67') FEH coal delayed[scenarios]/Required FED by fuel before heat correction[scenarios,solids]
    """
    return _ext_constant_share_feh_over_fed_coal()


_ext_constant_share_feh_over_fed_coal = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C68",
    {},
    _root,
    {},
    "_ext_constant_share_feh_over_fed_coal",
)


@component.add(
    name='"share FEH over FED nat. gas"',
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_feh_over_fed_nat_gas"},
)
def share_feh_over_fed_nat_gas():
    """
    Estimated share of FEH over FED for gases (IEA, 2014 and own calculations). GET XLS CONSTANTS('inputs_EU.xlsx', 'Parameters', 'C66') FEH gas delayed[scenarios]/Required FED by fuel before heat correction[scenarios,gases]
    """
    return _ext_constant_share_feh_over_fed_nat_gas()


_ext_constant_share_feh_over_fed_nat_gas = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C67",
    {},
    _root,
    {},
    "_ext_constant_share_feh_over_fed_nat_gas",
)


@component.add(
    name='"FED coal for heat-nc"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "required_fed_by_fuel_before_heat_correction": 1,
        "share_feh_over_fed_solid_bioe": 1,
        "share_feh_over_fed_by_final_fuel": 1,
        "efficiency_coal_for_heat_plants": 1,
        "share_heat_distribution_losses": 1,
    },
)
def fed_coal_for_heatnc():
    """
    Final energy demand (excluding distribution and generation losses) of non-commercial heat from coal.
    """
    return (
        required_fed_by_fuel_before_heat_correction()
        .loc[:, "solids"]
        .reset_coords(drop=True)
        * (
            share_feh_over_fed_by_final_fuel().loc["solids", :].reset_coords(drop=True)
            - share_feh_over_fed_solid_bioe()
        )
        * efficiency_coal_for_heat_plants()
        / (1 + share_heat_distribution_losses())
    )


@component.add(
    name="PES oil EJ delayed",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_pes_oil_ej_delayed": 1},
    other_deps={
        "_delayfixed_pes_oil_ej_delayed": {
            "initial": {},
            "step": {"pes_total_oil_ej_eu": 1},
        }
    },
)
def pes_oil_ej_delayed():
    """
    PES total oil extraction delayed.
    """
    return _delayfixed_pes_oil_ej_delayed()


_delayfixed_pes_oil_ej_delayed = DelayFixed(
    lambda: pes_total_oil_ej_eu(),
    lambda: 0.1,
    lambda: xr.DataArray(
        139.5, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    time_step,
    "_delayfixed_pes_oil_ej_delayed",
)


@component.add(
    name="Energy required for material consumption for EV batteries",
    units="EJ",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "materials_required_for_ev_batteries_mt": 1,
        "energy_cons_per_unit_of_material_cons_for_res_elec": 1,
        "kg_per_mt": 1,
        "mj_per_ej": 1,
    },
)
def energy_required_for_material_consumption_for_ev_batteries():
    """
    Energy required for material consumption for EV batteries.
    """
    return (
        materials_required_for_ev_batteries_mt()
        * energy_cons_per_unit_of_material_cons_for_res_elec()
        * kg_per_mt()
        / mj_per_ej()
    )


@component.add(
    name="effects shortage elec on EV",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_electricity": 2},
)
def effects_shortage_elec_on_ev():
    """
    The eventual scarcity of electricity would likely constrain the development of EVs. The proposed relationship avoids an abrupt limitation by introducing a range (1;0.8) in the electricity abundance that constrains the development of EVs.
    """
    return if_then_else(
        abundance_electricity() > 0.8,
        lambda: ((abundance_electricity() - 0.8) * 5) ** 2,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="effects shortage gas H veh",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_gases": 2},
)
def effects_shortage_gas_h_veh():
    """
    The eventual scarcity of gas would likely constrain the development of NGVs/GTLs. The proposed relationship avoids an abrupt limitation by introducing a range (1;0.8) in the gas abundance that constrains the development of NGVs/GTLs.
    """
    return if_then_else(
        abundance_gases() > 0.8,
        lambda: ((abundance_gases() - 0.8) * 5) ** 2,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name='"variation non-energy use"',
    units="EJ",
    subscripts=["final sources1", "scenarios"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "nonenergy_use_demand_by_final_fuel_ej": 3,
        "gdp_delayed_1yr": 3,
        "gdp_eu": 3,
    },
)
def variation_nonenergy_use():
    value = xr.DataArray(
        np.nan,
        {
            "final sources1": _subscript_dict["final sources1"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["final sources1", "scenarios"],
    )
    value.loc[["electricity"], :] = 0
    value.loc[["heat"], :] = 0
    value.loc[["liquids"], :] = (
        if_then_else(
            nonenergy_use_demand_by_final_fuel_ej()
            .loc[:, "liquids"]
            .reset_coords(drop=True)
            > 0.01,
            lambda: 0.461414 * (gdp_eu() - gdp_delayed_1yr()),
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        )
        .expand_dims({"final sources1": ["liquids"]}, 0)
        .values
    )
    value.loc[["gases"], :] = (
        if_then_else(
            nonenergy_use_demand_by_final_fuel_ej()
            .loc[:, "gases"]
            .reset_coords(drop=True)
            > 0.01,
            lambda: 0.123925 * (gdp_eu() - gdp_delayed_1yr()),
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        )
        .expand_dims({"final sources1": ["gases"]}, 0)
        .values
    )
    value.loc[["solids"], :] = (
        if_then_else(
            nonenergy_use_demand_by_final_fuel_ej()
            .loc[:, "solids"]
            .reset_coords(drop=True)
            > 0.01,
            lambda: 0.0797511 * (gdp_eu() - gdp_delayed_1yr()),
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        )
        .expand_dims({"final sources1": ["solids"]}, 0)
        .values
    )
    return value


@component.add(
    name="Number 2w",
    units="vehicles",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"number_vehicles_h": 2},
)
def number_2w():
    """
    total number of 2w vehicles househols
    """
    return number_vehicles_h().loc[:, "liq 2wheels"].reset_coords(
        drop=True
    ) + number_vehicles_h().loc[:, "elec 2wheels"].reset_coords(drop=True)


@component.add(
    name="Number 4w",
    units="vehicles",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"number_vehicles_h": 4},
)
def number_4w():
    """
    agregated number of 4w vehicles
    """
    return (
        number_vehicles_h().loc[:, "liq 4wheels"].reset_coords(drop=True)
        + number_vehicles_h().loc[:, "hib 4wheels"].reset_coords(drop=True)
        + number_vehicles_h().loc[:, "elec 4wheels"].reset_coords(drop=True)
        + number_vehicles_h().loc[:, "gas 4wheels"].reset_coords(drop=True)
    )


@component.add(
    name="Number all",
    units="vehicles",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"number_2w": 1, "number_4w": 1},
)
def number_all():
    """
    Total number of household vehicles 4w+2w
    """
    return number_2w() + number_4w()


@component.add(
    name="percent 4w",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"percents_h_vehicles": 4},
)
def percent_4w():
    """
    percentages of 4 wheels vehicles
    """
    return (
        percents_h_vehicles().loc[:, "liq 4wheels"].reset_coords(drop=True)
        + percents_h_vehicles().loc[:, "hib 4wheels"].reset_coords(drop=True)
        + percents_h_vehicles().loc[:, "elec 4wheels"].reset_coords(drop=True)
        + percents_h_vehicles().loc[:, "gas 4wheels"].reset_coords(drop=True)
    )


@component.add(
    name="saving ratio 2wE",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_saving_ratio_2we"},
)
def saving_ratio_2we():
    """
    saving ratio of electrical 2wheelers compared to gasoline 2 wheelers
    """
    return _ext_constant_saving_ratio_2we()


_ext_constant_saving_ratio_2we = ExtConstant(
    "inputs_EU.xlsx",
    "Transportation",
    "B92",
    {},
    _root,
    {},
    "_ext_constant_saving_ratio_2we",
)


@component.add(
    name="percent all",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"percent_2w": 1, "percent_4w": 1},
)
def percent_all():
    """
    Variable to check that the total percent is 1
    """
    return percent_2w() + percent_4w()


@component.add(
    name="percent 2w",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"percents_h_vehicles": 2},
)
def percent_2w():
    """
    percentages of 2 wheels and 3 wheels vehicles
    """
    return percents_h_vehicles().loc[:, "liq 2wheels"].reset_coords(
        drop=True
    ) + percents_h_vehicles().loc[:, "elec 2wheels"].reset_coords(drop=True)


@component.add(
    name='"share FED coal vs NRE heat-nc"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fed_coal_for_heatnc": 1, "fed_nre_for_heatnc": 1},
)
def share_fed_coal_vs_nre_heatnc():
    """
    Share coal vs non-renewable energy sources for non-commercial heat generation.
    """
    return zidz(fed_coal_for_heatnc(), fed_nre_for_heatnc())


@component.add(
    name='"share FED gas vs NRE heat-nc"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fed_nat_gas_for_heatnc": 1, "fed_nre_for_heatnc": 1},
)
def share_fed_gas_vs_nre_heatnc():
    """
    Share gas vs non-renewable energy sources for non-commercial heat generation.
    """
    return zidz(fed_nat_gas_for_heatnc(), fed_nre_for_heatnc())


@component.add(
    name='"FED NRE for heat-nc"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fed_coal_for_heatnc": 1,
        "fed_nat_gas_for_heatnc": 1,
        "fed_oil_for_heatnc": 1,
    },
)
def fed_nre_for_heatnc():
    return fed_coal_for_heatnc() + fed_nat_gas_for_heatnc() + fed_oil_for_heatnc()


@component.add(
    name='"share FED liquids vs NRE heat-nc"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fed_oil_for_heatnc": 1, "fed_nre_for_heatnc": 1},
)
def share_fed_liquids_vs_nre_heatnc():
    """
    Share liquids vs non-renewable energy sources for non-commercial heat generation.
    """
    return zidz(fed_oil_for_heatnc(), fed_nre_for_heatnc())


@component.add(
    name="Required FED by fuel",
    units="EJ",
    subscripts=["scenarios", "final sources1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "required_fed_by_fuel_before_heat_correction": 5,
        "ratio_fed_for_heatnc_vs_fed_for_heatcom": 1,
        "share_feh_over_fed_by_final_fuel": 3,
    },
)
def required_fed_by_fuel():
    """
    Required final energy demand by fuel after heat demand correction.
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "final sources1": _subscript_dict["final sources1"],
        },
        ["scenarios", "final sources1"],
    )
    value.loc[:, ["electricity"]] = (
        required_fed_by_fuel_before_heat_correction()
        .loc[:, "electricity"]
        .reset_coords(drop=True)
        .expand_dims({"final sources1": ["electricity"]}, 1)
        .values
    )
    value.loc[:, ["heat"]] = (
        (
            required_fed_by_fuel_before_heat_correction()
            .loc[:, "heat"]
            .reset_coords(drop=True)
            * (1 + ratio_fed_for_heatnc_vs_fed_for_heatcom())
        )
        .expand_dims({"final sources1": ["heat"]}, 1)
        .values
    )
    value.loc[:, ["liquids"]] = (
        (
            required_fed_by_fuel_before_heat_correction()
            .loc[:, "liquids"]
            .reset_coords(drop=True)
            * (
                1
                - share_feh_over_fed_by_final_fuel()
                .loc["liquids", :]
                .reset_coords(drop=True)
            )
        )
        .expand_dims({"final sources1": ["liquids"]}, 1)
        .values
    )
    value.loc[:, ["gases"]] = (
        (
            required_fed_by_fuel_before_heat_correction()
            .loc[:, "gases"]
            .reset_coords(drop=True)
            * (
                1
                - share_feh_over_fed_by_final_fuel()
                .loc["gases", :]
                .reset_coords(drop=True)
            )
        )
        .expand_dims({"final sources1": ["gases"]}, 1)
        .values
    )
    value.loc[:, ["solids"]] = (
        (
            required_fed_by_fuel_before_heat_correction()
            .loc[:, "solids"]
            .reset_coords(drop=True)
            * (
                1
                - share_feh_over_fed_by_final_fuel()
                .loc["solids", :]
                .reset_coords(drop=True)
            )
        )
        .expand_dims({"final sources1": ["solids"]}, 1)
        .values
    )
    return value


@component.add(
    name="BioE gen land marg available",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_peavail_potential_biofuels_marginal_lands": 2,
        "potential_peavail_biofuels_land_marg_ej": 1,
    },
)
def bioe_gen_land_marg_available():
    """
    Remaining potential available as given as a fraction of unity.
    """
    return zidz(
        max_peavail_potential_biofuels_marginal_lands()
        - potential_peavail_biofuels_land_marg_ej(),
        max_peavail_potential_biofuels_marginal_lands(),
    )


@component.add(
    name="Potential PEavail cellulosic biofuel EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_pe_cellulosic_biofuel_ej": 1,
        "conv_efficiency_from_npp_to_biofuels": 1,
    },
)
def potential_peavail_cellulosic_biofuel_ej():
    return potential_pe_cellulosic_biofuel_ej() * conv_efficiency_from_npp_to_biofuels()


@component.add(
    name="Potential PEavail total biofuels",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_peavail_biofuels_2gen_land_compet_ej": 1,
        "potential_peavail_biofuels_prod_3gen_ej": 1,
        "potential_peavail_biofuels_land_marg_ej": 1,
        "potential_peavail_cellulosic_biofuel_ej": 1,
    },
)
def potential_peavail_total_biofuels():
    return (
        potential_peavail_biofuels_2gen_land_compet_ej()
        + potential_peavail_biofuels_prod_3gen_ej()
        + potential_peavail_biofuels_land_marg_ej()
        + potential_peavail_cellulosic_biofuel_ej()
    )


@component.add(
    name="Biofuels 3gen land compet available",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_land_compet_biofuels_2gen": 2, "land_compet_biofuels_3gen_mha": 1},
)
def biofuels_3gen_land_compet_available():
    """
    Remaining potential land available (dedicated to 2nd generation) as given as a fraction of unity. We assume that no new land starts directly to produce biofuels 3rd generation biofuels.
    """
    return (
        max_land_compet_biofuels_2gen() - land_compet_biofuels_3gen_mha()
    ) / max_land_compet_biofuels_2gen()


@component.add(
    name="FES total biofuels production EJ 2",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_liquids_ej": 1, "potential_peavail_total_biofuels": 1},
)
def fes_total_biofuels_production_ej_2():
    """
    Final energy supply total biofuels liquids production. Equivalent to "FES total biofuels production EJ" but obtained aggregately to estimate the "share biofuels overcapacity".
    """
    return np.minimum(ped_liquids_ej(), potential_peavail_total_biofuels())


@component.add(
    name='"FES total biofuels production Mb/d"',
    units="Mb/d",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fes_total_biofuels_production_ej": 1, "mbd_per_ejyear": 1},
)
def fes_total_biofuels_production_mbd():
    """
    Final energy supply total biofuels liquids production.
    """
    return fes_total_biofuels_production_ej() * mbd_per_ejyear()


@component.add(
    name="PEavail biofuels 2gen land compet EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_peavail_biofuels_2gen_land_compet_ej": 1,
        "share_biofuels_overcapacity": 1,
    },
)
def peavail_biofuels_2gen_land_compet_ej():
    """
    Primary energy available of biofuels from dedicated crops (2nd generation).
    """
    return potential_peavail_biofuels_2gen_land_compet_ej() * (
        1 - share_biofuels_overcapacity()
    )


@component.add(
    name="PEavail biofuels 3gen land compet EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_peavail_biofuels_prod_3gen_ej": 1,
        "share_biofuels_overcapacity": 1,
    },
)
def peavail_biofuels_3gen_land_compet_ej():
    """
    Primary energy available of biofuels from dedicated crops (3rd generation).
    """
    return potential_peavail_biofuels_prod_3gen_ej() * (
        1 - share_biofuels_overcapacity()
    )


@component.add(
    name="PEavail biofuels land marg EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_peavail_biofuels_land_marg_ej": 1,
        "share_biofuels_overcapacity": 1,
    },
)
def peavail_biofuels_land_marg_ej():
    """
    Total annual biofuel production in marginal lands.
    """
    return potential_peavail_biofuels_land_marg_ej() * (
        1 - share_biofuels_overcapacity()
    )


@component.add(
    name="PE biofuels land marg EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "peavail_biofuels_land_marg_ej": 1,
        "conv_efficiency_from_npp_to_biofuels": 1,
    },
)
def pe_biofuels_land_marg_ej():
    """
    Total annual primary energy biomass for biofuel production in marginal lands.
    """
    return peavail_biofuels_land_marg_ej() / conv_efficiency_from_npp_to_biofuels()


@component.add(
    name='"PE biofuels prod 2gen+3gen EJ"',
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "peavail_biofuels_2gen_land_compet_ej": 1,
        "peavail_biofuels_3gen_land_compet_ej": 1,
        "conv_efficiency_from_npp_to_biofuels": 1,
    },
)
def pe_biofuels_prod_2gen3gen_ej():
    """
    Total annual primary energy biomass for biofuel production (2nd and 3rd generation) in marginal lands.
    """
    return (
        peavail_biofuels_2gen_land_compet_ej() + peavail_biofuels_3gen_land_compet_ej()
    ) / conv_efficiency_from_npp_to_biofuels()


@component.add(
    name="PE biomass for biofuels production EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pe_biofuels_land_marg_ej": 1,
        "pe_cellulosic_biofuel_ej": 1,
        "pe_biofuels_prod_2gen3gen_ej": 1,
    },
)
def pe_biomass_for_biofuels_production_ej():
    """
    Primary energy of biomass for biofuels production.
    """
    return (
        pe_biofuels_land_marg_ej()
        + pe_cellulosic_biofuel_ej()
        + pe_biofuels_prod_2gen3gen_ej()
    )


@component.add(
    name="PE cellulosic biofuel EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_pe_cellulosic_biofuel_ej": 1,
        "share_biofuels_overcapacity": 1,
    },
)
def pe_cellulosic_biofuel_ej():
    """
    Annual primary energy biomass used for cellulosic biofuels.
    """
    return potential_pe_cellulosic_biofuel_ej() * (1 - share_biofuels_overcapacity())


@component.add(
    name="Max PEavail biofuels potential",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_peavail_potential_bioe_residues_for_cellulosic_biofuels": 1,
        "max_peavail_potential_biofuels_land_compet": 1,
        "max_peavail_potential_biofuels_marginal_lands": 1,
    },
)
def max_peavail_biofuels_potential():
    """
    Maximum biofuels potential (primary energy) available.
    """
    return (
        max_peavail_potential_bioe_residues_for_cellulosic_biofuels()
        + max_peavail_potential_biofuels_land_compet()
        + max_peavail_potential_biofuels_marginal_lands()
    )


@component.add(
    name="start year biofuels land marg",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_start_year_biofuels_land_marg"},
)
def start_year_biofuels_land_marg():
    """
    First year when the technology "biofuels land marg" is available.
    """
    return _ext_constant_start_year_biofuels_land_marg()


_ext_constant_start_year_biofuels_land_marg = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F45",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_year_biofuels_land_marg",
)

_ext_constant_start_year_biofuels_land_marg.add(
    "inputs_EU.xlsx", "SCEN1", "F45", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_year_biofuels_land_marg.add(
    "inputs_EU.xlsx", "SCEN2", "F45", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_year_biofuels_land_marg.add(
    "inputs_EU.xlsx", "SCEN3", "F45", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_year_biofuels_land_marg.add(
    "inputs_EU.xlsx", "SCEN4", "F45", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_year_biofuels_land_marg.add(
    "inputs_EU.xlsx", "User defined", "F45", {"scenarios": ["User defined"]}
)


@component.add(
    name="Land required biofuels land marg",
    units="MHa/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_peavail_biofuels_land_marg_ej": 1,
        "land_occupation_ratio_biofuels_marg_land": 1,
        "conv_efficiency_from_npp_to_biofuels": 1,
    },
)
def land_required_biofuels_land_marg():
    """
    Marginal lands occupied by biofuels.
    """
    return (
        potential_peavail_biofuels_land_marg_ej()
        * land_occupation_ratio_biofuels_marg_land()
        / conv_efficiency_from_npp_to_biofuels()
    )


@component.add(
    name="share biofuels overcapacity",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_peavail_total_biofuels": 2,
        "fes_total_biofuels_production_ej_2": 1,
    },
)
def share_biofuels_overcapacity():
    return zidz(
        potential_peavail_total_biofuels() - fes_total_biofuels_production_ej_2(),
        potential_peavail_total_biofuels(),
    )


@component.add(
    name="Land occupation ratio biofuels marg land",
    units="MHa/EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_land_occupation_ratio_biofuels_marg_land"
    },
)
def land_occupation_ratio_biofuels_marg_land():
    """
    Field et al. (2008) found that 27 EJ of NPP can be extracted from 386 MHa of marginal lands. So, the land occupation ratio would be 386 MHa/27 EJ, i.e. 14.3 MHa/EJ NPP.
    """
    return _ext_constant_land_occupation_ratio_biofuels_marg_land()


_ext_constant_land_occupation_ratio_biofuels_marg_land = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C62",
    {},
    _root,
    {},
    "_ext_constant_land_occupation_ratio_biofuels_marg_land",
)


@component.add(
    name="PEavail cellulosic biofuel EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pe_cellulosic_biofuel_ej": 1,
        "efficiency_bioe_residues_to_cellulosic_liquids": 1,
    },
)
def peavail_cellulosic_biofuel_ej():
    """
    Cellulosic biofuels production from bioenergy-residues.
    """
    return pe_cellulosic_biofuel_ej() * efficiency_bioe_residues_to_cellulosic_liquids()


@component.add(
    name="start production biofuels",
    units="ktoe/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_start_production_biofuels",
        "__lookup__": "_ext_lookup_start_production_biofuels",
    },
)
def start_production_biofuels(x, final_subs=None):
    """
    Exogenous start production scenario from the year "start year biofuels land marg". It mimics the biofuel 2nd generation deployment from the year 2000.
    """
    return _ext_lookup_start_production_biofuels(x, final_subs)


_ext_lookup_start_production_biofuels = ExtLookup(
    "inputs_EU.xlsx",
    "Parameters",
    "28",
    "B29",
    {},
    _root,
    {},
    "_ext_lookup_start_production_biofuels",
)


@component.add(
    name="Additional PE production of bioenergy for biofuels",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pe_biomass_for_biofuels_production_ej": 1,
        "oil_liquids_saved_by_biofuels_ej": 1,
    },
)
def additional_pe_production_of_bioenergy_for_biofuels():
    """
    Additional primary energy demand of bioenergy (NPP) for biofuels in relation to the PEavail. We assume than 1 unit of energy of biofuels substitutes 1 unit of energy of oil.
    """
    return pe_biomass_for_biofuels_production_ej() - oil_liquids_saved_by_biofuels_ej()


@component.add(
    name="Oil liquids saved by biofuels EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fes_total_biofuels_production_ej": 1},
)
def oil_liquids_saved_by_biofuels_ej():
    """
    Oil liquids saved by biofuels.
    """
    return fes_total_biofuels_production_ej()


@component.add(
    name="Efficiency bioE residues to cellulosic liquids",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"conv_efficiency_from_npp_to_biofuels": 1},
)
def efficiency_bioe_residues_to_cellulosic_liquids():
    """
    Efficiency of the transformation from bioenergy residues to cellulosic liquids. We assume it is the same efficiency than for the conversion from biomass to 2nd generation biofuels.
    """
    return xr.DataArray(
        conv_efficiency_from_npp_to_biofuels(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    )


@component.add(
    name="Conv efficiency from NPP to biofuels",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_conv_efficiency_from_npp_to_biofuels"},
)
def conv_efficiency_from_npp_to_biofuels():
    """
    Conversion efficiency from net primary productivity (NPP) of biomass to biofuels of 15%. Ref: de Castro & Carpintero (2014).
    """
    return _ext_constant_conv_efficiency_from_npp_to_biofuels()


_ext_constant_conv_efficiency_from_npp_to_biofuels = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C61",
    {},
    _root,
    {},
    "_ext_constant_conv_efficiency_from_npp_to_biofuels",
)


@component.add(
    name="PED NRE Liquids",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_liquids_ej": 1, "fes_total_biofuels_production_ej": 1},
)
def ped_nre_liquids():
    """
    Primary energy demand of non-renewable energy for the production of liquids.
    """
    return np.maximum(0, ped_liquids_ej() - fes_total_biofuels_production_ej())


@component.add(
    name='"Potential FES CTL+GTL EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ctl_potential_production": 1, "gtl_potential_production": 1},
)
def potential_fes_ctlgtl_ej():
    return ctl_potential_production() + gtl_potential_production()


@component.add(
    name="TFEC RES delayed 1yr",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_tfec_res_delayed_1yr": 1},
    other_deps={
        "_delayfixed_tfec_res_delayed_1yr": {"initial": {}, "step": {"tfec_res_ej": 1}}
    },
)
def tfec_res_delayed_1yr():
    return _delayfixed_tfec_res_delayed_1yr()


_delayfixed_tfec_res_delayed_1yr = DelayFixed(
    lambda: tfec_res_ej(),
    lambda: 1,
    lambda: xr.DataArray(
        4.209, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    time_step,
    "_delayfixed_tfec_res_delayed_1yr",
)


@component.add(
    name='"FES CTL+GTL EJ"',
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_nre_liquids": 1, "potential_fes_ctlgtl_ej": 1},
)
def fes_ctlgtl_ej():
    """
    CTL and GTL production.
    """
    return np.minimum(ped_nre_liquids(), potential_fes_ctlgtl_ej())


@component.add(
    name="TPES RES delayed 1yr",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_tpes_res_delayed_1yr": 1},
    other_deps={
        "_delayfixed_tpes_res_delayed_1yr": {
            "initial": {},
            "step": {"tpe_from_res_ej": 1},
        }
    },
)
def tpes_res_delayed_1yr():
    return _delayfixed_tpes_res_delayed_1yr()


_delayfixed_tpes_res_delayed_1yr = DelayFixed(
    lambda: tpe_from_res_ej(),
    lambda: 1,
    lambda: xr.DataArray(
        5.301, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    time_step,
    "_delayfixed_tpes_res_delayed_1yr",
)


@component.add(
    name="Annual TPES RES growth rate",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"tpe_from_res_ej": 1, "tpes_res_delayed_1yr": 1},
)
def annual_tpes_res_growth_rate():
    return -1 + tpe_from_res_ej() / tpes_res_delayed_1yr()


@component.add(
    name='"PED nat. gas EJ"',
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_gases": 1, "pes_biogas_for_tfc": 1},
)
def ped_nat_gas_ej():
    """
    Primary energy demand of natural (fossil) gas.
    """
    return np.maximum(0, ped_gases() - pes_biogas_for_tfc())


@component.add(
    name="Annual share RES vs TFEC growth rate",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_res_vs_tfec": 1, "share_res_vs_tfec_delayed_1yr": 1},
)
def annual_share_res_vs_tfec_growth_rate():
    return -1 + share_res_vs_tfec() / share_res_vs_tfec_delayed_1yr()


@component.add(
    name="Annual share RES vs TPES growth rate",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_res_vs_tpes": 1, "share_res_vs_tpes_delayed_1yr": 1},
)
def annual_share_res_vs_tpes_growth_rate():
    return -1 + share_res_vs_tpes() / share_res_vs_tpes_delayed_1yr()


@component.add(
    name="share RES vs TPES delayed 1yr",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_share_res_vs_tpes_delayed_1yr": 1},
    other_deps={
        "_delayfixed_share_res_vs_tpes_delayed_1yr": {
            "initial": {},
            "step": {"share_res_vs_tpes": 1},
        }
    },
)
def share_res_vs_tpes_delayed_1yr():
    return _delayfixed_share_res_vs_tpes_delayed_1yr()


_delayfixed_share_res_vs_tpes_delayed_1yr = DelayFixed(
    lambda: share_res_vs_tpes(),
    lambda: 1,
    lambda: xr.DataArray(
        0.123, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    time_step,
    "_delayfixed_share_res_vs_tpes_delayed_1yr",
)


@component.add(
    name="GTL production",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gtl_potential_production": 1, "share_ctlgtl_overcapacity": 1},
)
def gtl_production():
    """
    GTL production.
    """
    return gtl_potential_production() * (1 - share_ctlgtl_overcapacity())


@component.add(
    name="PES biogas for TFC",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_gases": 1, "potential_pes_biogas_for_tfc": 1},
)
def pes_biogas_for_tfc():
    """
    Primary energy supply biogas for total final consumption.
    """
    return np.minimum(ped_gases(), potential_pes_biogas_for_tfc())


@component.add(
    name='"share CTL+GTL overcapacity"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"potential_fes_ctlgtl_ej": 2, "fes_ctlgtl_ej": 1},
)
def share_ctlgtl_overcapacity():
    return zidz(potential_fes_ctlgtl_ej() - fes_ctlgtl_ej(), potential_fes_ctlgtl_ej())


@component.add(
    name="share RES vs TFEC delayed 1yr",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_share_res_vs_tfec_delayed_1yr": 1},
    other_deps={
        "_delayfixed_share_res_vs_tfec_delayed_1yr": {
            "initial": {},
            "step": {"share_res_vs_tfec": 1},
        }
    },
)
def share_res_vs_tfec_delayed_1yr():
    return _delayfixed_share_res_vs_tfec_delayed_1yr()


_delayfixed_share_res_vs_tfec_delayed_1yr = DelayFixed(
    lambda: share_res_vs_tfec(),
    lambda: 1,
    lambda: xr.DataArray(
        0.1614, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    time_step,
    "_delayfixed_share_res_vs_tfec_delayed_1yr",
)


@component.add(
    name='"PED nat. gas for GTL EJ"',
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gtl_production": 1, "gtl_efficiency": 1},
)
def ped_nat_gas_for_gtl_ej():
    """
    Demand of gas for CTL.
    """
    return gtl_production() / gtl_efficiency()


@component.add(
    name="max unconv gas growth extraction",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "selection_constraint_extraction_unconv_gas": 1,
        "time_step": 2,
        "scarcity_conv_gas_stock": 1,
        "p_constraint_growth_extraction_unconv_gas": 1,
        "userdefined_extraction_growth_unconv_gas": 1,
        "time": 1,
    },
)
def max_unconv_gas_growth_extraction():
    """
    Constraint to maximum annual unconventional gas extraction (%). This constraint is affected by the relative scarcity of conventional vs unconventional resource (priority to conventional resource to cover the demand while the maximum extraction level of energy/time is not reached).
    """
    return np.maximum(
        0,
        1
        + if_then_else(
            selection_constraint_extraction_unconv_gas() == 1,
            lambda: p_constraint_growth_extraction_unconv_gas()
            * time_step()
            * scarcity_conv_gas_stock(),
            lambda: xr.DataArray(
                userdefined_extraction_growth_unconv_gas(time()) * time_step(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
        ),
    )


@component.add(
    name="PED coal for CTL EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ctl_production": 1, "ctl_efficiency": 1},
)
def ped_coal_for_ctl_ej():
    """
    Demand of coal for CTL.
    """
    return ctl_production() / ctl_efficiency()


@component.add(
    name="Annual TFEC RES growth rate",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"tfec_res_ej": 1, "tfec_res_delayed_1yr": 1},
)
def annual_tfec_res_growth_rate():
    return -1 + tfec_res_ej() / tfec_res_delayed_1yr()


@component.add(
    name="PED total oil EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_nre_liquids": 1, "fes_ctlgtl_ej": 1, "oil_refinery_gains_ej": 1},
)
def ped_total_oil_ej():
    """
    Primary energy demand of total oil (conventional and unconventional).
    """
    return np.maximum(0, ped_nre_liquids() - fes_ctlgtl_ej() - oil_refinery_gains_ej())


@component.add(
    name="CTL production",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ctl_potential_production": 1, "share_ctlgtl_overcapacity": 1},
)
def ctl_production():
    """
    CTL production.
    """
    return ctl_potential_production() * (1 - share_ctlgtl_overcapacity())


@component.add(
    name='"Total FE real supply RES for heat-nc EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_real_generation_res_heatnc_ej": 1},
)
def total_fe_real_supply_res_for_heatnc_ej():
    """
    Total final energy supply delivered by RES for non-commercial heat.
    """
    return sum(
        fe_real_generation_res_heatnc_ej().rename({"RES heat": "RES heat!"}),
        dim=["RES heat!"],
    )


@component.add(
    name="real extraction conv oil emissions relevant EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_extraction_conv_oil_ej": 1,
        "nonenergy_use_demand_by_final_fuel_ej": 1,
        "share_conv_vs_total_oil_extraction_eu": 1,
    },
)
def real_extraction_conv_oil_emissions_relevant_ej():
    """
    Extraction of emission-relevant conventional oil, i.e. excepting the resource used for non-energy uses. We assume conventional and unconventional resource are used for non-energy uses following the same share as for their relative extraction.
    """
    return np.maximum(
        0,
        real_extraction_conv_oil_ej()
        - nonenergy_use_demand_by_final_fuel_ej()
        .loc[:, "liquids"]
        .reset_coords(drop=True)
        * share_conv_vs_total_oil_extraction_eu(),
    )


@component.add(
    name='"new RES capacity for heat-nc TW"',
    units="TW/Year",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 3,
        "historic_res_capacity_for_heatnc": 2,
        "adapt_growth_res_for_heatnc": 1,
        "installed_capacity_res_heatnc_tw": 1,
        "remaining_potential_constraint_on_new_res_heat_capacity": 1,
        "abundance_res_heatnc2": 1,
    },
)
def new_res_capacity_for_heatnc_tw():
    """
    New annual installed capacity of RES technologies for non-commercial heat.
    """
    return (
        if_then_else(
            time() < 2013,
            lambda: (
                historic_res_capacity_for_heatnc(integer(time() + 1))
                - historic_res_capacity_for_heatnc(integer(time()))
            ).expand_dims({"scenarios": _subscript_dict["scenarios"]}, 1),
            lambda: adapt_growth_res_for_heatnc()
            * installed_capacity_res_heatnc_tw()
            * remaining_potential_constraint_on_new_res_heat_capacity(),
        )
        * abundance_res_heatnc2()
    )


@component.add(
    name='"Annual variation non-energy use"',
    units="EJ",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 3, "variation_nonenergy_use": 1, "historic_nonenergy_use": 2},
)
def annual_variation_nonenergy_use():
    """
    Annual variation non-energy use by final fuel.
    """
    return if_then_else(
        time() > 2009,
        lambda: variation_nonenergy_use().rename({"final sources1": "final sources"}),
        lambda: (
            historic_nonenergy_use(integer(time() + 1)).rename(
                {"final sources1": "final sources"}
            )
            - historic_nonenergy_use(integer(time())).rename(
                {"final sources1": "final sources"}
            )
        ).expand_dims({"scenarios": _subscript_dict["scenarios"]}, 1),
    ).transpose("scenarios", "final sources")


@component.add(
    name="real extraction conv gas emissions relevant EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_extraction_conv_gas_ej": 1,
        "ped_nat_gas_for_gtl_ej": 1,
        "nonenergy_use_demand_by_final_fuel_ej": 1,
        "share_conv_vs_total_gas_extraction_eu": 1,
    },
)
def real_extraction_conv_gas_emissions_relevant_ej():
    """
    Extraction of emission-relevant conventional gas, i.e. excepting the resource used to produce GTL and for non-energy uses. We assume conventional and unconventional resource are used to produce GTL and for non-energy uses following the same share as for their relative extraction.
    """
    return np.maximum(
        0,
        real_extraction_conv_gas_ej()
        - (
            ped_nat_gas_for_gtl_ej()
            + nonenergy_use_demand_by_final_fuel_ej()
            .loc[:, "gases"]
            .reset_coords(drop=True)
        )
        * share_conv_vs_total_gas_extraction_eu(),
    )


@component.add(
    name='"PES RES for heat-nc by techn"',
    units="EJ",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_real_generation_res_heatnc_ej": 1, "efficiency_res_heat": 1},
)
def pes_res_for_heatnc_by_techn():
    """
    Primary energy supply of RES technologies for non-commercial heat.
    """
    return fe_real_generation_res_heatnc_ej() / efficiency_res_heat()


@component.add(
    name="FES NRE for heat",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fes_heatcom_fossil_fuels_chp_plants_ej": 1,
        "fes_heat_from_coal": 1,
        "fes_heat_from_nat_gas": 1,
        "fes_heat_from_oil": 1,
        "fes_heatcom_nuclear_chp_plants_ej": 1,
    },
)
def fes_nre_for_heat():
    """
    Heat from non-renewable energy resources.
    """
    return (
        fes_heatcom_fossil_fuels_chp_plants_ej()
        + fes_heat_from_coal()
        + fes_heat_from_nat_gas()
        + fes_heat_from_oil()
        + fes_heatcom_nuclear_chp_plants_ej()
    )


@component.add(
    name='"installed capacity RES heat-nc TW"',
    units="TW",
    subscripts=["RES heat", "scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_installed_capacity_res_heatnc_tw": 1},
    other_deps={
        "_integ_installed_capacity_res_heatnc_tw": {
            "initial": {"initial_value_res_for_heatnc": 1},
            "step": {
                "new_res_capacity_for_heatnc_tw": 1,
                "replacement_res_for_heatnc_tw": 1,
                "wear_res_capacity_for_heatnc_tw": 1,
            },
        }
    },
)
def installed_capacity_res_heatnc_tw():
    """
    Installed capacity of RES for non-commercial heat.
    """
    return _integ_installed_capacity_res_heatnc_tw()


_integ_installed_capacity_res_heatnc_tw = Integ(
    lambda: new_res_capacity_for_heatnc_tw()
    + replacement_res_for_heatnc_tw()
    - wear_res_capacity_for_heatnc_tw(),
    lambda: initial_value_res_for_heatnc().expand_dims(
        {"scenarios": _subscript_dict["scenarios"]}, 1
    ),
    "_integ_installed_capacity_res_heatnc_tw",
)


@component.add(
    name='"FED Heat-com plants fossil fuels EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fed_heatcom_nre_ej": 1,
        "fes_heatcom_fossil_fuels_chp_plants_ej": 1,
        "fes_heatcom_nuclear_chp_plants_ej": 1,
    },
)
def fed_heatcom_plants_fossil_fuels_ej():
    """
    Demand of fossil fuels for commercial heat plants. Fossil fuels CHP plants have priority due a better efficiency.
    """
    return np.maximum(
        fed_heatcom_nre_ej()
        - fes_heatcom_fossil_fuels_chp_plants_ej()
        - fes_heatcom_nuclear_chp_plants_ej(),
        0,
    )


@component.add(
    name="real extraction unconv gas emissions relevant EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_extraction_unconv_gas_ej": 1,
        "ped_nat_gas_for_gtl_ej": 1,
        "nonenergy_use_demand_by_final_fuel_ej": 1,
        "share_conv_vs_total_gas_extraction_eu": 1,
    },
)
def real_extraction_unconv_gas_emissions_relevant_ej():
    """
    Extraction of emission-relevant unconventional gas, i.e. excepting the resource used to produce GTL and for non-energy uses. We assume conventional and unconventional resource are used to produce GTL and for non-energy uses following the same share as for their relative extraction.
    """
    return np.maximum(
        0,
        real_extraction_unconv_gas_ej()
        - (
            ped_nat_gas_for_gtl_ej()
            + nonenergy_use_demand_by_final_fuel_ej()
            .loc[:, "gases"]
            .reset_coords(drop=True)
        )
        * (1 - share_conv_vs_total_gas_extraction_eu()),
    )


@component.add(
    name="real extraction unconv oil emissions relevant EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_extraction_unconv_oil_ej": 1,
        "nonenergy_use_demand_by_final_fuel_ej": 1,
        "share_conv_vs_total_oil_extraction_eu": 1,
    },
)
def real_extraction_unconv_oil_emissions_relevant_ej():
    """
    Extraction of emission-relevant unconventional oil, i.e. excepting the resource used for non-energy uses. We assume conventional and unconventional resource are used for non-energy uses following the same share as for their relative extraction.
    """
    return np.maximum(
        0,
        real_extraction_unconv_oil_ej()
        - nonenergy_use_demand_by_final_fuel_ej()
        .loc[:, "liquids"]
        .reset_coords(drop=True)
        * (1 - share_conv_vs_total_oil_extraction_eu()),
    )


@component.add(
    name="remaining potential RES for heat",
    units="Dmnl",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_fe_res_for_heat": 2,
        "potential_fes_res_for_heatcom_ej": 1,
        "potential_fes_res_for_heatnc_ej": 1,
    },
)
def remaining_potential_res_for_heat():
    """
    Remaining potential available as given as a fraction of unity.
    """
    return zidz(
        np.maximum(
            0,
            max_fe_res_for_heat()
            - potential_fes_res_for_heatcom_ej()
            - potential_fes_res_for_heatnc_ej(),
        ),
        max_fe_res_for_heat(),
    )


@component.add(
    name="extraction coal emissions relevant EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "extraction_coal_without_ctl_ej": 1,
        "nonenergy_use_demand_by_final_fuel_ej": 1,
    },
)
def extraction_coal_emissions_relevant_ej():
    """
    Extraction of emission-relevant coal, i.e. excepting the resource used for non-energy uses.
    """
    return np.maximum(
        0,
        extraction_coal_without_ctl_ej()
        - nonenergy_use_demand_by_final_fuel_ej()
        .loc[:, "solids"]
        .reset_coords(drop=True),
    )


@component.add(
    name='"wear RES capacity for heat-nc TW"',
    units="TW",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"installed_capacity_res_heatnc_tw": 1, "life_time_res_for_heat": 1},
)
def wear_res_capacity_for_heatnc_tw():
    """
    Decommission of the capacity that reachs the end of its lifetime.
    """
    return installed_capacity_res_heatnc_tw() / life_time_res_for_heat()


@component.add(
    name='"FE real generation RES heat-nc EJ"',
    units="EJ",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"potential_fes_res_for_heatnc_ej": 1, "res_heatnc_tot_overcapacity": 1},
)
def fe_real_generation_res_heatnc_ej():
    """
    Non-commercial heat generation by RES technology.
    """
    return potential_fes_res_for_heatnc_ej() * (1 - res_heatnc_tot_overcapacity())


@component.add(
    name='"Total FE real supply RES for heat-com EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_real_generation_res_heatcom_ej": 1},
)
def total_fe_real_supply_res_for_heatcom_ej():
    """
    Total final energy supply delivered by RES for commercial heat.
    """
    return sum(
        fe_real_generation_res_heatcom_ej().rename({"RES heat": "RES heat!"}),
        dim=["RES heat!"],
    )


@component.add(
    name='"past RES growth for heat-com 0"',
    units="1/Year",
    subscripts=["RES heat"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_past_res_growth_for_heatcom_0"},
)
def past_res_growth_for_heatcom_0():
    """
    Historic annual average growth.
    """
    return _ext_constant_past_res_growth_for_heatcom_0()


_ext_constant_past_res_growth_for_heatcom_0 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C101",
    {"RES heat": ['"solar-heat"']},
    _root,
    {"RES heat": _subscript_dict["RES heat"]},
    "_ext_constant_past_res_growth_for_heatcom_0",
)

_ext_constant_past_res_growth_for_heatcom_0.add(
    "inputs_EU.xlsx", "Constants", "C102", {"RES heat": ['"geot-heat"']}
)

_ext_constant_past_res_growth_for_heatcom_0.add(
    "inputs_EU.xlsx", "Constants", "C103", {"RES heat": ['"solid bioE-heat"']}
)


@component.add(
    name="Efficiency conversion BioE plants to heat 0",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_efficiency_conversion_bioe_plants_to_heat_0"
    },
)
def efficiency_conversion_bioe_plants_to_heat_0():
    """
    Efficiency of the transformation from bioenergy to heat in heat and CHP plants (aggregated). Efficiency of the transformation from bioenergy to electricity (estimation for 2014 from the IEA balances.
    """
    return _ext_constant_efficiency_conversion_bioe_plants_to_heat_0()


_ext_constant_efficiency_conversion_bioe_plants_to_heat_0 = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C43",
    {},
    _root,
    {},
    "_ext_constant_efficiency_conversion_bioe_plants_to_heat_0",
)


@component.add(
    name='"FED Heat-com after priorities EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_fed_heatcom_ej": 1,
        "fes_heatcom_from_waste_ej": 1,
        "fes_heatcom_from_biogas_ej": 1,
    },
)
def fed_heatcom_after_priorities_ej():
    """
    Total commercial heat demand including distribution losses after technologies with priority in the mix (waste and biogas).
    """
    return np.maximum(
        0,
        total_fed_heatcom_ej()
        - fes_heatcom_from_waste_ej()
        - fes_heatcom_from_biogas_ej(),
    )


@component.add(
    name="FES heat from BioW",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_real_supply_res_for_heatcom_tot_ej": 1,
        "fe_real_supply_res_for_heatnc_tot_ej": 1,
        "fes_heatcom_from_biogas_ej": 1,
        "fes_heatcom_from_waste_ej": 1,
    },
)
def fes_heat_from_biow():
    """
    Heat generation of total bioenergy and waste (to compare with more common statistics).
    """
    return (
        fe_real_supply_res_for_heatcom_tot_ej()
        + fe_real_supply_res_for_heatnc_tot_ej()
        + fes_heatcom_from_biogas_ej()
        + fes_heatcom_from_waste_ej()
    )


@component.add(
    name='"abundance RES heat-nc"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_fed_heatnc_ej": 3, "fe_real_supply_res_for_heatnc_tot_ej": 1},
)
def abundance_res_heatnc():
    """
    The parameter abundance varies between (1;0). The closest to 1 indicates that heat generation from RES is far to cover to whole heat demand, if "abundance RES heat"=0 it means that RES heat cover the whole heat demand. IF THEN ELSE(Total FED Heat EJ delayed 1yr[scenarios]=0,0, IF THEN ELSE(Total FED Heat EJ delayed 1yr[scenarios] > FE real supply RES for heat tot EJ[scenarios], (Total FED Heat EJ delayed 1yr[scenarios]-FE real supply RES for heat tot EJ[scenarios])/Total FED Heat EJ delayed 1yr[scenarios], 0))
    """
    return if_then_else(
        total_fed_heatnc_ej() == 0,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: zidz(
            total_fed_heatnc_ej() - fe_real_supply_res_for_heatnc_tot_ej(),
            total_fed_heatnc_ej(),
        ),
    )


@component.add(
    name="Efficiency geothermal for heat 0",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_efficiency_geothermal_for_heat_0"},
)
def efficiency_geothermal_for_heat_0():
    return _ext_constant_efficiency_geothermal_for_heat_0()


_ext_constant_efficiency_geothermal_for_heat_0 = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G43",
    {},
    _root,
    {},
    "_ext_constant_efficiency_geothermal_for_heat_0",
)


@component.add(
    name='"FES Heat-com nuclear CHP plants EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_fes_heatcom_nuclear_chp_plants_ej": 1,
        "fed_heatcom_nre_ej": 1,
    },
)
def fes_heatcom_nuclear_chp_plants_ej():
    """
    Commercial heat produced in cogeration nuclear plants.
    """
    return np.minimum(
        potential_fes_heatcom_nuclear_chp_plants_ej(), fed_heatcom_nre_ej()
    )


@component.add(
    name='"FE real supply RES for heat-nc tot EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_fed_heatnc_ej": 1, "potential_fes_tot_res_for_heatnc_ej": 1},
)
def fe_real_supply_res_for_heatnc_tot_ej():
    """
    Total final energy supply delivered by RES for non-commercial heat.
    """
    return np.minimum(
        np.maximum(total_fed_heatnc_ej(), 0), potential_fes_tot_res_for_heatnc_ej()
    )


@component.add(
    name='"initial value RES for heat-nc"',
    units="TW",
    subscripts=["RES heat"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_value_res_for_heatnc"},
)
def initial_value_res_for_heatnc():
    """
    RES supply by technology for non-commercial heat in the year 1995.
    """
    return _ext_constant_initial_value_res_for_heatnc()


_ext_constant_initial_value_res_for_heatnc = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "H62",
    {"RES heat": ['"solar-heat"']},
    _root,
    {"RES heat": _subscript_dict["RES heat"]},
    "_ext_constant_initial_value_res_for_heatnc",
)

_ext_constant_initial_value_res_for_heatnc.add(
    "inputs_EU.xlsx", "Constants", "H63", {"RES heat": ['"geot-heat"']}
)

_ext_constant_initial_value_res_for_heatnc.add(
    "inputs_EU.xlsx", "Constants", "H61", {"RES heat": ['"solid bioE-heat"']}
)


@component.add(
    name='"past RES growth for heat-nc"',
    units="1/Year",
    subscripts=["RES heat"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_past_res_growth_for_heatnc"},
)
def past_res_growth_for_heatnc():
    """
    Historic annual average growth.
    """
    return _ext_constant_past_res_growth_for_heatnc()


_ext_constant_past_res_growth_for_heatnc = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C104",
    {"RES heat": ['"solar-heat"']},
    _root,
    {"RES heat": _subscript_dict["RES heat"]},
    "_ext_constant_past_res_growth_for_heatnc",
)

_ext_constant_past_res_growth_for_heatnc.add(
    "inputs_EU.xlsx", "Constants", "C105", {"RES heat": ['"geot-heat"']}
)

_ext_constant_past_res_growth_for_heatnc.add(
    "inputs_EU.xlsx", "Constants", "C106", {"RES heat": ['"solid bioE-heat"']}
)


@component.add(
    name="FED heat fossil fuels CHP plants EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fed_heatcom_by_nre_chp_plants_ej": 1,
        "fes_heatcom_nuclear_chp_plants_ej": 1,
    },
)
def fed_heat_fossil_fuels_chp_plants_ej():
    """
    Final energy demand of fossil fuels in CHP plants.
    """
    return np.maximum(
        fed_heatcom_by_nre_chp_plants_ej() - fes_heatcom_nuclear_chp_plants_ej(), 0
    )


@component.add(
    name='"replacement RES for heat-nc"',
    units="Dmnl",
    subscripts=["RES heat"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_replacement_res_for_heatnc"},
)
def replacement_res_for_heatnc():
    """
    If =1, we asume that all the power that reaches the end of its lifetime is replaced.
    """
    return _ext_constant_replacement_res_for_heatnc()


_ext_constant_replacement_res_for_heatnc = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "D17",
    {"RES heat": ['"solar-heat"']},
    _root,
    {"RES heat": _subscript_dict["RES heat"]},
    "_ext_constant_replacement_res_for_heatnc",
)

_ext_constant_replacement_res_for_heatnc.add(
    "inputs_EU.xlsx", "Parameters", "D18", {"RES heat": ['"geot-heat"']}
)

_ext_constant_replacement_res_for_heatnc.add(
    "inputs_EU.xlsx", "Parameters", "D19", {"RES heat": ['"solid bioE-heat"']}
)


@component.add(
    name="Efficiency solar panels for heat 0",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_efficiency_solar_panels_for_heat_0"},
)
def efficiency_solar_panels_for_heat_0():
    return _ext_constant_efficiency_solar_panels_for_heat_0()


_ext_constant_efficiency_solar_panels_for_heat_0 = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G41",
    {},
    _root,
    {},
    "_ext_constant_efficiency_solar_panels_for_heat_0",
)


@component.add(
    name='"abundance RES heat-com"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fed_heatcom_after_priorities_ej": 3,
        "fe_real_supply_res_for_heatcom_tot_ej": 1,
    },
)
def abundance_res_heatcom():
    """
    The parameter abundance varies between (1;0). The closest to 1 indicates that heat generation from RES is far to cover to whole heat demand, if "abundance RES heat"=0 it means that RES heat cover the whole heat demand. IF THEN ELSE(Total FED Heat EJ delayed 1yr[scenarios]=0,0, IF THEN ELSE(Total FED Heat EJ delayed 1yr[scenarios] > FE real supply RES for heat tot EJ[scenarios], (Total FED Heat EJ delayed 1yr[scenarios]-FE real supply RES for heat tot EJ[scenarios])/Total FED Heat EJ delayed 1yr[scenarios], 0))
    """
    return if_then_else(
        fed_heatcom_after_priorities_ej() == 0,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: zidz(
            fed_heatcom_after_priorities_ej() - fe_real_supply_res_for_heatcom_tot_ej(),
            fed_heatcom_after_priorities_ej(),
        ),
    )


@component.add(
    name='"abundance RES heat-nc2"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_res_heatnc": 1},
)
def abundance_res_heatnc2():
    """
    Adaptation of the parameter abundance for better behaviour of the model.
    """
    return np.sqrt(abundance_res_heatnc())


@component.add(
    name='"potential FES tot RES for heat-nc EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"potential_fes_res_for_heatnc_ej": 1},
)
def potential_fes_tot_res_for_heatnc_ej():
    """
    Potential total final energy supply renewables for non-commercial heat given the installed capacity.
    """
    return sum(
        potential_fes_res_for_heatnc_ej().rename({"RES heat": "RES heat!"}),
        dim=["RES heat!"],
    )


@component.add(
    name="life time RES for heat 0",
    units="Year",
    subscripts=["RES heat"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_life_time_res_for_heat_0"},
)
def life_time_res_for_heat_0():
    """
    Lifetime RES thermal technologies and plants.
    """
    return _ext_constant_life_time_res_for_heat_0()


_ext_constant_life_time_res_for_heat_0 = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C17",
    {"RES heat": ['"solar-heat"']},
    _root,
    {"RES heat": _subscript_dict["RES heat"]},
    "_ext_constant_life_time_res_for_heat_0",
)

_ext_constant_life_time_res_for_heat_0.add(
    "inputs_EU.xlsx", "Parameters", "C18", {"RES heat": ['"geot-heat"']}
)

_ext_constant_life_time_res_for_heat_0.add(
    "inputs_EU.xlsx", "Parameters", "C19", {"RES heat": ['"solid bioE-heat"']}
)


@component.add(
    name="Efficiency RES heat 0",
    units="Dmnl",
    subscripts=["RES heat"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "efficiency_solar_panels_for_heat_0": 1,
        "losses_solar_for_heat_0": 1,
        "efficiency_geothermal_for_heat_0": 1,
        "efficiency_conversion_bioe_plants_to_heat_0": 1,
    },
)
def efficiency_res_heat_0():
    value = xr.DataArray(
        np.nan, {"RES heat": _subscript_dict["RES heat"]}, ["RES heat"]
    )
    value.loc[['"solar-heat"']] = (
        efficiency_solar_panels_for_heat_0() * losses_solar_for_heat_0()
    )
    value.loc[['"geot-heat"']] = efficiency_geothermal_for_heat_0()
    value.loc[['"solid bioE-heat"']] = efficiency_conversion_bioe_plants_to_heat_0()
    return value


@component.add(
    name="replacement RES for heat 0",
    units="Dmnl",
    subscripts=["RES heat"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_replacement_res_for_heat_0"},
)
def replacement_res_for_heat_0():
    """
    If =1, we asume that all the power that reaches the end of its lifetime is replaced.
    """
    return _ext_constant_replacement_res_for_heat_0()


_ext_constant_replacement_res_for_heat_0 = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "D17",
    {"RES heat": ['"solar-heat"']},
    _root,
    {"RES heat": _subscript_dict["RES heat"]},
    "_ext_constant_replacement_res_for_heat_0",
)

_ext_constant_replacement_res_for_heat_0.add(
    "inputs_EU.xlsx", "Parameters", "D18", {"RES heat": ['"geot-heat"']}
)

_ext_constant_replacement_res_for_heat_0.add(
    "inputs_EU.xlsx", "Parameters", "D19", {"RES heat": ['"solid bioE-heat"']}
)


@component.add(
    name="FES RES for heat EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_real_supply_res_for_heatcom_tot_ej": 1,
        "fe_real_supply_res_for_heatnc_tot_ej": 1,
        "fes_heatcom_from_biogas_ej": 1,
    },
)
def fes_res_for_heat_ej():
    """
    Heat from renewable energy sources.
    """
    return (
        fe_real_supply_res_for_heatcom_tot_ej()
        + fe_real_supply_res_for_heatnc_tot_ej()
        + fes_heatcom_from_biogas_ej()
    )


@component.add(
    name='"FE real supply RES for heat-com tot EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fed_heatcom_after_priorities_ej": 1,
        "potential_fes_tot_res_for_heatcom_ej": 1,
    },
)
def fe_real_supply_res_for_heatcom_tot_ej():
    """
    Total final energy supply delivered by RES for commercial heat.
    """
    return np.minimum(
        np.maximum(fed_heatcom_after_priorities_ej(), 0),
        potential_fes_tot_res_for_heatcom_ej(),
    )


@component.add(
    name="Losses solar for heat 0",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_losses_solar_for_heat_0"},
)
def losses_solar_for_heat_0():
    return _ext_constant_losses_solar_for_heat_0()


_ext_constant_losses_solar_for_heat_0 = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G42",
    {},
    _root,
    {},
    "_ext_constant_losses_solar_for_heat_0",
)


@component.add(
    name='"RES heat-nc tot overcapacity"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_fes_tot_res_for_heatnc_ej": 3,
        "fe_real_supply_res_for_heatnc_tot_ej": 1,
    },
)
def res_heatnc_tot_overcapacity():
    """
    Overcapacity for each technology RES for heat-nc taking into account the installed capacity and the real generation.
    """
    return if_then_else(
        potential_fes_tot_res_for_heatnc_ej() == 0,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: (
            potential_fes_tot_res_for_heatnc_ej()
            - fe_real_supply_res_for_heatnc_tot_ej()
        )
        / potential_fes_tot_res_for_heatnc_ej(),
    )


@component.add(
    name='"potential FES RES for heat-nc EJ"',
    units="EJ",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"potential_fes_res_for_heatnc_twh": 1, "ej_per_twh": 1},
)
def potential_fes_res_for_heatnc_ej():
    """
    Potential final energy supply renewables for non-commercial heat given the installed capacity.
    """
    return potential_fes_res_for_heatnc_twh() * ej_per_twh()


@component.add(
    name='"Historic RES capacity for heat-nc"',
    units="TW",
    subscripts=["RES heat"],
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_res_capacity_for_heatnc",
        "__lookup__": "_ext_lookup_historic_res_capacity_for_heatnc",
    },
)
def historic_res_capacity_for_heatnc(x, final_subs=None):
    """
    Historic installed capacity of RES technologies for non-commercial heat generation.
    """
    return _ext_lookup_historic_res_capacity_for_heatnc(x, final_subs)


_ext_lookup_historic_res_capacity_for_heatnc = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "25",
    "H62",
    {"RES heat": ['"solar-heat"']},
    _root,
    {"RES heat": _subscript_dict["RES heat"]},
    "_ext_lookup_historic_res_capacity_for_heatnc",
)

_ext_lookup_historic_res_capacity_for_heatnc.add(
    "inputs_EU.xlsx", "Constants", "25", "H63", {"RES heat": ['"geot-heat"']}
)

_ext_lookup_historic_res_capacity_for_heatnc.add(
    "inputs_EU.xlsx", "Constants", "25", "H61", {"RES heat": ['"solid bioE-heat"']}
)


@component.add(
    name="Historic share of transformation losses vs extraction",
    units="Dmnl",
    subscripts=["final sources1"],
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_historic_share_of_transformation_losses_vs_extraction",
        "__data__": "_ext_data_historic_share_of_transformation_losses_vs_extraction",
        "time": 1,
    },
)
def historic_share_of_transformation_losses_vs_extraction():
    """
    Historic share transformation losses of each fossil fuel vs annual extraction. (Own elaboration from IEA balances)
    """
    return _ext_data_historic_share_of_transformation_losses_vs_extraction(time())


_ext_data_historic_share_of_transformation_losses_vs_extraction = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "203",
    "B204",
    None,
    {"final sources1": ["liquids"]},
    _root,
    {"final sources1": _subscript_dict["final sources1"]},
    "_ext_data_historic_share_of_transformation_losses_vs_extraction",
)

_ext_data_historic_share_of_transformation_losses_vs_extraction.add(
    "inputs_EU.xlsx", "Constants", "203", "B205", None, {"final sources1": ["solids"]}
)


@component.add(
    name="Ratio gain gas vs lose solids in tranf processes",
    units="Dmnl",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_ratio_gain_gas_vs_lose_solids_in_tranf_processes",
        "__data__": "_ext_data_ratio_gain_gas_vs_lose_solids_in_tranf_processes",
        "time": 1,
    },
)
def ratio_gain_gas_vs_lose_solids_in_tranf_processes():
    """
    Gas gain in transformation processes of coal(Coke oven, Blust furnace,...) (Own elaboration from IEA balances)
    """
    return _ext_data_ratio_gain_gas_vs_lose_solids_in_tranf_processes(time())


_ext_data_ratio_gain_gas_vs_lose_solids_in_tranf_processes = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "203",
    "B206",
    None,
    {},
    _root,
    {},
    "_ext_data_ratio_gain_gas_vs_lose_solids_in_tranf_processes",
)


@component.add(
    name="FES Elec fossil fuel CHP plants EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_fe_gen_elec_fossil_fuel_chp_plants_ej": 1,
        "ej_per_twh": 1,
        "demand_elec_nre_twh": 1,
    },
)
def fes_elec_fossil_fuel_chp_plants_ej():
    """
    Final Energy supply of electricity from fossil fuels in CHP plants. We assign priority to it due to its better efficiency.
    """
    return np.minimum(
        potential_fe_gen_elec_fossil_fuel_chp_plants_ej(),
        demand_elec_nre_twh() * ej_per_twh(),
    )


@component.add(
    name="Total FE Elec demand after priorities TWh",
    units="TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_fe_elec_demand_twh": 1,
        "fes_elec_from_res_with_priority_twh": 1,
        "fes_elec_from_waste_twh": 1,
    },
)
def total_fe_elec_demand_after_priorities_twh():
    return np.maximum(
        total_fe_elec_demand_twh()
        - fes_elec_from_res_with_priority_twh()
        - fes_elec_from_waste_twh(),
        0,
    )


@component.add(
    name="Demand Elec NRE TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_fe_elec_demand_twh": 1,
        "fe_tot_generation_all_res_elec_twh": 1,
        "fes_elec_from_waste_twh": 1,
    },
)
def demand_elec_nre_twh():
    """
    The model assigns priority to RES generation to cover the electricity demand.
    """
    return np.maximum(
        0,
        total_fe_elec_demand_twh()
        - fe_tot_generation_all_res_elec_twh()
        - fes_elec_from_waste_twh(),
    )


@component.add(
    name='"Non-energy use demand by final fuel EJ"',
    units="EJ",
    subscripts=["scenarios", "final sources"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_nonenergy_use_demand_by_final_fuel_ej": 1},
    other_deps={
        "_integ_nonenergy_use_demand_by_final_fuel_ej": {
            "initial": {"initial_nonenergy_use": 1},
            "step": {"annual_variation_nonenergy_use": 1},
        }
    },
)
def nonenergy_use_demand_by_final_fuel_ej():
    """
    Non-energy use demand by final fuel
    """
    return _integ_nonenergy_use_demand_by_final_fuel_ej()


_integ_nonenergy_use_demand_by_final_fuel_ej = Integ(
    lambda: annual_variation_nonenergy_use(),
    lambda: initial_nonenergy_use()
    .rename({"final sources1": "final sources"})
    .expand_dims({"scenarios": _subscript_dict["scenarios"]}, 0),
    "_integ_nonenergy_use_demand_by_final_fuel_ej",
)


@component.add(
    name="share solids for final energy",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "required_fed_solids": 1,
        "ped_solids": 1,
        "ped_coal_for_ctl_ej": 1,
        "other_solids_required": 1,
    },
)
def share_solids_for_final_energy():
    """
    Share of final energy vs primary energy for solids.
    """
    return zidz(
        required_fed_solids(),
        ped_solids() - ped_coal_for_ctl_ej() - other_solids_required(),
    )


@component.add(
    name='"Total real non-energy use consumption EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"nonenergy_use_demand_by_final_fuel_ej": 1},
)
def total_real_nonenergy_use_consumption_ej():
    return sum(
        nonenergy_use_demand_by_final_fuel_ej().rename(
            {"final sources": "final sources!"}
        ),
        dim=["final sources!"],
    )


@component.add(
    name="share gases for final energy",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "required_fed_by_gas": 1,
        "ped_nat_gas_for_gtl_ej": 1,
        "other_gases_required": 1,
        "ped_gases": 1,
    },
)
def share_gases_for_final_energy():
    """
    Share of final energy vs primary energy for gases.
    """
    return zidz(
        required_fed_by_gas(),
        ped_gases() - ped_nat_gas_for_gtl_ej() - other_gases_required(),
    )


@component.add(
    name='"ratio FED for heat-nc vs FED for heat-com"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fed_by_fuel_for_heatnc": 1,
        "required_fed_by_fuel_before_heat_correction": 1,
    },
)
def ratio_fed_for_heatnc_vs_fed_for_heatcom():
    """
    Ratio FED for non-commercial heat vs FED for commercial heat (before climate change impacts).
    """
    return sum(
        fed_by_fuel_for_heatnc().rename({"final sources1": "final sources!"}),
        dim=["final sources!"],
    ) * zidz(
        xr.DataArray(1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
        required_fed_by_fuel_before_heat_correction()
        .loc[:, "heat"]
        .reset_coords(drop=True),
    )


@component.add(
    name="real FE consumption by fuel before heat correction",
    units="EJ",
    subscripts=["scenarios", "final sources1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_fe_consumption_by_fuel": 5,
        "ratio_fed_for_heatnc_vs_fed_for_heatcom": 1,
        "share_feh_over_fed_by_final_fuel": 3,
    },
)
def real_fe_consumption_by_fuel_before_heat_correction():
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "final sources1": _subscript_dict["final sources1"],
        },
        ["scenarios", "final sources1"],
    )
    value.loc[:, ["electricity"]] = (
        real_fe_consumption_by_fuel()
        .loc[:, "electricity"]
        .reset_coords(drop=True)
        .expand_dims({"final sources1": ["electricity"]}, 1)
        .values
    )
    value.loc[:, ["heat"]] = (
        (
            real_fe_consumption_by_fuel().loc[:, "heat"].reset_coords(drop=True)
            / (1 + ratio_fed_for_heatnc_vs_fed_for_heatcom())
        )
        .expand_dims({"final sources1": ["heat"]}, 1)
        .values
    )
    value.loc[:, ["liquids"]] = (
        (
            real_fe_consumption_by_fuel().loc[:, "liquids"].reset_coords(drop=True)
            / (
                1
                - share_feh_over_fed_by_final_fuel()
                .loc["liquids", :]
                .reset_coords(drop=True)
            )
        )
        .expand_dims({"final sources1": ["liquids"]}, 1)
        .values
    )
    value.loc[:, ["gases"]] = (
        (
            real_fe_consumption_by_fuel().loc[:, "gases"].reset_coords(drop=True)
            / (
                1
                - share_feh_over_fed_by_final_fuel()
                .loc["gases", :]
                .reset_coords(drop=True)
            )
        )
        .expand_dims({"final sources1": ["gases"]}, 1)
        .values
    )
    value.loc[:, ["solids"]] = (
        (
            real_fe_consumption_by_fuel().loc[:, "solids"].reset_coords(drop=True)
            / (
                1
                - share_feh_over_fed_by_final_fuel()
                .loc["solids", :]
                .reset_coords(drop=True)
            )
        )
        .expand_dims({"final sources1": ["solids"]}, 1)
        .values
    )
    return value


@component.add(
    name="Required TFED before heat dem corr",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"required_fed_by_fuel_before_heat_correction": 1},
)
def required_tfed_before_heat_dem_corr():
    """
    Total final energy demand before heat demand correction, i.e. following the data from the IEA Balances (Non-commercial heat is not accounted as heat).
    """
    return sum(
        required_fed_by_fuel_before_heat_correction().rename(
            {"final sources": "final sources!"}
        ),
        dim=["final sources!"],
    )


@component.add(
    name="cum materials to extract for EV batteries",
    units="Mt",
    subscripts=["materials", "scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cum_materials_to_extract_for_ev_batteries": 1},
    other_deps={
        "_integ_cum_materials_to_extract_for_ev_batteries": {
            "initial": {
                "initial_cumulated_material_requirements_for_ev_batteries_1995": 1
            },
            "step": {"total_materials_to_extract_for_ev_batteries_mt": 1},
        }
    },
)
def cum_materials_to_extract_for_ev_batteries():
    """
    Cumulative materials to be mined for EV batteries.
    """
    return _integ_cum_materials_to_extract_for_ev_batteries()


_integ_cum_materials_to_extract_for_ev_batteries = Integ(
    lambda: total_materials_to_extract_for_ev_batteries_mt(),
    lambda: xr.DataArray(
        initial_cumulated_material_requirements_for_ev_batteries_1995(),
        {
            "materials": _subscript_dict["materials"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["materials", "scenarios"],
    ),
    "_integ_cum_materials_to_extract_for_ev_batteries",
)


@component.add(
    name="Total recycled materials for EV batteries Mt",
    units="Mt",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_materials_required_for_ev_batteries": 1,
        "total_materials_to_extract_for_ev_batteries_mt": 1,
    },
)
def total_recycled_materials_for_ev_batteries_mt():
    """
    Total recycled materials for EV batteries.
    """
    return (
        total_materials_required_for_ev_batteries()
        - total_materials_to_extract_for_ev_batteries_mt()
    )


@component.add(
    name="share RES vs TFEC",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"tfec_res_ej": 1, "real_tfec": 1},
)
def share_res_vs_tfec():
    """
    Share of total final energy consumption from RES over the total.
    """
    return zidz(tfec_res_ej(), real_tfec())


@component.add(
    name="cum materials to extract for alt techn from 2015 EU",
    units="Mt",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "cum_materials_to_extract_for_ev_batteries_from_2015": 1,
        "cum_materials_to_extract_for_res_elec_from_2015": 1,
    },
)
def cum_materials_to_extract_for_alt_techn_from_2015_eu():
    """
    Cumulative materials demand for alternative technologies (RES elec & EV batteries) from the year 2015.
    """
    return (
        cum_materials_to_extract_for_ev_batteries_from_2015()
        + cum_materials_to_extract_for_res_elec_from_2015()
    )


@component.add(
    name="Total materials to extract for EV batteries from 2015 Mt",
    units="Mt/Year",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "total_materials_to_extract_for_ev_batteries_mt": 1},
)
def total_materials_to_extract_for_ev_batteries_from_2015_mt():
    """
    Annual materials to be mined for EV batteries from 2015.
    """
    return if_then_else(
        time() < 2015,
        lambda: xr.DataArray(
            0,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
        lambda: total_materials_to_extract_for_ev_batteries_mt(),
    )


@component.add(
    name='"materials per new capacity installed - EV batteries"',
    units="kg/MW",
    subscripts=["materials"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_materials_per_new_capacity_installed_ev_batteries"
    },
)
def materials_per_new_capacity_installed_ev_batteries():
    """
    Materials requirements per EV battery.
    """
    return _ext_constant_materials_per_new_capacity_installed_ev_batteries()


_ext_constant_materials_per_new_capacity_installed_ev_batteries = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "F5",
    {"materials": ["Adhesive"]},
    _root,
    {"materials": _subscript_dict["materials"]},
    "_ext_constant_materials_per_new_capacity_installed_ev_batteries",
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F6", {"materials": ["Aluminium"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F7", {"materials": ["Aluminium mirrors"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F8", {"materials": ["Cadmium"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F9", {"materials": ["Carbon fiber"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F10", {"materials": ["Cement"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F11", {"materials": ["Chromium"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F12", {"materials": ["Copper"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F13", {"materials": ["diesel"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F14", {"materials": ["Dy"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx",
    "Materials",
    "F15",
    {"materials": ['"Electric/electronic components"']},
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F16", {"materials": ["Evacuation lines"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F17", {"materials": ["Fiberglass"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F18", {"materials": ["Foam glass"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F19", {"materials": ["Galium"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F20", {"materials": ["Glass"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F21", {"materials": ["Glass reinforcing plastic"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F22", {"materials": ["gravel"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F23", {"materials": ["Indium"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F24", {"materials": ["Iron"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F25", {"materials": ["KNO3 mined"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F26", {"materials": ["Asphalt"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F27", {"materials": ["Lime"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F28", {"materials": ["Limestone"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F29", {"materials": ["Lithium"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F30", {"materials": ["Lubricant"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F31", {"materials": ["Magnesium"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F32", {"materials": ["Manganese"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F33", {"materials": ["Heavy equipment"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F34", {"materials": ["Concrete"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F35", {"materials": ["Molybdenum"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F36", {"materials": ["NaNO3 mined"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F37", {"materials": ["NaNO3 synthetic"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F38", {"materials": ["Neodymium"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F39", {"materials": ["Nickel"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F40", {"materials": ['"Over grid (15%)"']}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F41", {"materials": ['"Over grid (5%)"']}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F42", {"materials": ["Paint"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F43", {"materials": ["Lead"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F44", {"materials": ["Plastics"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F45", {"materials": ["Polypropylene"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F46", {"materials": ["Rock"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F47", {"materials": ["Rock wool"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F48", {"materials": ["Sand"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F49", {"materials": ["Silicon sand"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F50", {"materials": ["Silicon wafer modules"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F51", {"materials": ["Silver"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F52", {"materials": ["Site preparation"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F53", {"materials": ["Tin"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F54", {"materials": ["soda ash"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F55", {"materials": ["steel"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F56", {"materials": ["synthetic oil"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F57", {"materials": ["tellurium"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F58", {"materials": ["titanium"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F59", {"materials": ["titanium dioxide"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F60", {"materials": ["vanadium"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F61", {"materials": ["wires"]}
)

_ext_constant_materials_per_new_capacity_installed_ev_batteries.add(
    "inputs_EU.xlsx", "Materials", "F62", {"materials": ["zinc"]}
)


@component.add(
    name="Total materials to extract for EV batteries Mt",
    units="Mt/Year",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_materials_required_for_ev_batteries": 1,
        "recycling_rates_minerals_alt_techn": 1,
    },
)
def total_materials_to_extract_for_ev_batteries_mt():
    """
    Annual materials to be mined for the construction of EV batteries.
    """
    return total_materials_required_for_ev_batteries() * (
        1 - recycling_rates_minerals_alt_techn()
    )


@component.add(
    name="cum materials requirements for EV batteries",
    units="Mt",
    subscripts=["materials", "scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cum_materials_requirements_for_ev_batteries": 1},
    other_deps={
        "_integ_cum_materials_requirements_for_ev_batteries": {
            "initial": {
                "initial_cumulated_material_requirements_for_ev_batteries_1995": 1
            },
            "step": {"total_materials_required_for_ev_batteries": 1},
        }
    },
)
def cum_materials_requirements_for_ev_batteries():
    """
    Total cumulative materials requirements for EV batteries.
    """
    return _integ_cum_materials_requirements_for_ev_batteries()


_integ_cum_materials_requirements_for_ev_batteries = Integ(
    lambda: total_materials_required_for_ev_batteries(),
    lambda: xr.DataArray(
        initial_cumulated_material_requirements_for_ev_batteries_1995(),
        {
            "materials": _subscript_dict["materials"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["materials", "scenarios"],
    ),
    "_integ_cum_materials_requirements_for_ev_batteries",
)


@component.add(
    name="\"'static' EROIgrid RES elec\"",
    units="Dmnl",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "static_eroi_res_elec": 2,
        "share_res_elec_generation_curtailedstored": 3,
        "rt_elec_storage_efficiency": 2,
        "esoi_elec_storage": 1,
    },
)
def static_eroigrid_res_elec():
    """
    System EROI after accounting for the energy losses of electricity storage. Equation from Barnhart et al (2013).
    """
    return if_then_else(
        static_eroi_res_elec() <= 0,
        lambda: xr.DataArray(
            0,
            {
                "RES elec": _subscript_dict["RES elec"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["RES elec", "scenarios"],
        ),
        lambda: (
            1
            - share_res_elec_generation_curtailedstored()
            + share_res_elec_generation_curtailedstored() * rt_elec_storage_efficiency()
        )
        / (
            1 / static_eroi_res_elec()
            + share_res_elec_generation_curtailedstored()
            * rt_elec_storage_efficiency()
            / esoi_elec_storage()
        ),
    )


@component.add(
    name="Total materials required for EV batteries",
    units="Mt/Year",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"materials_required_for_ev_batteries_mt": 1},
)
def total_materials_required_for_ev_batteries():
    """
    Total annual materials requirements for EV batteries.
    """
    return materials_required_for_ev_batteries_mt()


@component.add(
    name="TFEC from RES per capita",
    units="GJ/person",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"tfec_res_ej": 1, "gj_per_ej": 1, "population": 1},
)
def tfec_from_res_per_capita():
    return zidz(tfec_res_ej() * gj_per_ej(), population())


@component.add(
    name="rt storage efficiency EV batteries",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_rt_storage_efficiency_ev_batteries"},
)
def rt_storage_efficiency_ev_batteries():
    """
    Round-trip storage efficiency of electric batteries frome electric vehicles.
    """
    return _ext_constant_rt_storage_efficiency_ev_batteries()


_ext_constant_rt_storage_efficiency_ev_batteries = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G46",
    {},
    _root,
    {},
    "_ext_constant_rt_storage_efficiency_ev_batteries",
)


@component.add(
    name="cum materials to extract for EV batteries from 2015",
    units="Mt",
    subscripts=["materials", "scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cum_materials_to_extract_for_ev_batteries_from_2015": 1},
    other_deps={
        "_integ_cum_materials_to_extract_for_ev_batteries_from_2015": {
            "initial": {
                "initial_cumulated_material_requirements_for_ev_batteries_1995": 1
            },
            "step": {"total_materials_to_extract_for_ev_batteries_from_2015_mt": 1},
        }
    },
)
def cum_materials_to_extract_for_ev_batteries_from_2015():
    """
    Cumulative materials to be mined for EV batteries.
    """
    return _integ_cum_materials_to_extract_for_ev_batteries_from_2015()


_integ_cum_materials_to_extract_for_ev_batteries_from_2015 = Integ(
    lambda: total_materials_to_extract_for_ev_batteries_from_2015_mt(),
    lambda: xr.DataArray(
        initial_cumulated_material_requirements_for_ev_batteries_1995(),
        {
            "materials": _subscript_dict["materials"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["materials", "scenarios"],
    ),
    "_integ_cum_materials_to_extract_for_ev_batteries_from_2015",
)


@component.add(
    name="initial cumulated material requirements for EV batteries 1995",
    units="Mt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_cumulated_material_requirements_for_ev_batteries_1995():
    return 0


@component.add(
    name="FE tot generation all RES elec EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_tot_generation_all_res_elec_twh": 1, "ej_per_twh": 1},
)
def fe_tot_generation_all_res_elec_ej():
    """
    Electricity generation from all RES technologies.
    """
    return fe_tot_generation_all_res_elec_twh() * ej_per_twh()


@component.add(
    name='"Carbon footprint tonnesC/person"',
    units="tonnesC/person",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"carbon_footprint_tco2person": 1, "c_per_co2": 1},
)
def carbon_footprint_tonnescperson():
    """
    Carbon footprint.
    """
    return carbon_footprint_tco2person() * c_per_co2()


@component.add(
    name="Potential max HDI",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"net_tfec_per_capita": 2},
)
def potential_max_hdi():
    """
    Potential HDI that can be reached by a society given its final energy use per capita.
    """
    return if_then_else(
        net_tfec_per_capita() <= 0,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: np.minimum(1, 0.1395 * np.log(net_tfec_per_capita()) + 0.1508),
    )


@component.add(
    name="kW per battery EV",
    units="kW/battery",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_kw_per_battery_ev"},
)
def kw_per_battery_ev():
    """
    Average kW per battery of electrical vehicle.
    """
    return _ext_constant_kw_per_battery_ev()


_ext_constant_kw_per_battery_ev = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G49",
    {},
    _root,
    {},
    "_ext_constant_kw_per_battery_ev",
)


@component.add(
    name="PES fossil fuel extraction delayed",
    units="EJ/Year",
    subscripts=["scenarios", "final sources1"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={
        "_delayfixed_pes_fossil_fuel_extraction_delayed": 1,
        "_delayfixed_pes_fossil_fuel_extraction_delayed_1": 1,
        "_delayfixed_pes_fossil_fuel_extraction_delayed_2": 1,
    },
    other_deps={
        "_delayfixed_pes_fossil_fuel_extraction_delayed": {
            "initial": {"time_step": 1},
            "step": {"pes_fossil_fuel_extraction": 1},
        },
        "_delayfixed_pes_fossil_fuel_extraction_delayed_1": {
            "initial": {"time_step": 1},
            "step": {"pes_fossil_fuel_extraction": 1},
        },
        "_delayfixed_pes_fossil_fuel_extraction_delayed_2": {
            "initial": {"time_step": 1},
            "step": {"pes_fossil_fuel_extraction": 1},
        },
    },
)
def pes_fossil_fuel_extraction_delayed():
    """
    Annual extraction of fossil fuels delayed
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "final sources1": _subscript_dict["final sources1"],
        },
        ["scenarios", "final sources1"],
    )
    value.loc[:, ["liquids"]] = _delayfixed_pes_fossil_fuel_extraction_delayed().values
    value.loc[:, ["solids"]] = _delayfixed_pes_fossil_fuel_extraction_delayed_1().values
    value.loc[:, ["gases"]] = _delayfixed_pes_fossil_fuel_extraction_delayed_2().values
    return value


_delayfixed_pes_fossil_fuel_extraction_delayed = DelayFixed(
    lambda: pes_fossil_fuel_extraction()
    .loc[:, "liquids"]
    .reset_coords(drop=True)
    .expand_dims({"final sources1": ["liquids"]}, 1),
    lambda: time_step(),
    lambda: xr.DataArray(
        25.9,
        {"scenarios": _subscript_dict["scenarios"], "final sources1": ["liquids"]},
        ["scenarios", "final sources1"],
    ),
    time_step,
    "_delayfixed_pes_fossil_fuel_extraction_delayed",
)

_delayfixed_pes_fossil_fuel_extraction_delayed_1 = DelayFixed(
    lambda: pes_fossil_fuel_extraction()
    .loc[:, "solids"]
    .reset_coords(drop=True)
    .expand_dims({"final sources1": ["solids"]}, 1),
    lambda: time_step(),
    lambda: xr.DataArray(
        15.05,
        {"scenarios": _subscript_dict["scenarios"], "final sources1": ["solids"]},
        ["scenarios", "final sources1"],
    ),
    time_step,
    "_delayfixed_pes_fossil_fuel_extraction_delayed_1",
)

_delayfixed_pes_fossil_fuel_extraction_delayed_2 = DelayFixed(
    lambda: pes_fossil_fuel_extraction()
    .loc[:, "gases"]
    .reset_coords(drop=True)
    .expand_dims({"final sources1": ["gases"]}, 1),
    lambda: time_step(),
    lambda: xr.DataArray(
        12.2,
        {"scenarios": _subscript_dict["scenarios"], "final sources1": ["gases"]},
        ["scenarios", "final sources1"],
    ),
    time_step,
    "_delayfixed_pes_fossil_fuel_extraction_delayed_2",
)


@component.add(
    name="Historic share of losses vs extraction",
    units="Dmnl",
    subscripts=["final sources1"],
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_historic_share_of_losses_vs_extraction",
        "__data__": "_ext_data_historic_share_of_losses_vs_extraction",
        "time": 1,
    },
)
def historic_share_of_losses_vs_extraction():
    """
    Historic share losses of each fossil fuel vs annual extraction. (Own elaboration from IEA balances)
    """
    return _ext_data_historic_share_of_losses_vs_extraction(time())


_ext_data_historic_share_of_losses_vs_extraction = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "196",
    "B198",
    None,
    {"final sources1": ["liquids"]},
    _root,
    {"final sources1": _subscript_dict["final sources1"]},
    "_ext_data_historic_share_of_losses_vs_extraction",
)

_ext_data_historic_share_of_losses_vs_extraction.add(
    "inputs_EU.xlsx", "Constants", "196", "B197", None, {"final sources1": ["solids"]}
)

_ext_data_historic_share_of_losses_vs_extraction.add(
    "inputs_EU.xlsx", "Constants", "196", "B199", None, {"final sources1": ["gases"]}
)


@component.add(
    name="Energy distr losses FF EJ",
    units="EJ/Year",
    subscripts=["scenarios", "final sources1"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_fossil_fuel_extraction_delayed": 3,
        "historic_share_of_losses_vs_extraction": 3,
    },
)
def energy_distr_losses_ff_ej():
    """
    Energy distribution losses of fossil fuels.
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "final sources1": _subscript_dict["final sources1"],
        },
        ["scenarios", "final sources1"],
    )
    value.loc[:, ["liquids"]] = (
        (
            pes_fossil_fuel_extraction_delayed()
            .loc[:, "liquids"]
            .reset_coords(drop=True)
            * float(historic_share_of_losses_vs_extraction().loc["liquids"])
        )
        .expand_dims({"final sources1": ["liquids"]}, 1)
        .values
    )
    value.loc[:, ["solids"]] = (
        (
            pes_fossil_fuel_extraction_delayed()
            .loc[:, "solids"]
            .reset_coords(drop=True)
            * float(historic_share_of_losses_vs_extraction().loc["solids"])
        )
        .expand_dims({"final sources1": ["solids"]}, 1)
        .values
    )
    value.loc[:, ["gases"]] = (
        (
            pes_fossil_fuel_extraction_delayed().loc[:, "gases"].reset_coords(drop=True)
            * float(historic_share_of_losses_vs_extraction().loc["gases"])
        )
        .expand_dims({"final sources1": ["gases"]}, 1)
        .values
    )
    value.loc[:, ["electricity"]] = 0
    value.loc[:, ["heat"]] = 0
    return value


@component.add(
    name="Historic demand by sector",
    units="Mdollars",
    subscripts=["sectors"],
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_demand_by_sector",
        "__lookup__": "_ext_lookup_historic_demand_by_sector",
    },
)
def historic_demand_by_sector(x, final_subs=None):
    """
    Historic demand (35 WIOD sectors). US$1995
    """
    return _ext_lookup_historic_demand_by_sector(x, final_subs)


_ext_lookup_historic_demand_by_sector = ExtLookup(
    "inputs_EU.xlsx",
    "Economy",
    "1",
    "B2",
    {"sectors": _subscript_dict["sectors"]},
    _root,
    {"sectors": _subscript_dict["sectors"]},
    "_ext_lookup_historic_demand_by_sector",
)


@component.add(
    name="historic variation demand",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 2, "historic_demand_by_sector": 2},
)
def historic_variation_demand():
    """
    Historic variation of demand (35 WIOD sectors). US$1995
    """
    return (
        historic_demand_by_sector(integer(time() + 1))
        - historic_demand_by_sector(integer(time()))
    ).expand_dims({"scenarios": _subscript_dict["scenarios"]}, 0)


@component.add(
    name="share conv vs total oil extraction EU",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_extraction_conv_oil_ej": 2, "real_extraction_unconv_oil_ej": 1},
)
def share_conv_vs_total_oil_extraction_eu():
    """
    Share of conventional oil vs total oil extracted.
    """
    return zidz(
        real_extraction_conv_oil_ej(),
        real_extraction_conv_oil_ej() + real_extraction_unconv_oil_ej(),
    )


@component.add(
    name='"PES nat. gas without GTL"',
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_nat_gas_eu": 1, "ped_nat_gas_for_gtl_ej": 1},
)
def pes_nat_gas_without_gtl():
    """
    Total extraction of conventional gas and unconventional (without GTL).
    """
    return pes_nat_gas_eu() - ped_nat_gas_for_gtl_ej()


@component.add(
    name="CO2 emissions GTL",
    units="GtCO2/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ped_nat_gas_for_gtl_ej": 1,
        "gco2_per_mj_gtl": 1,
        "mj_per_ej": 1,
        "g_per_gt": 1,
    },
)
def co2_emissions_gtl():
    """
    CO2 emissions associated to GTL production.
    """
    return ped_nat_gas_for_gtl_ej() * gco2_per_mj_gtl() * mj_per_ej() / g_per_gt()


@component.add(
    name='"Shortage coef without MIN without E-losses"',
    units="Dmnl",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_fe_consumption_by_fuel_before_heat_correction": 1,
        "required_fed_by_fuel_before_heat_correction": 1,
    },
)
def shortage_coef_without_min_without_elosses():
    """
    ***Variable to test the consistency of the modeling. IT CAN NEVER BE > 1! (that would mean consumption > demand.***
    """
    return (
        real_fe_consumption_by_fuel_before_heat_correction().rename(
            {"final sources1": "final sources"}
        )
        / required_fed_by_fuel_before_heat_correction()
    )


@component.add(
    name="share conv vs total gas extraction EU",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_extraction_conv_gas_ej": 2, "real_extraction_unconv_gas_ej": 1},
)
def share_conv_vs_total_gas_extraction_eu():
    """
    Share of conventional gas vs total gas extracted.
    """
    return zidz(
        real_extraction_conv_gas_ej(),
        real_extraction_conv_gas_ej() + real_extraction_unconv_gas_ej(),
    )


@component.add(
    name="CH4 emissions unconv gas",
    units="MtCH4",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_extraction_unconv_gas_emissions_relevant_ej": 1,
        "gch4_per_mj_unconv_gas": 1,
        "mj_per_ej": 1,
        "g_per_mt": 1,
    },
)
def ch4_emissions_unconv_gas():
    """
    CH4 emissions unconventional gas.
    """
    return (
        real_extraction_unconv_gas_emissions_relevant_ej()
        * gch4_per_mj_unconv_gas()
        * mj_per_ej()
        / g_per_mt()
    )


@component.add(
    name="share electricity vs TFES",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_fe_consumption_by_fuel": 2},
)
def share_electricity_vs_tfes():
    """
    Share of electricity vs TFES.
    """
    return real_fe_consumption_by_fuel().loc[:, "electricity"].reset_coords(
        drop=True
    ) / sum(
        real_fe_consumption_by_fuel().rename({"final sources1": "final sources!"}),
        dim=["final sources!"],
    )


@component.add(
    name="CO2 emissions peat",
    units="GtCO2/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_peat_ej": 1,
        "gco2_per_mj_shale_oil": 1,
        "mj_per_ej": 1,
        "g_per_gt": 1,
    },
)
def co2_emissions_peat():
    """
    CO2 emissions from peat.
    """
    return pes_peat_ej() * gco2_per_mj_shale_oil() * mj_per_ej() / g_per_gt()


@component.add(
    name="Required FED by gas",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"required_fed_by_fuel": 1},
)
def required_fed_by_gas():
    """
    Required final energy demand by gas.
    """
    return required_fed_by_fuel().loc[:, "gases"].reset_coords(drop=True)


@component.add(
    name="Required TFED",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"required_fed_by_fuel": 1},
)
def required_tfed():
    """
    Required total final energy demand after heat demand correction. Non-commercial heat is accounted as heat, i.e. not following the data from the IEA Balances.
    """
    return sum(
        required_fed_by_fuel().rename({"final sources1": "final sources!"}),
        dim=["final sources!"],
    )


@component.add(
    name="Total FE Elec consumption EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_fe_elec_consumption_twh": 1, "ej_per_twh": 1},
)
def total_fe_elec_consumption_ej():
    """
    Total final energy electricity consumption (fossil fuels, nuclear, waste & renewables) (TWh) excluding distribution losses and the energy losses due to impacts of Climate Change.
    """
    return total_fe_elec_consumption_twh() * ej_per_twh()


@component.add(
    name="PED gases",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "required_fed_by_gas": 1,
        "ped_nat_gas_for_gtl_ej": 1,
        "pe_demand_gas_elec_plants_ej": 1,
        "ped_gases_for_heat_plants_ej": 1,
        "ped_gas_for_chp_plants_ej": 1,
        "ped_gas_heatnc": 1,
        "other_gases_required": 1,
    },
)
def ped_gases():
    """
    Primary energy demand total gases.
    """
    return np.maximum(
        0,
        required_fed_by_gas()
        + ped_nat_gas_for_gtl_ej()
        + pe_demand_gas_elec_plants_ej()
        + ped_gases_for_heat_plants_ej()
        + ped_gas_for_chp_plants_ej()
        + ped_gas_heatnc()
        + other_gases_required(),
    )


@component.add(
    name="share solids vs TFES",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_fe_consumption_by_fuel": 2},
)
def share_solids_vs_tfes():
    """
    Share of solids vs TFES.
    """
    return real_fe_consumption_by_fuel().loc[:, "solids"].reset_coords(drop=True) / sum(
        real_fe_consumption_by_fuel().rename({"final sources1": "final sources!"}),
        dim=["final sources!"],
    )


@component.add(
    name="share gases vs TFES",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_fe_consumption_by_fuel": 2},
)
def share_gases_vs_tfes():
    """
    Share of gases vs TFES.
    """
    return real_fe_consumption_by_fuel().loc[:, "gases"].reset_coords(drop=True) / sum(
        real_fe_consumption_by_fuel().rename({"final sources1": "final sources!"}),
        dim=["final sources!"],
    )


@component.add(
    name="Required FED solids",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"required_fed_by_fuel": 1},
)
def required_fed_solids():
    """
    Required final energy demand solids.
    """
    return required_fed_by_fuel().loc[:, "solids"].reset_coords(drop=True)


@component.add(
    name="share heat vs TFES",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_fe_consumption_by_fuel": 2},
)
def share_heat_vs_tfes():
    """
    Share of heat vs TFES.
    """
    return real_fe_consumption_by_fuel().loc[:, "heat"].reset_coords(drop=True) / sum(
        real_fe_consumption_by_fuel().rename({"final sources1": "final sources!"}),
        dim=["final sources!"],
    )


@component.add(
    name="PED solids",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "required_fed_solids": 1,
        "ped_coal_for_ctl_ej": 1,
        "pe_demand_coal_elec_plants_ej": 1,
        "ped_coal_for_heat_plants_ej": 1,
        "ped_coal_for_chp_plants_ej": 1,
        "ped_coal_heatnc": 1,
        "other_solids_required": 1,
    },
)
def ped_solids():
    """
    Primary energy demand of solids.
    """
    return np.maximum(
        0,
        required_fed_solids()
        + ped_coal_for_ctl_ej()
        + pe_demand_coal_elec_plants_ej()
        + ped_coal_for_heat_plants_ej()
        + ped_coal_for_chp_plants_ej()
        + ped_coal_heatnc()
        + other_solids_required(),
    )


@component.add(
    name="scarcity conv oil",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_extraction_conv_oil_ej": 4,
        "extraction_conv_oil_ej": 2,
        "exponent_availability_conv_oil": 1,
    },
)
def scarcity_conv_oil():
    """
    Priority to conventional resource to cover the demand while the maximum extraction level of energy/time is not reached. If "scarcity conv oil"=1 there is no more available flow to be extracted from the conventional resource.
    """
    return if_then_else(
        max_extraction_conv_oil_ej() == 0,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            max_extraction_conv_oil_ej() >= extraction_conv_oil_ej(),
            lambda: 1
            - (
                (max_extraction_conv_oil_ej() - extraction_conv_oil_ej())
                / max_extraction_conv_oil_ej()
            )
            ** exponent_availability_conv_oil(),
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        ),
    )


@component.add(
    name="share liquids vs TFES",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_fe_consumption_by_fuel": 2},
)
def share_liquids_vs_tfes():
    """
    Share of liquids vs TFES.
    """
    return real_fe_consumption_by_fuel().loc[:, "liquids"].reset_coords(
        drop=True
    ) / sum(
        real_fe_consumption_by_fuel().rename({"final sources1": "final sources!"}),
        dim=["final sources!"],
    )


@component.add(
    name="Real total output inland transport",
    units="T$",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_total_output_by_sector_eu": 1},
)
def real_total_output_inland_transport():
    """
    /1e+006
    """
    return (
        real_total_output_by_sector_eu()
        .loc[:, "Inland Transport"]
        .reset_coords(drop=True)
        / 1000000.0
    )


@component.add(
    name="TFES intensity EJ T$",
    units="EJ/T$",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_tfec": 1, "gdp_eu": 1},
)
def tfes_intensity_ej_t():
    """
    Total final energy intensity.
    """
    return zidz(real_tfec(), gdp_eu())


@component.add(
    name="TFES intensity EJ T$ delayed 1yr",
    units="Tdollars/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_tfes_intensity_ej_t_delayed_1yr": 1},
    other_deps={
        "_delayfixed_tfes_intensity_ej_t_delayed_1yr": {
            "initial": {},
            "step": {"tfes_intensity_ej_t": 1},
        }
    },
)
def tfes_intensity_ej_t_delayed_1yr():
    """
    TFES intensity delayed 1 year.
    """
    return _delayfixed_tfes_intensity_ej_t_delayed_1yr()


_delayfixed_tfes_intensity_ej_t_delayed_1yr = DelayFixed(
    lambda: tfes_intensity_ej_t(),
    lambda: 1,
    lambda: xr.DataArray(
        8.827, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    time_step,
    "_delayfixed_tfes_intensity_ej_t_delayed_1yr",
)


@component.add(
    name="TPES intensity EJ T$ delayed 1yr",
    units="Tdollars/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_tpes_intensity_ej_t_delayed_1yr": 1},
    other_deps={
        "_delayfixed_tpes_intensity_ej_t_delayed_1yr": {
            "initial": {},
            "step": {"tpes_intensity_ej_t": 1},
        }
    },
)
def tpes_intensity_ej_t_delayed_1yr():
    """
    TPES intensity delayed 1 year.
    """
    return _delayfixed_tpes_intensity_ej_t_delayed_1yr()


_delayfixed_tpes_intensity_ej_t_delayed_1yr = DelayFixed(
    lambda: tpes_intensity_ej_t(),
    lambda: 1,
    lambda: xr.DataArray(
        13.14, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    time_step,
    "_delayfixed_tpes_intensity_ej_t_delayed_1yr",
)


@component.add(
    name="Annual TPES intensity change rate",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"tpes_intensity_ej_t": 1, "tpes_intensity_ej_t_delayed_1yr": 1},
)
def annual_tpes_intensity_change_rate():
    """
    Annual TPES intensity change rate.
    """
    return -1 + zidz(tpes_intensity_ej_t(), tpes_intensity_ej_t_delayed_1yr())


@component.add(
    name="Annual TFES intensity change rate",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"tfes_intensity_ej_t": 1, "tfes_intensity_ej_t_delayed_1yr": 1},
)
def annual_tfes_intensity_change_rate():
    """
    Annual TFES intensity change rate.
    """
    return -1 + zidz(tfes_intensity_ej_t(), tfes_intensity_ej_t_delayed_1yr())


@component.add(
    name="Total D jobs RES elec per techn",
    units="people",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "d_jobs_new_installed_res_elec_per_techn": 1,
        "jobs_om_res_elec_per_techn": 1,
    },
)
def total_d_jobs_res_elec_per_techn():
    """
    Total direct annual jobs for RES elec per technology.
    """
    return d_jobs_new_installed_res_elec_per_techn() + jobs_om_res_elec_per_techn()


@component.add(
    name="Total D jobs RES heat per techn",
    units="people",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "d_jobs_new_installed_res_heat_per_techn": 1,
        "jobs_om_res_heat_per_techn": 1,
    },
)
def total_d_jobs_res_heat_per_techn():
    """
    Total direct annual jobs for RES heat per technology.
    """
    return d_jobs_new_installed_res_heat_per_techn() + jobs_om_res_heat_per_techn()


@component.add(
    name="Employment factors new RES elec",
    units="people*Year/MW",
    subscripts=["RES elec"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_employment_factors_new_res_elec"},
)
def employment_factors_new_res_elec():
    """
    Employment factors for the manufacture, construction and installation of RES power plants for electricity generation.
    """
    return _ext_constant_employment_factors_new_res_elec()


_ext_constant_employment_factors_new_res_elec = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "Y13",
    {"RES elec": ["hydro"]},
    _root,
    {"RES elec": _subscript_dict["RES elec"]},
    "_ext_constant_employment_factors_new_res_elec",
)

_ext_constant_employment_factors_new_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "Y7", {"RES elec": ['"geot-elec"']}
)

_ext_constant_employment_factors_new_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "Y8", {"RES elec": ['"solid bioE-elec"']}
)

_ext_constant_employment_factors_new_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "Y9", {"RES elec": ["oceanic"]}
)

_ext_constant_employment_factors_new_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "Y10", {"RES elec": ["wind onshore"]}
)

_ext_constant_employment_factors_new_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "Y12", {"RES elec": ["wind offshore"]}
)

_ext_constant_employment_factors_new_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "Y11", {"RES elec": ["solar PV"]}
)

_ext_constant_employment_factors_new_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "Y16", {"RES elec": ["CSP"]}
)


@component.add(
    name="Employment factors new RES heat",
    units="people*Year/MW",
    subscripts=["RES heat"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_employment_factors_new_res_heat"},
)
def employment_factors_new_res_heat():
    """
    Employment factors for the manufacture, construction and installation of RES power plants for heat generation.
    """
    return _ext_constant_employment_factors_new_res_heat()


_ext_constant_employment_factors_new_res_heat = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "Y17",
    {"RES heat": ['"solar-heat"']},
    _root,
    {"RES heat": _subscript_dict["RES heat"]},
    "_ext_constant_employment_factors_new_res_heat",
)

_ext_constant_employment_factors_new_res_heat.add(
    "inputs_EU.xlsx", "Parameters", "Y18", {"RES heat": ['"geot-heat"']}
)

_ext_constant_employment_factors_new_res_heat.add(
    "inputs_EU.xlsx", "Parameters", "Y19", {"RES heat": ['"solid bioE-heat"']}
)


@component.add(
    name='"Employment factors O&M RES elec"',
    units="people/MW",
    subscripts=["RES elec"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_employment_factors_om_res_elec"},
)
def employment_factors_om_res_elec():
    """
    Employment factors for the O&M of RES power plants for electricity generation.
    """
    return _ext_constant_employment_factors_om_res_elec()


_ext_constant_employment_factors_om_res_elec = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "Z13",
    {"RES elec": ["hydro"]},
    _root,
    {"RES elec": _subscript_dict["RES elec"]},
    "_ext_constant_employment_factors_om_res_elec",
)

_ext_constant_employment_factors_om_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "Z7", {"RES elec": ['"geot-elec"']}
)

_ext_constant_employment_factors_om_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "Z8", {"RES elec": ['"solid bioE-elec"']}
)

_ext_constant_employment_factors_om_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "Z9", {"RES elec": ["oceanic"]}
)

_ext_constant_employment_factors_om_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "Z10", {"RES elec": ["wind onshore"]}
)

_ext_constant_employment_factors_om_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "Z12", {"RES elec": ["wind offshore"]}
)

_ext_constant_employment_factors_om_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "Z11", {"RES elec": ["solar PV"]}
)

_ext_constant_employment_factors_om_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "Z16", {"RES elec": ["CSP"]}
)


@component.add(
    name='"Employment factors O&M RES heat"',
    units="people/MW",
    subscripts=["RES heat"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_employment_factors_om_res_heat"},
)
def employment_factors_om_res_heat():
    """
    Employment factors for the O&M of RES power plants for heat generation.
    """
    return _ext_constant_employment_factors_om_res_heat()


_ext_constant_employment_factors_om_res_heat = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "Z17",
    {"RES heat": ['"solar-heat"']},
    _root,
    {"RES heat": _subscript_dict["RES heat"]},
    "_ext_constant_employment_factors_om_res_heat",
)

_ext_constant_employment_factors_om_res_heat.add(
    "inputs_EU.xlsx", "Parameters", "Z18", {"RES heat": ['"geot-heat"']}
)

_ext_constant_employment_factors_om_res_heat.add(
    "inputs_EU.xlsx", "Parameters", "Z19", {"RES heat": ['"solid bioE-heat"']}
)


@component.add(
    name="D jobs new installed RES elec per techn",
    units="people",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "res_elec_capacity_under_construction_tw": 1,
        "employment_factors_new_res_elec": 1,
        "m_per_t": 1,
    },
)
def d_jobs_new_installed_res_elec_per_techn():
    """
    Annual direct jobs new installed RES elec per technology.
    """
    return (
        res_elec_capacity_under_construction_tw()
        * employment_factors_new_res_elec()
        * m_per_t()
    )


@component.add(
    name='"Jobs O&M RES elec per techn"',
    units="people",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "installed_capacity_res_elec_tw": 1,
        "employment_factors_om_res_elec": 1,
        "m_per_t": 1,
    },
)
def jobs_om_res_elec_per_techn():
    """
    Annual jobs operation&maintenance of RES elec per technology.
    """
    return (
        installed_capacity_res_elec_tw() * employment_factors_om_res_elec() * m_per_t()
    )


@component.add(
    name="NX0 vehicles per Xinland T",
    units="vehicles/T$",
    subscripts=["vehicleT"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "nx_hv_inland_t": 3,
        "nx_lv_inland_t": 4,
        "nx_bus_inlandt": 4,
        "nx_train_inland_t": 2,
    },
)
def nx0_vehicles_per_xinland_t():
    """
    Estimated number of vehicles per unit of inland transport economic activity
    """
    value = xr.DataArray(
        np.nan, {"vehicleT": _subscript_dict["vehicleT"]}, ["vehicleT"]
    )
    value.loc[["HV liq"]] = nx_hv_inland_t()
    value.loc[["HV hib"]] = nx_hv_inland_t()
    value.loc[["HV gas"]] = nx_hv_inland_t()
    value.loc[["LV liq"]] = nx_lv_inland_t()
    value.loc[["LV elec"]] = nx_lv_inland_t()
    value.loc[["LV hib"]] = nx_lv_inland_t()
    value.loc[["LV gas"]] = nx_lv_inland_t()
    value.loc[["bus liq"]] = nx_bus_inlandt()
    value.loc[["bus hib"]] = nx_bus_inlandt()
    value.loc[["bus gas"]] = nx_bus_inlandt()
    value.loc[["train liq"]] = nx_train_inland_t()
    value.loc[["train elec"]] = nx_train_inland_t()
    value.loc[["bus elec"]] = nx_bus_inlandt()
    return value


@component.add(
    name="initial percent T vehicles",
    units="Dmnl",
    subscripts=["vehicleT"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_percent_t_vehicles"},
)
def initial_percent_t_vehicles():
    """
    Initial percentage of vehicles of each fuel (2015), percents relative to each class of vehicles (LV; HV, bus, train)
    """
    return _ext_constant_initial_percent_t_vehicles()


_ext_constant_initial_percent_t_vehicles = ExtConstant(
    "inputs_EU.xlsx",
    "Transportation",
    "B35",
    {"vehicleT": ["HV liq"]},
    _root,
    {"vehicleT": _subscript_dict["vehicleT"]},
    "_ext_constant_initial_percent_t_vehicles",
)

_ext_constant_initial_percent_t_vehicles.add(
    "inputs_EU.xlsx", "Transportation", "B36", {"vehicleT": ["HV hib"]}
)

_ext_constant_initial_percent_t_vehicles.add(
    "inputs_EU.xlsx", "Transportation", "B37", {"vehicleT": ["HV gas"]}
)

_ext_constant_initial_percent_t_vehicles.add(
    "inputs_EU.xlsx", "Transportation", "B38", {"vehicleT": ["LV liq"]}
)

_ext_constant_initial_percent_t_vehicles.add(
    "inputs_EU.xlsx", "Transportation", "B39", {"vehicleT": ["LV elec"]}
)

_ext_constant_initial_percent_t_vehicles.add(
    "inputs_EU.xlsx", "Transportation", "B40", {"vehicleT": ["LV hib"]}
)

_ext_constant_initial_percent_t_vehicles.add(
    "inputs_EU.xlsx", "Transportation", "B41", {"vehicleT": ["LV gas"]}
)

_ext_constant_initial_percent_t_vehicles.add(
    "inputs_EU.xlsx", "Transportation", "B42", {"vehicleT": ["bus liq"]}
)

_ext_constant_initial_percent_t_vehicles.add(
    "inputs_EU.xlsx", "Transportation", "B44", {"vehicleT": ["bus hib"]}
)

_ext_constant_initial_percent_t_vehicles.add(
    "inputs_EU.xlsx", "Transportation", "B43", {"vehicleT": ["bus gas"]}
)

_ext_constant_initial_percent_t_vehicles.add(
    "inputs_EU.xlsx", "Transportation", "B46", {"vehicleT": ["train liq"]}
)

_ext_constant_initial_percent_t_vehicles.add(
    "inputs_EU.xlsx", "Transportation", "B47", {"vehicleT": ["train elec"]}
)

_ext_constant_initial_percent_t_vehicles.add(
    "inputs_EU.xlsx", "Transportation", "B45", {"vehicleT": ["bus elec"]}
)


@component.add(
    name="saving ratios V",
    units="Dmnl",
    subscripts=["vehicleT"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_saving_ratios_v"},
)
def saving_ratios_v():
    """
    ratios of energy consumption of diferente vehicles per Km compared to conventional liquids vechicles
    """
    return _ext_constant_saving_ratios_v()


_ext_constant_saving_ratios_v = ExtConstant(
    "inputs_EU.xlsx",
    "Transportation",
    "B94",
    {"vehicleT": ["HV liq"]},
    _root,
    {"vehicleT": _subscript_dict["vehicleT"]},
    "_ext_constant_saving_ratios_v",
)

_ext_constant_saving_ratios_v.add(
    "inputs_EU.xlsx", "Transportation", "B95", {"vehicleT": ["HV hib"]}
)

_ext_constant_saving_ratios_v.add(
    "inputs_EU.xlsx", "Transportation", "B96", {"vehicleT": ["HV gas"]}
)

_ext_constant_saving_ratios_v.add(
    "inputs_EU.xlsx", "Transportation", "B97", {"vehicleT": ["LV liq"]}
)

_ext_constant_saving_ratios_v.add(
    "inputs_EU.xlsx", "Transportation", "B98", {"vehicleT": ["LV elec"]}
)

_ext_constant_saving_ratios_v.add(
    "inputs_EU.xlsx", "Transportation", "B99", {"vehicleT": ["LV hib"]}
)

_ext_constant_saving_ratios_v.add(
    "inputs_EU.xlsx", "Transportation", "B100", {"vehicleT": ["LV gas"]}
)

_ext_constant_saving_ratios_v.add(
    "inputs_EU.xlsx", "Transportation", "B101", {"vehicleT": ["bus liq"]}
)

_ext_constant_saving_ratios_v.add(
    "inputs_EU.xlsx", "Transportation", "B103", {"vehicleT": ["bus hib"]}
)

_ext_constant_saving_ratios_v.add(
    "inputs_EU.xlsx", "Transportation", "B104", {"vehicleT": ["bus gas"]}
)

_ext_constant_saving_ratios_v.add(
    "inputs_EU.xlsx", "Transportation", "B105", {"vehicleT": ["train liq"]}
)

_ext_constant_saving_ratios_v.add(
    "inputs_EU.xlsx", "Transportation", "B106", {"vehicleT": ["train elec"]}
)

_ext_constant_saving_ratios_v.add(
    "inputs_EU.xlsx", "Transportation", "B102", {"vehicleT": ["bus elec"]}
)


@component.add(
    name="share FEH over PES gases",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_feh_over_pes_gases"},
)
def share_feh_over_pes_gases():
    """
    Estimated share of FEH over PES for gases (excluding the gas for GTL).
    """
    return _ext_constant_share_feh_over_pes_gases()


_ext_constant_share_feh_over_pes_gases = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "O39",
    {},
    _root,
    {},
    "_ext_constant_share_feh_over_pes_gases",
)


@component.add(
    name="increase scarcity conv gas",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"scarcity_conv_gas": 1, "scarcity_conv_gas_delayed_1yr": 1},
)
def increase_scarcity_conv_gas():
    return scarcity_conv_gas() - scarcity_conv_gas_delayed_1yr()


@component.add(
    name="scarcity conv gas stock",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_scarcity_conv_gas_stock": 1},
    other_deps={
        "_integ_scarcity_conv_gas_stock": {
            "initial": {},
            "step": {"increase_scarcity_conv_gas": 1},
        }
    },
)
def scarcity_conv_gas_stock():
    """
    Stock which accounts for the relative scarcity of conventional vs unconventional resource. For the initial year we arbitrary chose the value "0".
    """
    return _integ_scarcity_conv_gas_stock()


_integ_scarcity_conv_gas_stock = Integ(
    lambda: increase_scarcity_conv_gas(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    "_integ_scarcity_conv_gas_stock",
)


@component.add(
    name="real growth CTL",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "abundance_coal_eu": 2,
        "abundance_liquids": 1,
        "exogenous_growth_ctl": 1,
        "abundance_liquids_ctl": 1,
        "scarcity_conv_oil": 1,
    },
)
def real_growth_ctl():
    """
    The real growth of CTL depends on the relative abundance of coal and liquids, as well as on the availability of coal.
    """
    return (
        if_then_else(
            abundance_coal_eu() >= abundance_liquids(),
            lambda: if_then_else(
                abundance_coal_eu() == 1,
                lambda: exogenous_growth_ctl(),
                lambda: xr.DataArray(
                    0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
                ),
            ),
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        )
        * abundance_liquids_ctl()
        * scarcity_conv_oil()
    )


@component.add(
    name="CTL potential production",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_ctl_potential_production": 1},
    other_deps={
        "_integ_ctl_potential_production": {
            "initial": {"initial_ctl_production": 1},
            "step": {"replacement_ctl": 1, "variation_ctl": 1, "wear_ctl": 1},
        }
    },
)
def ctl_potential_production():
    """
    Annual CTL potential production.
    """
    return _integ_ctl_potential_production()


_integ_ctl_potential_production = Integ(
    lambda: replacement_ctl() + variation_ctl() - wear_ctl(),
    lambda: xr.DataArray(
        initial_ctl_production(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_ctl_potential_production",
)


@component.add(
    name="abundance liquids GTL",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_liquids_ej": 2, "gtl_potential_production": 1},
)
def abundance_liquids_gtl():
    """
    Variable to moderate the growth of GTL when it comes close to supply all the liquids. This variable limits the growth of a technology supplying a particular final energy type when its supply increases its share in relation to the total supply of this energy type (to avoid overshootings).
    """
    return np.sqrt(
        np.abs(xidz(ped_liquids_ej() - gtl_potential_production(), ped_liquids_ej(), 0))
    )


@component.add(
    name="GTL potential production",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_gtl_potential_production": 1},
    other_deps={
        "_integ_gtl_potential_production": {
            "initial": {"initial_gtl_production": 1},
            "step": {"replacement_gtl": 1, "variation_gtl": 1, "wear_gtl": 1},
        }
    },
)
def gtl_potential_production():
    """
    Annual GTL potential production.
    """
    return _integ_gtl_potential_production()


_integ_gtl_potential_production = Integ(
    lambda: replacement_gtl() + variation_gtl() - wear_gtl(),
    lambda: xr.DataArray(
        initial_gtl_production(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_gtl_potential_production",
)


@component.add(
    name="abundance liquids CTL",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_liquids_ej": 2, "ctl_potential_production": 1},
)
def abundance_liquids_ctl():
    """
    Variable to moderate the growth of CTL when it comes close to supply all the liquids. This variable limits the growth of a technology supplying a particular final energy type when its supply increases its share in relation to the total supply of this energy type (to avoid overshootings).
    """
    return np.sqrt(
        np.abs(xidz(ped_liquids_ej() - ctl_potential_production(), ped_liquids_ej(), 0))
    )


@component.add(
    name="wear GTL",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "lifetime_gtl": 1, "gtl_potential_production": 1},
)
def wear_gtl():
    """
    Depreciation of GTL plants.
    """
    return if_then_else(
        time() < 2015,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: gtl_potential_production() / lifetime_gtl(),
    )


@component.add(
    name="lifetime GTL",
    units="Year",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_lifetime_gtl"},
)
def lifetime_gtl():
    """
    Lifetime of GTL plants.
    """
    return _ext_constant_lifetime_gtl()


_ext_constant_lifetime_gtl = ExtConstant(
    "inputs_EU.xlsx", "Parameters", "G39", {}, _root, {}, "_ext_constant_lifetime_gtl"
)


@component.add(
    name="lifetime CTL",
    units="Year",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_lifetime_ctl"},
)
def lifetime_ctl():
    """
    Lifetime of CTL plants.
    """
    return _ext_constant_lifetime_ctl()


_ext_constant_lifetime_ctl = ExtConstant(
    "inputs_EU.xlsx", "Parameters", "G38", {}, _root, {}, "_ext_constant_lifetime_ctl"
)


@component.add(
    name="wear CTL",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "ctl_potential_production": 1, "lifetime_ctl": 1},
)
def wear_ctl():
    """
    Depreciation of CTL plants.
    """
    return if_then_else(
        time() < 2015,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: ctl_potential_production() / lifetime_ctl(),
    )


@component.add(
    name="abundance unconv oil stock",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_abundance_unconv_oil_stock": 1},
    other_deps={
        "_integ_abundance_unconv_oil_stock": {
            "initial": {},
            "step": {"increase_abundance_unconv_oil": 1},
        }
    },
)
def abundance_unconv_oil_stock():
    return _integ_abundance_unconv_oil_stock()


_integ_abundance_unconv_oil_stock = Integ(
    lambda: increase_abundance_unconv_oil(),
    lambda: xr.DataArray(1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    "_integ_abundance_unconv_oil_stock",
)


@component.add(
    name="increase abundance unconv oil",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_unconv_oil": 1, "abundance_unconv_oil_delayed_1yr": 1},
)
def increase_abundance_unconv_oil():
    return abundance_unconv_oil() - abundance_unconv_oil_delayed_1yr()


@component.add(
    name="abundance unconv oil",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_total_oil_ej": 4, "real_extraction_unconv_oil_ej": 2},
)
def abundance_unconv_oil():
    """
    The parameter abundance varies between (1;0). The closest to 1 indicates that unconventional oil extractione is far to cover to whole oil demand, if "abundance unconv oil"=0 it means that unconventional oil extraction covers the whole demand of oil.
    """
    return if_then_else(
        ped_total_oil_ej() == 0,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            ped_total_oil_ej() > real_extraction_unconv_oil_ej(),
            lambda: (ped_total_oil_ej() - real_extraction_unconv_oil_ej())
            / ped_total_oil_ej(),
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        ),
    )


@component.add(
    name="abundance unconv oil delayed 1yr",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_abundance_unconv_oil_delayed_1yr": 1},
    other_deps={
        "_delayfixed_abundance_unconv_oil_delayed_1yr": {
            "initial": {},
            "step": {"abundance_unconv_oil": 1},
        }
    },
)
def abundance_unconv_oil_delayed_1yr():
    return _delayfixed_abundance_unconv_oil_delayed_1yr()


_delayfixed_abundance_unconv_oil_delayed_1yr = DelayFixed(
    lambda: abundance_unconv_oil(),
    lambda: 1,
    lambda: xr.DataArray(1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_abundance_unconv_oil_delayed_1yr",
)


@component.add(
    name="abundance unconv oil2",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_unconv_oil_stock": 1},
)
def abundance_unconv_oil2():
    """
    Adaptation of the parameter abundance for better behaviour of the model. This variable limits the growth of a technology supplying a particular final energy type when its supply increases its share in relation to the total supply of this energy type (to avoid overshootings).
    """
    return abundance_unconv_oil_stock()


@component.add(
    name="real extraction unconv oil EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "separate_conv_and_unconv_oil": 1,
        "extraction_unconv_oil_ej": 1,
        "extraction_unconv_oil_tot_agg": 1,
    },
)
def real_extraction_unconv_oil_ej():
    return if_then_else(
        separate_conv_and_unconv_oil() == 1,
        lambda: extraction_unconv_oil_ej(),
        lambda: extraction_unconv_oil_tot_agg(),
    )


@component.add(
    name="scarcity conv oil stock",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_scarcity_conv_oil_stock": 1},
    other_deps={
        "_integ_scarcity_conv_oil_stock": {
            "initial": {},
            "step": {"increase_scarcity_conv_oil": 1},
        }
    },
)
def scarcity_conv_oil_stock():
    """
    Stock which accounts for the relative scarcity of conventional vs unconventional resource. For the initial year we arbitrary chose the value "0".
    """
    return _integ_scarcity_conv_oil_stock()


_integ_scarcity_conv_oil_stock = Integ(
    lambda: increase_scarcity_conv_oil(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    "_integ_scarcity_conv_oil_stock",
)


@component.add(
    name="Share variable RES elec generation vs total gen",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_share_variable_res_elec_generation_vs_total_gen": 1},
    other_deps={
        "_integ_share_variable_res_elec_generation_vs_total_gen": {
            "initial": {"initial_share_variable_res_elec_gen_vs_total": 1},
            "step": {"increase_variable_res_share_elec_vs_total_generation": 1},
        }
    },
)
def share_variable_res_elec_generation_vs_total_gen():
    """
    Share variable RES electricity generation vs total electricity generation. Same variable as "share variable RES elec generation vs total" but introduced as stock in order to avoid simultaneous equations.
    """
    return _integ_share_variable_res_elec_generation_vs_total_gen()


_integ_share_variable_res_elec_generation_vs_total_gen = Integ(
    lambda: increase_variable_res_share_elec_vs_total_generation(),
    lambda: xr.DataArray(
        initial_share_variable_res_elec_gen_vs_total(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_share_variable_res_elec_generation_vs_total_gen",
)


@component.add(
    name="extra monet invest to cope with variable Elec RES",
    units="Tdollars/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_elec_generation_from_onshore_wind_twh": 1,
        "fe_elec_generation_from_offshore_wind_twh": 1,
        "balancing_costs": 1,
        "grid_reinforcement_costs_tdollar": 1,
    },
)
def extra_monet_invest_to_cope_with_variable_elec_res():
    """
    Annual additional monetary investment to cope with the intermittency of RES (taking wind as a proxy) including balancing and grid reinforcement costs (1995 US$).
    """
    return (
        fe_elec_generation_from_onshore_wind_twh()
        + fe_elec_generation_from_offshore_wind_twh()
    ) * balancing_costs() + grid_reinforcement_costs_tdollar()


@component.add(
    name="increase scarcity conv oil",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"scarcity_conv_oil": 1, "scarcity_conv_oil_delayed_1yr": 1},
)
def increase_scarcity_conv_oil():
    return scarcity_conv_oil() - scarcity_conv_oil_delayed_1yr()


@component.add(
    name="share extra monet invest to cope with variable Elec RES",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "extra_monet_invest_to_cope_with_variable_elec_res": 1,
        "total_monet_invest_res_for_elec_tdolar": 1,
    },
)
def share_extra_monet_invest_to_cope_with_variable_elec_res():
    """
    Share of the anual additional monetary investment to cope with the intermittency of RES (taking wind as a proxy) in relation to the total investment for RES.
    """
    return (
        extra_monet_invest_to_cope_with_variable_elec_res()
        / total_monet_invest_res_for_elec_tdolar()
    )


@component.add(
    name="initial share variable RES elec gen vs total",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_share_variable_res_elec_gen_vs_total():
    """
    Initial share of variable RES electricity in relation to the total generation.
    """
    return 0.0071


@component.add(
    name="cumulated invest E grid",
    units="Tdollars",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cumulated_invest_e_grid": 1},
    other_deps={
        "_integ_cumulated_invest_e_grid": {
            "initial": {},
            "step": {"extra_monet_invest_to_cope_with_variable_elec_res": 1},
        }
    },
)
def cumulated_invest_e_grid():
    """
    Cumulated monetary investment for developing electricity grids to integrate renewable intermittent sources.
    """
    return _integ_cumulated_invest_e_grid()


_integ_cumulated_invest_e_grid = Integ(
    lambda: extra_monet_invest_to_cope_with_variable_elec_res(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    "_integ_cumulated_invest_e_grid",
)


@component.add(
    name="Total monet invest RES for elec Tdolar",
    units="Tdollars/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "invest_res_for_elec": 1,
        "extra_monet_invest_to_cope_with_variable_elec_res": 1,
    },
)
def total_monet_invest_res_for_elec_tdolar():
    """
    Annual total monetary investment for RES for electricity: capacity, balancing costs and grid improvements to cope with variability (1995 US$).
    """
    return invest_res_for_elec() + extra_monet_invest_to_cope_with_variable_elec_res()


@component.add(
    name="Cp exogenous RES elec var reduction",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_variable_res_elec_generation_vs_total_gen": 1},
)
def cp_exogenous_res_elec_var_reduction():
    """
    Reduction of the capacity factor of the RES elec variables plants as a function of the penetration of variables RES in the electricity generation (Source: Delarue & Morris (2015), see MEDEAS D4.1).
    """
    return 1 / (
        1 + 0.0001 * np.exp(9.85 * share_variable_res_elec_generation_vs_total_gen())
    )


@component.add(
    name="Cp exogenous RES elec dispatch reduction",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_variable_res_elec_generation_vs_total_gen": 2},
)
def cp_exogenous_res_elec_dispatch_reduction():
    """
    Reduction of the capacity factor of the dispatchable plants as a function of the penetration of variables RES in the electricity generation (Source: NREL (2012), see MEDEAS D4.1).
    """
    return np.minimum(
        1,
        -0.6209 * share_variable_res_elec_generation_vs_total_gen() ** 2
        - 0.3998 * share_variable_res_elec_generation_vs_total_gen()
        + 1.0222,
    )


@component.add(
    name="increase variable RES share elec vs total generation",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "share_variable_res_elec_generation_vs_total": 1,
        "share_variable_res_elec_vs_total_generation_delayed_1yr": 1,
    },
)
def increase_variable_res_share_elec_vs_total_generation():
    return (
        share_variable_res_elec_generation_vs_total()
        - share_variable_res_elec_vs_total_generation_delayed_1yr()
    )


@component.add(
    name='"PES NRE Heat-nc"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_coal_for_heatnc_plants": 1,
        "pes_nat_gas_for_heatnc_plants": 1,
        "pes_oil_for_heatnc_plants": 1,
    },
)
def pes_nre_heatnc():
    return (
        pes_coal_for_heatnc_plants()
        + pes_nat_gas_for_heatnc_plants()
        + pes_oil_for_heatnc_plants()
    )


@component.add(
    name="share FEH over PES liquids",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_feh_over_pes_liquids"},
)
def share_feh_over_pes_liquids():
    """
    Estimated share of FEH over PES for liquids.
    """
    return _ext_constant_share_feh_over_pes_liquids()


_ext_constant_share_feh_over_pes_liquids = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "O38",
    {},
    _root,
    {},
    "_ext_constant_share_feh_over_pes_liquids",
)


@component.add(
    name='"FED nat. gas for heat-nc"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "required_fed_by_fuel_before_heat_correction": 1,
        "share_feh_over_fed_by_final_fuel": 1,
        "efficiency_gases_for_heat_plants": 1,
        "share_heat_distribution_losses": 1,
    },
)
def fed_nat_gas_for_heatnc():
    """
    Final energy demand (excluding distribution and generation losses) of non-commercial heat from natural gas.
    """
    return (
        required_fed_by_fuel_before_heat_correction()
        .loc[:, "gases"]
        .reset_coords(drop=True)
        * share_feh_over_fed_by_final_fuel().loc["gases", :].reset_coords(drop=True)
        * efficiency_gases_for_heat_plants()
        / (1 + share_heat_distribution_losses())
    )


@component.add(
    name="TPES heat",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_nre_heat": 1,
        "pes_tot_res_for_heat": 1,
        "pes_tot_waste_for_heatcom": 1,
    },
)
def tpes_heat():
    return pes_nre_heat() + pes_tot_res_for_heat() + pes_tot_waste_for_heatcom()


@component.add(
    name='"FED oil for heat-nc"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "required_fed_by_fuel_before_heat_correction": 1,
        "share_feh_over_fed_by_final_fuel": 1,
        "efficiency_liquids_for_heat_plants": 1,
        "share_heat_distribution_losses": 1,
    },
)
def fed_oil_for_heatnc():
    """
    Final energy demand (excluding distribution and generation losses) of non-commercial heat from oil.
    """
    return (
        required_fed_by_fuel_before_heat_correction()
        .loc[:, "liquids"]
        .reset_coords(drop=True)
        * share_feh_over_fed_by_final_fuel().loc["liquids", :].reset_coords(drop=True)
        * efficiency_liquids_for_heat_plants()
        / (1 + share_heat_distribution_losses())
    )


@component.add(
    name="PES NRE heat",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_nre_heatcom": 1, "pes_nre_heatnc": 1},
)
def pes_nre_heat():
    return pes_nre_heatcom() + pes_nre_heatnc()


@component.add(
    name='"PES NRE Heat-com"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_coal_for_heatcom_plants": 1,
        "pes_nat_gas_for_heatcom_plants": 1,
        "pes_oil_for_heatcom_plants": 1,
    },
)
def pes_nre_heatcom():
    return (
        pes_coal_for_heatcom_plants()
        + pes_nat_gas_for_heatcom_plants()
        + pes_oil_for_heatcom_plants()
    )


@component.add(
    name='"FED by fuel for heat-nc"',
    units="EJ",
    subscripts=["final sources1", "scenarios"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fed_oil_for_heatnc": 1,
        "fed_nat_gas_for_heatnc": 1,
        "fed_coal_for_heatnc": 1,
        "fed_solid_bioe_for_heatnc": 1,
    },
)
def fed_by_fuel_for_heatnc():
    """
    Final energy demand (excluding distribution and generation losses) of non-commercial heat by final fuel.
    """
    value = xr.DataArray(
        np.nan,
        {
            "final sources1": _subscript_dict["final sources1"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["final sources1", "scenarios"],
    )
    value.loc[["electricity"], :] = 0
    value.loc[["heat"], :] = 0
    value.loc[["liquids"], :] = (
        fed_oil_for_heatnc().expand_dims({"final sources1": ["liquids"]}, 0).values
    )
    value.loc[["gases"], :] = (
        fed_nat_gas_for_heatnc().expand_dims({"final sources1": ["gases"]}, 0).values
    )
    value.loc[["solids"], :] = (
        (fed_coal_for_heatnc() + fed_solid_bioe_for_heatnc())
        .expand_dims({"final sources1": ["solids"]}, 0)
        .values
    )
    return value


@component.add(
    name='"Share FED heat-com vs total heat"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_fed_heatcom_ej": 2, "total_fed_heat_ej": 1},
)
def share_fed_heatcom_vs_total_heat():
    """
    Share of commercial heat in relation to total final energy use for heat.
    """
    return total_fed_heatcom_ej() / (total_fed_heat_ej() + total_fed_heatcom_ej())


@component.add(
    name="Average elec consumption per capita",
    units="kWh/people",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_fe_elec_consumption_twh": 1, "kwh_per_twh": 1, "population": 1},
)
def average_elec_consumption_per_capita():
    """
    Electricity consumption per capita (kWh per capita).
    """
    return total_fe_elec_consumption_twh() * kwh_per_twh() / population()


@component.add(
    name='"FED solid bioE for heat-nc"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "required_fed_by_fuel_before_heat_correction": 1,
        "share_feh_over_fed_solid_bioe": 1,
        "efficiency_conversion_bioe_plants_to_heat": 1,
        "share_heat_distribution_losses": 1,
    },
)
def fed_solid_bioe_for_heatnc():
    """
    Final energy demand (excluding distribution and generation losses) of non-commercial heat from solid bioenergy.
    """
    return (
        required_fed_by_fuel_before_heat_correction()
        .loc[:, "solids"]
        .reset_coords(drop=True)
        * share_feh_over_fed_solid_bioe()
        * efficiency_conversion_bioe_plants_to_heat()
        / (1 + share_heat_distribution_losses())
    )


@component.add(
    name="Total FED Heat EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_fed_heatcom_ej": 1, "total_fed_heatnc_ej": 1},
)
def total_fed_heat_ej():
    """
    Total final energy demand (including distribution losses) of heat.
    """
    return total_fed_heatcom_ej() + total_fed_heatnc_ej()


@component.add(
    name='"Heat-nc distribution losses"',
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_fed_heatnc_ej": 1, "fed_heatnc_ej": 1},
)
def heatnc_distribution_losses():
    """
    Distribution losses associated to non-commercial heat.
    """
    return total_fed_heatnc_ej() - fed_heatnc_ej()


@component.add(
    name='"Total FED Heat-nc EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fed_heatnc_ej": 1, "share_heat_distribution_losses": 1},
)
def total_fed_heatnc_ej():
    """
    Total non-commercial heat demand including distribution losses (and climate change impacts).
    """
    return fed_heatnc_ej() * (1 + share_heat_distribution_losses())


@component.add(
    name='"Total FED NRE Heat-nc"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_fed_heatnc_ej": 1, "total_fe_real_supply_res_for_heatnc_ej": 1},
)
def total_fed_nre_heatnc():
    """
    Final energy demand heat non-commercial to be covered by NRE (including distribution losses and climate change impacts).
    """
    return np.maximum(
        0, total_fed_heatnc_ej() - total_fe_real_supply_res_for_heatnc_ej()
    )


@component.add(
    name='"PED gas Heat-nc"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_fed_nre_heatnc": 1,
        "share_fed_gas_vs_nre_heatnc": 1,
        "efficiency_gases_for_heat_plants": 1,
    },
)
def ped_gas_heatnc():
    """
    Primary energy demand heat non-commercial to be covered by natural gas. It corresponds to the FEH (final energy use for heat) metric which includes the distribution and generation losses (see IEA, 2014).
    """
    return (
        total_fed_nre_heatnc()
        * share_fed_gas_vs_nre_heatnc()
        / efficiency_gases_for_heat_plants()
    )


@component.add(
    name='"PED coal Heat-nc"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_fed_nre_heatnc": 1,
        "share_fed_coal_vs_nre_heatnc": 1,
        "efficiency_coal_for_heat_plants": 1,
    },
)
def ped_coal_heatnc():
    """
    Primary energy demand heat non-commercial to be covered by coal. It corresponds to the FEH (final energy use for heat) metric which includes the distribution and generation losses (see IEA, 2014).
    """
    return (
        total_fed_nre_heatnc()
        * share_fed_coal_vs_nre_heatnc()
        / efficiency_coal_for_heat_plants()
    )


@component.add(
    name='"PED liquids Heat-nc"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_fed_nre_heatnc": 1,
        "share_fed_liquids_vs_nre_heatnc": 1,
        "efficiency_liquids_for_heat_plants": 1,
    },
)
def ped_liquids_heatnc():
    """
    Primary energy demand heat non-commercial to be covered by liquids. It corresponds to the FEH (final energy use for heat) metric which includes the distribution and generation losses (see IEA, 2014).
    """
    return (
        total_fed_nre_heatnc()
        * share_fed_liquids_vs_nre_heatnc()
        / efficiency_liquids_for_heat_plants()
    )


@component.add(
    name="share FEH over FED solid bioE",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_feh_over_fed_solid_bioe"},
)
def share_feh_over_fed_solid_bioe():
    """
    Estimated share of FEH over FED for solid bioenergy for the year 2011 (IEA, 2014 and own calculations).
    """
    return _ext_constant_share_feh_over_fed_solid_bioe()


_ext_constant_share_feh_over_fed_solid_bioe = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C69",
    {},
    _root,
    {},
    "_ext_constant_share_feh_over_fed_solid_bioe",
)


@component.add(
    name="FES Heat from coal",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_coal_for_heatcom_plants": 1,
        "pes_coal_for_heatnc_plants": 1,
        "efficiency_coal_for_heat_plants": 1,
    },
)
def fes_heat_from_coal():
    """
    Heat from Heat plants that burn coal (both commercial and non-commercial).
    """
    return (
        pes_coal_for_heatcom_plants() + pes_coal_for_heatnc_plants()
    ) * efficiency_coal_for_heat_plants()


@component.add(
    name='"FES Heat from nat. gas"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_nat_gas_for_heatcom_plants": 1,
        "pes_nat_gas_for_heatnc_plants": 1,
        "efficiency_gases_for_heat_plants": 1,
    },
)
def fes_heat_from_nat_gas():
    """
    Heat from Heat plants that burn fossil natural gas (both commercial and non-commercial).
    """
    return (
        pes_nat_gas_for_heatcom_plants() + pes_nat_gas_for_heatnc_plants()
    ) * efficiency_gases_for_heat_plants()


@component.add(
    name="FES Heat from oil",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_oil_for_heatcom_plants": 1,
        "pes_oil_for_heatnc_plants": 1,
        "efficiency_liquids_for_heat_plants": 1,
    },
)
def fes_heat_from_oil():
    """
    Heat from Heat plants that burn oil (both commercial and non-commercial).
    """
    return (
        pes_oil_for_heatcom_plants() + pes_oil_for_heatnc_plants()
    ) * efficiency_liquids_for_heat_plants()


@component.add(
    name="Abundance heat",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_fe_heat_generation_ej": 2, "total_fed_heat_ej": 3},
)
def abundance_heat():
    """
    The parameter abundance varies between (1;0). Abundance=1 while the supply covers the demand; the closest to 0 indicates a higher divergence between supply and demand.
    """
    return if_then_else(
        total_fe_heat_generation_ej() > total_fed_heat_ej(),
        lambda: xr.DataArray(
            1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: 1
        - zidz(
            total_fed_heat_ej() - total_fe_heat_generation_ej(), total_fed_heat_ej()
        ),
    )


@component.add(
    name="required FED sectors by fuel",
    units="EJ",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"required_final_energy_by_sector_and_fuel_eu": 1},
)
def required_fed_sectors_by_fuel():
    return sum(
        required_final_energy_by_sector_and_fuel_eu().rename({"sectors": "sectors!"}),
        dim=["sectors!"],
    )


@component.add(
    name="share trad biomass vs solids in households",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_share_trad_biomass_vs_solids_in_households"
    },
)
def share_trad_biomass_vs_solids_in_households():
    return _ext_constant_share_trad_biomass_vs_solids_in_households()


_ext_constant_share_trad_biomass_vs_solids_in_households = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G36",
    {},
    _root,
    {},
    "_ext_constant_share_trad_biomass_vs_solids_in_households",
)


@component.add(
    name='"new RES capacity for heat-com TW"',
    units="TW/Year",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 3,
        "historic_res_capacity_for_heatcom": 2,
        "adapt_growth_res_for_heatcom": 1,
        "remaining_potential_constraint_on_new_res_heat_capacity": 1,
        "installed_capacity_res_heatcom_tw": 1,
        "abundance_res_heatcom2": 1,
    },
)
def new_res_capacity_for_heatcom_tw():
    """
    New annual installed capacity of RES technologies for commercial heat.
    """
    return (
        if_then_else(
            time() < 2013,
            lambda: (
                historic_res_capacity_for_heatcom(integer(time() + 1))
                - historic_res_capacity_for_heatcom(integer(time()))
            ).expand_dims({"scenarios": _subscript_dict["scenarios"]}, 1),
            lambda: adapt_growth_res_for_heatcom()
            * installed_capacity_res_heatcom_tw()
            * remaining_potential_constraint_on_new_res_heat_capacity(),
        )
        * abundance_res_heatcom2()
    )


@component.add(
    name="share global pop dependent on trad biomass",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"population_dependent_on_trad_biomass": 1, "population": 1},
)
def share_global_pop_dependent_on_trad_biomass():
    return population_dependent_on_trad_biomass() / population()


@component.add(
    name='"Historic RES capacity for heat-com"',
    units="TW",
    subscripts=["RES heat"],
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_res_capacity_for_heatcom",
        "__lookup__": "_ext_lookup_historic_res_capacity_for_heatcom",
    },
)
def historic_res_capacity_for_heatcom(x, final_subs=None):
    """
    Historic installed capacity of RES technologies for commercial heat generation.
    """
    return _ext_lookup_historic_res_capacity_for_heatcom(x, final_subs)


_ext_lookup_historic_res_capacity_for_heatcom = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "25",
    "H66",
    {"RES heat": ['"solar-heat"']},
    _root,
    {"RES heat": _subscript_dict["RES heat"]},
    "_ext_lookup_historic_res_capacity_for_heatcom",
)

_ext_lookup_historic_res_capacity_for_heatcom.add(
    "inputs_EU.xlsx", "Constants", "25", "H67", {"RES heat": ['"geot-heat"']}
)

_ext_lookup_historic_res_capacity_for_heatcom.add(
    "inputs_EU.xlsx", "Constants", "25", "H65", {"RES heat": ['"solid bioE-heat"']}
)


@component.add(
    name='"share coal dem for Heat-nc"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_coal_heatnc": 1, "ped_coal_ej": 1},
)
def share_coal_dem_for_heatnc():
    """
    Share of coal demand to cover non-commercial heat consumption in Heat plants.
    """
    return zidz(ped_coal_heatnc(), ped_coal_ej())


@component.add(
    name='"RES heat-com tot overcapacity"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_fes_tot_res_for_heatcom_ej": 3,
        "fe_real_supply_res_for_heatcom_tot_ej": 1,
    },
)
def res_heatcom_tot_overcapacity():
    """
    Overcapacity for each technology RES for heat-com taking into account the installed capacity and the real generation.
    """
    return if_then_else(
        potential_fes_tot_res_for_heatcom_ej() == 0,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: (
            potential_fes_tot_res_for_heatcom_ej()
            - fe_real_supply_res_for_heatcom_tot_ej()
        )
        / potential_fes_tot_res_for_heatcom_ej(),
    )


@component.add(
    name="share inventories next step",
    units="Dmnl",
    subscripts=["sectors"],
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_share_inventories_next_step",
        "__data__": "_ext_data_share_inventories_next_step",
        "time": 1,
    },
)
def share_inventories_next_step():
    return _ext_data_share_inventories_next_step(time())


_ext_data_share_inventories_next_step = ExtData(
    "inputs_EU.xlsx",
    "Economy",
    "554",
    "C432",
    "interpolate",
    {"sectors": _subscript_dict["sectors"]},
    _root,
    {"sectors": _subscript_dict["sectors"]},
    "_ext_data_share_inventories_next_step",
)


@component.add(
    name="Government expenditure share",
    units="Dmnl",
    subscripts=["sectors"],
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_government_expenditure_share",
        "__data__": "_ext_data_government_expenditure_share",
        "time": 1,
    },
)
def government_expenditure_share():
    """
    Government expenditure share in total sectoral final demand.
    """
    return _ext_data_government_expenditure_share(time())


_ext_data_government_expenditure_share = ExtData(
    "inputs_EU.xlsx",
    "Economy",
    "392",
    "B393",
    "interpolate",
    {"sectors": _subscript_dict["sectors"]},
    _root,
    {"sectors": _subscript_dict["sectors"]},
    "_ext_data_government_expenditure_share",
)


@component.add(
    name="Changes in inventories share",
    units="Dmnl",
    subscripts=["sectors"],
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_changes_in_inventories_share",
        "__data__": "_ext_data_changes_in_inventories_share",
        "time": 1,
    },
)
def changes_in_inventories_share():
    """
    Changes in inventories share in total sectoral final demand.
    """
    return _ext_data_changes_in_inventories_share(time())


_ext_data_changes_in_inventories_share = ExtData(
    "inputs_EU.xlsx",
    "Economy",
    "392",
    "B432",
    "interpolate",
    {"sectors": _subscript_dict["sectors"]},
    _root,
    {"sectors": _subscript_dict["sectors"]},
    "_ext_data_changes_in_inventories_share",
)


@component.add(
    name="share Government expenditure next step",
    units="Dmnl",
    subscripts=["sectors"],
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_share_government_expenditure_next_step",
        "__data__": "_ext_data_share_government_expenditure_next_step",
        "time": 1,
    },
)
def share_government_expenditure_next_step():
    """
    Share of public expenditures over total
    """
    return _ext_data_share_government_expenditure_next_step(time())


_ext_data_share_government_expenditure_next_step = ExtData(
    "inputs_EU.xlsx",
    "Economy",
    "554",
    "C393",
    "interpolate",
    {"sectors": _subscript_dict["sectors"]},
    _root,
    {"sectors": _subscript_dict["sectors"]},
    "_ext_data_share_government_expenditure_next_step",
)


@component.add(
    name="Government expenditure and changes in inventories shares",
    units="Dmnl",
    subscripts=["sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"changes_in_inventories_share": 1, "government_expenditure_share": 1},
)
def government_expenditure_and_changes_in_inventories_shares():
    """
    Government expenditure share in total sectoral final demand and changes in inventories share in total sectoral final demand.
    """
    return changes_in_inventories_share() + government_expenditure_share()


@component.add(
    name="share Government expenditures and changes in inventories next step",
    units="Dmnl",
    subscripts=["sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "share_government_expenditure_next_step": 1,
        "share_inventories_next_step": 1,
    },
)
def share_government_expenditures_and_changes_in_inventories_next_step():
    """
    Sum of share of Public expenditures and changes in inventories.
    """
    return share_government_expenditure_next_step() + share_inventories_next_step()


@component.add(
    name='"include materials for overgrids?"',
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def include_materials_for_overgrids():
    """
    1. Include materials for overgrids in the CED of RES elec var 0: NOT include materials for overgrids in the CED of RES elec var
    """
    return 0


@component.add(
    name='"All minerals virgin?"',
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def all_minerals_virgin():
    """
    0. All minerals are virgin: current and future recycling rates set to 0% (pption to compare with results offline MEDEAS). 1. Real share of virgin/recycled minerals (for normal simulations).
    """
    return 1


@component.add(
    name="materials for new RES elec per capacity installed",
    units="kg/MW",
    subscripts=["RES elec", "materials"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "materials_per_new_capacity_installed_wind_onshore": 1,
        "include_materials_for_overgrids": 4,
        "materials_per_new_res_elec_capacity_installed_hvdcs": 4,
        "materials_per_new_res_elec_capacity_installed_material_overgrid_high_power": 4,
        "materials_per_new_capacity_installed_wind_offshore": 1,
        "materials_per_new_capacity_installed_pv": 1,
        "materials_per_new_capacity_installed_csp": 1,
    },
)
def materials_for_new_res_elec_per_capacity_installed():
    value = xr.DataArray(
        np.nan,
        {
            "RES elec": _subscript_dict["RES elec"],
            "materials": _subscript_dict["materials"],
        },
        ["RES elec", "materials"],
    )
    value.loc[["hydro"], :] = 0
    value.loc[['"geot-elec"'], :] = 0
    value.loc[['"solid bioE-elec"'], :] = 0
    value.loc[["oceanic"], :] = 0
    value.loc[["wind onshore"], :] = (
        (
            materials_per_new_capacity_installed_wind_onshore()
            + (
                materials_per_new_res_elec_capacity_installed_hvdcs()
                + materials_per_new_res_elec_capacity_installed_material_overgrid_high_power()
            )
            * include_materials_for_overgrids()
        )
        .expand_dims({"RES elec": ["wind onshore"]}, 0)
        .values
    )
    value.loc[["wind offshore"], :] = (
        (
            materials_per_new_capacity_installed_wind_offshore()
            + (
                materials_per_new_res_elec_capacity_installed_hvdcs()
                + materials_per_new_res_elec_capacity_installed_material_overgrid_high_power()
            )
            * include_materials_for_overgrids()
        )
        .expand_dims({"RES elec": ["wind offshore"]}, 0)
        .values
    )
    value.loc[["solar PV"], :] = (
        (
            materials_per_new_capacity_installed_pv()
            + (
                materials_per_new_res_elec_capacity_installed_hvdcs()
                + materials_per_new_res_elec_capacity_installed_material_overgrid_high_power()
            )
            * include_materials_for_overgrids()
        )
        .expand_dims({"RES elec": ["solar PV"]}, 0)
        .values
    )
    value.loc[["CSP"], :] = (
        (
            materials_per_new_capacity_installed_csp()
            + (
                materials_per_new_res_elec_capacity_installed_hvdcs()
                + materials_per_new_res_elec_capacity_installed_material_overgrid_high_power()
            )
            * include_materials_for_overgrids()
        )
        .expand_dims({"RES elec": ["CSP"]}, 0)
        .values
    )
    return value


@component.add(
    name="CEDtot per material RES elec var",
    units="EJ",
    subscripts=["RES elec", "materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ced_new_cap_per_material_res_elec_var": 1,
        "ced_om_over_lifetime_per_material_res_elec_var": 1,
    },
)
def cedtot_per_material_res_elec_var():
    """
    Total cumulative energy demand (construction+O&M) per material of RES variables per technology.
    """
    return (
        ced_new_cap_per_material_res_elec_var()
        + ced_om_over_lifetime_per_material_res_elec_var()
    )


@component.add(
    name="CEDtot per TW RES elec var",
    units="MJ/MW",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"cedtot_per_tw_per_material_res_elec_var": 1},
)
def cedtot_per_tw_res_elec_var():
    """
    Total cumulative energy demand (construction+O&M) per power installed of RES variables per technology (considering only material requirements).
    """
    return (
        sum(
            cedtot_per_tw_per_material_res_elec_var().rename(
                {"materials": "materials!"}
            ),
            dim=["materials!"],
        )
        * 1000000.0
    )


@component.add(
    name="CEDtot per TW per material RES elec var",
    units="EJ/TW",
    subscripts=["RES elec", "materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "cedtot_per_material_res_elec_var": 1,
        "res_elec_capacity_under_construction_tw": 1,
    },
)
def cedtot_per_tw_per_material_res_elec_var():
    """
    Total cumulative energy demand (construction+O&M) per power installed per material of RES variables per technology (considering only material requirements).
    """
    return zidz(
        cedtot_per_material_res_elec_var(),
        res_elec_capacity_under_construction_tw().expand_dims(
            {"materials": _subscript_dict["materials"]}, 1
        ),
    )


@component.add(
    name="Demand by sector FD EU",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_demand_by_sector_fd_eu": 1},
    other_deps={
        "_integ_demand_by_sector_fd_eu": {
            "initial": {"initial_demand_by_sectot": 1},
            "step": {
                "variation_demand_flow_fd_eu": 1,
                "demand_not_covered_by_sector_fd_eu": 1,
            },
        }
    },
)
def demand_by_sector_fd_eu():
    """
    Final demand by EU28 35 industrial sectors
    """
    return _integ_demand_by_sector_fd_eu()


_integ_demand_by_sector_fd_eu = Integ(
    lambda: variation_demand_flow_fd_eu() - demand_not_covered_by_sector_fd_eu(),
    lambda: initial_demand_by_sectot().expand_dims(
        {"scenarios": _subscript_dict["scenarios"]}, 0
    ),
    "_integ_demand_by_sector_fd_eu",
)


@component.add(
    name="sum variation",
    units="Mdollars/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"variation_demand_flow_fd_eu": 1},
)
def sum_variation():
    """
    Variation of total final demand
    """
    return sum(
        variation_demand_flow_fd_eu().rename({"sectors": "sectors!"}), dim=["sectors!"]
    )


@component.add(
    name="CEDtot per TW over lifetime RES elec dispatch",
    units="EJ/TW",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "res_elec_variables": 1,
        "cpini_res_elec": 1,
        "ej_per_twh": 1,
        "lifetime_res_elec": 1,
        "twe_per_twh": 1,
        "eroiini_res_elec_dispatch": 1,
        "quality_of_electricity_2015": 1,
    },
)
def cedtot_per_tw_over_lifetime_res_elec_dispatch():
    """
    Total cumulative energy demand (including installation of new capacity and O&M) per MW for RES dispatchables per technology over the lifetime of the infrastructure.
    """
    return zidz(
        (
            (1 - res_elec_variables())
            * (cpini_res_elec() * lifetime_res_elec() * ej_per_twh() / twe_per_twh())
        ).expand_dims({"scenarios": _subscript_dict["scenarios"]}, 1),
        eroiini_res_elec_dispatch() * quality_of_electricity_2015(),
    )


@component.add(
    name="quality of electricity 2015",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "share_total_final_energy_vs_tpes": 1, "aux3": 1},
)
def quality_of_electricity_2015():
    """
    Quality of electricity until the year 2015.
    """
    return if_then_else(
        time() < 2015, lambda: share_total_final_energy_vs_tpes(), lambda: aux3()
    )


@component.add(
    name="share total final energy vs TPES",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_tfec": 1,
        "tpes_ej": 1,
        "total_real_nonenergy_use_consumption_ej": 1,
    },
)
def share_total_final_energy_vs_tpes():
    """
    Total final energy vs TPES, the latter without taking into account the non-energy uses. We consider this ratio for the dynamic quality of electricity.
    """
    return real_tfec() / (tpes_ej() - total_real_nonenergy_use_consumption_ej())


@component.add(
    name='"g=quality of electricity"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "staticdynamic_quality_of_electricity": 1,
        "quality_of_electricity_2015": 1,
        "share_total_final_energy_vs_tpes": 1,
    },
)
def gquality_of_electricity():
    """
    Quality of electricity (TFES/TPES, the latter without taking into account the non-energy uses), also know as factor "g" in EROI studies.
    """
    return if_then_else(
        staticdynamic_quality_of_electricity() == 1,
        lambda: quality_of_electricity_2015(),
        lambda: share_total_final_energy_vs_tpes(),
    )


@component.add(
    name="Cp exogenous RES elec reduction",
    units="Dmnl",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "cp_exogenous_res_elec_dispatch_reduction": 4,
        "cp_exogenous_res_elec_var_reduction": 4,
    },
)
def cp_exogenous_res_elec_reduction():
    """
    Reduction of Cp of RES elec due to the penetration of RES elec variables (modelling of overcapacities due to the intermittence of RES elec variables).
    """
    value = xr.DataArray(
        np.nan,
        {
            "RES elec": _subscript_dict["RES elec"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES elec", "scenarios"],
    )
    value.loc[["hydro"], :] = (
        cp_exogenous_res_elec_dispatch_reduction()
        .expand_dims({"RES elec": ["hydro"]}, 0)
        .values
    )
    value.loc[['"geot-elec"'], :] = (
        cp_exogenous_res_elec_dispatch_reduction()
        .expand_dims({"RES elec": ['"geot-elec"']}, 0)
        .values
    )
    value.loc[['"solid bioE-elec"'], :] = (
        cp_exogenous_res_elec_dispatch_reduction()
        .expand_dims({"RES elec": ['"solid bioE-elec"']}, 0)
        .values
    )
    value.loc[["oceanic"], :] = (
        cp_exogenous_res_elec_dispatch_reduction()
        .expand_dims({"RES elec": ["oceanic"]}, 0)
        .values
    )
    value.loc[["wind onshore"], :] = (
        cp_exogenous_res_elec_var_reduction()
        .expand_dims({"RES elec": ["wind onshore"]}, 0)
        .values
    )
    value.loc[["wind offshore"], :] = (
        cp_exogenous_res_elec_var_reduction()
        .expand_dims({"RES elec": ["wind offshore"]}, 0)
        .values
    )
    value.loc[["solar PV"], :] = (
        cp_exogenous_res_elec_var_reduction()
        .expand_dims({"RES elec": ["solar PV"]}, 0)
        .values
    )
    value.loc[["CSP"], :] = (
        cp_exogenous_res_elec_var_reduction()
        .expand_dims({"RES elec": ["CSP"]}, 0)
        .values
    )
    return value


@component.add(
    name='"RES elec variables?"',
    units="Dmnl",
    subscripts=["RES elec"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_res_elec_variables"},
)
def res_elec_variables():
    """
    Vector to distinguis between RES elec variables and dispatchables: *If=1, RES elec variables (fully endogenous calculation from the materials requirements). *If=0, RES elec dispatchables (partially endogenous calculation requiring a value of EROI as starting point).
    """
    return _ext_constant_res_elec_variables()


_ext_constant_res_elec_variables = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "X13",
    {"RES elec": ["hydro"]},
    _root,
    {"RES elec": _subscript_dict["RES elec"]},
    "_ext_constant_res_elec_variables",
)

_ext_constant_res_elec_variables.add(
    "inputs_EU.xlsx", "Parameters", "X7", {"RES elec": ['"geot-elec"']}
)

_ext_constant_res_elec_variables.add(
    "inputs_EU.xlsx", "Parameters", "X8", {"RES elec": ['"solid bioE-elec"']}
)

_ext_constant_res_elec_variables.add(
    "inputs_EU.xlsx", "Parameters", "X9", {"RES elec": ["oceanic"]}
)

_ext_constant_res_elec_variables.add(
    "inputs_EU.xlsx", "Parameters", "X10", {"RES elec": ["wind onshore"]}
)

_ext_constant_res_elec_variables.add(
    "inputs_EU.xlsx", "Parameters", "X12", {"RES elec": ["wind offshore"]}
)

_ext_constant_res_elec_variables.add(
    "inputs_EU.xlsx", "Parameters", "X11", {"RES elec": ["solar PV"]}
)

_ext_constant_res_elec_variables.add(
    "inputs_EU.xlsx", "Parameters", "X16", {"RES elec": ["CSP"]}
)


@component.add(
    name="aux3",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_aux3": 1},
    other_deps={
        "_delayfixed_aux3": {"initial": {}, "step": {"quality_of_electricity_2015": 1}}
    },
)
def aux3():
    """
    Auxiliary variable to estimate the quality of electricity until the year 2015.
    """
    return _delayfixed_aux3()


_delayfixed_aux3 = DelayFixed(
    lambda: quality_of_electricity_2015(),
    lambda: 0.03125,
    lambda: xr.DataArray(
        0.75, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    time_step,
    "_delayfixed_aux3",
)


@component.add(
    name="FEI RES elec var",
    units="EJ",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "cedtot_new_cap_res_elec_var": 1,
        "grid_correction_factor_res_elec": 1,
        "ced_decom_res_elec_capacity": 1,
        "cedtot_om_res_elec_var": 1,
        "gquality_of_electricity": 1,
        "selfelectricity_consumption_res_elec": 1,
        "real_generation_res_elec_ej": 1,
    },
)
def fei_res_elec_var():
    """
    Final energy invested (equivalent to the denominator of the EROI (=CED*g, with total cumulative energy demand including installation of new capacity and O&M) for RES variables per technology).
    """
    return (
        cedtot_new_cap_res_elec_var() * (1 + grid_correction_factor_res_elec())
        + ced_decom_res_elec_capacity()
        + cedtot_om_res_elec_var()
    ) * gquality_of_electricity() + real_generation_res_elec_ej() * selfelectricity_consumption_res_elec()


@component.add(
    name="\"'static' EROI RES elec\"",
    units="Dmnl",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fei_over_lifetime_res_elec_dispatch": 8,
        "gquality_of_electricity": 4,
        "output_elec_over_lifetime_res_elec": 8,
        "fei_over_lifetime_res_elec_var": 8,
    },
)
def static_eroi_res_elec():
    """
    Energy return on energy invested (over the full lifetime of the infrastructure) per RES technology for generating electricity.
    """
    value = xr.DataArray(
        np.nan,
        {
            "RES elec": _subscript_dict["RES elec"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES elec", "scenarios"],
    )
    value.loc[["hydro"], :] = (
        if_then_else(
            fei_over_lifetime_res_elec_dispatch()
            .loc["hydro", :]
            .reset_coords(drop=True)
            == 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: output_elec_over_lifetime_res_elec()
            .loc["hydro", :]
            .reset_coords(drop=True)
            / (
                fei_over_lifetime_res_elec_dispatch()
                .loc["hydro", :]
                .reset_coords(drop=True)
                * gquality_of_electricity()
            ),
        )
        .expand_dims({"RES elec": ["hydro"]}, 0)
        .values
    )
    value.loc[['"geot-elec"'], :] = (
        if_then_else(
            fei_over_lifetime_res_elec_dispatch()
            .loc['"geot-elec"', :]
            .reset_coords(drop=True)
            == 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: output_elec_over_lifetime_res_elec()
            .loc['"geot-elec"', :]
            .reset_coords(drop=True)
            / (
                fei_over_lifetime_res_elec_dispatch()
                .loc['"geot-elec"', :]
                .reset_coords(drop=True)
                * gquality_of_electricity()
            ),
        )
        .expand_dims({"RES elec": ['"geot-elec"']}, 0)
        .values
    )
    value.loc[['"solid bioE-elec"'], :] = (
        if_then_else(
            fei_over_lifetime_res_elec_dispatch()
            .loc['"solid bioE-elec"', :]
            .reset_coords(drop=True)
            == 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: output_elec_over_lifetime_res_elec()
            .loc['"solid bioE-elec"', :]
            .reset_coords(drop=True)
            / (
                fei_over_lifetime_res_elec_dispatch()
                .loc['"solid bioE-elec"', :]
                .reset_coords(drop=True)
                * gquality_of_electricity()
            ),
        )
        .expand_dims({"RES elec": ['"solid bioE-elec"']}, 0)
        .values
    )
    value.loc[["oceanic"], :] = (
        if_then_else(
            fei_over_lifetime_res_elec_dispatch()
            .loc["oceanic", :]
            .reset_coords(drop=True)
            == 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: output_elec_over_lifetime_res_elec()
            .loc["oceanic", :]
            .reset_coords(drop=True)
            / (
                fei_over_lifetime_res_elec_dispatch()
                .loc["oceanic", :]
                .reset_coords(drop=True)
                * gquality_of_electricity()
            ),
        )
        .expand_dims({"RES elec": ["oceanic"]}, 0)
        .values
    )
    value.loc[["wind onshore"], :] = (
        if_then_else(
            fei_over_lifetime_res_elec_var()
            .loc["wind onshore", :]
            .reset_coords(drop=True)
            == 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: output_elec_over_lifetime_res_elec()
            .loc["wind onshore", :]
            .reset_coords(drop=True)
            / fei_over_lifetime_res_elec_var()
            .loc["wind onshore", :]
            .reset_coords(drop=True),
        )
        .expand_dims({"RES elec": ["wind onshore"]}, 0)
        .values
    )
    value.loc[["wind offshore"], :] = (
        if_then_else(
            fei_over_lifetime_res_elec_var()
            .loc["wind offshore", :]
            .reset_coords(drop=True)
            == 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: output_elec_over_lifetime_res_elec()
            .loc["wind offshore", :]
            .reset_coords(drop=True)
            / fei_over_lifetime_res_elec_var()
            .loc["wind offshore", :]
            .reset_coords(drop=True),
        )
        .expand_dims({"RES elec": ["wind offshore"]}, 0)
        .values
    )
    value.loc[["solar PV"], :] = (
        if_then_else(
            fei_over_lifetime_res_elec_var().loc["solar PV", :].reset_coords(drop=True)
            == 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: output_elec_over_lifetime_res_elec()
            .loc["solar PV", :]
            .reset_coords(drop=True)
            / fei_over_lifetime_res_elec_var()
            .loc["solar PV", :]
            .reset_coords(drop=True),
        )
        .expand_dims({"RES elec": ["solar PV"]}, 0)
        .values
    )
    value.loc[["CSP"], :] = (
        if_then_else(
            fei_over_lifetime_res_elec_var().loc["CSP", :].reset_coords(drop=True) == 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: output_elec_over_lifetime_res_elec()
            .loc["CSP", :]
            .reset_coords(drop=True)
            / fei_over_lifetime_res_elec_var().loc["CSP", :].reset_coords(drop=True),
        )
        .expand_dims({"RES elec": ["CSP"]}, 0)
        .values
    )
    return value


@component.add(
    name="materials required for new RES elec Mt",
    units="Mt",
    subscripts=["RES elec", "materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "res_elec_capacity_under_construction_tw": 1,
        "materials_for_new_res_elec_per_capacity_installed": 1,
        "m_per_t": 1,
        "kg_per_mt": 1,
    },
)
def materials_required_for_new_res_elec_mt():
    """
    Annual materials required for the installation of new capacity of RES for electricity by technology.
    """
    return (
        res_elec_capacity_under_construction_tw()
        * materials_for_new_res_elec_per_capacity_installed()
        * m_per_t()
        / kg_per_mt()
    ).transpose("RES elec", "materials", "scenarios")


@component.add(
    name="FEI over lifetime RES elec var",
    units="EJ",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "cedtot_new_cap_res_elec_var": 1,
        "grid_correction_factor_res_elec": 1,
        "share_energy_requirements_for_decom_res_elec": 1,
        "ced_om_over_lifetime_res_elec_var": 1,
        "gquality_of_electricity": 1,
        "selfelectricity_consumption_res_elec": 1,
        "output_elec_over_lifetime_res_elec": 1,
    },
)
def fei_over_lifetime_res_elec_var():
    """
    Final energy invested over lifetime per RES elec variable technology (equivalent to the denominator of the EROI (=CED*g, with total cumulative energy demand (including installation of new capacity and O&M) for RES variables per technology over the lifetime of the infrastructure.
    """
    return (
        cedtot_new_cap_res_elec_var()
        * (
            1
            + share_energy_requirements_for_decom_res_elec()
            + grid_correction_factor_res_elec()
        )
        + ced_om_over_lifetime_res_elec_var()
    ) * gquality_of_electricity() + output_elec_over_lifetime_res_elec() * selfelectricity_consumption_res_elec()


@component.add(
    name="CED decom RES elec capacity",
    units="EJ",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "share_energy_requirements_for_decom_res_elec": 1,
        "cedtot_new_cap_res_elec_var": 1,
        "wear_res_elec": 1,
        "res_elec_capacity_under_construction_tw": 1,
    },
)
def ced_decom_res_elec_capacity():
    """
    Cumulative energy demand (CED) required to decommission RES electricity generation plants which have ended their lifetime.
    """
    return zidz(
        share_energy_requirements_for_decom_res_elec()
        * cedtot_new_cap_res_elec_var()
        * wear_res_elec(),
        res_elec_capacity_under_construction_tw(),
    )


@component.add(
    name='"CED O&M per material RES elec var"',
    units="EJ",
    subscripts=["RES elec", "materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "materials_required_for_om_res_elec_mt": 1,
        "energy_cons_per_unit_of_material_cons_for_res_elec": 1,
        "kg_per_mt": 1,
        "mj_per_ej": 1,
    },
)
def ced_om_per_material_res_elec_var():
    """
    Cumulative energy demand per material of new installed capacity of RES variables per technology.
    """
    return (
        materials_required_for_om_res_elec_mt()
        * energy_cons_per_unit_of_material_cons_for_res_elec()
        * kg_per_mt()
        / mj_per_ej()
    )


@component.add(
    name="CEDtot new cap RES elec var",
    units="EJ",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ced_new_cap_per_material_res_elec_var": 1},
)
def cedtot_new_cap_res_elec_var():
    """
    Cumulative energy demand of new capacity for RES variables per technology.
    """
    return sum(
        ced_new_cap_per_material_res_elec_var().rename({"materials": "materials!"}),
        dim=["materials!"],
    )


@component.add(
    name='"CEDtot O&M RES elec var"',
    units="EJ",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ced_om_per_material_res_elec_var": 1,
        "total_energy_requirements_om_for_water_consumption_res_elec": 1,
    },
)
def cedtot_om_res_elec_var():
    """
    Cumulative energy demand of O&M for RES variables per technology.
    """
    return (
        sum(
            ced_om_per_material_res_elec_var().rename({"materials": "materials!"}),
            dim=["materials!"],
        )
        + total_energy_requirements_om_for_water_consumption_res_elec()
    )


@component.add(
    name="b lineal regr",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "esoi_phs_depleted_potential": 1,
        "a_lineal_regr": 1,
        "max_capacity_potential_phs": 1,
    },
)
def b_lineal_regr():
    return (
        esoi_phs_depleted_potential() - a_lineal_regr() * max_capacity_potential_phs()
    )


@component.add(
    name="a lineal regr",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "esoi_phs_full_potential": 1,
        "esoi_phs_depleted_potential": 1,
        "max_capacity_potential_phs": 1,
    },
)
def a_lineal_regr():
    return (esoi_phs_full_potential() - esoi_phs_depleted_potential()) / (
        0 - max_capacity_potential_phs()
    )


@component.add(
    name="ESOI PHS depleted potential",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_esoi_phs_depleted_potential"},
)
def esoi_phs_depleted_potential():
    """
    ESOI PHS of the depleted potential of the resource. We assume the ESOI of PHS linearly decreases with the PHS cumulated installed capacity.
    """
    return _ext_constant_esoi_phs_depleted_potential()


_ext_constant_esoi_phs_depleted_potential = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G54",
    {},
    _root,
    {},
    "_ext_constant_esoi_phs_depleted_potential",
)


@component.add(
    name="total demand",
    units="Tdollars",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"demand_by_sector_fd_eu": 1},
)
def total_demand():
    """
    Total final demand
    """
    return (
        sum(demand_by_sector_fd_eu().rename({"sectors": "sectors!"}), dim=["sectors!"])
        / 1000000.0
    )


@component.add(
    name="initial demand by sectot",
    units="Mdollars",
    subscripts=["sectors"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_demand_by_sectot"},
)
def initial_demand_by_sectot():
    return _ext_constant_initial_demand_by_sectot()


_ext_constant_initial_demand_by_sectot = ExtConstant(
    "inputs_EU.xlsx",
    "Economy",
    "B341",
    {"sectors": _subscript_dict["sectors"]},
    _root,
    {"sectors": _subscript_dict["sectors"]},
    "_ext_constant_initial_demand_by_sectot",
)


@component.add(
    name="demand not covered total FD",
    units="Mdollars/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"demand_not_covered_by_sector_fd_eu": 1},
)
def demand_not_covered_total_fd():
    return sum(
        demand_not_covered_by_sector_fd_eu().rename({"sectors": "sectors!"}),
        dim=["sectors!"],
    )


@component.add(
    name="TPED by fuel",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "extraction_uranium_ej_eu": 1,
        "pe_supply_res_nonelec_ej": 1,
        "pe_elec_generation_from_res_ej": 1,
        "ped_total_oil_ej": 1,
        "ped_coal_ej": 1,
        "ped_nat_gas_ej": 1,
        "pes_waste_ej": 1,
    },
)
def tped_by_fuel():
    """
    Total primary energy demand by fuel.
    """
    return (
        extraction_uranium_ej_eu()
        + pe_supply_res_nonelec_ej()
        + pe_elec_generation_from_res_ej()
        + ped_total_oil_ej()
        + ped_coal_ej()
        + ped_nat_gas_ej()
        + pes_waste_ej()
    )


@component.add(
    name="abundance TPE",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"tpes_ej": 2, "tped_by_fuel": 3},
)
def abundance_tpe():
    """
    The parameter abundance varies between (1;0). Abundance=1 while the supply covers the demand; the closest to 0 indicates a higher divergence between supply and demand.
    """
    return if_then_else(
        tpes_ej() > tped_by_fuel(),
        lambda: xr.DataArray(
            1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: 1 - (tped_by_fuel() - tpes_ej()) / tped_by_fuel(),
    )


@component.add(
    name='"PES RES for heat-com by techn"',
    units="EJ",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_real_generation_res_heatcom_ej": 1, "efficiency_res_heat": 1},
)
def pes_res_for_heatcom_by_techn():
    """
    Primary energy supply of RES technologies for commercial heat.
    """
    return fe_real_generation_res_heatcom_ej() / efficiency_res_heat()


@component.add(
    name="P RES for heat",
    units="1/Year",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "p_solar_for_heat": 1,
        "p_geothermal_for_heat": 1,
        "p_solid_bioe_for_heat": 1,
    },
)
def p_res_for_heat():
    """
    Annual growth in RES supply for heat depending on the policy of the scenario.
    """
    value = xr.DataArray(
        np.nan,
        {
            "RES heat": _subscript_dict["RES heat"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES heat", "scenarios"],
    )
    value.loc[['"solar-heat"'], :] = (
        p_solar_for_heat().expand_dims({"RES heat": ['"solar-heat"']}, 0).values
    )
    value.loc[['"geot-heat"'], :] = (
        p_geothermal_for_heat().expand_dims({"RES heat": ['"geot-heat"']}, 0).values
    )
    value.loc[['"solid bioE-heat"'], :] = (
        p_solid_bioe_for_heat()
        .expand_dims({"RES heat": ['"solid bioE-heat"']}, 0)
        .values
    )
    return value


@component.add(
    name='"FE real generation RES heat-com EJ"',
    units="EJ",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_fes_res_for_heatcom_ej": 1,
        "res_heatcom_tot_overcapacity": 1,
    },
)
def fe_real_generation_res_heatcom_ej():
    """
    Commercial heat generation by RES technology.
    """
    return potential_fes_res_for_heatcom_ej() * (1 - res_heatcom_tot_overcapacity())


@component.add(
    name='"potential FES tot RES for heat-com EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"potential_fes_res_for_heatcom_ej": 1},
)
def potential_fes_tot_res_for_heatcom_ej():
    """
    Potential total final energy supply renewables for commercial heat given the installed capacity.
    """
    return sum(
        potential_fes_res_for_heatcom_ej().rename({"RES heat": "RES heat!"}),
        dim=["RES heat!"],
    )


@component.add(
    name="available max FE solid bioE for elec EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "available_max_pe_solid_bioe_for_elec_ej": 1,
        "efficiency_conversion_bioe_to_elec": 1,
    },
)
def available_max_fe_solid_bioe_for_elec_ej():
    """
    Maximum available (final energy) solid bioenergy for electricity.
    """
    return (
        available_max_pe_solid_bioe_for_elec_ej() * efficiency_conversion_bioe_to_elec()
    )


@component.add(
    name="max BioE TWe",
    units="TWe",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "available_max_fe_solid_bioe_for_elec_ej": 1,
        "twe_per_twh": 1,
        "ej_per_twh": 1,
    },
)
def max_bioe_twe():
    """
    Techno-ecological potential of biomass&waste. This potential is dynamic and dependant on the potential assigned for bioenergy residues.
    """
    return available_max_fe_solid_bioe_for_elec_ej() * twe_per_twh() / ej_per_twh()


@component.add(
    name='"Potential FES Heat-com nuclear CHP plants EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_nuclear_elec_generation_twh": 1,
        "share_of_heat_production_in_chp_plants_vs_total_nucelar_elec_generation": 1,
    },
)
def potential_fes_heatcom_nuclear_chp_plants_ej():
    """
    Potential commercial heat to be produced in cogeration nuclear plants.
    """
    return (
        fe_nuclear_elec_generation_twh()
        * share_of_heat_production_in_chp_plants_vs_total_nucelar_elec_generation()
    )


@component.add(
    name="share of heat production in CHP plants vs total nucelar elec generation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_share_of_heat_production_in_chp_plants_vs_total_nucelar_elec_generation"
    },
)
def share_of_heat_production_in_chp_plants_vs_total_nucelar_elec_generation():
    """
    Share of heat production in CHP plants vs total nucelar elec generation.
    """
    return (
        _ext_constant_share_of_heat_production_in_chp_plants_vs_total_nucelar_elec_generation()
    )


_ext_constant_share_of_heat_production_in_chp_plants_vs_total_nucelar_elec_generation = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G60",
    {},
    _root,
    {},
    "_ext_constant_share_of_heat_production_in_chp_plants_vs_total_nucelar_elec_generation",
)


@component.add(
    name="PES waste for elec plants",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_waste_ej": 1, "share_pes_waste_for_elec_plants": 1},
)
def pes_waste_for_elec_plants():
    """
    Primary energy supply of heat in Heat plants from waste.
    """
    return pes_waste_ej() * share_pes_waste_for_elec_plants()


@component.add(
    name="Losses CHP biogas",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_biogas_for_chp": 1,
        "fes_heatcom_from_biogas_in_chp_plants": 1,
        "fes_elec_from_biogas_in_chp_plants": 1,
    },
)
def losses_chp_biogas():
    """
    Losses in biogas CHP plants.
    """
    return (
        pes_biogas_for_chp()
        - fes_heatcom_from_biogas_in_chp_plants()
        - fes_elec_from_biogas_in_chp_plants()
    )


@component.add(
    name="Losses CHP waste",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_waste_for_chp_plants": 1,
        "fes_elec_from_waste_in_chp_plants": 1,
        "fes_heatcom_from_waste_in_chp_plants": 1,
    },
)
def losses_chp_waste():
    """
    Losses in waste CHP plants.
    """
    return (
        pes_waste_for_chp_plants()
        - fes_elec_from_waste_in_chp_plants()
        - fes_heatcom_from_waste_in_chp_plants()
    )


@component.add(
    name="share PES biogas for heat",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_tot_biogas_for_heatcom": 1, "pes_biogas_ej": 1},
)
def share_pes_biogas_for_heat():
    return pes_tot_biogas_for_heatcom() / pes_biogas_ej()


@component.add(
    name="PE losses RES for elec",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pe_losses_bioe_for_elec_ej": 1,
        "pe_losses_biogas_for_elec": 1,
        "pe_losses_waste_for_elec": 1,
    },
)
def pe_losses_res_for_elec():
    return (
        pe_losses_bioe_for_elec_ej()
        + pe_losses_biogas_for_elec()
        + pe_losses_waste_for_elec()
    )


@component.add(
    name="PES tot waste for elec",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_waste_for_elec_plants": 1,
        "fes_elec_from_waste_in_chp_plants": 1,
        "share_efficiency_waste_for_elec_in_chp_plants": 1,
        "losses_chp_waste": 1,
    },
)
def pes_tot_waste_for_elec():
    """
    Total primary energy supply for generating electricity from biogas (including CHP plants).
    """
    return (
        pes_waste_for_elec_plants()
        + fes_elec_from_waste_in_chp_plants()
        + losses_chp_waste() * share_efficiency_waste_for_elec_in_chp_plants()
    )


@component.add(
    name='"PES tot waste for heat-com"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_waste_for_heatcom_plants": 1,
        "fes_heatcom_from_waste_in_chp_plants": 1,
        "share_efficiency_waste_for_elec_in_chp_plants": 1,
        "losses_chp_waste": 1,
    },
)
def pes_tot_waste_for_heatcom():
    """
    Total primary energy supply for generating commercial heat from waste (including CHP plants).
    """
    return (
        pes_waste_for_heatcom_plants()
        + fes_heatcom_from_waste_in_chp_plants()
        + losses_chp_waste() * (1 - share_efficiency_waste_for_elec_in_chp_plants())
    )


@component.add(
    name='"abundance RES heat-com2"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_res_heatcom": 1},
)
def abundance_res_heatcom2():
    """
    Adaptation of the parameter abundance for better behaviour of the model.
    """
    return np.sqrt(abundance_res_heatcom())


@component.add(
    name="max PE potential biogas for heat",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_pe_biogas_ej": 1, "share_pes_biogas_for_heat": 1},
)
def max_pe_potential_biogas_for_heat():
    """
    Primary energy potential of biogas for heat taking into account the current share.
    """
    return max_pe_biogas_ej() * share_pes_biogas_for_heat()


@component.add(
    name="share efficiency biogas for elec in CHP plants",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "efficiency_biogas_for_elec_chp_plants": 2,
        "efficiency_biogas_for_heat_chp_plants": 1,
    },
)
def share_efficiency_biogas_for_elec_in_chp_plants():
    return efficiency_biogas_for_elec_chp_plants() / (
        efficiency_biogas_for_elec_chp_plants()
        + efficiency_biogas_for_heat_chp_plants()
    )


@component.add(
    name="share efficiency waste for elec in CHP plants",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "efficiency_waste_for_elec_chp_plants": 2,
        "efficiency_waste_for_heat_chp_plants": 1,
    },
)
def share_efficiency_waste_for_elec_in_chp_plants():
    return efficiency_waste_for_elec_chp_plants() / (
        efficiency_waste_for_elec_chp_plants() + efficiency_waste_for_heat_chp_plants()
    )


@component.add(
    name='"Max potential PE non-electric RES"',
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_pe_potential_tot_res_heat_ej": 1,
        "max_peavail_biofuels_potential": 1,
    },
)
def max_potential_pe_nonelectric_res():
    """
    Techno-ecological sustainable potential (primary energy) of non-electric RES.
    """
    return max_pe_potential_tot_res_heat_ej() + max_peavail_biofuels_potential()


@component.add(
    name="PES tot biogas for elec",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_biogas_for_elec_plants": 1,
        "fes_elec_from_biogas_in_chp_plants": 1,
        "share_efficiency_biogas_for_elec_in_chp_plants": 1,
        "losses_chp_biogas": 1,
    },
)
def pes_tot_biogas_for_elec():
    """
    Total primary energy supply for generating electricity from biogas (including CHP plants).
    """
    return (
        pes_biogas_for_elec_plants()
        + fes_elec_from_biogas_in_chp_plants()
        + losses_chp_biogas() * share_efficiency_biogas_for_elec_in_chp_plants()
    )


@component.add(
    name='"PES tot biogas for heat-com"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_biogas_for_heatcom_plants": 1,
        "fes_heatcom_from_biogas_in_chp_plants": 1,
        "share_efficiency_biogas_for_elec_in_chp_plants": 1,
        "losses_chp_biogas": 1,
    },
)
def pes_tot_biogas_for_heatcom():
    """
    Total primary energy supply for generating commercial heat from biogas (including CHP plants).
    """
    return (
        pes_biogas_for_heatcom_plants()
        + fes_heatcom_from_biogas_in_chp_plants()
        + losses_chp_biogas() * (1 - share_efficiency_biogas_for_elec_in_chp_plants())
    )


@component.add(
    name="PE losses NRE elec generation",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pe_losses_coal_for_elec_ej": 1,
        "pe_losses_conv_gas_for_elec_ej": 1,
        "pe_losses_oil_for_elec_ej": 1,
        "pe_losses_uncon_gas_for_elec_ej": 1,
        "pe_losses_uranium_for_elec_ej": 1,
    },
)
def pe_losses_nre_elec_generation():
    """
    Losses for electricity generation from non-renewable energy resources.
    """
    return (
        pe_losses_coal_for_elec_ej()
        + pe_losses_conv_gas_for_elec_ej()
        + pe_losses_oil_for_elec_ej()
        + pe_losses_uncon_gas_for_elec_ej()
        + pe_losses_uranium_for_elec_ej()
    )


@component.add(
    name="Elec gen related losses EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pe_losses_nre_elec_generation": 1, "pe_losses_res_for_elec": 1},
)
def elec_gen_related_losses_ej():
    """
    Electricity generation losses (EJ).
    """
    return pe_losses_nre_elec_generation() + pe_losses_res_for_elec()


@component.add(
    name="PE losses biogas for elec",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_tot_biogas_for_elec": 1, "fes_elec_from_biogas_ej": 1},
)
def pe_losses_biogas_for_elec():
    return pes_tot_biogas_for_elec() - fes_elec_from_biogas_ej()


@component.add(
    name="PE losses waste for elec",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_tot_waste_for_elec": 1, "fes_elec_from_waste_ej": 1},
)
def pe_losses_waste_for_elec():
    return pes_tot_waste_for_elec() - fes_elec_from_waste_ej()


@component.add(
    name="share PES biogas for elec",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_tot_biogas_for_elec": 1, "pes_biogas_ej": 1},
)
def share_pes_biogas_for_elec():
    return pes_tot_biogas_for_elec() / pes_biogas_ej()


@component.add(
    name="P hydro growth",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_hydro_growth"},
)
def p_hydro_growth():
    """
    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_hydro_growth()


_ext_constant_p_hydro_growth = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C32",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_hydro_growth",
)

_ext_constant_p_hydro_growth.add(
    "inputs_EU.xlsx", "SCEN1", "C32", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_hydro_growth.add(
    "inputs_EU.xlsx", "SCEN2", "C32", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_hydro_growth.add(
    "inputs_EU.xlsx", "SCEN3", "C32", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_hydro_growth.add(
    "inputs_EU.xlsx", "SCEN4", "C32", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_hydro_growth.add(
    "inputs_EU.xlsx", "User defined", "C32", {"scenarios": ["User defined"]}
)


@component.add(
    name="FE real tot generation RES elec TWh",
    units="TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_fe_elec_demand_after_priorities_twh": 1,
        "potential_tot_generation_res_elec_twh": 1,
    },
)
def fe_real_tot_generation_res_elec_twh():
    return np.minimum(
        np.maximum(total_fe_elec_demand_after_priorities_twh(), 0),
        potential_tot_generation_res_elec_twh(),
    )


@component.add(
    name="P solar PV growth",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_solar_pv_growth"},
)
def p_solar_pv_growth():
    """
    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_solar_pv_growth()


_ext_constant_p_solar_pv_growth = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C38",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_solar_pv_growth",
)

_ext_constant_p_solar_pv_growth.add(
    "inputs_EU.xlsx", "SCEN1", "C38", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_solar_pv_growth.add(
    "inputs_EU.xlsx", "SCEN2", "C38", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_solar_pv_growth.add(
    "inputs_EU.xlsx", "SCEN3", "C38", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_solar_pv_growth.add(
    "inputs_EU.xlsx", "SCEN4", "C38", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_solar_pv_growth.add(
    "inputs_EU.xlsx", "User defined", "C38", {"scenarios": ["User defined"]}
)


@component.add(
    name="remaining potential constraint on new RES heat capacity",
    units="Dmnl",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "remaining_potential_res_for_heat": 2,
        "threshold_remaining_potential_new_capacity": 2,
    },
)
def remaining_potential_constraint_on_new_res_heat_capacity():
    """
    Constraint of remaining potential on new RES elec capacity. Another alternative: SQRT(remaining potential RES elec after intermitt[RES elec,scenarios])
    """
    return if_then_else(
        remaining_potential_res_for_heat()
        > threshold_remaining_potential_new_capacity(),
        lambda: xr.DataArray(
            1,
            {
                "RES heat": _subscript_dict["RES heat"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["RES heat", "scenarios"],
        ),
        lambda: remaining_potential_res_for_heat()
        * (1 / threshold_remaining_potential_new_capacity()),
    )


@component.add(
    name="Total FE Elec generation TWh EU",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_elec_generation_from_nre_twh": 1,
        "fe_tot_generation_all_res_elec_twh": 1,
        "fes_elec_from_waste_twh": 1,
    },
)
def total_fe_elec_generation_twh_eu():
    """
    Total final energy electricity generation (fossil fuels, nuclear, waste & renewables) (TWh).
    """
    return (
        fe_elec_generation_from_nre_twh()
        + fe_tot_generation_all_res_elec_twh()
        + fes_elec_from_waste_twh()
    )


@component.add(
    name="FE tot generation all RES elec TWh",
    units="TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_real_tot_generation_res_elec_twh": 1,
        "fes_elec_from_res_with_priority_twh": 1,
    },
)
def fe_tot_generation_all_res_elec_twh():
    """
    Electricity generation from all RES technologies.
    """
    return fe_real_tot_generation_res_elec_twh() + fes_elec_from_res_with_priority_twh()


@component.add(
    name="P oceanic growth",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_oceanic_growth"},
)
def p_oceanic_growth():
    """
    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_oceanic_growth()


_ext_constant_p_oceanic_growth = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C35",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_oceanic_growth",
)

_ext_constant_p_oceanic_growth.add(
    "inputs_EU.xlsx", "SCEN1", "C35", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_oceanic_growth.add(
    "inputs_EU.xlsx", "SCEN2", "C35", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_oceanic_growth.add(
    "inputs_EU.xlsx", "SCEN3", "C35", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_oceanic_growth.add(
    "inputs_EU.xlsx", "SCEN4", "C35", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_oceanic_growth.add(
    "inputs_EU.xlsx", "User defined", "C35", {"scenarios": ["User defined"]}
)


@component.add(
    name="PE Elec generation from RES EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pe_bioe_for_elec_generation_ej": 1,
        "pe_geotelec_for_elec_generation_ej": 1,
        "pe_hydro_for_elec_generation_ej": 1,
        "pe_oceanic_for_elec_generation_ej": 1,
        "pe_solar_pv_for_elec_generation_ej": 1,
        "pe_csp_for_elec_generation_ej": 1,
        "pe_onshore_wind_for_elec_generation_ej": 1,
        "pe_offshore_wind_for_elec_generation_ej": 1,
        "pes_tot_biogas_for_elec": 1,
    },
)
def pe_elec_generation_from_res_ej():
    """
    Primary energy from RES electricity generation. For all sources excepting "Bio" the factor "RES to fossil accounting" is applied for the equivalent primary energy.
    """
    return (
        pe_bioe_for_elec_generation_ej()
        + pe_geotelec_for_elec_generation_ej()
        + pe_hydro_for_elec_generation_ej()
        + pe_oceanic_for_elec_generation_ej()
        + pe_solar_pv_for_elec_generation_ej()
        + pe_csp_for_elec_generation_ej()
        + pe_onshore_wind_for_elec_generation_ej()
        + pe_offshore_wind_for_elec_generation_ej()
        + pes_tot_biogas_for_elec()
    )


@component.add(
    name="P RES elec growth",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "p_hydro_growth": 1,
        "p_geot_growth": 1,
        "p_solid_bioeelec_growth": 1,
        "p_oceanic_growth": 1,
        "p_wind_onshore_growth": 1,
        "p_wind_offshore_growth": 1,
        "p_solar_pv_growth": 1,
        "p_csp_growth": 1,
    },
)
def p_res_elec_growth():
    """
    For hydro, geot-elec and solid bioenergy this variable represents the projected annual growth in relation to past growth trends, for the rest of RES elec (oceanic, wind & solar), it represents the annual growth in relation to the existing installed capacity.
    """
    value = xr.DataArray(
        np.nan,
        {
            "RES elec": _subscript_dict["RES elec"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES elec", "scenarios"],
    )
    value.loc[["hydro"], :] = (
        p_hydro_growth().expand_dims({"RES elec": ["hydro"]}, 0).values
    )
    value.loc[['"geot-elec"'], :] = (
        p_geot_growth().expand_dims({"RES elec": ['"geot-elec"']}, 0).values
    )
    value.loc[['"solid bioE-elec"'], :] = (
        p_solid_bioeelec_growth()
        .expand_dims({"RES elec": ['"solid bioE-elec"']}, 0)
        .values
    )
    value.loc[["oceanic"], :] = (
        p_oceanic_growth().expand_dims({"RES elec": ["oceanic"]}, 0).values
    )
    value.loc[["wind onshore"], :] = (
        p_wind_onshore_growth().expand_dims({"RES elec": ["wind onshore"]}, 0).values
    )
    value.loc[["wind offshore"], :] = (
        p_wind_offshore_growth().expand_dims({"RES elec": ["wind offshore"]}, 0).values
    )
    value.loc[["solar PV"], :] = (
        p_solar_pv_growth().expand_dims({"RES elec": ["solar PV"]}, 0).values
    )
    value.loc[["CSP"], :] = p_csp_growth().expand_dims({"RES elec": ["CSP"]}, 0).values
    return value


@component.add(
    name="share RES electricity generation",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_tot_generation_all_res_elec_twh": 1,
        "total_fe_elec_generation_twh_eu": 1,
    },
)
def share_res_electricity_generation():
    """
    Share of RES in the electricity generation.
    """
    return fe_tot_generation_all_res_elec_twh() / total_fe_elec_generation_twh_eu()


@component.add(
    name='"P solid bioE-elec growth"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_solid_bioeelec_growth"},
)
def p_solid_bioeelec_growth():
    """
    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_solid_bioeelec_growth()


_ext_constant_p_solid_bioeelec_growth = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C34",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_solid_bioeelec_growth",
)

_ext_constant_p_solid_bioeelec_growth.add(
    "inputs_EU.xlsx", "SCEN1", "C34", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_solid_bioeelec_growth.add(
    "inputs_EU.xlsx", "SCEN2", "C34", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_solid_bioeelec_growth.add(
    "inputs_EU.xlsx", "SCEN3", "C34", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_solid_bioeelec_growth.add(
    "inputs_EU.xlsx", "SCEN4", "C34", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_solid_bioeelec_growth.add(
    "inputs_EU.xlsx", "User defined", "C34", {"scenarios": ["User defined"]}
)


@component.add(
    name="P CSP growth",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_csp_growth"},
)
def p_csp_growth():
    """
    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_csp_growth()


_ext_constant_p_csp_growth = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F38",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_csp_growth",
)

_ext_constant_p_csp_growth.add(
    "inputs_EU.xlsx", "SCEN1", "F38", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_csp_growth.add(
    "inputs_EU.xlsx", "SCEN2", "F38", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_csp_growth.add(
    "inputs_EU.xlsx", "SCEN3", "F38", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_csp_growth.add(
    "inputs_EU.xlsx", "SCEN4", "F38", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_csp_growth.add(
    "inputs_EU.xlsx", "User defined", "F38", {"scenarios": ["User defined"]}
)


@component.add(
    name="remaining potential tot RES elec",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_potential_tot_res_elec_twh": 3,
        "fe_tot_generation_all_res_elec_twh": 2,
    },
)
def remaining_potential_tot_res_elec():
    """
    Remaining potential available as a fraction of unity.
    """
    return if_then_else(
        max_potential_tot_res_elec_twh() > fe_tot_generation_all_res_elec_twh(),
        lambda: (
            max_potential_tot_res_elec_twh() - fe_tot_generation_all_res_elec_twh()
        )
        / max_potential_tot_res_elec_twh(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="P wind offshore growth",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_wind_offshore_growth"},
)
def p_wind_offshore_growth():
    """
    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_wind_offshore_growth()


_ext_constant_p_wind_offshore_growth = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C37",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_wind_offshore_growth",
)

_ext_constant_p_wind_offshore_growth.add(
    "inputs_EU.xlsx", "SCEN1", "C37", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_wind_offshore_growth.add(
    "inputs_EU.xlsx", "SCEN2", "C37", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_wind_offshore_growth.add(
    "inputs_EU.xlsx", "SCEN3", "C37", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_wind_offshore_growth.add(
    "inputs_EU.xlsx", "SCEN4", "C37", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_wind_offshore_growth.add(
    "inputs_EU.xlsx", "User defined", "C37", {"scenarios": ["User defined"]}
)


@component.add(
    name="P wind onshore growth",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_wind_onshore_growth"},
)
def p_wind_onshore_growth():
    """
    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_wind_onshore_growth()


_ext_constant_p_wind_onshore_growth = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C36",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_wind_onshore_growth",
)

_ext_constant_p_wind_onshore_growth.add(
    "inputs_EU.xlsx", "SCEN1", "C36", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_wind_onshore_growth.add(
    "inputs_EU.xlsx", "SCEN2", "C36", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_wind_onshore_growth.add(
    "inputs_EU.xlsx", "SCEN3", "C36", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_wind_onshore_growth.add(
    "inputs_EU.xlsx", "SCEN4", "C36", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_wind_onshore_growth.add(
    "inputs_EU.xlsx", "User defined", "C36", {"scenarios": ["User defined"]}
)


@component.add(
    name="Elec generation dispatch from RES TWh",
    units="TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_elec_generation_from_bioe_twh": 1,
        "fe_elec_generation_from_geotelec_twh": 1,
        "fe_elec_generation_from_hydro_twh": 1,
        "fe_elec_generation_from_oceanic_twh": 1,
        "fes_elec_from_biogas_twh": 1,
    },
)
def elec_generation_dispatch_from_res_twh():
    """
    Base-load electricity generation from RES.
    """
    return (
        fe_elec_generation_from_bioe_twh()
        + fe_elec_generation_from_geotelec_twh()
        + fe_elec_generation_from_hydro_twh()
        + fe_elec_generation_from_oceanic_twh()
        + fes_elec_from_biogas_twh()
    )


@component.add(
    name="FES elec from RES with priority TWh",
    units="TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fes_elec_from_biogas_twh": 1},
)
def fes_elec_from_res_with_priority_twh():
    return fes_elec_from_biogas_twh()


@component.add(
    name="abundance RES elec",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_fe_elec_demand_after_priorities_twh": 4,
        "fe_real_tot_generation_res_elec_twh": 2,
    },
)
def abundance_res_elec():
    """
    The parameter abundance varies between (1;0). The closest to 1 indicates that electricity generation from RES is far to cover to whole electricity demand, if "abundance RES elec"=0 it means that RES elec cover the whole electricity demand.
    """
    return if_then_else(
        total_fe_elec_demand_after_priorities_twh() == 0,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            total_fe_elec_demand_after_priorities_twh()
            > fe_real_tot_generation_res_elec_twh(),
            lambda: (
                total_fe_elec_demand_after_priorities_twh()
                - fe_real_tot_generation_res_elec_twh()
            )
            / total_fe_elec_demand_after_priorities_twh(),
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        ),
    )


@component.add(
    name="FES elec from BioW",
    units="TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_generation_res_elec_twh": 1,
        "fes_elec_from_biogas_twh": 1,
        "fes_elec_from_waste_twh": 1,
    },
)
def fes_elec_from_biow():
    """
    Electricity generation of total bioenergy and waste (to compare with more common statistics).
    """
    return (
        real_generation_res_elec_twh()
        .loc['"solid bioE-elec"', :]
        .reset_coords(drop=True)
        + fes_elec_from_biogas_twh()
        + fes_elec_from_waste_twh()
    )


@component.add(
    name="P geot growth",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_geot_growth"},
)
def p_geot_growth():
    """
    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_geot_growth()


_ext_constant_p_geot_growth = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C33",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_geot_growth",
)

_ext_constant_p_geot_growth.add(
    "inputs_EU.xlsx", "SCEN1", "C33", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_geot_growth.add(
    "inputs_EU.xlsx", "SCEN2", "C33", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_geot_growth.add(
    "inputs_EU.xlsx", "SCEN3", "C33", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_geot_growth.add(
    "inputs_EU.xlsx", "SCEN4", "C33", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_geot_growth.add(
    "inputs_EU.xlsx", "User defined", "C33", {"scenarios": ["User defined"]}
)


@component.add(
    name="P solid bioE for heat",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_solid_bioe_for_heat"},
)
def p_solid_bioe_for_heat():
    """
    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_solid_bioe_for_heat()


_ext_constant_p_solid_bioe_for_heat = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C62",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_solid_bioe_for_heat",
)

_ext_constant_p_solid_bioe_for_heat.add(
    "inputs_EU.xlsx", "SCEN1", "C62", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_solid_bioe_for_heat.add(
    "inputs_EU.xlsx", "SCEN2", "C62", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_solid_bioe_for_heat.add(
    "inputs_EU.xlsx", "SCEN3", "C62", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_solid_bioe_for_heat.add(
    "inputs_EU.xlsx", "SCEN4", "C62", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_solid_bioe_for_heat.add(
    "inputs_EU.xlsx", "User defined", "C62", {"scenarios": ["User defined"]}
)


@component.add(
    name="PE real generation RES elec",
    units="EJ",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_generation_res_elec_twh": 8,
        "ej_per_twh": 8,
        "res_to_fossil_accounting": 7,
        "efficiency_conversion_bioe_to_elec": 1,
    },
)
def pe_real_generation_res_elec():
    """
    Primary energy supply of electricity production of RES.
    """
    value = xr.DataArray(
        np.nan,
        {
            "RES elec": _subscript_dict["RES elec"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES elec", "scenarios"],
    )
    value.loc[["hydro"], :] = (
        (
            real_generation_res_elec_twh().loc["hydro", :].reset_coords(drop=True)
            * ej_per_twh()
            * res_to_fossil_accounting()
        )
        .expand_dims({"RES elec": ["hydro"]}, 0)
        .values
    )
    value.loc[['"geot-elec"'], :] = (
        (
            real_generation_res_elec_twh().loc['"geot-elec"', :].reset_coords(drop=True)
            * ej_per_twh()
            * res_to_fossil_accounting()
        )
        .expand_dims({"RES elec": ['"geot-elec"']}, 0)
        .values
    )
    value.loc[['"solid bioE-elec"'], :] = (
        (
            (
                real_generation_res_elec_twh()
                .loc['"solid bioE-elec"', :]
                .reset_coords(drop=True)
                / efficiency_conversion_bioe_to_elec()
            )
            * ej_per_twh()
        )
        .expand_dims({"RES elec": ['"solid bioE-elec"']}, 0)
        .values
    )
    value.loc[["oceanic"], :] = (
        (
            real_generation_res_elec_twh().loc["oceanic", :].reset_coords(drop=True)
            * ej_per_twh()
            * res_to_fossil_accounting()
        )
        .expand_dims({"RES elec": ["oceanic"]}, 0)
        .values
    )
    value.loc[["wind onshore"], :] = (
        (
            real_generation_res_elec_twh()
            .loc["wind onshore", :]
            .reset_coords(drop=True)
            * ej_per_twh()
            * res_to_fossil_accounting()
        )
        .expand_dims({"RES elec": ["wind onshore"]}, 0)
        .values
    )
    value.loc[["wind offshore"], :] = (
        (
            real_generation_res_elec_twh()
            .loc["wind offshore", :]
            .reset_coords(drop=True)
            * ej_per_twh()
            * res_to_fossil_accounting()
        )
        .expand_dims({"RES elec": ["wind offshore"]}, 0)
        .values
    )
    value.loc[["solar PV"], :] = (
        (
            real_generation_res_elec_twh().loc["solar PV", :].reset_coords(drop=True)
            * ej_per_twh()
            * res_to_fossil_accounting()
        )
        .expand_dims({"RES elec": ["solar PV"]}, 0)
        .values
    )
    value.loc[["CSP"], :] = (
        (
            real_generation_res_elec_twh().loc["CSP", :].reset_coords(drop=True)
            * ej_per_twh()
            * res_to_fossil_accounting()
        )
        .expand_dims({"RES elec": ["CSP"]}, 0)
        .values
    )
    return value


@component.add(
    name='"FED heat-com by NRE CHP plants EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "share_heatcom_chp_plants_nre_vs_nre_tot_heatcom_generation": 1,
        "fed_heatcom_nre_ej": 1,
    },
)
def fed_heatcom_by_nre_chp_plants_ej():
    """
    Final energy demand of commercial heat in CHP plants without RES.
    """
    return (
        share_heatcom_chp_plants_nre_vs_nre_tot_heatcom_generation()
        * fed_heatcom_nre_ej()
    )


@component.add(
    name='"share oil dem for Heat-com"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_total_oil_ej": 2, "ped_oil_for_heat_plants_ej": 1},
)
def share_oil_dem_for_heatcom():
    """
    Share of oil demand for commercial Heat plants in relation to the total demand of oil.
    """
    return if_then_else(
        ped_total_oil_ej() > 0,
        lambda: ped_oil_for_heat_plants_ej() / ped_total_oil_ej(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="Total FE Heat generation EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fes_res_for_heat_ej": 1,
        "fes_heatcom_from_waste_ej": 1,
        "fes_nre_for_heat": 1,
    },
)
def total_fe_heat_generation_ej():
    """
    Total final heat generation (fossil fuels, nuclear, waste & renewables) (EJ).
    """
    return fes_res_for_heat_ej() + fes_heatcom_from_waste_ej() + fes_nre_for_heat()


@component.add(
    name="share coal dem for Elec",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_coal_ej": 2, "pe_demand_coal_elec_plants_ej": 1},
)
def share_coal_dem_for_elec():
    """
    Share of coal demand to cover electricity consumption in Elec plants.
    """
    return if_then_else(
        ped_coal_ej() > 0,
        lambda: pe_demand_coal_elec_plants_ej() / ped_coal_ej(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="share oil dem for Elec",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_total_oil_ej": 2, "pe_demand_oil_elec_plants_ej": 1},
)
def share_oil_dem_for_elec():
    """
    Share of oil demand to cover electricity consumption.
    """
    return if_then_else(
        ped_total_oil_ej() > 0,
        lambda: pe_demand_oil_elec_plants_ej() / ped_total_oil_ej(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name='"share coal dem for Heat-com"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_coal_ej": 2, "ped_coal_for_heat_plants_ej": 1},
)
def share_coal_dem_for_heatcom():
    """
    Share of coal demand to cover commercial heat consumption in Heat plants.
    """
    return if_then_else(
        ped_coal_ej() > 0,
        lambda: ped_coal_for_heat_plants_ej() / ped_coal_ej(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="share RES heat generation",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fes_res_for_heat_ej": 1, "total_fe_heat_generation_ej": 1},
)
def share_res_heat_generation():
    """
    Share of RES in the total heat generation.
    """
    return fes_res_for_heat_ej() / total_fe_heat_generation_ej()


@component.add(
    name='"share nat. gas dem for Elec"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_nat_gas_ej": 2, "pe_demand_gas_elec_plants_ej": 1},
)
def share_nat_gas_dem_for_elec():
    """
    Share of natural gas demand to cover electricity consumption.
    """
    return if_then_else(
        ped_nat_gas_ej() > 0,
        lambda: pe_demand_gas_elec_plants_ej() / ped_nat_gas_ej(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name='"share nat. gas dem for Heat-com"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_nat_gas_ej": 2, "ped_gases_for_heat_plants_ej": 1},
)
def share_nat_gas_dem_for_heatcom():
    """
    Share of natural gas demand for commercial Heat plants in relation to the demand of natural fossil gas.
    """
    return if_then_else(
        ped_nat_gas_ej() > 0,
        lambda: ped_gases_for_heat_plants_ej() / ped_nat_gas_ej(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="Year scarcity Heat",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_heat": 1, "time": 1},
)
def year_scarcity_heat():
    """
    Year when the parameter abundance falls below 0.95, i.e. year when scarcity starts.
    """
    return if_then_else(
        abundance_heat() > 0.95,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: xr.DataArray(
            time(), {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name='"FES heat-com from biogas in CHP plants"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_biogas_for_chp": 1, "efficiency_biogas_for_heat_chp_plants": 1},
)
def fes_heatcom_from_biogas_in_chp_plants():
    """
    Final energy supply of commercial heat in CHP plants from biogas.
    """
    return pes_biogas_for_chp() * efficiency_biogas_for_heat_chp_plants()


@component.add(
    name="efficiency biogas for heat plants",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_efficiency_biogas_for_heat_plants"},
)
def efficiency_biogas_for_heat_plants():
    """
    Efficiency of the transformation of biogas in heat plants.
    """
    return _ext_constant_efficiency_biogas_for_heat_plants()


_ext_constant_efficiency_biogas_for_heat_plants = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G83",
    {},
    _root,
    {},
    "_ext_constant_efficiency_biogas_for_heat_plants",
)


@component.add(
    name="FES elec from biogas in CHP plants",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_biogas_for_chp": 1, "efficiency_biogas_for_elec_chp_plants": 1},
)
def fes_elec_from_biogas_in_chp_plants():
    """
    Final energy supply of elec in CHP plants from biogas.
    """
    return pes_biogas_for_chp() * efficiency_biogas_for_elec_chp_plants()


@component.add(
    name="FES elec from biogas EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fes_elec_from_biogas_in_chp_plants": 1,
        "fes_elec_from_biogas_in_elec_plants": 1,
    },
)
def fes_elec_from_biogas_ej():
    """
    TFES electricity from biogas.
    """
    return fes_elec_from_biogas_in_chp_plants() + fes_elec_from_biogas_in_elec_plants()


@component.add(
    name='"PES biogas for heat-com plants"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_biogas_ej": 1, "share_pes_biogas_for_heatcom_plants": 1},
)
def pes_biogas_for_heatcom_plants():
    """
    Primary energy supply of heat in commercial Heat plants from biogas.
    """
    return pes_biogas_ej() * share_pes_biogas_for_heatcom_plants()


@component.add(
    name="FES elec from biogas in elec plants",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_biogas_for_elec_plants": 1,
        "efficiency_biogas_for_elec_plants": 1,
    },
)
def fes_elec_from_biogas_in_elec_plants():
    """
    Final energy supply of electricity in Elec plants from biogas.
    """
    return pes_biogas_for_elec_plants() * efficiency_biogas_for_elec_plants()


@component.add(
    name="efficiency biogas for elec plants",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_efficiency_biogas_for_elec_plants"},
)
def efficiency_biogas_for_elec_plants():
    """
    Efficiency of the transformation of biogas in elec plants.
    """
    return _ext_constant_efficiency_biogas_for_elec_plants()


_ext_constant_efficiency_biogas_for_elec_plants = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G84",
    {},
    _root,
    {},
    "_ext_constant_efficiency_biogas_for_elec_plants",
)


@component.add(
    name='"FES biogas for heat-com plants"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_biogas_for_heatcom_plants": 1,
        "efficiency_biogas_for_heat_plants": 1,
    },
)
def fes_biogas_for_heatcom_plants():
    """
    Final energy supply of commercial heat in Heat plants from biogas.
    """
    return pes_biogas_for_heatcom_plants() * efficiency_biogas_for_heat_plants()


@component.add(
    name="PES biogas for elec plants",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_biogas_ej": 1, "share_pes_biogas_for_elec_plants": 1},
)
def pes_biogas_for_elec_plants():
    """
    Primary energy supply of heat in Heat plants from biogas.
    """
    return pes_biogas_ej() * share_pes_biogas_for_elec_plants()


@component.add(
    name="share PES biogas TFC",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_pes_biogas_tfc"},
)
def share_pes_biogas_tfc():
    """
    Share of PES biogas for total final consumption.
    """
    return _ext_constant_share_pes_biogas_tfc()


_ext_constant_share_pes_biogas_tfc = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G82",
    {},
    _root,
    {},
    "_ext_constant_share_pes_biogas_tfc",
)


@component.add(
    name="Potential PES biogas for TFC",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_biogas_ej": 1, "share_pes_biogas_tfc": 1},
)
def potential_pes_biogas_for_tfc():
    """
    Potential primary energy supply biogas for total final consumption.
    """
    return pes_biogas_ej() * share_pes_biogas_tfc()


@component.add(
    name="FES elec from biogas TWh",
    units="TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fes_elec_from_biogas_ej": 1, "ej_per_twh": 1},
)
def fes_elec_from_biogas_twh():
    """
    TFES electricity from biogas.
    """
    return fes_elec_from_biogas_ej() / ej_per_twh()


@component.add(
    name="PES biogas for CHP",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_biogas_ej": 1, "share_pes_biogas_for_chp": 1},
)
def pes_biogas_for_chp():
    """
    Primary energy supply biogas for CHP plants.
    """
    return pes_biogas_ej() * share_pes_biogas_for_chp()


@component.add(
    name='"share PES biogas for heat-com plants"',
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_pes_biogas_for_heatcom_plants"},
)
def share_pes_biogas_for_heatcom_plants():
    """
    Share of PES biogas for commercial heat plants.
    """
    return _ext_constant_share_pes_biogas_for_heatcom_plants()


_ext_constant_share_pes_biogas_for_heatcom_plants = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G79",
    {},
    _root,
    {},
    "_ext_constant_share_pes_biogas_for_heatcom_plants",
)


@component.add(
    name="efficiency biogas for elec CHP plants",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_efficiency_biogas_for_elec_chp_plants"},
)
def efficiency_biogas_for_elec_chp_plants():
    """
    Efficiency of the transformation of biogas in elec in CHP plants.
    """
    return _ext_constant_efficiency_biogas_for_elec_chp_plants()


_ext_constant_efficiency_biogas_for_elec_chp_plants = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G86",
    {},
    _root,
    {},
    "_ext_constant_efficiency_biogas_for_elec_chp_plants",
)


@component.add(
    name='"FES heat-com from biogas EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fes_biogas_for_heatcom_plants": 1,
        "fes_heatcom_from_biogas_in_chp_plants": 1,
    },
)
def fes_heatcom_from_biogas_ej():
    """
    TFES commercial heat from biogas.
    """
    return fes_biogas_for_heatcom_plants() + fes_heatcom_from_biogas_in_chp_plants()


@component.add(
    name="efficiency biogas for heat CHP plants",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_efficiency_biogas_for_heat_chp_plants"},
)
def efficiency_biogas_for_heat_chp_plants():
    """
    Efficiency of the transformation of biogas in heat in CHP plants.
    """
    return _ext_constant_efficiency_biogas_for_heat_chp_plants()


_ext_constant_efficiency_biogas_for_heat_chp_plants = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G85",
    {},
    _root,
    {},
    "_ext_constant_efficiency_biogas_for_heat_chp_plants",
)


@component.add(
    name="share PES biogas for elec plants",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_pes_biogas_for_elec_plants"},
)
def share_pes_biogas_for_elec_plants():
    """
    Share of PES biogas for elec plants.
    """
    return _ext_constant_share_pes_biogas_for_elec_plants()


_ext_constant_share_pes_biogas_for_elec_plants = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G80",
    {},
    _root,
    {},
    "_ext_constant_share_pes_biogas_for_elec_plants",
)


@component.add(
    name="share PES biogas for CHP",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_pes_biogas_for_chp"},
)
def share_pes_biogas_for_chp():
    """
    Share of PES biogas for CHP plants.
    """
    return _ext_constant_share_pes_biogas_for_chp()


_ext_constant_share_pes_biogas_for_chp = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G81",
    {},
    _root,
    {},
    "_ext_constant_share_pes_biogas_for_chp",
)


@component.add(
    name="demand Elec plants fossil fuels TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "demand_elec_nre_twh": 1,
        "fe_nuclear_elec_generation_twh": 1,
        "fes_elec_fossil_fuel_chp_plants_twh": 1,
    },
)
def demand_elec_plants_fossil_fuels_twh():
    """
    The model assigns priority to RES, CHP plants and nuclear generation (depending on the selected nuclear scenario) among the electricity generation.
    """
    return np.maximum(
        demand_elec_nre_twh()
        - fe_nuclear_elec_generation_twh()
        - fes_elec_fossil_fuel_chp_plants_twh(),
        0,
    )


@component.add(
    name="new PES biogas",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 3,
        "historic_biogas_pes": 2,
        "pes_biogas_ej": 2,
        "max_pe_biogas_ej": 2,
        "adapt_growth_biogas": 1,
    },
)
def new_pes_biogas():
    """
    New annual primary energy supply of biogas.
    """
    return if_then_else(
        time() < 2014,
        lambda: xr.DataArray(
            historic_biogas_pes(integer(time() + 1))
            - historic_biogas_pes(integer(time())),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: ((max_pe_biogas_ej() - pes_biogas_ej()) / max_pe_biogas_ej())
        * adapt_growth_biogas()
        * pes_biogas_ej(),
    )


@component.add(
    name="constrain rr improv for alt techn per mineral",
    units="Dmnl",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "recycling_rates_minerals_alt_techn": 1,
        "max_recycling_rates_minerals": 1,
    },
)
def constrain_rr_improv_for_alt_techn_per_mineral():
    """
    Constraint recycling rate improvement for alternative technologies (RES elec & EV batteries) per material.
    """
    return if_then_else(
        recycling_rates_minerals_alt_techn() < max_recycling_rates_minerals(),
        lambda: xr.DataArray(
            1,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
        lambda: xr.DataArray(
            0,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
    )


@component.add(
    name="constrain rr improv for Rest per mineral",
    units="Dmnl",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"recycling_rates_minerals_rest": 1, "max_recycling_rates_minerals": 1},
)
def constrain_rr_improv_for_rest_per_mineral():
    """
    Remaining recycling rate improvement for the rest of the economy per material.
    """
    return if_then_else(
        recycling_rates_minerals_rest() < max_recycling_rates_minerals(),
        lambda: xr.DataArray(
            1,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
        lambda: xr.DataArray(
            0,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
    )


@component.add(
    name='"CED O&M over lifetime per material RES elec var"',
    units="EJ",
    subscripts=["RES elec", "materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "res_elec_capacity_under_construction_tw": 1,
        "materials_for_om_per_capacity_installed_res_elec": 1,
        "energy_cons_per_unit_of_material_cons_for_res_elec": 1,
        "lifetime_res_elec": 1,
        "kg_per_mt": 2,
        "m_per_t": 1,
        "mj_per_ej": 1,
    },
)
def ced_om_over_lifetime_per_material_res_elec_var():
    """
    Cumulative energy demand per material for O&M of RES variables per technology over all the lifetime of the infrastructure.
    """
    return (
        res_elec_capacity_under_construction_tw()
        * materials_for_om_per_capacity_installed_res_elec()
        * energy_cons_per_unit_of_material_cons_for_res_elec().transpose(
            "scenarios", "materials"
        )
        * lifetime_res_elec()
        * (m_per_t() / kg_per_mt())
        * (kg_per_mt() / mj_per_ej())
    ).transpose("RES elec", "materials", "scenarios")


@component.add(
    name="Energy cons per unit of material cons for RES elec",
    units="MJ/kg",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "recycling_rates_minerals_alt_techn": 2,
        "initial_energy_cons_per_unit_of_material_cons_recycled": 1,
        "initial_energy_cons_per_unit_of_material_cons_virgin": 1,
    },
)
def energy_cons_per_unit_of_material_cons_for_res_elec():
    """
    Average energy consumption per unit of material consumption accounting for recycling rates for RES elec technologies. recycling rates minerals RES elec[materials,scenarios]*"Initial energy cons per unit of material cons (recycled)"[materials]+(1-recycling rates minerals RES elec[materials,scenarios])*"Initial energy cons per unit of material cons (virgin)"[materials]
    """
    return (
        recycling_rates_minerals_alt_techn()
        * initial_energy_cons_per_unit_of_material_cons_recycled()
        + (1 - recycling_rates_minerals_alt_techn())
        * initial_energy_cons_per_unit_of_material_cons_virgin()
    )


@component.add(
    name="CED new cap per material RES elec var",
    units="EJ",
    subscripts=["RES elec", "materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "materials_required_for_new_res_elec_mt": 1,
        "energy_cons_per_unit_of_material_cons_for_res_elec": 1,
        "kg_per_mt": 1,
        "mj_per_ej": 1,
    },
)
def ced_new_cap_per_material_res_elec_var():
    """
    Cumulative energy demand per material of new installed capacity of RES variables per technology.
    """
    return (
        materials_required_for_new_res_elec_mt()
        * energy_cons_per_unit_of_material_cons_for_res_elec()
        * kg_per_mt()
        / mj_per_ej()
    )


@component.add(
    name="Energy required for material consumption for new RES elec",
    units="EJ",
    subscripts=["RES elec", "materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "materials_required_for_new_res_elec_mt": 1,
        "energy_cons_per_unit_of_material_cons_for_res_elec": 1,
        "kg_per_mt": 1,
        "mj_per_ej": 1,
    },
)
def energy_required_for_material_consumption_for_new_res_elec():
    """
    Energy required for material consumption for new RES elec.
    """
    return (
        materials_required_for_new_res_elec_mt()
        * energy_cons_per_unit_of_material_cons_for_res_elec()
        * kg_per_mt()
        / mj_per_ej()
    )


@component.add(
    name='"Energy required for material consumption for O&M RES elec"',
    units="EJ",
    subscripts=["RES elec", "materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "materials_required_for_om_res_elec_mt": 1,
        "energy_cons_per_unit_of_material_cons_for_res_elec": 1,
        "kg_per_mt": 1,
        "mj_per_ej": 1,
    },
)
def energy_required_for_material_consumption_for_om_res_elec():
    return (
        materials_required_for_om_res_elec_mt()
        * energy_cons_per_unit_of_material_cons_for_res_elec()
        * kg_per_mt()
        / mj_per_ej()
    )


@component.add(
    name="Total recycled materials for RES elec Mt",
    units="Mt",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_materials_required_for_res_elec_mt": 1,
        "total_materials_to_extract_for_res_elec_mt": 1,
    },
)
def total_recycled_materials_for_res_elec_mt():
    """
    Total recycled materials for RES technologies for the generation of electricity.
    """
    return (
        total_materials_required_for_res_elec_mt()
        - total_materials_to_extract_for_res_elec_mt()
    )


@component.add(
    name="P common rr minerals variation Rest",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_common_rr_minerals_variation_rest"},
)
def p_common_rr_minerals_variation_rest():
    """
    Annual recycling rate improvement per mineral for the rest of the economy.
    """
    return _ext_constant_p_common_rr_minerals_variation_rest()


_ext_constant_p_common_rr_minerals_variation_rest = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C307",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_common_rr_minerals_variation_rest",
)

_ext_constant_p_common_rr_minerals_variation_rest.add(
    "inputs_EU.xlsx", "SCEN1", "C307", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_common_rr_minerals_variation_rest.add(
    "inputs_EU.xlsx", "SCEN2", "C307", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_common_rr_minerals_variation_rest.add(
    "inputs_EU.xlsx", "SCEN3", "C307", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_common_rr_minerals_variation_rest.add(
    "inputs_EU.xlsx", "SCEN4", "C307", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_common_rr_minerals_variation_rest.add(
    "inputs_EU.xlsx", "User defined", "C307", {"scenarios": ["User defined"]}
)


@component.add(
    name="cum materials to extract for RES elec from 2015",
    units="Mt",
    subscripts=["materials", "scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cum_materials_to_extract_for_res_elec_from_2015": 1},
    other_deps={
        "_integ_cum_materials_to_extract_for_res_elec_from_2015": {
            "initial": {"initial_cumulated_material_requirements_for_res_elec_1995": 1},
            "step": {"total_materials_to_extract_for_res_elec_from_2015_mt": 1},
        }
    },
)
def cum_materials_to_extract_for_res_elec_from_2015():
    """
    Cumulative materials to be mined for the installation and O&M of RES for electricity generation.
    """
    return _integ_cum_materials_to_extract_for_res_elec_from_2015()


_integ_cum_materials_to_extract_for_res_elec_from_2015 = Integ(
    lambda: total_materials_to_extract_for_res_elec_from_2015_mt(),
    lambda: xr.DataArray(
        initial_cumulated_material_requirements_for_res_elec_1995(),
        {
            "materials": _subscript_dict["materials"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["materials", "scenarios"],
    ),
    "_integ_cum_materials_to_extract_for_res_elec_from_2015",
)


@component.add(
    name="Total materials to extract for RES elec Mt",
    units="Mt/Year",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_materials_required_for_res_elec_mt": 1,
        "recycling_rates_minerals_alt_techn": 1,
    },
)
def total_materials_to_extract_for_res_elec_mt():
    """
    Annual materials to be mined for the installation and O&M of RES for electricity generation.
    """
    return total_materials_required_for_res_elec_mt() * (
        1 - recycling_rates_minerals_alt_techn()
    )


@component.add(
    name="cum materials to extract for RES elec",
    units="Mt",
    subscripts=["materials", "scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cum_materials_to_extract_for_res_elec": 1},
    other_deps={
        "_integ_cum_materials_to_extract_for_res_elec": {
            "initial": {"initial_cumulated_material_requirements_for_res_elec_1995": 1},
            "step": {"total_materials_to_extract_for_res_elec_mt": 1},
        }
    },
)
def cum_materials_to_extract_for_res_elec():
    """
    Cumulative materials to be mined for the installation and O&M of RES for electricity generation.
    """
    return _integ_cum_materials_to_extract_for_res_elec()


_integ_cum_materials_to_extract_for_res_elec = Integ(
    lambda: total_materials_to_extract_for_res_elec_mt(),
    lambda: xr.DataArray(
        initial_cumulated_material_requirements_for_res_elec_1995(),
        {
            "materials": _subscript_dict["materials"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["materials", "scenarios"],
    ),
    "_integ_cum_materials_to_extract_for_res_elec",
)


@component.add(
    name="Total materials to extract for RES elec from 2015 Mt",
    units="Mt/Year",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "total_materials_to_extract_for_res_elec_mt": 1},
)
def total_materials_to_extract_for_res_elec_from_2015_mt():
    """
    Annual materials to be mined for the installation and O&M of RES for electricity generation from 2015.
    """
    return if_then_else(
        time() < 2015,
        lambda: xr.DataArray(
            0,
            {
                "materials": _subscript_dict["materials"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["materials", "scenarios"],
        ),
        lambda: total_materials_to_extract_for_res_elec_mt(),
    )


@component.add(
    name="Max recycling rates minerals",
    units="Dnml",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_max_recycling_rates_minerals"},
)
def max_recycling_rates_minerals():
    """
    Maximum assumed recycling rate per mineral.
    """
    return _ext_constant_max_recycling_rates_minerals()


_ext_constant_max_recycling_rates_minerals = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G56",
    {},
    _root,
    {},
    "_ext_constant_max_recycling_rates_minerals",
)


@component.add(
    name="P common rr minerals variation alt techn",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_p_common_rr_minerals_variation_alt_techn"
    },
)
def p_common_rr_minerals_variation_alt_techn():
    """
    Annual recycling rate improvement per mineral for alternative technologies (RES elec & EV batteries).
    """
    return _ext_constant_p_common_rr_minerals_variation_alt_techn()


_ext_constant_p_common_rr_minerals_variation_alt_techn = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C308",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_common_rr_minerals_variation_alt_techn",
)

_ext_constant_p_common_rr_minerals_variation_alt_techn.add(
    "inputs_EU.xlsx", "SCEN1", "C308", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_common_rr_minerals_variation_alt_techn.add(
    "inputs_EU.xlsx", "SCEN2", "C308", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_common_rr_minerals_variation_alt_techn.add(
    "inputs_EU.xlsx", "SCEN3", "C308", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_common_rr_minerals_variation_alt_techn.add(
    "inputs_EU.xlsx", "SCEN4", "C308", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_common_rr_minerals_variation_alt_techn.add(
    "inputs_EU.xlsx", "User defined", "C308", {"scenarios": ["User defined"]}
)


@component.add(
    name="current recycling rates minerals",
    units="Mt",
    subscripts=["materials"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_current_recycling_rates_minerals"},
)
def current_recycling_rates_minerals():
    """
    Current recycling rates minerals of the whole economy (UNEP, 2011).
    """
    return _ext_constant_current_recycling_rates_minerals()


_ext_constant_current_recycling_rates_minerals = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "AR5",
    {"materials": ["Adhesive"]},
    _root,
    {"materials": _subscript_dict["materials"]},
    "_ext_constant_current_recycling_rates_minerals",
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR6", {"materials": ["Aluminium"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR7", {"materials": ["Aluminium mirrors"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR8", {"materials": ["Cadmium"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR9", {"materials": ["Carbon fiber"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR10", {"materials": ["Cement"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR11", {"materials": ["Chromium"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR12", {"materials": ["Copper"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR13", {"materials": ["diesel"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR14", {"materials": ["Dy"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx",
    "Materials",
    "AR15",
    {"materials": ['"Electric/electronic components"']},
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR16", {"materials": ["Evacuation lines"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR17", {"materials": ["Fiberglass"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR18", {"materials": ["Foam glass"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR19", {"materials": ["Galium"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR20", {"materials": ["Glass"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR21", {"materials": ["Glass reinforcing plastic"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR22", {"materials": ["gravel"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR23", {"materials": ["Indium"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR24", {"materials": ["Iron"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR25", {"materials": ["KNO3 mined"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR26", {"materials": ["Asphalt"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR27", {"materials": ["Lime"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR28", {"materials": ["Limestone"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR29", {"materials": ["Lithium"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR30", {"materials": ["Lubricant"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR31", {"materials": ["Magnesium"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR32", {"materials": ["Manganese"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR33", {"materials": ["Heavy equipment"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR34", {"materials": ["Concrete"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR35", {"materials": ["Molybdenum"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR36", {"materials": ["NaNO3 mined"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR37", {"materials": ["NaNO3 synthetic"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR38", {"materials": ["Neodymium"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR39", {"materials": ["Nickel"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR40", {"materials": ['"Over grid (15%)"']}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR41", {"materials": ['"Over grid (5%)"']}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR42", {"materials": ["Paint"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR43", {"materials": ["Lead"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR44", {"materials": ["Plastics"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR45", {"materials": ["Polypropylene"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR46", {"materials": ["Rock"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR47", {"materials": ["Rock wool"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR48", {"materials": ["Sand"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR49", {"materials": ["Silicon sand"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR50", {"materials": ["Silicon wafer modules"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR51", {"materials": ["Silver"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR52", {"materials": ["Site preparation"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR53", {"materials": ["Tin"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR54", {"materials": ["soda ash"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR55", {"materials": ["steel"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR56", {"materials": ["synthetic oil"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR57", {"materials": ["tellurium"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR58", {"materials": ["titanium"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR59", {"materials": ["titanium dioxide"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR60", {"materials": ["vanadium"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR61", {"materials": ["wires"]}
)

_ext_constant_current_recycling_rates_minerals.add(
    "inputs_EU.xlsx", "Materials", "AR62", {"materials": ["zinc"]}
)


@component.add(
    name="Historic improvement recycling rates minerals",
    units="percent",
    subscripts=["materials"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def historic_improvement_recycling_rates_minerals():
    """
    Due to the large uncertainty and slow evolution of these data, historical recycling rates minerals correspond with the current estimates (UNEP, 2011).
    """
    return xr.DataArray(0, {"materials": _subscript_dict["materials"]}, ["materials"])


@component.add(
    name='"Initial energy cons per unit of material cons (recycled)"',
    units="MJ/kg",
    subscripts=["materials"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "initial_energy_cons_per_unit_of_material_cons_recycled_data": 2,
        "initial_energy_cons_per_unit_of_material_cons_virgin": 1,
    },
)
def initial_energy_cons_per_unit_of_material_cons_recycled():
    """
    Energy consumption required to use recycled materials per unit of material consumption. When data for recycled materials was not available, the energy consumption for virgin materials was assumed.
    """
    return if_then_else(
        initial_energy_cons_per_unit_of_material_cons_recycled_data() == 0,
        lambda: initial_energy_cons_per_unit_of_material_cons_virgin(),
        lambda: initial_energy_cons_per_unit_of_material_cons_recycled_data(),
    )


@component.add(
    name='"materials required for O&M RES elec Mt"',
    units="Mt",
    subscripts=["RES elec", "materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "installed_capacity_res_elec_tw": 1,
        "materials_for_om_per_capacity_installed_res_elec": 1,
        "m_per_t": 1,
        "kg_per_mt": 1,
    },
)
def materials_required_for_om_res_elec_mt():
    """
    Annual materials required for the operation and maintenance of the capacity of RES for electricity in operation by technology.
    """
    return (
        installed_capacity_res_elec_tw()
        * materials_for_om_per_capacity_installed_res_elec()
        * m_per_t()
        / kg_per_mt()
    ).transpose("RES elec", "materials", "scenarios")


@component.add(
    name="TPES EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_consumption_nre_ej": 1, "tpe_from_res_ej": 1, "pes_waste_ej": 1},
)
def tpes_ej():
    """
    Total Primary Energy Supply.
    """
    return total_consumption_nre_ej() + tpe_from_res_ej() + pes_waste_ej()


@component.add(
    name='"FES heat-com from waste EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fes_waste_for_heatcom_plants": 1,
        "fes_heatcom_from_waste_in_chp_plants": 1,
    },
)
def fes_heatcom_from_waste_ej():
    """
    TFES commercial heat from waste.
    """
    return fes_waste_for_heatcom_plants() + fes_heatcom_from_waste_in_chp_plants()


@component.add(
    name='"FES waste for heat-com plants"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_waste_for_heatcom_plants": 1,
        "efficiency_waste_for_heat_plants": 1,
    },
)
def fes_waste_for_heatcom_plants():
    """
    Final energy supply of heat in commercial Heat plants from waste.
    """
    return pes_waste_for_heatcom_plants() * efficiency_waste_for_heat_plants()


@component.add(
    name="FES elec from waste in CHP plants",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_waste_for_chp_plants": 1,
        "efficiency_waste_for_elec_chp_plants": 1,
    },
)
def fes_elec_from_waste_in_chp_plants():
    """
    Final energy supply of elec in CHP plants from waste.
    """
    return pes_waste_for_chp_plants() * efficiency_waste_for_elec_chp_plants()


@component.add(
    name="FES elec from waste in elec plants",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_waste_for_elec_plants": 1, "efficiency_waste_for_elec_plants": 1},
)
def fes_elec_from_waste_in_elec_plants():
    """
    Final energy supply of electricity in Elec plants from waste.
    """
    return pes_waste_for_elec_plants() * efficiency_waste_for_elec_plants()


@component.add(
    name='"FES heat-com from waste in CHP plants"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pes_waste_for_chp_plants": 1,
        "efficiency_waste_for_heat_chp_plants": 1,
    },
)
def fes_heatcom_from_waste_in_chp_plants():
    """
    Final energy supply of commercial heat in CHP plants from waste.
    """
    return pes_waste_for_chp_plants() * efficiency_waste_for_heat_chp_plants()


@component.add(
    name='"PES waste for heat-com plants"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_waste_ej": 1, "share_pes_waste_for_heatcom_plants": 1},
)
def pes_waste_for_heatcom_plants():
    """
    Primary energy supply of commercial heat in Heat plants from waste.
    """
    return pes_waste_ej() * share_pes_waste_for_heatcom_plants()


@component.add(
    name='"share PES waste for heat-com plants"',
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_pes_waste_for_heatcom_plants"},
)
def share_pes_waste_for_heatcom_plants():
    """
    Share of PES waste for commercial heat plants.
    """
    return _ext_constant_share_pes_waste_for_heatcom_plants()


_ext_constant_share_pes_waste_for_heatcom_plants = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C79",
    {},
    _root,
    {},
    "_ext_constant_share_pes_waste_for_heatcom_plants",
)


@component.add(
    name="share PES waste TFC",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_pes_waste_tfc"},
)
def share_pes_waste_tfc():
    """
    Share of PES waste for total final consumption.
    """
    return _ext_constant_share_pes_waste_tfc()


_ext_constant_share_pes_waste_tfc = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C82",
    {},
    _root,
    {},
    "_ext_constant_share_pes_waste_tfc",
)


@component.add(
    name="share PES waste for CHP",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_pes_waste_for_chp"},
)
def share_pes_waste_for_chp():
    """
    Share of PES waste for CHP plants.
    """
    return _ext_constant_share_pes_waste_for_chp()


_ext_constant_share_pes_waste_for_chp = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C81",
    {},
    _root,
    {},
    "_ext_constant_share_pes_waste_for_chp",
)


@component.add(
    name="share PES waste for elec plants",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_pes_waste_for_elec_plants"},
)
def share_pes_waste_for_elec_plants():
    """
    Share of PES waste for elec plants.
    """
    return _ext_constant_share_pes_waste_for_elec_plants()


_ext_constant_share_pes_waste_for_elec_plants = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C80",
    {},
    _root,
    {},
    "_ext_constant_share_pes_waste_for_elec_plants",
)


@component.add(
    name="new waste supply EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 3,
        "historic_pes_waste_ej": 2,
        "pes_waste_ej": 3,
        "max_pe_waste": 3,
        "adapt_growth_waste": 1,
        "p_waste_change": 1,
    },
)
def new_waste_supply_ej():
    """
    New annual waste primary energy supply.
    """
    return if_then_else(
        time() < 2014,
        lambda: xr.DataArray(
            historic_pes_waste_ej(time() + 1) - historic_pes_waste_ej(time()),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            max_pe_waste() == 0,
            lambda: pes_waste_ej() * p_waste_change(),
            lambda: ((max_pe_waste() - pes_waste_ej()) / max_pe_waste())
            * adapt_growth_waste()
            * pes_waste_ej(),
        ),
    )


@component.add(
    name="waste change",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"annual_gdp_growth_rate_eu": 2, "p_waste_change": 1},
)
def waste_change():
    """
    If GDP becomes negative, annual PES change follows it decreasing trends.
    """
    return if_then_else(
        annual_gdp_growth_rate_eu() < 0,
        lambda: annual_gdp_growth_rate_eu(),
        lambda: p_waste_change(),
    )


@component.add(
    name="FES elec from waste EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fes_elec_from_waste_in_chp_plants": 1,
        "fes_elec_from_waste_in_elec_plants": 1,
    },
)
def fes_elec_from_waste_ej():
    """
    TFES electricity from waste.
    """
    return fes_elec_from_waste_in_chp_plants() + fes_elec_from_waste_in_elec_plants()


@component.add(
    name="FES elec from waste TWh",
    units="TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fes_elec_from_waste_ej": 1, "ej_per_twh": 1},
)
def fes_elec_from_waste_twh():
    """
    TFES electricity from waste.
    """
    return fes_elec_from_waste_ej() / ej_per_twh()


@component.add(
    name="efficiency waste for elec plants",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_efficiency_waste_for_elec_plants"},
)
def efficiency_waste_for_elec_plants():
    """
    Efficiency of the transformation of waste in elec plants.
    """
    return _ext_constant_efficiency_waste_for_elec_plants()


_ext_constant_efficiency_waste_for_elec_plants = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C84",
    {},
    _root,
    {},
    "_ext_constant_efficiency_waste_for_elec_plants",
)


@component.add(
    name="PES waste EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_pes_waste_ej": 1},
    other_deps={
        "_integ_pes_waste_ej": {
            "initial": {"initial_pes_waste": 1},
            "step": {"new_waste_supply_ej": 1},
        }
    },
)
def pes_waste_ej():
    """
    Waste primary energy supply (includes industrial and municipal (renew and non-renew).
    """
    return _integ_pes_waste_ej()


_integ_pes_waste_ej = Integ(
    lambda: new_waste_supply_ej(),
    lambda: xr.DataArray(
        initial_pes_waste(), {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    "_integ_pes_waste_ej",
)


@component.add(
    name="PES waste for CHP plants",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_waste_ej": 1, "share_pes_waste_for_chp": 1},
)
def pes_waste_for_chp_plants():
    """
    Primary energy supply waste for CHP plants.
    """
    return pes_waste_ej() * share_pes_waste_for_chp()


@component.add(
    name="efficiency waste for elec CHP plants",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_efficiency_waste_for_elec_chp_plants"},
)
def efficiency_waste_for_elec_chp_plants():
    """
    Efficiency of the transformation of waste in elec in CHP plants.
    """
    return _ext_constant_efficiency_waste_for_elec_chp_plants()


_ext_constant_efficiency_waste_for_elec_chp_plants = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C86",
    {},
    _root,
    {},
    "_ext_constant_efficiency_waste_for_elec_chp_plants",
)


@component.add(
    name="initial PES waste",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_pes_waste"},
)
def initial_pes_waste():
    """
    Waste primary energy supply in 1995.
    """
    return _ext_constant_initial_pes_waste()


_ext_constant_initial_pes_waste = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "B218",
    {},
    _root,
    {},
    "_ext_constant_initial_pes_waste",
)


@component.add(
    name="PES waste for TFC",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_waste_ej": 1, "share_pes_waste_tfc": 1},
)
def pes_waste_for_tfc():
    """
    Primary energy supply waste for total final consumption.
    """
    return pes_waste_ej() * share_pes_waste_tfc()


@component.add(
    name="efficiency waste for heat CHP plants",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_efficiency_waste_for_heat_chp_plants"},
)
def efficiency_waste_for_heat_chp_plants():
    """
    Efficiency of the transformation of waste in heat in CHP plants.
    """
    return _ext_constant_efficiency_waste_for_heat_chp_plants()


_ext_constant_efficiency_waste_for_heat_chp_plants = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C85",
    {},
    _root,
    {},
    "_ext_constant_efficiency_waste_for_heat_chp_plants",
)


@component.add(
    name="P waste change",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_waste_change"},
)
def p_waste_change():
    """
    Annual PES growth depending on the policy of the scenario.
    """
    return _ext_constant_p_waste_change()


_ext_constant_p_waste_change = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F53",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_waste_change",
)

_ext_constant_p_waste_change.add(
    "inputs_EU.xlsx", "SCEN1", "F53", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_waste_change.add(
    "inputs_EU.xlsx", "SCEN2", "F53", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_waste_change.add(
    "inputs_EU.xlsx", "SCEN3", "F53", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_waste_change.add(
    "inputs_EU.xlsx", "SCEN4", "F53", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_waste_change.add(
    "inputs_EU.xlsx", "User defined", "F53", {"scenarios": ["User defined"]}
)


@component.add(
    name="efficiency waste for heat plants",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_efficiency_waste_for_heat_plants"},
)
def efficiency_waste_for_heat_plants():
    """
    Efficiency of the transformation of waste in heat plants.
    """
    return _ext_constant_efficiency_waste_for_heat_plants()


_ext_constant_efficiency_waste_for_heat_plants = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C83",
    {},
    _root,
    {},
    "_ext_constant_efficiency_waste_for_heat_plants",
)


@component.add(
    name="max PE waste",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_max_pe_waste"},
)
def max_pe_waste():
    """
    Maximun potencial of waste (primary energy supply).
    """
    return _ext_constant_max_pe_waste()


_ext_constant_max_pe_waste = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F52",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_max_pe_waste",
)

_ext_constant_max_pe_waste.add(
    "inputs_EU.xlsx", "SCEN1", "F52", {"scenarios": ["SCEN1"]}
)

_ext_constant_max_pe_waste.add(
    "inputs_EU.xlsx", "SCEN2", "F52", {"scenarios": ["SCEN2"]}
)

_ext_constant_max_pe_waste.add(
    "inputs_EU.xlsx", "SCEN3", "F52", {"scenarios": ["SCEN3"]}
)

_ext_constant_max_pe_waste.add(
    "inputs_EU.xlsx", "SCEN4", "F52", {"scenarios": ["SCEN4"]}
)

_ext_constant_max_pe_waste.add(
    "inputs_EU.xlsx", "User defined", "F52", {"scenarios": ["User defined"]}
)


@component.add(
    name='"PES solids bioE & waste EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_solids_bioe_ej": 1, "pes_waste_ej": 1},
)
def pes_solids_bioe_waste_ej():
    """
    Total primary energy supply solids biofuels and waste.
    """
    return pes_solids_bioe_ej() - pes_waste_ej()


@component.add(
    name="Past waste growth",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_past_waste_growth"},
)
def past_waste_growth():
    """
    Past growth in PES of waste supply.
    """
    return _ext_constant_past_waste_growth()


_ext_constant_past_waste_growth = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "X218",
    {},
    _root,
    {},
    "_ext_constant_past_waste_growth",
)


@component.add(
    name="Historic PES waste EJ",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_pes_waste_ej",
        "__lookup__": "_ext_lookup_historic_pes_waste_ej",
    },
)
def historic_pes_waste_ej(x, final_subs=None):
    """
    Historic primary energy supply of waste (1990-2014).
    """
    return _ext_lookup_historic_pes_waste_ej(x, final_subs)


_ext_lookup_historic_pes_waste_ej = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "216",
    "B218",
    {},
    _root,
    {},
    "_ext_lookup_historic_pes_waste_ej",
)


@component.add(
    name="gCH4 per MJ coal",
    units="GtCO2/MToe",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_gch4_per_mj_coal"},
)
def gch4_per_mj_coal():
    """
    CH4 emissions associated to the extraction of coal. Ref: Fig. 2 Howarth (2015).
    """
    return _ext_constant_gch4_per_mj_coal()


_ext_constant_gch4_per_mj_coal = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G91",
    {},
    _root,
    {},
    "_ext_constant_gch4_per_mj_coal",
)


@component.add(
    name="gCH4 per MJ oil",
    units="GtCO2/MToe",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_gch4_per_mj_oil"},
)
def gch4_per_mj_oil():
    """
    CH4 emissions associated to the extraction of oil. Ref: Fig. 2 Howarth (2015).
    """
    return _ext_constant_gch4_per_mj_oil()


_ext_constant_gch4_per_mj_oil = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G92",
    {},
    _root,
    {},
    "_ext_constant_gch4_per_mj_oil",
)


@component.add(
    name="FE Elec generation from fossil fuels TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_elec_generation_from_coal_twh": 1,
        "fe_elec_generation_from_conv_gas_twh": 1,
        "fe_elec_generation_from_unconv_gas_twh": 1,
        "fe_elec_generation_from_total_oil_twh": 1,
        "fes_elec_fossil_fuel_chp_plants_twh": 1,
    },
)
def fe_elec_generation_from_fossil_fuels_twh():
    """
    Final energy electricity generation from fossil fuels (TWh).
    """
    return (
        fe_elec_generation_from_coal_twh()
        + fe_elec_generation_from_conv_gas_twh()
        + fe_elec_generation_from_unconv_gas_twh()
        + fe_elec_generation_from_total_oil_twh()
        + fes_elec_fossil_fuel_chp_plants_twh()
    )


@component.add(
    name="PE demand uranium EU EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_generation_nuclear_elec_twh": 1,
        "ej_per_twh": 1,
        "efficiency_uranium_for_electricity": 1,
    },
)
def pe_demand_uranium_eu_ej():
    """
    Primary energy demand of uranium for nuclear power generation.
    """
    return (
        potential_generation_nuclear_elec_twh()
        * ej_per_twh()
        / efficiency_uranium_for_electricity()
    )


@component.add(
    name="FES Elec fossil fuel CHP plants TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fes_elec_fossil_fuel_chp_plants_ej": 1, "ej_per_twh": 1},
)
def fes_elec_fossil_fuel_chp_plants_twh():
    """
    Final Energy of fossil fuels to produce electricity (TWh) in CHP plants.
    """
    return fes_elec_fossil_fuel_chp_plants_ej() / ej_per_twh()


@component.add(
    name='"FES heat-com fossil fuels CHP plants EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fed_heat_fossil_fuels_chp_plants_ej": 1},
)
def fes_heatcom_fossil_fuels_chp_plants_ej():
    """
    Final Energy supply of heat from fossil fuels in CHP plants. We assign priority to it due to its better efficiency.
    """
    return fed_heat_fossil_fuels_chp_plants_ej()


@component.add(
    name="potential generation nuclear elec TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "installed_capacity_nuclear_tw": 1,
        "cp_nuclear": 1,
        "twe_per_twh": 1,
        "demand_elec_nre_twh": 1,
    },
)
def potential_generation_nuclear_elec_twh():
    """
    Total potential generation of electricity from nuclear power plants given the installed capacity. A minimum function is introduced to assure that no more nuclear than electricity required (after the RES and oil contribution) is produced.
    """
    return np.minimum(
        installed_capacity_nuclear_tw() * cp_nuclear() / twe_per_twh(),
        demand_elec_nre_twh(),
    )


@component.add(
    name="threshold remaining potential new capacity",
    comp_type="Constant",
    comp_subtype="Normal",
)
def threshold_remaining_potential_new_capacity():
    """
    This threshold represents the level of the remaining potential that starts to affects the planification of new RES elec capacity (decreasing returns). Avoid problems of (erroneously) affecting past historical growth trends.
    """
    return 0.5


@component.add(
    name="installed capacity RES elec TW",
    units="TW",
    subscripts=["RES elec", "scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_installed_capacity_res_elec_tw": 1},
    other_deps={
        "_integ_installed_capacity_res_elec_tw": {
            "initial": {"initial_instal_cap_res_elec": 1},
            "step": {"res_elec_capacity_under_construction_tw": 1, "wear_res_elec": 1},
        }
    },
)
def installed_capacity_res_elec_tw():
    """
    Annual installed capacity of RES elec technologies for electricity generation.
    """
    return _integ_installed_capacity_res_elec_tw()


_integ_installed_capacity_res_elec_tw = Integ(
    lambda: res_elec_capacity_under_construction_tw() - wear_res_elec(),
    lambda: initial_instal_cap_res_elec().expand_dims(
        {"scenarios": _subscript_dict["scenarios"]}, 1
    ),
    "_integ_installed_capacity_res_elec_tw",
)


@component.add(
    name='"total time plan+constr RES elec"',
    units="Year",
    subscripts=["RES elec"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time_construction_res_elec": 1,
        "time_step": 2,
        "time_planification_res_elec": 1,
    },
)
def total_time_planconstr_res_elec():
    return np.maximum(time_construction_res_elec(), time_step()) + np.maximum(
        time_planification_res_elec(), time_step()
    )


@component.add(
    name="Historic new required capacity RES elec",
    units="TW",
    subscripts=["RES elec"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "total_time_planconstr_res_elec": 2,
        "table_hist_capacity_res_elec": 2,
    },
)
def historic_new_required_capacity_res_elec():
    """
    (Assuming 100% of planned was planned and constructed).
    """
    return table_hist_capacity_res_elec(
        integer(time() + 1) + total_time_planconstr_res_elec(),
        {
            "RES elec": [
                "hydro",
                '"geot-elec"',
                '"solid bioE-elec"',
                "oceanic",
                "wind onshore",
                "wind offshore",
                "solar PV",
                "CSP",
            ]
        },
    ) - table_hist_capacity_res_elec(
        integer(time()) + total_time_planconstr_res_elec(),
        {
            "RES elec": [
                "hydro",
                '"geot-elec"',
                '"solid bioE-elec"',
                "oceanic",
                "wind onshore",
                "wind offshore",
                "solar PV",
                "CSP",
            ]
        },
    )


@component.add(
    name="new required capacity RES elec",
    units="TW",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "total_time_planconstr_res_elec": 1,
        "historic_new_required_capacity_res_elec": 1,
        "abundance_res_elec2": 1,
        "adapt_growth_res_elec_after_allocation": 1,
        "installed_capacity_res_elec_tw": 1,
        "remaining_potential_constraint_on_new_res_elec_capacity": 1,
    },
)
def new_required_capacity_res_elec():
    """
    New required capacity of RES technologies for electricity generation. We assume 100% of the required infraestructure is planned and constructed.
    """
    return if_then_else(
        (time() < 2015 - total_time_planconstr_res_elec()).expand_dims(
            {"scenarios": _subscript_dict["scenarios"]}, 1
        ),
        lambda: historic_new_required_capacity_res_elec().expand_dims(
            {"scenarios": _subscript_dict["scenarios"]}, 1
        ),
        lambda: installed_capacity_res_elec_tw()
        * adapt_growth_res_elec_after_allocation()
        * remaining_potential_constraint_on_new_res_elec_capacity()
        * abundance_res_elec2(),
    )


@component.add(
    name="table hist capacity RES elec",
    units="TW/Year",
    subscripts=["RES elec"],
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_hist_capacity_res_elec",
        "__lookup__": "_ext_lookup_table_hist_capacity_res_elec",
    },
)
def table_hist_capacity_res_elec(x, final_subs=None):
    return _ext_lookup_table_hist_capacity_res_elec(x, final_subs)


_ext_lookup_table_hist_capacity_res_elec = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "172",
    "H174",
    {"RES elec": ["hydro"]},
    _root,
    {"RES elec": _subscript_dict["RES elec"]},
    "_ext_lookup_table_hist_capacity_res_elec",
)

_ext_lookup_table_hist_capacity_res_elec.add(
    "inputs_EU.xlsx", "Constants", "172", "H175", {"RES elec": ['"geot-elec"']}
)

_ext_lookup_table_hist_capacity_res_elec.add(
    "inputs_EU.xlsx", "Constants", "172", "H176", {"RES elec": ['"solid bioE-elec"']}
)

_ext_lookup_table_hist_capacity_res_elec.add(
    "inputs_EU.xlsx", "Constants", "172", "H177", {"RES elec": ["oceanic"]}
)

_ext_lookup_table_hist_capacity_res_elec.add(
    "inputs_EU.xlsx", "Constants", "172", "H178", {"RES elec": ["wind onshore"]}
)

_ext_lookup_table_hist_capacity_res_elec.add(
    "inputs_EU.xlsx", "Constants", "172", "H179", {"RES elec": ["wind offshore"]}
)

_ext_lookup_table_hist_capacity_res_elec.add(
    "inputs_EU.xlsx", "Constants", "172", "H180", {"RES elec": ["solar PV"]}
)

_ext_lookup_table_hist_capacity_res_elec.add(
    "inputs_EU.xlsx", "Constants", "172", "H181", {"RES elec": ["CSP"]}
)


@component.add(
    name="initial capacity in construction RES elec",
    units="TW",
    subscripts=["RES elec"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"initial_required_capacity_res_elec": 1},
)
def initial_capacity_in_construction_res_elec():
    """
    Initial capacity of RES by technology in construction (year 1995). We assume that it is the same than the additional installed capacity between 1995 and 1996.
    """
    return initial_required_capacity_res_elec()


@component.add(
    name="remaining potential constraint on new RES elec capacity",
    units="Dmnl",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "remaining_potential_res_elec_after_intermitt": 2,
        "threshold_remaining_potential_new_capacity": 2,
    },
)
def remaining_potential_constraint_on_new_res_elec_capacity():
    """
    Constraint of remaining potential on new RES elec capacity. Another alternative: SQRT(remaining potential RES elec after intermitt[RES elec,scenarios])
    """
    return if_then_else(
        remaining_potential_res_elec_after_intermitt()
        > threshold_remaining_potential_new_capacity(),
        lambda: xr.DataArray(
            1,
            {
                "RES elec": _subscript_dict["RES elec"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["RES elec", "scenarios"],
        ),
        lambda: remaining_potential_res_elec_after_intermitt()
        * (1 / threshold_remaining_potential_new_capacity()),
    )


@component.add(
    name="required capacity RES elec TW",
    units="TW",
    subscripts=["RES elec", "scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_required_capacity_res_elec_tw": 1},
    other_deps={
        "_integ_required_capacity_res_elec_tw": {
            "initial": {"initial_required_capacity_res_elec": 1},
            "step": {
                "new_required_capacity_res_elec": 1,
                "new_res_elec_capacity_under_planning": 1,
            },
        }
    },
)
def required_capacity_res_elec_tw():
    """
    Required capacity of RES technologies for electricity generation.
    """
    return _integ_required_capacity_res_elec_tw()


_integ_required_capacity_res_elec_tw = Integ(
    lambda: new_required_capacity_res_elec() - new_res_elec_capacity_under_planning(),
    lambda: initial_required_capacity_res_elec().expand_dims(
        {"scenarios": _subscript_dict["scenarios"]}, 1
    ),
    "_integ_required_capacity_res_elec_tw",
)


@component.add(
    name="RES elec planned capacity TW",
    units="TW",
    subscripts=["RES elec", "scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_res_elec_planned_capacity_tw": 1},
    other_deps={
        "_integ_res_elec_planned_capacity_tw": {
            "initial": {"initial_capacity_in_construction_res_elec": 1},
            "step": {
                "new_res_elec_capacity_under_planning": 1,
                "replacement_capacity_res_elec": 1,
                "res_elec_capacity_under_construction_tw": 1,
            },
        }
    },
)
def res_elec_planned_capacity_tw():
    """
    Planned capacity of RES for electricity.
    """
    return _integ_res_elec_planned_capacity_tw()


_integ_res_elec_planned_capacity_tw = Integ(
    lambda: new_res_elec_capacity_under_planning()
    + replacement_capacity_res_elec()
    - res_elec_capacity_under_construction_tw(),
    lambda: initial_capacity_in_construction_res_elec().expand_dims(
        {"scenarios": _subscript_dict["scenarios"]}, 1
    ),
    "_integ_res_elec_planned_capacity_tw",
)


@component.add(
    name='"Initial energy cons per unit of material cons (recycled) - data"',
    units="MJ/kg",
    subscripts=["materials"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data"
    },
)
def initial_energy_cons_per_unit_of_material_cons_recycled_data():
    """
    Energy consumption required to use recycled materials per unit of material consumption. This variable reads directly from "inputs_EU.xlsx" but has 0s for those materials for which information was not found.
    """
    return _ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data()


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "Z5",
    {"materials": ["Adhesive"]},
    _root,
    {"materials": _subscript_dict["materials"]},
    "_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data",
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z6", {"materials": ["Aluminium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z7", {"materials": ["Aluminium mirrors"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z8", {"materials": ["Cadmium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z9", {"materials": ["Carbon fiber"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z10", {"materials": ["Cement"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z11", {"materials": ["Chromium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z12", {"materials": ["Copper"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z13", {"materials": ["diesel"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z14", {"materials": ["Dy"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx",
    "Materials",
    "Z15",
    {"materials": ['"Electric/electronic components"']},
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z16", {"materials": ["Evacuation lines"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z17", {"materials": ["Fiberglass"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z18", {"materials": ["Foam glass"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z19", {"materials": ["Galium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z20", {"materials": ["Glass"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z21", {"materials": ["Glass reinforcing plastic"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z22", {"materials": ["gravel"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z23", {"materials": ["Indium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z24", {"materials": ["Iron"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z25", {"materials": ["KNO3 mined"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z26", {"materials": ["Asphalt"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z27", {"materials": ["Lime"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z28", {"materials": ["Limestone"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z29", {"materials": ["Lithium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z30", {"materials": ["Lubricant"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z31", {"materials": ["Magnesium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z32", {"materials": ["Manganese"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z33", {"materials": ["Heavy equipment"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z34", {"materials": ["Concrete"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z35", {"materials": ["Molybdenum"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z36", {"materials": ["NaNO3 mined"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z37", {"materials": ["NaNO3 synthetic"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z38", {"materials": ["Neodymium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z39", {"materials": ["Nickel"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z40", {"materials": ['"Over grid (15%)"']}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z41", {"materials": ['"Over grid (5%)"']}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z42", {"materials": ["Paint"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z43", {"materials": ["Lead"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z44", {"materials": ["Plastics"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z45", {"materials": ["Polypropylene"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z46", {"materials": ["Rock"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z47", {"materials": ["Rock wool"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z48", {"materials": ["Sand"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z49", {"materials": ["Silicon sand"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z50", {"materials": ["Silicon wafer modules"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z51", {"materials": ["Silver"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z52", {"materials": ["Site preparation"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z53", {"materials": ["Tin"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z54", {"materials": ["soda ash"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z55", {"materials": ["steel"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z56", {"materials": ["synthetic oil"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z57", {"materials": ["tellurium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Z58", {"materials": ["titanium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Y59", {"materials": ["titanium dioxide"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Y60", {"materials": ["vanadium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Y61", {"materials": ["wires"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled_data.add(
    "inputs_EU.xlsx", "Materials", "Y62", {"materials": ["zinc"]}
)


@component.add(
    name="Cp PHS",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_cp_phs"},
)
def cp_phs():
    """
    Capacity factor of pumped hydro storage (PHS).
    """
    return _ext_constant_cp_phs()


_ext_constant_cp_phs = ExtConstant(
    "inputs_EU.xlsx", "Parameters", "G53", {}, _root, {}, "_ext_constant_cp_phs"
)


@component.add(
    name="max potential PHS TWe",
    units="TWe",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_max_potential_phs_twe"},
)
def max_potential_phs_twe():
    """
    Maximum potential for PHS.
    """
    return _ext_constant_max_potential_phs_twe()


_ext_constant_max_potential_phs_twe = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C26",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_max_potential_phs_twe",
)

_ext_constant_max_potential_phs_twe.add(
    "inputs_EU.xlsx", "SCEN1", "C26", {"scenarios": ["SCEN1"]}
)

_ext_constant_max_potential_phs_twe.add(
    "inputs_EU.xlsx", "SCEN2", "C26", {"scenarios": ["SCEN2"]}
)

_ext_constant_max_potential_phs_twe.add(
    "inputs_EU.xlsx", "SCEN3", "C26", {"scenarios": ["SCEN3"]}
)

_ext_constant_max_potential_phs_twe.add(
    "inputs_EU.xlsx", "SCEN4", "C26", {"scenarios": ["SCEN4"]}
)

_ext_constant_max_potential_phs_twe.add(
    "inputs_EU.xlsx", "User defined", "C26", {"scenarios": ["User defined"]}
)


@component.add(
    name="max capacity potential PHS",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_potential_phs_twe": 1, "cp_phs": 1},
)
def max_capacity_potential_phs():
    """
    Maximum capacity potential of PHS.
    """
    return max_potential_phs_twe() / cp_phs()


@component.add(
    name='"materials per new RES elec capacity installed - HVDCs"',
    units="kg/MW",
    subscripts=["materials"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs"
    },
)
def materials_per_new_res_elec_capacity_installed_hvdcs():
    """
    Materials requirements for inter-regional grids (HVDCs) per unit of new installed capacity of RES variable for electricity.
    """
    return _ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs()


_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "H5",
    {"materials": ["Adhesive"]},
    _root,
    {"materials": _subscript_dict["materials"]},
    "_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs",
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H6", {"materials": ["Aluminium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H7", {"materials": ["Aluminium mirrors"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H8", {"materials": ["Cadmium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H9", {"materials": ["Carbon fiber"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H10", {"materials": ["Cement"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H11", {"materials": ["Chromium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H12", {"materials": ["Copper"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H13", {"materials": ["diesel"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H14", {"materials": ["Dy"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx",
    "Materials",
    "H15",
    {"materials": ['"Electric/electronic components"']},
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H16", {"materials": ["Evacuation lines"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H17", {"materials": ["Fiberglass"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H18", {"materials": ["Foam glass"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H19", {"materials": ["Galium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H20", {"materials": ["Glass"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H21", {"materials": ["Glass reinforcing plastic"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H22", {"materials": ["gravel"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H23", {"materials": ["Indium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H24", {"materials": ["Iron"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H25", {"materials": ["KNO3 mined"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H26", {"materials": ["Asphalt"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H27", {"materials": ["Lime"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H28", {"materials": ["Limestone"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H29", {"materials": ["Lithium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H30", {"materials": ["Lubricant"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H31", {"materials": ["Magnesium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H32", {"materials": ["Manganese"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H33", {"materials": ["Heavy equipment"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H34", {"materials": ["Concrete"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H35", {"materials": ["Molybdenum"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H36", {"materials": ["NaNO3 mined"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H37", {"materials": ["NaNO3 synthetic"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H38", {"materials": ["Neodymium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H39", {"materials": ["Nickel"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H40", {"materials": ['"Over grid (15%)"']}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H41", {"materials": ['"Over grid (5%)"']}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H42", {"materials": ["Paint"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H43", {"materials": ["Lead"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H44", {"materials": ["Plastics"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H45", {"materials": ["Polypropylene"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H46", {"materials": ["Rock"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H47", {"materials": ["Rock wool"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H48", {"materials": ["Sand"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H49", {"materials": ["Silicon sand"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H50", {"materials": ["Silicon wafer modules"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H51", {"materials": ["Silver"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H52", {"materials": ["Site preparation"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H53", {"materials": ["Tin"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H54", {"materials": ["soda ash"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H55", {"materials": ["steel"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H56", {"materials": ["synthetic oil"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H57", {"materials": ["tellurium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H58", {"materials": ["titanium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H59", {"materials": ["titanium dioxide"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H60", {"materials": ["vanadium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H61", {"materials": ["wires"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_hvdcs.add(
    "inputs_EU.xlsx", "Materials", "H62", {"materials": ["zinc"]}
)


@component.add(
    name='"materials per new RES elec capacity installed - material overgrid high power"',
    units="kg/MW",
    subscripts=["materials"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power"
    },
)
def materials_per_new_res_elec_capacity_installed_material_overgrid_high_power():
    """
    Materials requirements for overgrid high power per unit of new installed capacity of RES variable for electricity.
    """
    return (
        _ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power()
    )


_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "G5",
    {"materials": ["Adhesive"]},
    _root,
    {"materials": _subscript_dict["materials"]},
    "_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power",
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G6", {"materials": ["Aluminium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G7", {"materials": ["Aluminium mirrors"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G8", {"materials": ["Cadmium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G9", {"materials": ["Carbon fiber"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G10", {"materials": ["Cement"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G11", {"materials": ["Chromium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G12", {"materials": ["Copper"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G13", {"materials": ["diesel"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G14", {"materials": ["Dy"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx",
    "Materials",
    "G15",
    {"materials": ['"Electric/electronic components"']},
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G16", {"materials": ["Evacuation lines"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G17", {"materials": ["Fiberglass"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G18", {"materials": ["Foam glass"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G19", {"materials": ["Galium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G20", {"materials": ["Glass"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G21", {"materials": ["Glass reinforcing plastic"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G22", {"materials": ["gravel"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G23", {"materials": ["Indium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G24", {"materials": ["Iron"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G25", {"materials": ["KNO3 mined"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G26", {"materials": ["Asphalt"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G27", {"materials": ["Lime"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G28", {"materials": ["Limestone"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G29", {"materials": ["Lithium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G30", {"materials": ["Lubricant"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G31", {"materials": ["Magnesium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G32", {"materials": ["Manganese"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G33", {"materials": ["Heavy equipment"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G34", {"materials": ["Concrete"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G35", {"materials": ["Molybdenum"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G36", {"materials": ["NaNO3 mined"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G37", {"materials": ["NaNO3 synthetic"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G38", {"materials": ["Neodymium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G39", {"materials": ["Nickel"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G40", {"materials": ['"Over grid (15%)"']}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G41", {"materials": ['"Over grid (5%)"']}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G42", {"materials": ["Paint"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G43", {"materials": ["Lead"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G44", {"materials": ["Plastics"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G45", {"materials": ["Polypropylene"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G46", {"materials": ["Rock"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G47", {"materials": ["Rock wool"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G48", {"materials": ["Sand"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G49", {"materials": ["Silicon sand"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G50", {"materials": ["Silicon wafer modules"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G51", {"materials": ["Silver"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G52", {"materials": ["Site preparation"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G53", {"materials": ["Tin"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G54", {"materials": ["soda ash"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G55", {"materials": ["steel"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G56", {"materials": ["synthetic oil"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G57", {"materials": ["tellurium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G58", {"materials": ["titanium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G59", {"materials": ["titanium dioxide"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G60", {"materials": ["vanadium"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G61", {"materials": ["wires"]}
)

_ext_constant_materials_per_new_res_elec_capacity_installed_material_overgrid_high_power.add(
    "inputs_EU.xlsx", "Materials", "G62", {"materials": ["zinc"]}
)


@component.add(
    name="real growth GTL",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "abundance_gases": 2,
        "abundance_liquids": 1,
        "exogenous_growth_gtl": 1,
        "abundance_liquids_gtl": 1,
        "scarcity_conv_oil": 1,
    },
)
def real_growth_gtl():
    """
    The real growth of GTL depends on the relative abundance of gas and liquids, as well as on the availability of gas.
    """
    return (
        if_then_else(
            abundance_gases() >= abundance_liquids(),
            lambda: if_then_else(
                abundance_gases() == 1,
                lambda: exogenous_growth_gtl(),
                lambda: xr.DataArray(
                    0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
                ),
            ),
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        )
        * abundance_liquids_gtl()
        * scarcity_conv_oil()
    )


@component.add(
    name="scarcity conv gas delayed 1yr",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_scarcity_conv_gas_delayed_1yr": 1},
    other_deps={
        "_delayfixed_scarcity_conv_gas_delayed_1yr": {
            "initial": {},
            "step": {"scarcity_conv_gas": 1},
        }
    },
)
def scarcity_conv_gas_delayed_1yr():
    """
    "Scarcity conv gas" variable delayed 1 year. For the initial year we arbitrary chose the value "0" given that it will be endogenously calculated by the model for the following periods.
    """
    return _delayfixed_scarcity_conv_gas_delayed_1yr()


_delayfixed_scarcity_conv_gas_delayed_1yr = DelayFixed(
    lambda: scarcity_conv_gas(),
    lambda: 1,
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_scarcity_conv_gas_delayed_1yr",
)


@component.add(
    name="scarcity conv oil delayed 1yr",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_scarcity_conv_oil_delayed_1yr": 1},
    other_deps={
        "_delayfixed_scarcity_conv_oil_delayed_1yr": {
            "initial": {},
            "step": {"scarcity_conv_oil": 1},
        }
    },
)
def scarcity_conv_oil_delayed_1yr():
    """
    "Scarcity conv gas" variable delayed 1 year. For the initial year we arbitrary chose the value "0" given that it will be endogenously calculated by the model for the following periods.
    """
    return _delayfixed_scarcity_conv_oil_delayed_1yr()


_delayfixed_scarcity_conv_oil_delayed_1yr = DelayFixed(
    lambda: scarcity_conv_oil(),
    lambda: 1,
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_scarcity_conv_oil_delayed_1yr",
)


@component.add(
    name='"PES nat. gas EU"',
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_extraction_conv_gas_ej": 1, "real_extraction_unconv_gas_ej": 1},
)
def pes_nat_gas_eu():
    return real_extraction_conv_gas_ej() + real_extraction_unconv_gas_ej()


@component.add(
    name="exponent availability conv oil",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def exponent_availability_conv_oil():
    """
    The smaller the exponent, more priority to conventional vs unconventional oil: 1: lineal 1/2: square root 1/3: cube root ...
    """
    return 1 / 4


@component.add(
    name='"abundance total nat. gas EU"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_nat_gas_ej": 3, "pes_nat_gas_eu": 2},
)
def abundance_total_nat_gas_eu():
    """
    The parameter abundance varies between (1;0). Abundance=1 while the supply covers the demand; the closest to 0 indicates a higher divergence between supply and demand.
    """
    return if_then_else(
        ped_nat_gas_ej() < pes_nat_gas_eu(),
        lambda: xr.DataArray(
            1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: 1 - zidz(ped_nat_gas_ej() - pes_nat_gas_eu(), ped_nat_gas_ej()),
    )


@component.add(
    name="exponent availability conv gas",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def exponent_availability_conv_gas():
    """
    The smaller the exponent, more priority to conventional vs unconventional gas: 1: lineal 1/2: square root 1/3: cube root ...
    """
    return 1 / 4


@component.add(
    name="scarcity conv gas",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_extraction_conv_gas_ej": 4,
        "exponent_availability_conv_gas": 1,
        "extraction_conv_gas_ej": 2,
    },
)
def scarcity_conv_gas():
    """
    Priority to conventional resource to cover the demand while the maximum extraction level of energy/time is not reached. If "scarcity conv gas"=1 there is no more available flow to be extracted from the conventional resource.
    """
    return if_then_else(
        max_extraction_conv_gas_ej() == 0,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            max_extraction_conv_gas_ej() >= extraction_conv_gas_ej(),
            lambda: 1
            - (
                (max_extraction_conv_gas_ej() - extraction_conv_gas_ej())
                / max_extraction_conv_gas_ej()
            )
            ** exponent_availability_conv_gas(),
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
        ),
    )


@component.add(
    name='"Year scarcity total nat. gas"',
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_total_nat_gas_eu": 1, "time": 1},
)
def year_scarcity_total_nat_gas():
    """
    Year when the parameter abundance falls below 0.95, i.e. year when scarcity starts.
    """
    return if_then_else(
        abundance_total_nat_gas_eu() > 0.95,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: xr.DataArray(
            time(), {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="share unconv gas vs tot agg in 2050",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "choose_extraction_tot_agg_gas_curve": 2,
        "share_unconv_gas_vs_tot_agg_in_2050_laherrere2010": 1,
        "share_unconv_gas_vs_tot_agg_in_2050_user_defined": 1,
        "share_unconv_gas_vs_tot_agg_in_2050_mohr12_bg": 1,
    },
)
def share_unconv_gas_vs_tot_agg_in_2050():
    """
    Share of unconventional gas vs total aggregated gas in 2050 depending on the maximum extraction curve selected for total aggregated gas.
    """
    return if_then_else(
        choose_extraction_tot_agg_gas_curve() == 1,
        lambda: xr.DataArray(
            share_unconv_gas_vs_tot_agg_in_2050_laherrere2010(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            choose_extraction_tot_agg_gas_curve() == 2,
            lambda: xr.DataArray(
                share_unconv_gas_vs_tot_agg_in_2050_mohr12_bg(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: xr.DataArray(
                share_unconv_gas_vs_tot_agg_in_2050_user_defined(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
        ),
    )


@component.add(
    name="share unconv gas vs tot agg in 2050 Lahèrrere2010",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_share_unconv_gas_vs_tot_agg_in_2050_laherrere2010"
    },
)
def share_unconv_gas_vs_tot_agg_in_2050_laherrere2010():
    return _ext_constant_share_unconv_gas_vs_tot_agg_in_2050_laherrere2010()


_ext_constant_share_unconv_gas_vs_tot_agg_in_2050_laherrere2010 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "B153",
    {},
    _root,
    {},
    "_ext_constant_share_unconv_gas_vs_tot_agg_in_2050_laherrere2010",
)


@component.add(
    name="share unconv gas vs tot agg in 2050 Mohr12 BG",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_share_unconv_gas_vs_tot_agg_in_2050_mohr12_bg"
    },
)
def share_unconv_gas_vs_tot_agg_in_2050_mohr12_bg():
    return _ext_constant_share_unconv_gas_vs_tot_agg_in_2050_mohr12_bg()


_ext_constant_share_unconv_gas_vs_tot_agg_in_2050_mohr12_bg = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "B155",
    {},
    _root,
    {},
    "_ext_constant_share_unconv_gas_vs_tot_agg_in_2050_mohr12_bg",
)


@component.add(
    name="share unconv gas vs tot agg in 2050 User defined",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_share_unconv_gas_vs_tot_agg_in_2050_user_defined"
    },
)
def share_unconv_gas_vs_tot_agg_in_2050_user_defined():
    return _ext_constant_share_unconv_gas_vs_tot_agg_in_2050_user_defined()


_ext_constant_share_unconv_gas_vs_tot_agg_in_2050_user_defined = ExtConstant(
    "inputs_EU.xlsx",
    "User defined",
    "B150",
    {},
    _root,
    {},
    "_ext_constant_share_unconv_gas_vs_tot_agg_in_2050_user_defined",
)


@component.add(
    name="cumulated tot agg gas extraction to 1995",
    units="EJ",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "cumulated_conv_gas_extraction_to_1995": 1,
        "cumulated_unconv_gas_extraction_to_1995": 1,
    },
)
def cumulated_tot_agg_gas_extraction_to_1995():
    """
    Cumulated total agg gas extraction to 1995.
    """
    return (
        cumulated_conv_gas_extraction_to_1995()
        + cumulated_unconv_gas_extraction_to_1995()
    )


@component.add(
    name="share conv gas vs tot agg",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_unconv_gas_vs_tot_agg": 1},
)
def share_conv_gas_vs_tot_agg():
    return 1 - share_unconv_gas_vs_tot_agg()


@component.add(
    name="share RURR tot agg gas to leave underground",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_share_rurr_tot_agg_gas_to_leave_underground"
    },
)
def share_rurr_tot_agg_gas_to_leave_underground():
    """
    RURR's total aggregated natural gas to be left in the ground as a share of the RURR in the year 2015.
    """
    return _ext_constant_share_rurr_tot_agg_gas_to_leave_underground()


_ext_constant_share_rurr_tot_agg_gas_to_leave_underground = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F128",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_share_rurr_tot_agg_gas_to_leave_underground",
)

_ext_constant_share_rurr_tot_agg_gas_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN1", "F128", {"scenarios": ["SCEN1"]}
)

_ext_constant_share_rurr_tot_agg_gas_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN2", "F128", {"scenarios": ["SCEN2"]}
)

_ext_constant_share_rurr_tot_agg_gas_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN3", "F128", {"scenarios": ["SCEN3"]}
)

_ext_constant_share_rurr_tot_agg_gas_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN4", "F128", {"scenarios": ["SCEN4"]}
)

_ext_constant_share_rurr_tot_agg_gas_to_leave_underground.add(
    "inputs_EU.xlsx", "User defined", "F128", {"scenarios": ["User defined"]}
)


@component.add(
    name="share unconv gas vs tot agg",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "evolution_share_unconv_gas_vs_tot_agg": 1,
        "ped_nat_gas_ej": 1,
        "historic_unconv_gas": 1,
    },
)
def share_unconv_gas_vs_tot_agg():
    """
    Evolution of the share of unconventional gas vs total aggregated gas.
    """
    return if_then_else(
        time() > 2012,
        lambda: np.minimum(evolution_share_unconv_gas_vs_tot_agg(), 1),
        lambda: historic_unconv_gas() / ped_nat_gas_ej(),
    )


@component.add(
    name="Flow tot agg gas left in ground",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "start_policy_leave_in_ground_tot_agg_gas": 2,
        "tot_agg_gas_to_leave_underground": 1,
    },
)
def flow_tot_agg_gas_left_in_ground():
    """
    Flow of total aggregated natural gas left in the ground. We assume that this amount is removed from the stock of conventional natural gas available in 1 year.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_tot_agg_gas(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            time() >= start_policy_leave_in_ground_tot_agg_gas() + 1,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: tot_agg_gas_to_leave_underground(),
        ),
    )


@component.add(
    name="Tot RURR tot agg gas",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rurr_tot_agg_gas": 1, "total_agg_gas_left_in_ground": 1},
)
def tot_rurr_tot_agg_gas():
    """
    Total RURR of total aggregated natural gas considering the available RURR and the eventual amount of RURR left in the ground as a policy.
    """
    return rurr_tot_agg_gas() + total_agg_gas_left_in_ground()


@component.add(
    name="URR total agg gas unlimited",
    units="EJ",
    comp_type="Constant",
    comp_subtype="Normal",
)
def urr_total_agg_gas_unlimited():
    """
    Arbitrary very high value.
    """
    return 1000000000.0


@component.add(
    name="Start policy leave in ground tot agg gas",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_start_policy_leave_in_ground_tot_agg_gas"
    },
)
def start_policy_leave_in_ground_tot_agg_gas():
    """
    Year when the policy to leave in the ground an amount of total aggregated gas RURR enters into force.
    """
    return _ext_constant_start_policy_leave_in_ground_tot_agg_gas()


_ext_constant_start_policy_leave_in_ground_tot_agg_gas = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F126",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_policy_leave_in_ground_tot_agg_gas",
)

_ext_constant_start_policy_leave_in_ground_tot_agg_gas.add(
    "inputs_EU.xlsx", "SCEN1", "F126", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_policy_leave_in_ground_tot_agg_gas.add(
    "inputs_EU.xlsx", "SCEN2", "F126", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_policy_leave_in_ground_tot_agg_gas.add(
    "inputs_EU.xlsx", "SCEN3", "F126", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_policy_leave_in_ground_tot_agg_gas.add(
    "inputs_EU.xlsx", "SCEN4", "F126", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_policy_leave_in_ground_tot_agg_gas.add(
    "inputs_EU.xlsx", "User defined", "F126", {"scenarios": ["User defined"]}
)


@component.add(
    name='"extraction unconv gas - tot agg"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"extraction_tot_agg_gas_ej": 1, "share_unconv_gas_vs_tot_agg": 1},
)
def extraction_unconv_gas_tot_agg():
    return extraction_tot_agg_gas_ej() * share_unconv_gas_vs_tot_agg()


@component.add(
    name="Total agg gas left in ground",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_agg_gas_left_in_ground": 1},
    other_deps={
        "_integ_total_agg_gas_left_in_ground": {
            "initial": {},
            "step": {"flow_tot_agg_gas_left_in_ground": 1},
        }
    },
)
def total_agg_gas_left_in_ground():
    """
    Total amount of aggregated natural gas left in the ground due to policies.
    """
    return _integ_total_agg_gas_left_in_ground()


_integ_total_agg_gas_left_in_ground = Integ(
    lambda: flow_tot_agg_gas_left_in_ground(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    "_integ_total_agg_gas_left_in_ground",
)


@component.add(
    name="evolution share unconv gas vs tot agg",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_unconv_gas_vs_tot_agg_in_2050": 3, "time": 1},
)
def evolution_share_unconv_gas_vs_tot_agg():
    """
    Linear relation of the evolution of the share of unconventional gas vs total aggregated gas.
    """
    return (share_unconv_gas_vs_tot_agg_in_2050() - 0.1232) / (2050 - 2012) * time() + (
        share_unconv_gas_vs_tot_agg_in_2050()
        - ((share_unconv_gas_vs_tot_agg_in_2050() - 0.1232) / (2050 - 2012)) * 2050
    )


@component.add(
    name="real extraction conv gas EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "separate_conv_and_unconv_gas": 1,
        "extraction_conv_gas_ej": 1,
        "extraction_conv_gas_tot_agg": 1,
    },
)
def real_extraction_conv_gas_ej():
    return if_then_else(
        separate_conv_and_unconv_gas() == 1,
        lambda: extraction_conv_gas_ej(),
        lambda: extraction_conv_gas_tot_agg(),
    )


@component.add(
    name="URR tot agg gas",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "separate_conv_and_unconv_gas": 1,
        "urr_total_gas_user_defined": 3,
        "unlimited_nre": 1,
        "unlimited_gas": 1,
        "choose_extraction_tot_agg_gas_curve": 2,
        "urr_total_agg_gas_unlimited": 2,
    },
)
def urr_tot_agg_gas():
    """
    Ultimately Recoverable Resources (URR) associated to the selected depletion curve.
    """
    return if_then_else(
        separate_conv_and_unconv_gas() == 1,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            unlimited_nre() == 1,
            lambda: xr.DataArray(
                urr_total_agg_gas_unlimited(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                unlimited_gas() == 1,
                lambda: xr.DataArray(
                    urr_total_agg_gas_unlimited(),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    choose_extraction_tot_agg_gas_curve() == 1,
                    lambda: xr.DataArray(
                        urr_total_gas_user_defined(),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                    lambda: if_then_else(
                        choose_extraction_tot_agg_gas_curve() == 2,
                        lambda: xr.DataArray(
                            urr_total_gas_user_defined(),
                            {"scenarios": _subscript_dict["scenarios"]},
                            ["scenarios"],
                        ),
                        lambda: xr.DataArray(
                            urr_total_gas_user_defined(),
                            {"scenarios": _subscript_dict["scenarios"]},
                            ["scenarios"],
                        ),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="cumulated tot agg gas extraction",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cumulated_tot_agg_gas_extraction": 1},
    other_deps={
        "_integ_cumulated_tot_agg_gas_extraction": {
            "initial": {"cumulated_tot_agg_gas_extraction_to_1995": 1},
            "step": {"extraction_tot_agg_gas_ej": 1},
        }
    },
)
def cumulated_tot_agg_gas_extraction():
    """
    Cumulated total aggregated gas extraction.
    """
    return _integ_cumulated_tot_agg_gas_extraction()


_integ_cumulated_tot_agg_gas_extraction = Integ(
    lambda: extraction_tot_agg_gas_ej(),
    lambda: xr.DataArray(
        cumulated_tot_agg_gas_extraction_to_1995(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_cumulated_tot_agg_gas_extraction",
)


@component.add(
    name='"extraction conv gas - tot agg"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"extraction_tot_agg_gas_ej": 1, "share_conv_gas_vs_tot_agg": 1},
)
def extraction_conv_gas_tot_agg():
    return extraction_tot_agg_gas_ej() * share_conv_gas_vs_tot_agg()


@component.add(
    name="real extraction unconv gas EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "separate_conv_and_unconv_gas": 1,
        "extraction_unconv_gas_ej": 1,
        "extraction_unconv_gas_tot_agg": 1,
    },
)
def real_extraction_unconv_gas_ej():
    return if_then_else(
        separate_conv_and_unconv_gas() == 1,
        lambda: extraction_unconv_gas_ej(),
        lambda: extraction_unconv_gas_tot_agg(),
    )


@component.add(
    name="max extraction tot agg gas EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "separate_conv_and_unconv_gas": 1,
        "choose_extraction_tot_agg_gas_curve": 2,
        "table_max_extraction_total_gas_user_defined": 3,
        "tot_rurr_tot_agg_gas": 3,
    },
)
def max_extraction_tot_agg_gas_ej():
    """
    Maximum extraction curve selected for the simulations.
    """
    return if_then_else(
        separate_conv_and_unconv_gas() == 0,
        lambda: if_then_else(
            choose_extraction_tot_agg_gas_curve() == 1,
            lambda: table_max_extraction_total_gas_user_defined(
                tot_rurr_tot_agg_gas(),
                {
                    "scenarios": [
                        "SCEN1",
                        "SCEN2",
                        "SCEN3",
                        "SCEN4",
                        "BAU",
                        "User defined",
                    ]
                },
            ),
            lambda: if_then_else(
                choose_extraction_tot_agg_gas_curve() == 2,
                lambda: table_max_extraction_total_gas_user_defined(
                    tot_rurr_tot_agg_gas(),
                    {
                        "scenarios": [
                            "SCEN1",
                            "SCEN2",
                            "SCEN3",
                            "SCEN4",
                            "BAU",
                            "User defined",
                        ]
                    },
                ),
                lambda: table_max_extraction_total_gas_user_defined(
                    tot_rurr_tot_agg_gas(),
                    {
                        "scenarios": [
                            "SCEN1",
                            "SCEN2",
                            "SCEN3",
                            "SCEN4",
                            "BAU",
                            "User defined",
                        ]
                    },
                ),
            ),
        ),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name='"real extraction conv oil Mb/d"',
    units="Mb/d",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_extraction_conv_oil_ej": 1, "mbd_per_ejyear": 1},
)
def real_extraction_conv_oil_mbd():
    return real_extraction_conv_oil_ej() * mbd_per_ejyear()


@component.add(
    name="share unconv oil vs tot agg",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "evolution_share_unconv_oil_vs_tot_agg": 1,
        "historic_unconv_oil": 1,
        "ped_total_oil_ej": 1,
    },
)
def share_unconv_oil_vs_tot_agg():
    """
    Evolution of the share of unconventional oil vs total aggregated oil.
    """
    return if_then_else(
        time() > 2012,
        lambda: np.minimum(evolution_share_unconv_oil_vs_tot_agg(), 1),
        lambda: historic_unconv_oil() / ped_total_oil_ej(),
    )


@component.add(
    name="evolution share unconv oil vs tot agg",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_unconv_oil_vs_tot_agg_in_2050": 3, "time": 1},
)
def evolution_share_unconv_oil_vs_tot_agg():
    """
    Linear relation of the evolution of the share of unconventional oil vs total aggregated oil.
    """
    return (share_unconv_oil_vs_tot_agg_in_2050() - 0.059) / (2050 - 2012) * time() + (
        share_unconv_oil_vs_tot_agg_in_2050()
        - ((share_unconv_oil_vs_tot_agg_in_2050() - 0.059) / (2050 - 2012)) * 2050
    )


@component.add(
    name="share unconv oil vs tot agg in 2050",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "choose_extraction_curve_tot_agg_oil": 1,
        "share_unconv_oil_vs_tot_agg_in_2050_laherrere2006": 1,
        "share_unconv_oil_vs_tot_agg_in_2050_user_defined": 1,
    },
)
def share_unconv_oil_vs_tot_agg_in_2050():
    """
    Share of unconventional oil vs total aggregated oil in 2050 depending on the maximum extraction curve selected for total aggregated oil.
    """
    return if_then_else(
        choose_extraction_curve_tot_agg_oil() == 1,
        lambda: xr.DataArray(
            share_unconv_oil_vs_tot_agg_in_2050_laherrere2006(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: xr.DataArray(
            share_unconv_oil_vs_tot_agg_in_2050_user_defined(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
    )


@component.add(
    name="share unconv oil vs tot agg in 2050 Lahèrrere2006",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_share_unconv_oil_vs_tot_agg_in_2050_laherrere2006"
    },
)
def share_unconv_oil_vs_tot_agg_in_2050_laherrere2006():
    return _ext_constant_share_unconv_oil_vs_tot_agg_in_2050_laherrere2006()


_ext_constant_share_unconv_oil_vs_tot_agg_in_2050_laherrere2006 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "B138",
    {},
    _root,
    {},
    "_ext_constant_share_unconv_oil_vs_tot_agg_in_2050_laherrere2006",
)


@component.add(
    name="share unconv oil vs tot agg in 2050 User defined",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_share_unconv_oil_vs_tot_agg_in_2050_user_defined"
    },
)
def share_unconv_oil_vs_tot_agg_in_2050_user_defined():
    return _ext_constant_share_unconv_oil_vs_tot_agg_in_2050_user_defined()


_ext_constant_share_unconv_oil_vs_tot_agg_in_2050_user_defined = ExtConstant(
    "inputs_EU.xlsx",
    "User defined",
    "B143",
    {},
    _root,
    {},
    "_ext_constant_share_unconv_oil_vs_tot_agg_in_2050_user_defined",
)


@component.add(
    name='"extraction conv oil - tot agg"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"extraction_tot_agg_oil_ej": 1, "share_conv_oil_vs_tot_agg": 1},
)
def extraction_conv_oil_tot_agg():
    return extraction_tot_agg_oil_ej() * share_conv_oil_vs_tot_agg()


@component.add(
    name='"extraction unconv oil - tot agg"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"extraction_tot_agg_oil_ej": 1, "share_unconv_oil_vs_tot_agg": 1},
)
def extraction_unconv_oil_tot_agg():
    return extraction_tot_agg_oil_ej() * share_unconv_oil_vs_tot_agg()


@component.add(
    name="share conv oil vs tot agg",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_unconv_oil_vs_tot_agg": 1},
)
def share_conv_oil_vs_tot_agg():
    return 1 - share_unconv_oil_vs_tot_agg()


@component.add(
    name="PES total oil EJ EU",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_extraction_conv_oil_ej": 1, "real_extraction_unconv_oil_ej": 1},
)
def pes_total_oil_ej_eu():
    """
    Total oil (conventional + unconventional) extraction.
    """
    return real_extraction_conv_oil_ej() + real_extraction_unconv_oil_ej()


@component.add(
    name="real extraction conv oil EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "separate_conv_and_unconv_oil": 1,
        "extraction_conv_oil_ej": 1,
        "extraction_conv_oil_tot_agg": 1,
    },
)
def real_extraction_conv_oil_ej():
    return if_then_else(
        separate_conv_and_unconv_oil() == 1,
        lambda: extraction_conv_oil_ej(),
        lambda: extraction_conv_oil_tot_agg(),
    )


@component.add(
    name="gCH4 per MJ conv gas",
    units="GtCO2/MToe",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_gch4_per_mj_conv_gas"},
)
def gch4_per_mj_conv_gas():
    """
    CH4 emissions associated to the extraction of conventional gas. Ref: Fig. 2 Howarth (2015).
    """
    return _ext_constant_gch4_per_mj_conv_gas()


_ext_constant_gch4_per_mj_conv_gas = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G89",
    {},
    _root,
    {},
    "_ext_constant_gch4_per_mj_conv_gas",
)


@component.add(
    name="Total agg oil left in ground",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_agg_oil_left_in_ground": 1},
    other_deps={
        "_integ_total_agg_oil_left_in_ground": {
            "initial": {},
            "step": {"flow_tot_agg_oil_left_in_ground": 1},
        }
    },
)
def total_agg_oil_left_in_ground():
    """
    Total amount of aggregated oil left in the ground due to policies.
    """
    return _integ_total_agg_oil_left_in_ground()


_integ_total_agg_oil_left_in_ground = Integ(
    lambda: flow_tot_agg_oil_left_in_ground(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    "_integ_total_agg_oil_left_in_ground",
)


@component.add(
    name="cumulated tot agg oil extraction",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cumulated_tot_agg_oil_extraction": 1},
    other_deps={
        "_integ_cumulated_tot_agg_oil_extraction": {
            "initial": {"cumulated_tot_agg_extraction_to_1995": 1},
            "step": {"extraction_tot_agg_oil_ej": 1},
        }
    },
)
def cumulated_tot_agg_oil_extraction():
    """
    Cumulated total aggregated oil extraction.
    """
    return _integ_cumulated_tot_agg_oil_extraction()


_integ_cumulated_tot_agg_oil_extraction = Integ(
    lambda: extraction_tot_agg_oil_ej(),
    lambda: xr.DataArray(
        cumulated_tot_agg_extraction_to_1995(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_cumulated_tot_agg_oil_extraction",
)


@component.add(
    name="cumulated tot agg extraction to 1995",
    units="EJ",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "cumulated_conv_oil_extraction_to_1995": 1,
        "cumulated_unconv_oil_extraction_to_1995": 1,
    },
)
def cumulated_tot_agg_extraction_to_1995():
    """
    Cumulated total aggregated oil extraction to 1995.
    """
    return (
        cumulated_conv_oil_extraction_to_1995()
        + cumulated_unconv_oil_extraction_to_1995()
    )


@component.add(
    name="URR tot agg oil unlimited",
    units="EJ",
    comp_type="Constant",
    comp_subtype="Normal",
)
def urr_tot_agg_oil_unlimited():
    """
    Arbitrary very high value.
    """
    return 1000000000.0


@component.add(
    name="Tot RURR tot agg oil",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rurr_tot_agg_oil": 1, "total_agg_oil_left_in_ground": 1},
)
def tot_rurr_tot_agg_oil():
    """
    Total RURR of total aggregated oil considering the available RURR and the eventual amount of RURR left in the ground as a policy.
    """
    return rurr_tot_agg_oil() + total_agg_oil_left_in_ground()


@component.add(
    name="Start policy leave in ground tot agg oil",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_start_policy_leave_in_ground_tot_agg_oil"
    },
)
def start_policy_leave_in_ground_tot_agg_oil():
    """
    Year when the policy to leave in the ground an amount of total aggregated oil RURR enters into force.
    """
    return _ext_constant_start_policy_leave_in_ground_tot_agg_oil()


_ext_constant_start_policy_leave_in_ground_tot_agg_oil = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F122",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_policy_leave_in_ground_tot_agg_oil",
)

_ext_constant_start_policy_leave_in_ground_tot_agg_oil.add(
    "inputs_EU.xlsx", "SCEN1", "F122", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_policy_leave_in_ground_tot_agg_oil.add(
    "inputs_EU.xlsx", "SCEN2", "F122", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_policy_leave_in_ground_tot_agg_oil.add(
    "inputs_EU.xlsx", "SCEN3", "F122", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_policy_leave_in_ground_tot_agg_oil.add(
    "inputs_EU.xlsx", "SCEN4", "F122", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_policy_leave_in_ground_tot_agg_oil.add(
    "inputs_EU.xlsx", "User defined", "F122", {"scenarios": ["User defined"]}
)


@component.add(
    name="Flow tot agg oil left in ground",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "start_policy_leave_in_ground_tot_agg_oil": 2,
        "tot_agg_oil_to_leave_underground": 1,
    },
)
def flow_tot_agg_oil_left_in_ground():
    """
    Flow of total aggregated oil left in the ground. We assume that this amount is removed from the stock of total aggregated oil available in 1 year.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_tot_agg_oil(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            time() >= start_policy_leave_in_ground_tot_agg_oil() + 1,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: tot_agg_oil_to_leave_underground(),
        ),
    )


@component.add(
    name="g per Mt",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_g_per_mt"},
)
def g_per_mt():
    """
    1e12 grams = 1 Mtonne.
    """
    return _ext_constant_g_per_mt()


_ext_constant_g_per_mt = ExtConstant(
    "inputs_EU.xlsx", "Constants", "G13", {}, _root, {}, "_ext_constant_g_per_mt"
)


@component.add(
    name="share RURR tot agg oil to leave underground",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_share_rurr_tot_agg_oil_to_leave_underground"
    },
)
def share_rurr_tot_agg_oil_to_leave_underground():
    """
    RURR's total aggregatoid oil to be left in the ground as a share of the RURR in the year 2015.
    """
    return _ext_constant_share_rurr_tot_agg_oil_to_leave_underground()


_ext_constant_share_rurr_tot_agg_oil_to_leave_underground = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F124",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_share_rurr_tot_agg_oil_to_leave_underground",
)

_ext_constant_share_rurr_tot_agg_oil_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN1", "F124", {"scenarios": ["SCEN1"]}
)

_ext_constant_share_rurr_tot_agg_oil_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN2", "F124", {"scenarios": ["SCEN2"]}
)

_ext_constant_share_rurr_tot_agg_oil_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN3", "F124", {"scenarios": ["SCEN3"]}
)

_ext_constant_share_rurr_tot_agg_oil_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN4", "F124", {"scenarios": ["SCEN4"]}
)

_ext_constant_share_rurr_tot_agg_oil_to_leave_underground.add(
    "inputs_EU.xlsx", "User defined", "F124", {"scenarios": ["User defined"]}
)


@component.add(
    name="gCH4 per MJ unconv gas",
    units="GtCO2/MToe",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_gch4_per_mj_unconv_gas"},
)
def gch4_per_mj_unconv_gas():
    """
    CH4 emissions associated to the extraction of unconventional gas (shale gas). Ref: Fig. 2 Howarth (2015).
    """
    return _ext_constant_gch4_per_mj_unconv_gas()


_ext_constant_gch4_per_mj_unconv_gas = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G90",
    {},
    _root,
    {},
    "_ext_constant_gch4_per_mj_unconv_gas",
)


@component.add(
    name="Tot RURR unconv gas",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rurr_unconv_gas": 1, "total_unconv_gas_left_in_ground": 1},
)
def tot_rurr_unconv_gas():
    """
    Total RURR of unconventional natural gas considering the available RURR and the eventual amount of RURR left in the ground as a policy.
    """
    return rurr_unconv_gas() + total_unconv_gas_left_in_ground()


@component.add(
    name="Start policy leave in ground coal",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_start_policy_leave_in_ground_coal"},
)
def start_policy_leave_in_ground_coal():
    """
    Year when the policy to leave in the ground an amount of coal RURR enters into force.
    """
    return _ext_constant_start_policy_leave_in_ground_coal()


_ext_constant_start_policy_leave_in_ground_coal = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C130",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_policy_leave_in_ground_coal",
)

_ext_constant_start_policy_leave_in_ground_coal.add(
    "inputs_EU.xlsx", "SCEN1", "C130", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_policy_leave_in_ground_coal.add(
    "inputs_EU.xlsx", "SCEN2", "C130", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_policy_leave_in_ground_coal.add(
    "inputs_EU.xlsx", "SCEN3", "C130", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_policy_leave_in_ground_coal.add(
    "inputs_EU.xlsx", "SCEN4", "C130", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_policy_leave_in_ground_coal.add(
    "inputs_EU.xlsx", "User defined", "C130", {"scenarios": ["User defined"]}
)


@component.add(
    name="Total unconv gas left in ground",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_unconv_gas_left_in_ground": 1},
    other_deps={
        "_integ_total_unconv_gas_left_in_ground": {
            "initial": {},
            "step": {"flow_unconv_gas_left_in_ground": 1},
        }
    },
)
def total_unconv_gas_left_in_ground():
    """
    Total amount of unconventional natural gas left in the ground due to policies.
    """
    return _integ_total_unconv_gas_left_in_ground()


_integ_total_unconv_gas_left_in_ground = Integ(
    lambda: flow_unconv_gas_left_in_ground(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    "_integ_total_unconv_gas_left_in_ground",
)


@component.add(
    name="Flow coal left in ground",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "start_policy_leave_in_ground_coal": 2,
        "coal_to_leave_underground": 1,
    },
)
def flow_coal_left_in_ground():
    """
    Flow of coal left in the ground. We assume that this amount is removed from the stock of coal available in 1 year.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_coal(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            time() >= start_policy_leave_in_ground_coal() + 1,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: coal_to_leave_underground(),
        ),
    )


@component.add(
    name="Flow conv gas left in ground",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "start_policy_leave_in_ground_conv_gas": 2,
        "conv_gas_to_leave_underground": 1,
    },
)
def flow_conv_gas_left_in_ground():
    """
    Flow of conventional natural gas left in the ground. We assume that this amount is removed from the stock of conventional natural gas available in 1 year.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_conv_gas(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            time() >= start_policy_leave_in_ground_conv_gas() + 1,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: conv_gas_to_leave_underground(),
        ),
    )


@component.add(
    name="Flow conv oil left in ground",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "start_policy_leave_in_ground_conv_oil": 2,
        "conv_oil_to_leave_underground": 1,
    },
)
def flow_conv_oil_left_in_ground():
    """
    Flow of conventional oil left in the ground. We assume that this amount is removed from the stock of conventional oil available in 1 year.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_conv_oil(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            time() >= start_policy_leave_in_ground_conv_oil() + 1,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: conv_oil_to_leave_underground(),
        ),
    )


@component.add(
    name="Flow unconv oil left in ground",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "start_policy_leave_in_ground_unconv_oil": 2,
        "unconv_oil_to_leave_underground": 1,
    },
)
def flow_unconv_oil_left_in_ground():
    """
    Flow of unconventional oil left in the ground. We assume that this amount is removed from the stock of unconventional oil available in 1 year.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_unconv_oil(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            time() >= start_policy_leave_in_ground_unconv_oil() + 1,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: unconv_oil_to_leave_underground(),
        ),
    )


@component.add(
    name="share RURR unconv gas to leave underground",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_share_rurr_unconv_gas_to_leave_underground"
    },
)
def share_rurr_unconv_gas_to_leave_underground():
    """
    RURR's unconventional natural gas to be left in the ground as a share of the RURR in the year 2015.
    """
    return _ext_constant_share_rurr_unconv_gas_to_leave_underground()


_ext_constant_share_rurr_unconv_gas_to_leave_underground = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C129",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_share_rurr_unconv_gas_to_leave_underground",
)

_ext_constant_share_rurr_unconv_gas_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN1", "C129", {"scenarios": ["SCEN1"]}
)

_ext_constant_share_rurr_unconv_gas_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN2", "C129", {"scenarios": ["SCEN2"]}
)

_ext_constant_share_rurr_unconv_gas_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN3", "C129", {"scenarios": ["SCEN3"]}
)

_ext_constant_share_rurr_unconv_gas_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN4", "C129", {"scenarios": ["SCEN4"]}
)

_ext_constant_share_rurr_unconv_gas_to_leave_underground.add(
    "inputs_EU.xlsx", "User defined", "C129", {"scenarios": ["User defined"]}
)


@component.add(
    name="share RURR unconv oil to leave underground",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_share_rurr_unconv_oil_to_leave_underground"
    },
)
def share_rurr_unconv_oil_to_leave_underground():
    """
    RURR's unconventional oil to be left in the ground as a share of the RURR in the year 2015.
    """
    return _ext_constant_share_rurr_unconv_oil_to_leave_underground()


_ext_constant_share_rurr_unconv_oil_to_leave_underground = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C125",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_share_rurr_unconv_oil_to_leave_underground",
)

_ext_constant_share_rurr_unconv_oil_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN1", "C125", {"scenarios": ["SCEN1"]}
)

_ext_constant_share_rurr_unconv_oil_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN2", "C125", {"scenarios": ["SCEN2"]}
)

_ext_constant_share_rurr_unconv_oil_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN3", "C125", {"scenarios": ["SCEN3"]}
)

_ext_constant_share_rurr_unconv_oil_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN4", "C125", {"scenarios": ["SCEN4"]}
)

_ext_constant_share_rurr_unconv_oil_to_leave_underground.add(
    "inputs_EU.xlsx", "User defined", "C125", {"scenarios": ["User defined"]}
)


@component.add(
    name="extraction unconv gas EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rurr_unconv_gas": 1,
        "historic_unconv_gas": 1,
        "time": 1,
        "separate_conv_and_unconv_gas": 1,
        "max_extraction_unconv_gas": 1,
        "max_unconv_gas_growth_extraction_ej": 1,
    },
)
def extraction_unconv_gas_ej():
    """
    Annual extraction of unconventional gas. IF THEN ELSE("separate conv and unconv gas?"[scenarios]=1, IF THEN ELSE(Time<2011, Historic unconv gas[scenarios](Time), MIN(max extraction unconv gas[scenarios],max unconv gas growth extraction EJ [scenarios])), 0)
    """
    return if_then_else(
        rurr_unconv_gas() < 0,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            time() < 2013,
            lambda: xr.DataArray(
                historic_unconv_gas(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                separate_conv_and_unconv_gas() == 1,
                lambda: np.minimum(
                    max_extraction_unconv_gas(), max_unconv_gas_growth_extraction_ej()
                ),
                lambda: xr.DataArray(
                    0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
                ),
            ),
        ),
    )


@component.add(
    name="Tot RURR coal",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rurr_coal": 1, "total_coal_left_in_ground": 1},
)
def tot_rurr_coal():
    """
    Total RURR of coal considering the available RURR and the eventual amount of RURR left in the ground as a policy.
    """
    return rurr_coal() + total_coal_left_in_ground()


@component.add(
    name="Tot RURR conv gas",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rurr_conv_gas": 1, "total_conv_gas_left_in_ground": 1},
)
def tot_rurr_conv_gas():
    """
    Total RURR of conventional natural gas considering the available RURR and the eventual amount of RURR left in the ground as a policy.
    """
    return rurr_conv_gas() + total_conv_gas_left_in_ground()


@component.add(
    name="Tot RURR conv oil",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rurr_conv_oil": 1, "total_conv_oil_left_in_ground": 1},
)
def tot_rurr_conv_oil():
    """
    Total RURR of conventional oil considering the available RURR and the eventual amount of RURR left in the ground as a policy.
    """
    return rurr_conv_oil() + total_conv_oil_left_in_ground()


@component.add(
    name="share RURR conv oil to leave underground",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_share_rurr_conv_oil_to_leave_underground"
    },
)
def share_rurr_conv_oil_to_leave_underground():
    """
    RURR's conventional oil to be left in the ground as a share of the RURR in the year 2015.
    """
    return _ext_constant_share_rurr_conv_oil_to_leave_underground()


_ext_constant_share_rurr_conv_oil_to_leave_underground = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C123",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_share_rurr_conv_oil_to_leave_underground",
)

_ext_constant_share_rurr_conv_oil_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN1", "C123", {"scenarios": ["SCEN1"]}
)

_ext_constant_share_rurr_conv_oil_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN2", "C123", {"scenarios": ["SCEN2"]}
)

_ext_constant_share_rurr_conv_oil_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN3", "C123", {"scenarios": ["SCEN3"]}
)

_ext_constant_share_rurr_conv_oil_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN4", "C123", {"scenarios": ["SCEN4"]}
)

_ext_constant_share_rurr_conv_oil_to_leave_underground.add(
    "inputs_EU.xlsx", "User defined", "C123", {"scenarios": ["User defined"]}
)


@component.add(
    name="Tot RURR unconv oil",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rurr_unconv_oil_ej": 1, "total_unconv_oil_left_in_ground": 1},
)
def tot_rurr_unconv_oil():
    """
    Total RURR of unconventional oil considering the available RURR and the eventual amount of RURR left in the ground as a policy.
    """
    return rurr_unconv_oil_ej() + total_unconv_oil_left_in_ground()


@component.add(
    name="Total unconv oil left in ground",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_unconv_oil_left_in_ground": 1},
    other_deps={
        "_integ_total_unconv_oil_left_in_ground": {
            "initial": {},
            "step": {"flow_unconv_oil_left_in_ground": 1},
        }
    },
)
def total_unconv_oil_left_in_ground():
    """
    Total amount of unconventional oil left in the ground due to policies.
    """
    return _integ_total_unconv_oil_left_in_ground()


_integ_total_unconv_oil_left_in_ground = Integ(
    lambda: flow_unconv_oil_left_in_ground(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    "_integ_total_unconv_oil_left_in_ground",
)


@component.add(
    name="Total coal left in ground",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_coal_left_in_ground": 1},
    other_deps={
        "_integ_total_coal_left_in_ground": {
            "initial": {},
            "step": {"flow_coal_left_in_ground": 1},
        }
    },
)
def total_coal_left_in_ground():
    return _integ_total_coal_left_in_ground()


_integ_total_coal_left_in_ground = Integ(
    lambda: flow_coal_left_in_ground(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    "_integ_total_coal_left_in_ground",
)


@component.add(
    name="Total conv gas left in ground",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_conv_gas_left_in_ground": 1},
    other_deps={
        "_integ_total_conv_gas_left_in_ground": {
            "initial": {},
            "step": {"flow_conv_gas_left_in_ground": 1},
        }
    },
)
def total_conv_gas_left_in_ground():
    """
    Total amount of conventional natural gas left in the ground due to policies.
    """
    return _integ_total_conv_gas_left_in_ground()


_integ_total_conv_gas_left_in_ground = Integ(
    lambda: flow_conv_gas_left_in_ground(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    "_integ_total_conv_gas_left_in_ground",
)


@component.add(
    name="Total conv oil left in ground",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_conv_oil_left_in_ground": 1},
    other_deps={
        "_integ_total_conv_oil_left_in_ground": {
            "initial": {},
            "step": {"flow_conv_oil_left_in_ground": 1},
        }
    },
)
def total_conv_oil_left_in_ground():
    """
    Total amount of conventional oil left in the ground due to policies.
    """
    return _integ_total_conv_oil_left_in_ground()


_integ_total_conv_oil_left_in_ground = Integ(
    lambda: flow_conv_oil_left_in_ground(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    "_integ_total_conv_oil_left_in_ground",
)


@component.add(
    name="RURR coal",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_rurr_coal": 1},
    other_deps={
        "_integ_rurr_coal": {
            "initial": {"urr_coal": 1, "cumulated_coal_extraction_to_1995": 1},
            "step": {"extraction_coal_ej_eu": 1, "flow_coal_left_in_ground": 1},
        }
    },
)
def rurr_coal():
    """
    RURR coal. 4400 EJ extracted before 1990.
    """
    return _integ_rurr_coal()


_integ_rurr_coal = Integ(
    lambda: -extraction_coal_ej_eu() - flow_coal_left_in_ground(),
    lambda: urr_coal() - cumulated_coal_extraction_to_1995(),
    "_integ_rurr_coal",
)


@component.add(
    name="max extraction conv oil EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "separate_conv_and_unconv_oil": 1,
        "table_max_extraction_mohr15_high_conv_oil_ej": 1,
        "tot_rurr_conv_oil": 4,
        "table_max_extraction_mohr15_bg_conv_oil_ej": 1,
        "table_max_extraction_mohr15_low_conv_oil_ej": 1,
        "choose_extraction_curve_conv_oil": 3,
        "table_max_conv_oil_extraction_user_defined": 1,
    },
)
def max_extraction_conv_oil_ej():
    """
    Maximum extraction curve selected for the simulations.
    """
    return if_then_else(
        separate_conv_and_unconv_oil() == 1,
        lambda: if_then_else(
            choose_extraction_curve_conv_oil() == 1,
            lambda: table_max_extraction_mohr15_low_conv_oil_ej(
                tot_rurr_conv_oil(),
                {
                    "scenarios": [
                        "SCEN1",
                        "SCEN2",
                        "SCEN3",
                        "SCEN4",
                        "BAU",
                        "User defined",
                    ]
                },
            ),
            lambda: if_then_else(
                choose_extraction_curve_conv_oil() == 2,
                lambda: table_max_extraction_mohr15_bg_conv_oil_ej(
                    tot_rurr_conv_oil(),
                    {
                        "scenarios": [
                            "SCEN1",
                            "SCEN2",
                            "SCEN3",
                            "SCEN4",
                            "BAU",
                            "User defined",
                        ]
                    },
                ),
                lambda: if_then_else(
                    choose_extraction_curve_conv_oil() == 3,
                    lambda: table_max_extraction_mohr15_high_conv_oil_ej(
                        tot_rurr_conv_oil(),
                        {
                            "scenarios": [
                                "SCEN1",
                                "SCEN2",
                                "SCEN3",
                                "SCEN4",
                                "BAU",
                                "User defined",
                            ]
                        },
                    ),
                    lambda: table_max_conv_oil_extraction_user_defined(
                        tot_rurr_conv_oil(),
                        {
                            "scenarios": [
                                "SCEN1",
                                "SCEN2",
                                "SCEN3",
                                "SCEN4",
                                "BAU",
                                "User defined",
                            ]
                        },
                    ),
                ),
            ),
        ),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="Start policy leave in ground unconv gas",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_start_policy_leave_in_ground_unconv_gas"
    },
)
def start_policy_leave_in_ground_unconv_gas():
    """
    Year when the policy to leave in the ground an amount of unconventional gas RURR enters into force.
    """
    return _ext_constant_start_policy_leave_in_ground_unconv_gas()


_ext_constant_start_policy_leave_in_ground_unconv_gas = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C128",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_policy_leave_in_ground_unconv_gas",
)

_ext_constant_start_policy_leave_in_ground_unconv_gas.add(
    "inputs_EU.xlsx", "SCEN1", "C128", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_policy_leave_in_ground_unconv_gas.add(
    "inputs_EU.xlsx", "SCEN2", "C128", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_policy_leave_in_ground_unconv_gas.add(
    "inputs_EU.xlsx", "SCEN3", "C128", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_policy_leave_in_ground_unconv_gas.add(
    "inputs_EU.xlsx", "SCEN4", "C128", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_policy_leave_in_ground_unconv_gas.add(
    "inputs_EU.xlsx", "User defined", "C128", {"scenarios": ["User defined"]}
)


@component.add(
    name="Flow unconv gas left in ground",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 2,
        "start_policy_leave_in_ground_unconv_gas": 2,
        "unconv_gas_to_leave_underground": 1,
    },
)
def flow_unconv_gas_left_in_ground():
    """
    Flow of unconventional natural gas left in the ground. We assume that this amount is removed from the stock of unconventional natural gas available in 1 year.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_unconv_gas(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            time() >= start_policy_leave_in_ground_unconv_gas() + 1,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: unconv_gas_to_leave_underground(),
        ),
    )


@component.add(
    name="Start policy leave in ground unconv oil",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_start_policy_leave_in_ground_unconv_oil"
    },
)
def start_policy_leave_in_ground_unconv_oil():
    """
    Year when the policy to leave in the ground an amount of unconventional oil RURR enters into force.
    """
    return _ext_constant_start_policy_leave_in_ground_unconv_oil()


_ext_constant_start_policy_leave_in_ground_unconv_oil = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C124",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_policy_leave_in_ground_unconv_oil",
)

_ext_constant_start_policy_leave_in_ground_unconv_oil.add(
    "inputs_EU.xlsx", "SCEN1", "C124", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_policy_leave_in_ground_unconv_oil.add(
    "inputs_EU.xlsx", "SCEN2", "C124", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_policy_leave_in_ground_unconv_oil.add(
    "inputs_EU.xlsx", "SCEN3", "C124", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_policy_leave_in_ground_unconv_oil.add(
    "inputs_EU.xlsx", "SCEN4", "C124", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_policy_leave_in_ground_unconv_oil.add(
    "inputs_EU.xlsx", "User defined", "C124", {"scenarios": ["User defined"]}
)


@component.add(
    name="Start policy leave in ground conv oil",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_start_policy_leave_in_ground_conv_oil"},
)
def start_policy_leave_in_ground_conv_oil():
    """
    Year when the policy to leave in the ground an amount of conventional oil RURR enters into force.
    """
    return _ext_constant_start_policy_leave_in_ground_conv_oil()


_ext_constant_start_policy_leave_in_ground_conv_oil = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C122",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_policy_leave_in_ground_conv_oil",
)

_ext_constant_start_policy_leave_in_ground_conv_oil.add(
    "inputs_EU.xlsx", "SCEN1", "C122", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_policy_leave_in_ground_conv_oil.add(
    "inputs_EU.xlsx", "SCEN2", "C122", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_policy_leave_in_ground_conv_oil.add(
    "inputs_EU.xlsx", "SCEN3", "C122", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_policy_leave_in_ground_conv_oil.add(
    "inputs_EU.xlsx", "SCEN4", "C122", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_policy_leave_in_ground_conv_oil.add(
    "inputs_EU.xlsx", "User defined", "C122", {"scenarios": ["User defined"]}
)


@component.add(
    name="share RURR coal to leave underground",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_rurr_coal_to_leave_underground"},
)
def share_rurr_coal_to_leave_underground():
    """
    RURR's coal to be left in the ground as a share of the RURR in the year 2015.
    """
    return _ext_constant_share_rurr_coal_to_leave_underground()


_ext_constant_share_rurr_coal_to_leave_underground = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C131",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_share_rurr_coal_to_leave_underground",
)

_ext_constant_share_rurr_coal_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN1", "C131", {"scenarios": ["SCEN1"]}
)

_ext_constant_share_rurr_coal_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN2", "C131", {"scenarios": ["SCEN2"]}
)

_ext_constant_share_rurr_coal_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN3", "C131", {"scenarios": ["SCEN3"]}
)

_ext_constant_share_rurr_coal_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN4", "C131", {"scenarios": ["SCEN4"]}
)

_ext_constant_share_rurr_coal_to_leave_underground.add(
    "inputs_EU.xlsx", "User defined", "C131", {"scenarios": ["User defined"]}
)


@component.add(
    name='"PES oil Mb/d"',
    units="Mb/d",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_total_oil_ej_eu": 1, "mbd_per_ejyear": 1},
)
def pes_oil_mbd():
    """
    Total oil (conventional + unconventional) extraction.
    """
    return pes_total_oil_ej_eu() * mbd_per_ejyear()


@component.add(
    name="Losses in charcoal plants EJ",
    units="EJ",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_losses_in_charcoal_plants_ej",
        "__data__": "_ext_data_losses_in_charcoal_plants_ej",
        "time": 1,
    },
)
def losses_in_charcoal_plants_ej():
    """
    Losses of energy (EJ) produced in charcoal plants.
    """
    return _ext_data_losses_in_charcoal_plants_ej(time())


_ext_data_losses_in_charcoal_plants_ej = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "216",
    "B229",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_losses_in_charcoal_plants_ej",
)


@component.add(
    name="share RURR conv gas to leave underground",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_share_rurr_conv_gas_to_leave_underground"
    },
)
def share_rurr_conv_gas_to_leave_underground():
    """
    RURR's conventional gas to be left in the ground as a share of the RURR in the year 2015.
    """
    return _ext_constant_share_rurr_conv_gas_to_leave_underground()


_ext_constant_share_rurr_conv_gas_to_leave_underground = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C127",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_share_rurr_conv_gas_to_leave_underground",
)

_ext_constant_share_rurr_conv_gas_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN1", "C127", {"scenarios": ["SCEN1"]}
)

_ext_constant_share_rurr_conv_gas_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN2", "C127", {"scenarios": ["SCEN2"]}
)

_ext_constant_share_rurr_conv_gas_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN3", "C127", {"scenarios": ["SCEN3"]}
)

_ext_constant_share_rurr_conv_gas_to_leave_underground.add(
    "inputs_EU.xlsx", "SCEN4", "C127", {"scenarios": ["SCEN4"]}
)

_ext_constant_share_rurr_conv_gas_to_leave_underground.add(
    "inputs_EU.xlsx", "User defined", "C127", {"scenarios": ["User defined"]}
)


@component.add(
    name="Start policy leave in ground conv gas",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_start_policy_leave_in_ground_conv_gas"},
)
def start_policy_leave_in_ground_conv_gas():
    """
    Year when the policy to leave in the ground an amount of conventional gas RURR enters into force.
    """
    return _ext_constant_start_policy_leave_in_ground_conv_gas()


_ext_constant_start_policy_leave_in_ground_conv_gas = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C126",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_policy_leave_in_ground_conv_gas",
)

_ext_constant_start_policy_leave_in_ground_conv_gas.add(
    "inputs_EU.xlsx", "SCEN1", "C126", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_policy_leave_in_ground_conv_gas.add(
    "inputs_EU.xlsx", "SCEN2", "C126", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_policy_leave_in_ground_conv_gas.add(
    "inputs_EU.xlsx", "SCEN3", "C126", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_policy_leave_in_ground_conv_gas.add(
    "inputs_EU.xlsx", "SCEN4", "C126", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_policy_leave_in_ground_conv_gas.add(
    "inputs_EU.xlsx", "User defined", "C126", {"scenarios": ["User defined"]}
)


@component.add(
    name="Demand conv gas",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_nat_gas_ej": 1, "extraction_unconv_gas_ej": 1},
)
def demand_conv_gas():
    """
    Demand of conventional gas. It is assumed that conventional gas covers the rest of the liquids demand after accounting for the contributions from unconventional gas.
    """
    return np.maximum(ped_nat_gas_ej() - extraction_unconv_gas_ej(), 0)


@component.add(
    name='"PED nat. gas without GTL"',
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_nat_gas_ej": 1, "ped_nat_gas_for_gtl_ej": 1},
)
def ped_nat_gas_without_gtl():
    """
    Total demand of natural gas without GTL.
    """
    return np.maximum(0, ped_nat_gas_ej() - ped_nat_gas_for_gtl_ej())


@component.add(
    name="abundance solids",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pes_solids": 2, "ped_solids": 3},
)
def abundance_solids():
    """
    The parameter abundance varies between (1;0). Abundance=1 while the supply covers the demand; the closest to 0 indicates a higher divergence between supply and demand.
    """
    return if_then_else(
        pes_solids() > ped_solids(),
        lambda: xr.DataArray(
            1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: 1 - zidz(ped_solids() - pes_solids(), ped_solids()),
    )


@component.add(
    name="FE demand coal Elec plants TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_coal_for_elec": 1, "demand_elec_gas_and_coal_twh": 1},
)
def fe_demand_coal_elec_plants_twh():
    """
    Final energy demand of coal for electricity consumption (TWh).
    """
    return share_coal_for_elec() * demand_elec_gas_and_coal_twh()


@component.add(
    name="FE demand gas Elec plants TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_gascoal_gas_for_elec": 1, "demand_elec_gas_and_coal_twh": 1},
)
def fe_demand_gas_elec_plants_twh():
    """
    Final energy demand of natural gas for electricity consumption (TWh).
    """
    return share_gascoal_gas_for_elec() * demand_elec_gas_and_coal_twh()


@component.add(
    name="share coal for Elec",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_gascoal_gas_for_elec": 1},
)
def share_coal_for_elec():
    """
    Coal is assumed to cover the rest of the electricity demand after RES, nuclear, oil and gas.
    """
    return 1 - share_gascoal_gas_for_elec()


@component.add(
    name="share CHP plants oil",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 2, "historic_share_chp_plants_oil": 1},
)
def share_chp_plants_oil():
    """
    Oil share of heat demand. Since this share has been falling globally since the first oil shock, and given the difficulties to substitute oil in other sectors (e.g. Transportation) and that there are many more resources that can supply heat, we assume an exogenous linear decreasing trend for the oil share of heat demand to reach 0% around 2025.
    """
    return np.maximum(
        if_then_else(
            time() > 2014,
            lambda: -0.002985 * time() + 6.04554,
            lambda: historic_share_chp_plants_oil(),
        ),
        0,
    )


@component.add(
    name="historic share CHP plants gas",
    units="Dmnl",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_historic_share_chp_plants_gas",
        "__data__": "_ext_data_historic_share_chp_plants_gas",
        "time": 1,
    },
)
def historic_share_chp_plants_gas():
    """
    Historic share of natural gas for electricity in relation to the total fossil fuels for CHP plants
    """
    return _ext_data_historic_share_chp_plants_gas(time())


_ext_data_historic_share_chp_plants_gas = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "25",
    "H30",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_historic_share_chp_plants_gas",
)


@component.add(
    name="share CHP plants coal",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"historic_share_chp_plants_gas": 1, "share_chp_plants_oil": 1},
)
def share_chp_plants_coal():
    """
    Coal is assumed to cover the rest of the CHP plants demand after RES, nuclear, oil and gas.
    """
    return 1 - historic_share_chp_plants_gas() - share_chp_plants_oil()


@component.add(
    name="Historic share liquids for heat plants",
    units="Dmnl",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_historic_share_liquids_for_heat_plants",
        "__data__": "_ext_data_historic_share_liquids_for_heat_plants",
        "time": 1,
    },
)
def historic_share_liquids_for_heat_plants():
    """
    Historic share liquids for heat plants vs heat production from fossil fuels.
    """
    return _ext_data_historic_share_liquids_for_heat_plants(time())


_ext_data_historic_share_liquids_for_heat_plants = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "25",
    "H75",
    None,
    {},
    _root,
    {},
    "_ext_data_historic_share_liquids_for_heat_plants",
)


@component.add(
    name='"share coal(coal+gas) for heat plants"',
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_gascoalgas_for_heat_plants": 1},
)
def share_coalcoalgas_for_heat_plants():
    """
    Coal is assumed to cover the rest of the heat demand after RES, nuclear, oil and gas.
    """
    return 1 - share_gascoalgas_for_heat_plants()


@component.add(
    name="historic share CHP plants oil",
    units="Dmnl",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_historic_share_chp_plants_oil",
        "__data__": "_ext_data_historic_share_chp_plants_oil",
        "time": 1,
    },
)
def historic_share_chp_plants_oil():
    """
    historic share CHP plants oil
    """
    return _ext_data_historic_share_chp_plants_oil(time())


_ext_data_historic_share_chp_plants_oil = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "25",
    "H32",
    None,
    {},
    _root,
    {},
    "_ext_data_historic_share_chp_plants_oil",
)


@component.add(
    name="output elec over lifetime RES elec for allocation2",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "static_eroigrid_res_elec": 1,
        "fei_over_lifetime_res_elec_for_allocation": 1,
        "gquality_of_electricity": 1,
    },
)
def output_elec_over_lifetime_res_elec_for_allocation2():
    return (
        static_eroigrid_res_elec()
        * fei_over_lifetime_res_elec_for_allocation()
        * gquality_of_electricity()
    )


@component.add(
    name="demand storage capacity",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "share_capacity_storageres_elec_var": 1,
        "total_installed_capacity_res_elec_var": 1,
    },
)
def demand_storage_capacity():
    """
    Required storage capacity to install to deal with the variability of RES for electricity.
    """
    return (
        share_capacity_storageres_elec_var() * total_installed_capacity_res_elec_var()
    )


@component.add(
    name='"share capacity storage/RES elec var"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_elec_demand_covered_by_res": 1},
)
def share_capacity_storageres_elec_var():
    """
    Share installed capacity of storage vs installed capacity of variable RES for electricity. Estimation from NREL (2012).
    """
    return 0.099 + 0.1132 * share_elec_demand_covered_by_res()


@component.add(
    name='"static/dynamic quality of electricity?"',
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def staticdynamic_quality_of_electricity():
    """
    This variable controls the method of calculation of the parameter "quality of electricity" from static (2015 value) or dynamic (MEDEAS endogenous calculation: 1. Static EROI calculation (2015 value) 0. Dynamic EROI calculation (endogenous MEDEAS)
    """
    return 0


@component.add(
    name="\"'static' EROIgrid tot-effective for allocation RES elec\"",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "output_elec_over_lifetime_res_elec_for_allocation2": 1,
        "fei_over_lifetime_res_elec_for_allocation": 1,
    },
)
def static_eroigrid_toteffective_for_allocation_res_elec():
    """
    EROI of the aggregated outputs and inputs of RES for generating electricity.
    """
    return zidz(
        sum(
            output_elec_over_lifetime_res_elec_for_allocation2().rename(
                {"RES elec": "RES elec!"}
            ),
            dim=["RES elec!"],
        ),
        sum(
            fei_over_lifetime_res_elec_for_allocation().rename(
                {"RES elec": "RES elec!"}
            ),
            dim=["RES elec!"],
        ),
    )


@component.add(
    name='"ratio EROIgrid vs EROI (static)"',
    units="Dmnl",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"static_eroi_res_elec": 2, "static_eroigrid_res_elec": 1},
)
def ratio_eroigrid_vs_eroi_static():
    return if_then_else(
        static_eroi_res_elec() <= 0,
        lambda: xr.DataArray(
            0,
            {
                "RES elec": _subscript_dict["RES elec"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["RES elec", "scenarios"],
        ),
        lambda: static_eroigrid_res_elec() / static_eroi_res_elec(),
    )


@component.add(
    name='"ratio EROI per techn vs EROItot (static)"',
    units="Dmnl",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "static_eroigrid_res_elec": 1,
        "static_eroigrid_toteffective_for_allocation_res_elec": 1,
    },
)
def ratio_eroi_per_techn_vs_eroitot_static():
    return xidz(
        static_eroigrid_res_elec(),
        static_eroigrid_toteffective_for_allocation_res_elec().expand_dims(
            {"RES elec": _subscript_dict["RES elec"]}, 0
        ),
        0,
    )


@component.add(
    name="Total installed capacity RES elec var",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"installed_capacity_res_elec_tw": 4},
)
def total_installed_capacity_res_elec_var():
    """
    Total installed capacity of RES variables for electricity generation.
    """
    return (
        installed_capacity_res_elec_tw().loc["wind onshore", :].reset_coords(drop=True)
        + installed_capacity_res_elec_tw()
        .loc["wind offshore", :]
        .reset_coords(drop=True)
        + installed_capacity_res_elec_tw().loc["solar PV", :].reset_coords(drop=True)
        + installed_capacity_res_elec_tw().loc["CSP", :].reset_coords(drop=True)
    )


@component.add(
    name='"share RES elec generation curtailed&stored"',
    units="Dmnl",
    subscripts=["RES elec", "scenarios"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def share_res_elec_generation_curtailedstored():
    """
    Share of the generation of electricity from RES technologies curtailed or stored.
    """
    value = xr.DataArray(
        np.nan,
        {
            "RES elec": _subscript_dict["RES elec"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES elec", "scenarios"],
    )
    value.loc[["hydro"], :] = 0
    value.loc[['"geot-elec"'], :] = 0
    value.loc[['"solid bioE-elec"'], :] = 0
    value.loc[["oceanic"], :] = 0
    value.loc[["wind onshore"], :] = 0.2
    value.loc[["wind offshore"], :] = 0.2
    value.loc[["solar PV"], :] = 0.2
    value.loc[["CSP"], :] = 0.2
    return value


@component.add(
    name="rt storage efficiency PHS",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_rt_storage_efficiency_phs"},
)
def rt_storage_efficiency_phs():
    """
    Round-trip storage efficiency.
    """
    return _ext_constant_rt_storage_efficiency_phs()


_ext_constant_rt_storage_efficiency_phs = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G51",
    {},
    _root,
    {},
    "_ext_constant_rt_storage_efficiency_phs",
)


@component.add(
    name="Cp baseload reduction",
    units="Dmnl",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"cp_res_elec": 1, "cpini_res_elec": 1},
)
def cp_baseload_reduction():
    return cp_res_elec() / cpini_res_elec()


@component.add(
    name='"ratio = 1"', units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def ratio_1():
    return 1


@component.add(
    name="FEI over lifetime RES elec",
    units="EJ",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fei_over_lifetime_res_elec_dispatch": 4,
        "fei_over_lifetime_res_elec_var": 4,
    },
)
def fei_over_lifetime_res_elec():
    """
    Final energy investments over lifetime for RES elec technologies.
    """
    value = xr.DataArray(
        np.nan,
        {
            "RES elec": _subscript_dict["RES elec"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES elec", "scenarios"],
    )
    value.loc[["hydro"], :] = (
        fei_over_lifetime_res_elec_dispatch()
        .loc["hydro", :]
        .reset_coords(drop=True)
        .expand_dims({"RES elec": ["hydro"]}, 0)
        .values
    )
    value.loc[['"geot-elec"'], :] = (
        fei_over_lifetime_res_elec_dispatch()
        .loc['"geot-elec"', :]
        .reset_coords(drop=True)
        .expand_dims({"RES elec": ['"geot-elec"']}, 0)
        .values
    )
    value.loc[['"solid bioE-elec"'], :] = (
        fei_over_lifetime_res_elec_dispatch()
        .loc['"solid bioE-elec"', :]
        .reset_coords(drop=True)
        .expand_dims({"RES elec": ['"solid bioE-elec"']}, 0)
        .values
    )
    value.loc[["oceanic"], :] = (
        fei_over_lifetime_res_elec_dispatch()
        .loc["oceanic", :]
        .reset_coords(drop=True)
        .expand_dims({"RES elec": ["oceanic"]}, 0)
        .values
    )
    value.loc[["wind onshore"], :] = (
        fei_over_lifetime_res_elec_var()
        .loc["wind onshore", :]
        .reset_coords(drop=True)
        .expand_dims({"RES elec": ["wind onshore"]}, 0)
        .values
    )
    value.loc[["wind offshore"], :] = (
        fei_over_lifetime_res_elec_var()
        .loc["wind offshore", :]
        .reset_coords(drop=True)
        .expand_dims({"RES elec": ["wind offshore"]}, 0)
        .values
    )
    value.loc[["solar PV"], :] = (
        fei_over_lifetime_res_elec_var()
        .loc["solar PV", :]
        .reset_coords(drop=True)
        .expand_dims({"RES elec": ["solar PV"]}, 0)
        .values
    )
    value.loc[["CSP"], :] = (
        fei_over_lifetime_res_elec_var()
        .loc["CSP", :]
        .reset_coords(drop=True)
        .expand_dims({"RES elec": ["CSP"]}, 0)
        .values
    )
    return value


@component.add(
    name="real Cp RES elec",
    units="Dmnl",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "cp_res_elec": 1,
        "installed_capacity_res_elec_tw": 2,
        "real_generation_res_elec_twh": 1,
        "twe_per_twh": 1,
    },
)
def real_cp_res_elec():
    return if_then_else(
        time() < 2015,
        lambda: cp_res_elec(),
        lambda: if_then_else(
            installed_capacity_res_elec_tw() == 0,
            lambda: xr.DataArray(
                0,
                {
                    "RES elec": _subscript_dict["RES elec"],
                    "scenarios": _subscript_dict["scenarios"],
                },
                ["RES elec", "scenarios"],
            ),
            lambda: real_generation_res_elec_twh()
            * twe_per_twh()
            / installed_capacity_res_elec_tw(),
        ),
    )


@component.add(
    name="FEI over lifetime RES elec for allocation",
    units="EJ",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fei_over_lifetime_res_elec": 1,
        "remaining_potential_res_elec_switch": 1,
    },
)
def fei_over_lifetime_res_elec_for_allocation():
    """
    Final energy investments over lifetime for RES elec technologies. Adapted for allocating technologies.
    """
    return fei_over_lifetime_res_elec() * remaining_potential_res_elec_switch()


@component.add(
    name="remaining potential RES elec after intermitt",
    units="Dmnl",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_res_elec_after_intermitt_twh": 3,
        "potential_generation_res_elec_twh": 2,
    },
)
def remaining_potential_res_elec_after_intermitt():
    return if_then_else(
        potential_res_elec_after_intermitt_twh() > potential_generation_res_elec_twh(),
        lambda: zidz(
            potential_res_elec_after_intermitt_twh()
            - potential_generation_res_elec_twh(),
            potential_res_elec_after_intermitt_twh(),
        ),
        lambda: xr.DataArray(
            0,
            {
                "RES elec": _subscript_dict["RES elec"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["RES elec", "scenarios"],
        ),
    )


@component.add(
    name="remaining potential RES elec switch",
    units="Dmnl",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"remaining_potential_res_elec_after_intermitt": 1},
)
def remaining_potential_res_elec_switch():
    """
    This variable detects when a RES elec technology has (almost, 97.5%) reached its full potential so this technology is not taken into account in the estimation of the total EROI aggregated for the calculation of the mix allocation.
    """
    return if_then_else(
        remaining_potential_res_elec_after_intermitt() < 0.025,
        lambda: xr.DataArray(
            0,
            {
                "RES elec": _subscript_dict["RES elec"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["RES elec", "scenarios"],
        ),
        lambda: xr.DataArray(
            1,
            {
                "RES elec": _subscript_dict["RES elec"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["RES elec", "scenarios"],
        ),
    )


@component.add(
    name="output elec over lifetime RES elec for allocation",
    units="EJ",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "output_elec_over_lifetime_res_elec": 1,
        "remaining_potential_res_elec_switch": 1,
    },
)
def output_elec_over_lifetime_res_elec_for_allocation():
    return output_elec_over_lifetime_res_elec() * remaining_potential_res_elec_switch()


@component.add(
    name="potential RES elec after intermitt TWh",
    units="TWh",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_res_elec_twe": 1, "cp_baseload_reduction": 1, "twe_per_twh": 1},
)
def potential_res_elec_after_intermitt_twh():
    """
    Potential of RES for electricity per technology after accounting for the reduction of the maximal potential given the reduction of the Cp.
    """
    return max_res_elec_twe() * cp_baseload_reduction() / twe_per_twh()


@component.add(
    name="replacement rate RES elec",
    units="Dmnl",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_generation_res_elec_twh": 1,
        "potential_res_elec_after_intermitt_twh": 1,
    },
)
def replacement_rate_res_elec():
    """
    Replacement rate of RES for electricity: by default all decommissioned capacity is replaced (=1). In the case of overcapacity in relation to the potential after accounting for intermittency, we reduce the annual replacement rate to 0.9.
    """
    return if_then_else(
        potential_generation_res_elec_twh() < potential_res_elec_after_intermitt_twh(),
        lambda: xr.DataArray(
            1,
            {
                "RES elec": _subscript_dict["RES elec"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["RES elec", "scenarios"],
        ),
        lambda: xr.DataArray(
            0.9,
            {
                "RES elec": _subscript_dict["RES elec"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["RES elec", "scenarios"],
        ),
    )


@component.add(
    name="\"'static' EROItot RES elec\"",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fei_over_lifetime_res_elec": 2,
        "output_elec_over_lifetime_res_elec": 1,
    },
)
def static_eroitot_res_elec():
    """
    EROI over the lifetime of the aggregated outputs and inputs of RES for generating electricity.
    """
    return if_then_else(
        sum(
            fei_over_lifetime_res_elec().rename({"RES elec": "RES elec!"}),
            dim=["RES elec!"],
        )
        < 0,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: sum(
            output_elec_over_lifetime_res_elec().rename({"RES elec": "RES elec!"}),
            dim=["RES elec!"],
        )
        / sum(
            fei_over_lifetime_res_elec().rename({"RES elec": "RES elec!"}),
            dim=["RES elec!"],
        ),
    )


@component.add(
    name="\"'static' EROItot-effective for allocation RES elec\"",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "output_elec_over_lifetime_res_elec_for_allocation": 1,
        "fei_over_lifetime_res_elec_for_allocation": 1,
    },
)
def static_eroitoteffective_for_allocation_res_elec():
    """
    EROI of the aggregated outputs and inputs of RES for generating electricity.
    """
    return zidz(
        sum(
            output_elec_over_lifetime_res_elec_for_allocation().rename(
                {"RES elec": "RES elec!"}
            ),
            dim=["RES elec!"],
        ),
        sum(
            fei_over_lifetime_res_elec_for_allocation().rename(
                {"RES elec": "RES elec!"}
            ),
            dim=["RES elec!"],
        ),
    )


@component.add(
    name="new capacity installed onshore wind TW",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"new_res_elec_capacity_under_planning": 1},
)
def new_capacity_installed_onshore_wind_tw():
    return (
        new_res_elec_capacity_under_planning()
        .loc["wind onshore", :]
        .reset_coords(drop=True)
    )


@component.add(
    name='"CED O&M over lifetime per water RES elec var"',
    units="EJ",
    subscripts=["RES elec", "water0", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "res_elec_capacity_under_construction_tw": 1,
        "water_for_om_res_elec": 1,
        "energy_requirements_per_unit_of_water_consumption": 1,
        "lifetime_res_elec": 1,
        "kg_per_mt": 2,
        "m_per_t": 1,
        "mj_per_ej": 1,
    },
)
def ced_om_over_lifetime_per_water_res_elec_var():
    """
    Cumulative energy demand per water type for O&M of RES variables per technology over all the lifetime of the infrastructure.
    """
    return (
        res_elec_capacity_under_construction_tw()
        * water_for_om_res_elec()
        * energy_requirements_per_unit_of_water_consumption()
        * lifetime_res_elec()
        * (m_per_t() / kg_per_mt())
        * (kg_per_mt() / mj_per_ej())
    ).transpose("RES elec", "water0", "scenarios")


@component.add(
    name='"self-electricity consumption RES elec"',
    units="Dmnl",
    subscripts=["RES elec"],
    comp_type="Constant",
    comp_subtype="Normal, External",
    depends_on={"__external__": "_ext_constant_selfelectricity_consumption_res_elec"},
)
def selfelectricity_consumption_res_elec():
    value = xr.DataArray(
        np.nan, {"RES elec": _subscript_dict["RES elec"]}, ["RES elec"]
    )
    value.loc[["hydro"]] = 0
    value.loc[['"geot-elec"']] = 0
    value.loc[['"solid bioE-elec"']] = 0
    value.loc[["oceanic"]] = 0
    def_subs = xr.zeros_like(value, dtype=bool)
    def_subs.loc[["wind onshore"]] = True
    def_subs.loc[["wind offshore"]] = True
    def_subs.loc[["solar PV"]] = True
    value.values[
        def_subs.values
    ] = _ext_constant_selfelectricity_consumption_res_elec().values[def_subs.values]
    value.loc[["CSP"]] = 0
    return value


_ext_constant_selfelectricity_consumption_res_elec = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "D120",
    {"RES elec": ["wind onshore"]},
    _root,
    {"RES elec": _subscript_dict["RES elec"]},
    "_ext_constant_selfelectricity_consumption_res_elec",
)

_ext_constant_selfelectricity_consumption_res_elec.add(
    "inputs_EU.xlsx", "Materials", "E120", {"RES elec": ["wind offshore"]}
)

_ext_constant_selfelectricity_consumption_res_elec.add(
    "inputs_EU.xlsx", "Materials", "C120", {"RES elec": ["solar PV"]}
)


@component.add(
    name="share energy requirements for decom RES elec",
    units="Dmnl",
    subscripts=["RES elec"],
    comp_type="Constant",
    comp_subtype="Normal, External",
    depends_on={
        "__external__": "_ext_constant_share_energy_requirements_for_decom_res_elec"
    },
)
def share_energy_requirements_for_decom_res_elec():
    """
    Share energy requirements for decomissioning power RES plants as a share of the energy requirements for the construction of new capacity.
    """
    value = xr.DataArray(
        np.nan, {"RES elec": _subscript_dict["RES elec"]}, ["RES elec"]
    )
    value.loc[["hydro"]] = 0
    value.loc[['"geot-elec"']] = 0
    value.loc[['"solid bioE-elec"']] = 0
    value.loc[["oceanic"]] = 0
    def_subs = xr.zeros_like(value, dtype=bool)
    def_subs.loc[["wind onshore"]] = True
    def_subs.loc[["wind offshore"]] = True
    def_subs.loc[["solar PV"]] = True
    def_subs.loc[["CSP"]] = True
    value.values[
        def_subs.values
    ] = _ext_constant_share_energy_requirements_for_decom_res_elec().values[
        def_subs.values
    ]
    return value


_ext_constant_share_energy_requirements_for_decom_res_elec = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "D122",
    {"RES elec": ["wind onshore"]},
    _root,
    {"RES elec": _subscript_dict["RES elec"]},
    "_ext_constant_share_energy_requirements_for_decom_res_elec",
)

_ext_constant_share_energy_requirements_for_decom_res_elec.add(
    "inputs_EU.xlsx", "Materials", "E122", {"RES elec": ["wind offshore"]}
)

_ext_constant_share_energy_requirements_for_decom_res_elec.add(
    "inputs_EU.xlsx", "Materials", "C122", {"RES elec": ["solar PV"]}
)

_ext_constant_share_energy_requirements_for_decom_res_elec.add(
    "inputs_EU.xlsx", "Materials", "B122", {"RES elec": ["CSP"]}
)


@component.add(
    name='"CED O&M over lifetime RES elec var"',
    units="EJ",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ced_om_over_lifetime_per_material_res_elec_var": 1,
        "ced_om_over_lifetime_per_water_res_elec_var": 1,
    },
)
def ced_om_over_lifetime_res_elec_var():
    """
    Cumulative energy demand for O&M of RES variables per technology over all the lifetime of the infrastructure.
    """
    return sum(
        ced_om_over_lifetime_per_material_res_elec_var().rename(
            {"materials": "materials!"}
        ),
        dim=["materials!"],
    ) + sum(
        ced_om_over_lifetime_per_water_res_elec_var().rename({"water0": "water0!"}),
        dim=["water0!"],
    )


@component.add(
    name="Grid correction factor RES elec",
    units="Dmnl",
    subscripts=["RES elec"],
    comp_type="Constant",
    comp_subtype="Normal, External",
    depends_on={"__external__": "_ext_constant_grid_correction_factor_res_elec"},
)
def grid_correction_factor_res_elec():
    """
    Grid correction factor to take into account the electricity losses due to Joule effect in each power plant.
    """
    value = xr.DataArray(
        np.nan, {"RES elec": _subscript_dict["RES elec"]}, ["RES elec"]
    )
    value.loc[["hydro"]] = 0
    value.loc[['"geot-elec"']] = 0
    value.loc[['"solid bioE-elec"']] = 0
    value.loc[["oceanic"]] = 0
    def_subs = xr.zeros_like(value, dtype=bool)
    def_subs.loc[["wind onshore"]] = True
    def_subs.loc[["wind offshore"]] = True
    def_subs.loc[["solar PV"]] = True
    def_subs.loc[["CSP"]] = True
    value.values[
        def_subs.values
    ] = _ext_constant_grid_correction_factor_res_elec().values[def_subs.values]
    return value


_ext_constant_grid_correction_factor_res_elec = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "D64",
    {"RES elec": ["wind onshore"]},
    _root,
    {"RES elec": _subscript_dict["RES elec"]},
    "_ext_constant_grid_correction_factor_res_elec",
)

_ext_constant_grid_correction_factor_res_elec.add(
    "inputs_EU.xlsx", "Materials", "E64", {"RES elec": ["wind offshore"]}
)

_ext_constant_grid_correction_factor_res_elec.add(
    "inputs_EU.xlsx", "Materials", "C64", {"RES elec": ["solar PV"]}
)

_ext_constant_grid_correction_factor_res_elec.add(
    "inputs_EU.xlsx", "Materials", "B64", {"RES elec": ["CSP"]}
)


@component.add(
    name='"materials for O&M per capacity installed - CSP"',
    units="kg/MW",
    subscripts=["materials"],
    comp_type="Constant",
    comp_subtype="Normal, External",
    depends_on={
        "__external__": "_ext_constant_materials_for_om_per_capacity_installed_csp"
    },
)
def materials_for_om_per_capacity_installed_csp():
    """
    Materials requirements for operation and maintenance per unit of new installed capacity of solar CSP.
    """
    value = xr.DataArray(
        np.nan, {"materials": _subscript_dict["materials"]}, ["materials"]
    )
    value.loc[["Adhesive"]] = 0
    def_subs = xr.zeros_like(value, dtype=bool)
    def_subs.loc[["Aluminium"]] = True
    def_subs.loc[["Carbon fiber"]] = True
    def_subs.loc[["Copper"]] = True
    def_subs.loc[["diesel"]] = True
    def_subs.loc[["Fiberglass"]] = True
    def_subs.loc[["Glass"]] = True
    def_subs.loc[["Glass reinforcing plastic"]] = True
    def_subs.loc[["Lime"]] = True
    def_subs.loc[["Lubricant"]] = True
    def_subs.loc[["Magnesium"]] = True
    def_subs.loc[["Plastics"]] = True
    def_subs.loc[["Silicon sand"]] = True
    def_subs.loc[["Silicon wafer modules"]] = True
    def_subs.loc[["Silver"]] = True
    def_subs.loc[["synthetic oil"]] = True
    value.values[
        def_subs.values
    ] = _ext_constant_materials_for_om_per_capacity_installed_csp().values[
        def_subs.values
    ]
    value.loc[["Aluminium mirrors"]] = 0
    value.loc[["Cadmium"]] = 0
    value.loc[["Cement"]] = 0
    value.loc[["Chromium"]] = 0
    value.loc[["Dy"]] = 0
    value.loc[['"Electric/electronic components"']] = 0
    value.loc[["Evacuation lines"]] = 0
    value.loc[["Foam glass"]] = 0
    value.loc[["Galium"]] = 0
    value.loc[["gravel"]] = 0
    value.loc[["Indium"]] = 0
    value.loc[["Iron"]] = 0
    value.loc[["KNO3 mined"]] = 0
    value.loc[["Asphalt"]] = 0
    value.loc[["Limestone"]] = 0
    value.loc[["Lithium"]] = 0
    value.loc[["Manganese"]] = 0
    value.loc[["Heavy equipment"]] = 0
    value.loc[["Concrete"]] = 0
    value.loc[["Molybdenum"]] = 0
    value.loc[["NaNO3 mined"]] = 0
    value.loc[["NaNO3 synthetic"]] = 0
    value.loc[["Neodymium"]] = 0
    value.loc[["Nickel"]] = 0
    value.loc[['"Over grid (15%)"']] = 0
    value.loc[['"Over grid (5%)"']] = 0
    value.loc[["Paint"]] = 0
    value.loc[["Lead"]] = 0
    value.loc[["Polypropylene"]] = 0
    value.loc[["Rock"]] = 0
    value.loc[["Rock wool"]] = 0
    value.loc[["Sand"]] = 0
    value.loc[["Site preparation"]] = 0
    value.loc[["Tin"]] = 0
    value.loc[["soda ash"]] = 0
    value.loc[["steel"]] = 0
    value.loc[["tellurium"]] = 0
    value.loc[["titanium"]] = 0
    value.loc[["titanium dioxide"]] = 0
    value.loc[["vanadium"]] = 0
    value.loc[["wires"]] = 0
    value.loc[["zinc"]] = 0
    return value


_ext_constant_materials_for_om_per_capacity_installed_csp = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "B99",
    {"materials": ["Aluminium"]},
    _root,
    {"materials": _subscript_dict["materials"]},
    "_ext_constant_materials_for_om_per_capacity_installed_csp",
)

_ext_constant_materials_for_om_per_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B100", {"materials": ["Carbon fiber"]}
)

_ext_constant_materials_for_om_per_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B101", {"materials": ["Copper"]}
)

_ext_constant_materials_for_om_per_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B102", {"materials": ["diesel"]}
)

_ext_constant_materials_for_om_per_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B103", {"materials": ["Fiberglass"]}
)

_ext_constant_materials_for_om_per_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B104", {"materials": ["Glass"]}
)

_ext_constant_materials_for_om_per_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B105", {"materials": ["Glass reinforcing plastic"]}
)

_ext_constant_materials_for_om_per_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B106", {"materials": ["Lime"]}
)

_ext_constant_materials_for_om_per_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B107", {"materials": ["Lubricant"]}
)

_ext_constant_materials_for_om_per_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B108", {"materials": ["Magnesium"]}
)

_ext_constant_materials_for_om_per_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B109", {"materials": ["Plastics"]}
)

_ext_constant_materials_for_om_per_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B110", {"materials": ["Silicon sand"]}
)

_ext_constant_materials_for_om_per_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B111", {"materials": ["Silicon wafer modules"]}
)

_ext_constant_materials_for_om_per_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B112", {"materials": ["Silver"]}
)

_ext_constant_materials_for_om_per_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B113", {"materials": ["synthetic oil"]}
)


@component.add(
    name='"Total water for O&M required by RES elec per techn"',
    units="Mt",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"water_for_om_required_for_res_elec": 1},
)
def total_water_for_om_required_by_res_elec_per_techn():
    """
    Annual total water required by RES technology for generating electricity.
    """
    return sum(
        water_for_om_required_for_res_elec().rename({"water0": "water0!"}),
        dim=["water0!"],
    )


@component.add(
    name='"Water for O&M required for RES elec"',
    units="Mt",
    subscripts=["RES elec", "water0", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "installed_capacity_res_elec_tw": 8,
        "water_for_om_res_elec": 8,
        "m_per_t": 8,
        "kg_per_mt": 8,
    },
)
def water_for_om_required_for_res_elec():
    """
    Annual water required for the operation and maintenance of the capacity of RES for electricity in operation by technology.
    """
    value = xr.DataArray(
        np.nan,
        {
            "RES elec": _subscript_dict["RES elec"],
            "water0": _subscript_dict["water0"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["RES elec", "water0", "scenarios"],
    )
    value.loc[["hydro"], :, :] = (
        (
            installed_capacity_res_elec_tw().loc["hydro", :].reset_coords(drop=True)
            * water_for_om_res_elec().loc["hydro", :].reset_coords(drop=True)
            * m_per_t()
            / kg_per_mt()
        )
        .transpose("water0", "scenarios")
        .expand_dims({"RES elec": ["hydro"]}, 0)
        .values
    )
    value.loc[['"geot-elec"'], :, :] = (
        (
            installed_capacity_res_elec_tw()
            .loc['"geot-elec"', :]
            .reset_coords(drop=True)
            * water_for_om_res_elec().loc['"geot-elec"', :].reset_coords(drop=True)
            * m_per_t()
            / kg_per_mt()
        )
        .transpose("water0", "scenarios")
        .expand_dims({"RES elec": ['"geot-elec"']}, 0)
        .values
    )
    value.loc[['"solid bioE-elec"'], :, :] = (
        (
            installed_capacity_res_elec_tw()
            .loc['"solid bioE-elec"', :]
            .reset_coords(drop=True)
            * water_for_om_res_elec()
            .loc['"solid bioE-elec"', :]
            .reset_coords(drop=True)
            * m_per_t()
            / kg_per_mt()
        )
        .transpose("water0", "scenarios")
        .expand_dims({"RES elec": ['"solid bioE-elec"']}, 0)
        .values
    )
    value.loc[["oceanic"], :, :] = (
        (
            installed_capacity_res_elec_tw().loc["oceanic", :].reset_coords(drop=True)
            * water_for_om_res_elec().loc["oceanic", :].reset_coords(drop=True)
            * m_per_t()
            / kg_per_mt()
        )
        .transpose("water0", "scenarios")
        .expand_dims({"RES elec": ["oceanic"]}, 0)
        .values
    )
    value.loc[["wind onshore"], :, :] = (
        (
            installed_capacity_res_elec_tw()
            .loc["wind onshore", :]
            .reset_coords(drop=True)
            * water_for_om_res_elec().loc["wind onshore", :].reset_coords(drop=True)
            * m_per_t()
            / kg_per_mt()
        )
        .transpose("water0", "scenarios")
        .expand_dims({"RES elec": ["wind onshore"]}, 0)
        .values
    )
    value.loc[["wind offshore"], :, :] = (
        (
            installed_capacity_res_elec_tw()
            .loc["wind offshore", :]
            .reset_coords(drop=True)
            * water_for_om_res_elec().loc["wind offshore", :].reset_coords(drop=True)
            * m_per_t()
            / kg_per_mt()
        )
        .transpose("water0", "scenarios")
        .expand_dims({"RES elec": ["wind offshore"]}, 0)
        .values
    )
    value.loc[["solar PV"], :, :] = (
        (
            installed_capacity_res_elec_tw().loc["solar PV", :].reset_coords(drop=True)
            * water_for_om_res_elec().loc["solar PV", :].reset_coords(drop=True)
            * m_per_t()
            / kg_per_mt()
        )
        .transpose("water0", "scenarios")
        .expand_dims({"RES elec": ["solar PV"]}, 0)
        .values
    )
    value.loc[["CSP"], :, :] = (
        (
            installed_capacity_res_elec_tw().loc["CSP", :].reset_coords(drop=True)
            * water_for_om_res_elec().loc["CSP", :].reset_coords(drop=True)
            * m_per_t()
            / kg_per_mt()
        )
        .transpose("water0", "scenarios")
        .expand_dims({"RES elec": ["CSP"]}, 0)
        .values
    )
    return value


@component.add(
    name='"materials for O&M per capacity installed RES elec"',
    units="kg/MW",
    subscripts=["RES elec", "materials"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "materials_for_om_per_capacity_installed_wind_onshore": 1,
        "materials_for_om_per_capacity_installed_wind_offshore": 1,
        "materials_for_om_per_capacity_installed_pv": 1,
        "materials_for_om_per_capacity_installed_csp": 1,
    },
)
def materials_for_om_per_capacity_installed_res_elec():
    value = xr.DataArray(
        np.nan,
        {
            "RES elec": _subscript_dict["RES elec"],
            "materials": _subscript_dict["materials"],
        },
        ["RES elec", "materials"],
    )
    value.loc[["hydro"], :] = 0
    value.loc[['"geot-elec"'], :] = 0
    value.loc[['"solid bioE-elec"'], :] = 0
    value.loc[["oceanic"], :] = 0
    value.loc[["wind onshore"], :] = (
        materials_for_om_per_capacity_installed_wind_onshore()
        .expand_dims({"RES elec": ["wind onshore"]}, 0)
        .values
    )
    value.loc[["wind offshore"], :] = (
        materials_for_om_per_capacity_installed_wind_offshore()
        .expand_dims({"RES elec": ["wind offshore"]}, 0)
        .values
    )
    value.loc[["solar PV"], :] = (
        materials_for_om_per_capacity_installed_pv()
        .expand_dims({"RES elec": ["solar PV"]}, 0)
        .values
    )
    value.loc[["CSP"], :] = (
        materials_for_om_per_capacity_installed_csp()
        .expand_dims({"RES elec": ["CSP"]}, 0)
        .values
    )
    return value


@component.add(
    name='"Total energy requirements O&M for water consumption RES elec"',
    units="EJ",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_requirements_for_om_for_water_consumption_res_elec": 1},
)
def total_energy_requirements_om_for_water_consumption_res_elec():
    """
    Total energy requirements for water consumption (all types) by RES technology for electricity generation.
    """
    return sum(
        energy_requirements_for_om_for_water_consumption_res_elec().rename(
            {"water0": "water0!"}
        ),
        dim=["water0!"],
    )


@component.add(
    name='"Energy requirements for O&M for water consumption RES elec"',
    units="EJ",
    subscripts=["RES elec", "water0", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "energy_requirements_per_unit_of_water_consumption": 1,
        "water_for_om_required_for_res_elec": 1,
        "kg_per_mt": 1,
        "mj_per_ej": 1,
    },
)
def energy_requirements_for_om_for_water_consumption_res_elec():
    """
    Energy requirements for operation and maintenance of water consumption by RES technology for generating electricity.
    """
    return (
        energy_requirements_per_unit_of_water_consumption()
        * water_for_om_required_for_res_elec().transpose(
            "water0", "RES elec", "scenarios"
        )
        * kg_per_mt()
        / mj_per_ej()
    ).transpose("RES elec", "water0", "scenarios")


@component.add(
    name='"water for O&M - RES elec"',
    units="kg/MW",
    subscripts=["RES elec", "water0"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "water_for_om_wind_onshore": 1,
        "water_for_om_wind_offshore": 1,
        "water_for_om_pv": 1,
        "water_for_om_csp": 1,
    },
)
def water_for_om_res_elec():
    value = xr.DataArray(
        np.nan,
        {"RES elec": _subscript_dict["RES elec"], "water0": _subscript_dict["water0"]},
        ["RES elec", "water0"],
    )
    value.loc[["hydro"], :] = 0
    value.loc[['"geot-elec"'], :] = 0
    value.loc[['"solid bioE-elec"'], :] = 0
    value.loc[["oceanic"], :] = 0
    value.loc[["wind onshore"], :] = (
        water_for_om_wind_onshore()
        .expand_dims({"RES elec": ["wind onshore"]}, 0)
        .values
    )
    value.loc[["wind offshore"], :] = (
        water_for_om_wind_offshore()
        .expand_dims({"RES elec": ["wind offshore"]}, 0)
        .values
    )
    value.loc[["solar PV"], :] = (
        water_for_om_pv().expand_dims({"RES elec": ["solar PV"]}, 0).values
    )
    value.loc[["CSP"], :] = (
        water_for_om_csp().expand_dims({"RES elec": ["CSP"]}, 0).values
    )
    return value


@component.add(
    name="Energy requirements per unit of water consumption",
    units="MJ/kg",
    subscripts=["water0"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_energy_requirements_per_unit_of_water_consumption"
    },
)
def energy_requirements_per_unit_of_water_consumption():
    """
    Energy requirements for water consumption in RES plants for generation of electricity.
    """
    return _ext_constant_energy_requirements_per_unit_of_water_consumption()


_ext_constant_energy_requirements_per_unit_of_water_consumption = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "Y114",
    {"water0": ['"clean, pumped water"']},
    _root,
    {"water0": _subscript_dict["water0"]},
    "_ext_constant_energy_requirements_per_unit_of_water_consumption",
)

_ext_constant_energy_requirements_per_unit_of_water_consumption.add(
    "inputs_EU.xlsx", "Materials", "Y115", {"water0": ['"distilled, deionized water"']}
)


@component.add(
    name='"unlimited NRE?"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_unlimited_nre"},
)
def unlimited_nre():
    """
    Switch to consider if non-renewable resources (oil, gas, coal and uranium) are unlimited (1), or if it is limited (0). If limited then the available depletion curves are considered.
    """
    return _ext_constant_unlimited_nre()


_ext_constant_unlimited_nre = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E66",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_unlimited_nre",
)

_ext_constant_unlimited_nre.add(
    "inputs_EU.xlsx", "SCEN1", "E66", {"scenarios": ["SCEN1"]}
)

_ext_constant_unlimited_nre.add(
    "inputs_EU.xlsx", "SCEN2", "E66", {"scenarios": ["SCEN2"]}
)

_ext_constant_unlimited_nre.add(
    "inputs_EU.xlsx", "SCEN3", "E66", {"scenarios": ["SCEN3"]}
)

_ext_constant_unlimited_nre.add(
    "inputs_EU.xlsx", "SCEN4", "E66", {"scenarios": ["SCEN4"]}
)

_ext_constant_unlimited_nre.add(
    "inputs_EU.xlsx", "User defined", "E66", {"scenarios": ["User defined"]}
)


@component.add(
    name="extraction uranium EJ EU",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rurr_uranium": 1,
        "unlimited_uranium": 1,
        "time": 1,
        "kt_uranium_per_ej": 1,
        "historic_uranium_domestic_eu_extracted_t": 1,
        "pe_demand_uranium_eu_ej": 3,
        "unlimited_nre": 1,
        "tonnes_per_kt": 1,
        "max_extraction_uranium_ej": 1,
    },
)
def extraction_uranium_ej_eu():
    """
    Annual extraction of uranium.
    """
    return if_then_else(
        rurr_uranium() < 0,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            time() < 2016,
            lambda: xr.DataArray(
                historic_uranium_domestic_eu_extracted_t()
                / (kt_uranium_per_ej() * tonnes_per_kt()),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                unlimited_nre() == 1,
                lambda: pe_demand_uranium_eu_ej(),
                lambda: if_then_else(
                    unlimited_uranium() == 1,
                    lambda: pe_demand_uranium_eu_ej(),
                    lambda: np.minimum(
                        pe_demand_uranium_eu_ej(), max_extraction_uranium_ej()
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="URR uranium",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "unlimited_nre": 1,
        "urr_uranium_unlimited": 3,
        "urr_uranium_user_defined": 3,
        "unlimited_uranium": 1,
        "choose_extraction_uranium_curve": 3,
    },
)
def urr_uranium():
    """
    Ultimately Recoverable Resources (URR) associated to the selected depletion curve.
    """
    return if_then_else(
        unlimited_nre() == 1,
        lambda: xr.DataArray(
            urr_uranium_unlimited(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            unlimited_uranium() == 1,
            lambda: xr.DataArray(
                urr_uranium_unlimited(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                choose_extraction_uranium_curve() == 1,
                lambda: xr.DataArray(
                    urr_uranium_user_defined(),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    choose_extraction_uranium_curve() == 2,
                    lambda: xr.DataArray(
                        urr_uranium_user_defined(),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                    lambda: if_then_else(
                        choose_extraction_uranium_curve() == 3,
                        lambda: xr.DataArray(
                            urr_uranium_unlimited(),
                            {"scenarios": _subscript_dict["scenarios"]},
                            ["scenarios"],
                        ),
                        lambda: xr.DataArray(
                            urr_uranium_user_defined(),
                            {"scenarios": _subscript_dict["scenarios"]},
                            ["scenarios"],
                        ),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="URR conv oil",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "separate_conv_and_unconv_oil": 1,
        "urr_conv_oil_mohr15_bg": 1,
        "urr_conv_oil_mohr15_low": 1,
        "unlimited_nre": 1,
        "urr_conv_oil_user_defined": 1,
        "urr_conv_oil_mohr15_high": 1,
        "choose_extraction_curve_conv_oil": 3,
        "unlimited_oil": 1,
        "urr_conv_oil_unlimited": 2,
    },
)
def urr_conv_oil():
    """
    Ultimately Recoverable Resources (URR) associated to the selected depletion curve.
    """
    return if_then_else(
        separate_conv_and_unconv_oil() == 1,
        lambda: if_then_else(
            unlimited_nre() == 1,
            lambda: xr.DataArray(
                urr_conv_oil_unlimited(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                unlimited_oil() == 1,
                lambda: xr.DataArray(
                    urr_conv_oil_unlimited(),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    choose_extraction_curve_conv_oil() == 1,
                    lambda: xr.DataArray(
                        urr_conv_oil_mohr15_low(),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                    lambda: if_then_else(
                        choose_extraction_curve_conv_oil() == 2,
                        lambda: xr.DataArray(
                            urr_conv_oil_mohr15_bg(),
                            {"scenarios": _subscript_dict["scenarios"]},
                            ["scenarios"],
                        ),
                        lambda: if_then_else(
                            choose_extraction_curve_conv_oil() == 3,
                            lambda: xr.DataArray(
                                urr_conv_oil_mohr15_high(),
                                {"scenarios": _subscript_dict["scenarios"]},
                                ["scenarios"],
                            ),
                            lambda: xr.DataArray(
                                urr_conv_oil_user_defined(),
                                {"scenarios": _subscript_dict["scenarios"]},
                                ["scenarios"],
                            ),
                        ),
                    ),
                ),
            ),
        ),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="Historic biogas PES",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_biogas_pes",
        "__lookup__": "_ext_lookup_historic_biogas_pes",
    },
)
def historic_biogas_pes(x, final_subs=None):
    """
    Historic production of biogases (1990-2014).
    """
    return _ext_lookup_historic_biogas_pes(x, final_subs)


_ext_lookup_historic_biogas_pes = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "216",
    "B231",
    {},
    _root,
    {},
    "_ext_lookup_historic_biogas_pes",
)


@component.add(
    name="past biogas growth",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_past_biogas_growth"},
)
def past_biogas_growth():
    """
    Current growth patterns.
    """
    return _ext_constant_past_biogas_growth()


_ext_constant_past_biogas_growth = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "X231",
    {},
    _root,
    {},
    "_ext_constant_past_biogas_growth",
)


@component.add(
    name="PES Biogas EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_pes_biogas_ej": 1},
    other_deps={"_integ_pes_biogas_ej": {"initial": {}, "step": {"new_pes_biogas": 1}}},
)
def pes_biogas_ej():
    """
    Biogases primary energy supply. Includes all uses: heat, electricity, total final energy consumption, etc. The same share for final energy uses as well as the efficiency of transformation than for natural fossil gas are assumed.
    """
    return _integ_pes_biogas_ej()


_integ_pes_biogas_ej = Integ(
    lambda: new_pes_biogas(),
    lambda: xr.DataArray(
        0.13135, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    "_integ_pes_biogas_ej",
)


@component.add(
    name="P biogas",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_biogas"},
)
def p_biogas():
    """
    Projected annual growth.
    """
    return _ext_constant_p_biogas()


_ext_constant_p_biogas = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C53",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_biogas",
)

_ext_constant_p_biogas.add("inputs_EU.xlsx", "SCEN1", "C53", {"scenarios": ["SCEN1"]})

_ext_constant_p_biogas.add("inputs_EU.xlsx", "SCEN2", "C53", {"scenarios": ["SCEN2"]})

_ext_constant_p_biogas.add("inputs_EU.xlsx", "SCEN3", "C53", {"scenarios": ["SCEN3"]})

_ext_constant_p_biogas.add("inputs_EU.xlsx", "SCEN4", "C53", {"scenarios": ["SCEN4"]})

_ext_constant_p_biogas.add(
    "inputs_EU.xlsx", "User defined", "C53", {"scenarios": ["User defined"]}
)


@component.add(
    name="max PE biogas EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_max_pe_biogas_ej"},
)
def max_pe_biogas_ej():
    """
    Maximun potencial (primary energy) of biogases production.
    """
    return _ext_constant_max_pe_biogas_ej()


_ext_constant_max_pe_biogas_ej = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C52",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_max_pe_biogas_ej",
)

_ext_constant_max_pe_biogas_ej.add(
    "inputs_EU.xlsx", "SCEN1", "C52", {"scenarios": ["SCEN1"]}
)

_ext_constant_max_pe_biogas_ej.add(
    "inputs_EU.xlsx", "User defined", "C52", {"scenarios": ["User defined"]}
)

_ext_constant_max_pe_biogas_ej.add(
    "inputs_EU.xlsx", "SCEN2", "C52", {"scenarios": ["SCEN2"]}
)

_ext_constant_max_pe_biogas_ej.add(
    "inputs_EU.xlsx", "SCEN3", "C52", {"scenarios": ["SCEN3"]}
)

_ext_constant_max_pe_biogas_ej.add(
    "inputs_EU.xlsx", "SCEN4", "C52", {"scenarios": ["SCEN4"]}
)


@component.add(
    name="Historic PES peat EJ",
    units="EJ",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_historic_pes_peat_ej",
        "__data__": "_ext_data_historic_pes_peat_ej",
        "time": 1,
    },
)
def historic_pes_peat_ej():
    """
    Historic primary energy supply of peat.
    """
    return _ext_data_historic_pes_peat_ej(time())


_ext_data_historic_pes_peat_ej = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "216",
    "B230",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_historic_pes_peat_ej",
)


@component.add(
    name="PES peat EJ",
    units="EJ",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 2, "historic_pes_peat_ej": 1},
)
def pes_peat_ej():
    return np.maximum(
        if_then_else(
            time() > 2014,
            lambda: -0.0125 * time() + 25.3125,
            lambda: historic_pes_peat_ej(),
        ),
        0,
    )


@component.add(
    name="FEI over lifetime RES elec dispatch",
    units="EJ",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "cedtot_per_tw_over_lifetime_res_elec_dispatch": 1,
        "res_elec_capacity_under_construction_tw": 1,
    },
)
def fei_over_lifetime_res_elec_dispatch():
    """
    Final energy invested over lifetime per RES elec dispatchable technology (equivalent to the denominator of the EROI (=CED*g).
    """
    return (
        cedtot_per_tw_over_lifetime_res_elec_dispatch()
        * res_elec_capacity_under_construction_tw()
    )


@component.add(
    name="activate EROI allocation rule",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def activate_eroi_allocation_rule():
    """
    Activate/Deactivate EROI allocation rule for the RES elec technologies: 1. Activated 0. Deactivated
    """
    return 1


@component.add(
    name="EROI allocation rule per RES elec",
    units="Dmnl",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "ratio_eroi_per_techn_vs_eroitot_static": 3},
)
def eroi_allocation_rule_per_res_elec():
    """
    Allocation rule for the RES elec technologies based on their EROI.
    """
    return if_then_else(
        time() < 2015,
        lambda: xr.DataArray(
            1,
            {
                "RES elec": _subscript_dict["RES elec"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["RES elec", "scenarios"],
        ),
        lambda: if_then_else(
            ratio_eroi_per_techn_vs_eroitot_static() == 0,
            lambda: xr.DataArray(
                0,
                {
                    "RES elec": _subscript_dict["RES elec"],
                    "scenarios": _subscript_dict["scenarios"],
                },
                ["RES elec", "scenarios"],
            ),
            lambda: if_then_else(
                ratio_eroi_per_techn_vs_eroitot_static() < 0.1,
                lambda: xr.DataArray(
                    0,
                    {
                        "RES elec": _subscript_dict["RES elec"],
                        "scenarios": _subscript_dict["scenarios"],
                    },
                    ["RES elec", "scenarios"],
                ),
                lambda: 0.434294 * np.log(ratio_eroi_per_techn_vs_eroitot_static()) + 1,
            ),
        ),
    )


@component.add(
    name="\"'dynamic' EROI RES elec var\"",
    units="Dmnl",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fei_res_elec_var": 2, "real_generation_res_elec_ej": 1},
)
def dynamic_eroi_res_elec_var():
    """
    Evolution of EROI over time per RES variable technology, considering CED dynamic over time.
    """
    return if_then_else(
        fei_res_elec_var() == 0,
        lambda: xr.DataArray(
            0,
            {
                "RES elec": _subscript_dict["RES elec"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["RES elec", "scenarios"],
        ),
        lambda: real_generation_res_elec_ej() / fei_res_elec_var(),
    )


@component.add(
    name='"EROI-ini RES elec dispatch"',
    units="Dmnl",
    subscripts=["RES elec"],
    comp_type="Constant, Data",
    comp_subtype="Normal, External",
    depends_on={
        "__external__": "_ext_data_eroiini_res_elec_dispatch",
        "__data__": "_ext_data_eroiini_res_elec_dispatch",
        "time": 1,
    },
)
def eroiini_res_elec_dispatch():
    """
    Energy return on energy invested of RES technologies for generating electricity dispatchables at the initial Cp level.
    """
    value = xr.DataArray(
        np.nan, {"RES elec": _subscript_dict["RES elec"]}, ["RES elec"]
    )
    def_subs = xr.zeros_like(value, dtype=bool)
    def_subs.loc[["hydro"]] = True
    value.values[def_subs.values] = _ext_data_eroiini_res_elec_dispatch(time()).values[
        def_subs.values
    ]
    def_subs = xr.zeros_like(value, dtype=bool)
    def_subs.loc[['"geot-elec"']] = True
    def_subs.loc[['"solid bioE-elec"']] = True
    def_subs.loc[["oceanic"]] = True
    value.values[def_subs.values] = _ext_constant_eroiini_res_elec_dispatch().values[
        def_subs.values
    ]
    value.loc[["wind onshore"]] = 0
    value.loc[["wind offshore"]] = 0
    value.loc[["solar PV"]] = 0
    value.loc[["CSP"]] = 0
    return value


_ext_data_eroiini_res_elec_dispatch = ExtData(
    "inputs_EU.xlsx",
    "Parameters",
    "6",
    "G21",
    None,
    {"RES elec": ["hydro"]},
    _root,
    {"RES elec": _subscript_dict["RES elec"]},
    "_ext_data_eroiini_res_elec_dispatch",
)

_ext_constant_eroiini_res_elec_dispatch = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "W7",
    {"RES elec": ['"geot-elec"']},
    _root,
    {"RES elec": _subscript_dict["RES elec"]},
    "_ext_constant_eroiini_res_elec_dispatch",
)

_ext_constant_eroiini_res_elec_dispatch.add(
    "inputs_EU.xlsx", "Parameters", "W8", {"RES elec": ['"solid bioE-elec"']}
)

_ext_constant_eroiini_res_elec_dispatch.add(
    "inputs_EU.xlsx", "Parameters", "W9", {"RES elec": ["oceanic"]}
)


@component.add(
    name="RES elec capacity under construction TW",
    units="TW/Year",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "res_elec_planned_capacity_tw": 1,
        "time_step": 1,
        "time_construction_res_elec": 1,
    },
)
def res_elec_capacity_under_construction_tw():
    """
    RES infraestructure for electricity generation capacity under construction.
    """
    return res_elec_planned_capacity_tw() / np.maximum(
        time_construction_res_elec(), time_step()
    )


@component.add(
    name="real generation solar PV EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_generation_res_elec_ej": 1},
)
def real_generation_solar_pv_ej():
    return real_generation_res_elec_ej().loc["solar PV", :].reset_coords(drop=True)


@component.add(
    name="materials required for new CSP Mt",
    units="Mt",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"materials_required_for_new_res_elec_mt": 1},
)
def materials_required_for_new_csp_mt():
    """
    Annual materials required for the installation of new capacity of solar CSP.
    """
    return (
        materials_required_for_new_res_elec_mt()
        .loc["CSP", :, :]
        .reset_coords(drop=True)
    )


@component.add(
    name="materials required for new PV Mt",
    units="Mt",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"materials_required_for_new_res_elec_mt": 1},
)
def materials_required_for_new_pv_mt():
    """
    Annual materials required for the installation of new capacity of solar PV.
    """
    return (
        materials_required_for_new_res_elec_mt()
        .loc["solar PV", :, :]
        .reset_coords(drop=True)
    )


@component.add(
    name="materials required for new wind offshore Mt",
    units="Mt",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"materials_required_for_new_res_elec_mt": 1},
)
def materials_required_for_new_wind_offshore_mt():
    """
    Annual materials required for the installation of new capacity of wind offshore.
    """
    return (
        materials_required_for_new_res_elec_mt()
        .loc["wind offshore", :, :]
        .reset_coords(drop=True)
    )


@component.add(
    name="materials required for new wind onshore Mt",
    units="Mt",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"materials_required_for_new_res_elec_mt": 1},
)
def materials_required_for_new_wind_onshore_mt():
    """
    Annual materials required for the installation of new capacity of wind oshore.
    """
    return (
        materials_required_for_new_res_elec_mt()
        .loc["wind onshore", :, :]
        .reset_coords(drop=True)
    )


@component.add(
    name='"materials required for O&M CSP Mt"',
    units="Mt",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"materials_required_for_om_res_elec_mt": 1},
)
def materials_required_for_om_csp_mt():
    """
    Annual materials required for the operation and maintenance of solar CSP.
    """
    return (
        materials_required_for_om_res_elec_mt().loc["CSP", :, :].reset_coords(drop=True)
    )


@component.add(
    name='"materials required for O&M PV Mt"',
    units="Mt",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"materials_required_for_om_res_elec_mt": 1},
)
def materials_required_for_om_pv_mt():
    """
    Annual materials required for the operation and maintenance of solar PV.
    """
    return (
        materials_required_for_om_res_elec_mt()
        .loc["solar PV", :, :]
        .reset_coords(drop=True)
    )


@component.add(
    name='"materials required for O&M wind offshore Mt"',
    units="Mt",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"materials_required_for_om_res_elec_mt": 1},
)
def materials_required_for_om_wind_offshore_mt():
    """
    Annual materials required for the operation and maintenance of wind offshore.
    """
    return (
        materials_required_for_om_res_elec_mt()
        .loc["wind offshore", :, :]
        .reset_coords(drop=True)
    )


@component.add(
    name='"materials required for O&M wind onshore Mt"',
    units="Mt",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"materials_required_for_om_res_elec_mt": 1},
)
def materials_required_for_om_wind_onshore_mt():
    """
    Annual materials required for the operation and maintenance of wind onshore.
    """
    return (
        materials_required_for_om_res_elec_mt()
        .loc["wind onshore", :, :]
        .reset_coords(drop=True)
    )


@component.add(
    name="real generation RES elec EJ",
    units="EJ",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_generation_res_elec_twh": 1, "ej_per_twh": 1},
)
def real_generation_res_elec_ej():
    """
    Electricity generation by RES technology.
    """
    return real_generation_res_elec_twh() * ej_per_twh()


@component.add(
    name="CEDtot solar PV",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fei_res_elec_var": 1},
)
def cedtot_solar_pv():
    return fei_res_elec_var().loc["solar PV", :].reset_coords(drop=True)


@component.add(
    name="Total materials required for new RES elec Mt",
    units="Mt",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"materials_required_for_new_res_elec_mt": 1},
)
def total_materials_required_for_new_res_elec_mt():
    """
    Total annual materials requirements per new installed capacity of RES for electricity generation.
    """
    return sum(
        materials_required_for_new_res_elec_mt().rename({"RES elec": "RES elec!"}),
        dim=["RES elec!"],
    )


@component.add(
    name='"Total materials required for O&M RES elec Mt"',
    units="Mt",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"materials_required_for_om_res_elec_mt": 1},
)
def total_materials_required_for_om_res_elec_mt():
    """
    Total annual materials required for the operation and maintenance of the capacity of RES for electricity in operation by technology.
    """
    return sum(
        materials_required_for_om_res_elec_mt().rename({"RES elec": "RES elec!"}),
        dim=["RES elec!"],
    )


@component.add(
    name='"EROI=1"', units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def eroi1():
    return 1


@component.add(
    name="Electrical distribution losses TWh",
    units="TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_fe_elec_demand_twh": 1, "share_transmdistr_elec_losses": 1},
)
def electrical_distribution_losses_twh():
    """
    Electrical transmission and distribution losses.
    """
    return total_fe_elec_demand_twh() * share_transmdistr_elec_losses()


@component.add(
    name='"Max share transm&distr elec losses"',
    units="Dnml",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_transmdistr_elec_losses_initial": 1},
)
def max_share_transmdistr_elec_losses():
    """
    Assumed maximum share of transmission and distribution electric losses (when RES supply 100% of the total consumption).
    """
    return share_transmdistr_elec_losses_initial() * (
        1 + 0.0115 * np.exp(4.2297 * 1) - 0.00251
    )


@component.add(
    name='"Heat-com distribution losses"',
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fed_heatcom_ej": 1, "share_heat_distribution_losses": 1},
)
def heatcom_distribution_losses():
    """
    Distribution losses associated to heat commercial.
    """
    return fed_heatcom_ej() * share_heat_distribution_losses()


@component.add(
    name="potential generation RES elec TWh",
    units="TWh",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "installed_capacity_res_elec_tw": 1,
        "cp_res_elec": 1,
        "twe_per_twh": 1,
    },
)
def potential_generation_res_elec_twh():
    """
    Potential generation of electricity by RES technology given the installed capacity.
    """
    return installed_capacity_res_elec_tw() * cp_res_elec() / twe_per_twh()


@component.add(
    name="output elec over lifetime RES elec",
    units="EJ",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_cp_res_elec": 1,
        "res_elec_capacity_under_construction_tw": 1,
        "twe_per_twh": 1,
        "lifetime_res_elec": 1,
        "ej_per_twh": 1,
    },
)
def output_elec_over_lifetime_res_elec():
    """
    Total electricity output generated over the full operation of the infrastructure of the new capacity installed.
    """
    return (
        real_cp_res_elec()
        * res_elec_capacity_under_construction_tw()
        * (1 / twe_per_twh())
        * lifetime_res_elec()
        * ej_per_twh()
    )


@component.add(
    name='"variation share transm&distr elec losses"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "variation_share_transmdistr_losses_elec": 1,
        "remaining_share_transmdistr_elec_losses": 1,
    },
)
def variation_share_transmdistr_elec_losses():
    """
    Annual variation of the share of transmission and distribution losses of electricity.
    """
    return if_then_else(
        time() < 2015,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: variation_share_transmdistr_losses_elec()
        * remaining_share_transmdistr_elec_losses(),
    )


@component.add(
    name='"remaining share transm&distr elec losses"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_share_transmdistr_elec_losses": 2,
        "share_transmdistr_elec_losses": 1,
    },
)
def remaining_share_transmdistr_elec_losses():
    """
    Remaining share in relation to the assumed maximum transmission and distribution losses.
    """
    return (
        max_share_transmdistr_elec_losses() - share_transmdistr_elec_losses()
    ) / max_share_transmdistr_elec_losses()


@component.add(
    name='"share transm&distr elec losses"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_share_transmdistr_elec_losses": 1},
    other_deps={
        "_integ_share_transmdistr_elec_losses": {
            "initial": {"share_transmdistr_elec_losses_initial": 1},
            "step": {"variation_share_transmdistr_elec_losses": 1},
        }
    },
)
def share_transmdistr_elec_losses():
    """
    Evolution over time of the share of transmission and distribution losses of electricity. It is assumed that these losses increase over time as the share of RES increase in the electricity mix.
    """
    return _integ_share_transmdistr_elec_losses()


_integ_share_transmdistr_elec_losses = Integ(
    lambda: variation_share_transmdistr_elec_losses(),
    lambda: xr.DataArray(
        share_transmdistr_elec_losses_initial(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_share_transmdistr_elec_losses",
)


@component.add(
    name="Total gen losses demand for Elec plants EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pe_demand_gas_elec_plants_ej": 1,
        "efficiency_gas_for_electricity": 1,
        "pe_demand_coal_elec_plants_ej": 1,
        "efficiency_coal_for_electricity": 1,
        "pe_demand_oil_elec_plants_ej": 1,
        "efficiency_liquids_for_electricity": 1,
        "pe_losses_uranium_for_elec_ej": 1,
        "pe_losses_bioe_for_elec_ej": 1,
    },
)
def total_gen_losses_demand_for_elec_plants_ej():
    """
    Total generation losses associated to electricity demand.
    """
    return (
        pe_demand_gas_elec_plants_ej() * (1 - efficiency_gas_for_electricity())
        + pe_demand_coal_elec_plants_ej() * (1 - efficiency_coal_for_electricity())
        + pe_demand_oil_elec_plants_ej() * (1 - efficiency_liquids_for_electricity())
        + pe_losses_uranium_for_elec_ej()
        + pe_losses_bioe_for_elec_ej()
    )


@component.add(
    name="PE losses BioE for Elec EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pe_real_generation_res_elec": 1,
        "ej_per_twh": 1,
        "fe_elec_generation_from_bioe_twh": 1,
    },
)
def pe_losses_bioe_for_elec_ej():
    """
    (Primary energy) losses due to the production of electricity from solid bioenergy.
    """
    return (
        pe_real_generation_res_elec()
        .loc['"solid bioE-elec"', :]
        .reset_coords(drop=True)
        - fe_elec_generation_from_bioe_twh() * ej_per_twh()
    )


@component.add(
    name='"water for O&M - wind offshore"',
    units="kg/MW",
    subscripts=["water0"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_water_for_om_wind_offshore"},
)
def water_for_om_wind_offshore():
    return _ext_constant_water_for_om_wind_offshore()


_ext_constant_water_for_om_wind_offshore = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "E114",
    {"water0": ['"clean, pumped water"']},
    _root,
    {"water0": _subscript_dict["water0"]},
    "_ext_constant_water_for_om_wind_offshore",
)

_ext_constant_water_for_om_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E115", {"water0": ['"distilled, deionized water"']}
)


@component.add(
    name="Total materials required for RES elec Mt",
    units="Mt/Year",
    subscripts=["materials", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_materials_required_for_new_res_elec_mt": 1,
        "total_materials_required_for_om_res_elec_mt": 1,
    },
)
def total_materials_required_for_res_elec_mt():
    """
    Total annual materials requirements for the installation and O&M of RES for electricity generation.
    """
    return (
        total_materials_required_for_new_res_elec_mt()
        + total_materials_required_for_om_res_elec_mt()
    )


@component.add(
    name="share energy for material consumption for alt techn vs TFEC",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "tfe_required_for_total_material_consumption_for_alt_techn": 1,
        "real_tfec": 1,
    },
)
def share_energy_for_material_consumption_for_alt_techn_vs_tfec():
    """
    Share of energy requirements for alternative technologies (RES elec & EV Batteries) vs TFES.
    """
    return tfe_required_for_total_material_consumption_for_alt_techn() / real_tfec()


@component.add(
    name='"water for O&M - PV"',
    units="kg/MW",
    subscripts=["water0"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_water_for_om_pv"},
)
def water_for_om_pv():
    return _ext_constant_water_for_om_pv()


_ext_constant_water_for_om_pv = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "C114",
    {"water0": ['"clean, pumped water"']},
    _root,
    {"water0": _subscript_dict["water0"]},
    "_ext_constant_water_for_om_pv",
)

_ext_constant_water_for_om_pv.add(
    "inputs_EU.xlsx", "Materials", "C115", {"water0": ['"distilled, deionized water"']}
)


@component.add(
    name='"water for O&M - wind onshore"',
    units="kg/MW",
    subscripts=["water0"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_water_for_om_wind_onshore"},
)
def water_for_om_wind_onshore():
    return _ext_constant_water_for_om_wind_onshore()


_ext_constant_water_for_om_wind_onshore = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "D114",
    {"water0": ['"clean, pumped water"']},
    _root,
    {"water0": _subscript_dict["water0"]},
    "_ext_constant_water_for_om_wind_onshore",
)

_ext_constant_water_for_om_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D115", {"water0": ['"distilled, deionized water"']}
)


@component.add(
    name='"materials for O&M per capacity installed - wind offshore"',
    units="kg/MW",
    subscripts=["materials"],
    comp_type="Constant",
    comp_subtype="Normal, External",
    depends_on={
        "__external__": "_ext_constant_materials_for_om_per_capacity_installed_wind_offshore"
    },
)
def materials_for_om_per_capacity_installed_wind_offshore():
    """
    Materials requirements for operation and maintenance per unit of new installed capacity of wind offshore.
    """
    value = xr.DataArray(
        np.nan, {"materials": _subscript_dict["materials"]}, ["materials"]
    )
    value.loc[["Adhesive"]] = 0
    def_subs = xr.zeros_like(value, dtype=bool)
    def_subs.loc[["Aluminium"]] = True
    def_subs.loc[["Carbon fiber"]] = True
    def_subs.loc[["Copper"]] = True
    def_subs.loc[["diesel"]] = True
    def_subs.loc[["Fiberglass"]] = True
    def_subs.loc[["Glass"]] = True
    def_subs.loc[["Glass reinforcing plastic"]] = True
    def_subs.loc[["Lime"]] = True
    def_subs.loc[["Lubricant"]] = True
    def_subs.loc[["Magnesium"]] = True
    def_subs.loc[["Plastics"]] = True
    def_subs.loc[["Silicon sand"]] = True
    def_subs.loc[["Silicon wafer modules"]] = True
    def_subs.loc[["Silver"]] = True
    def_subs.loc[["synthetic oil"]] = True
    value.values[
        def_subs.values
    ] = _ext_constant_materials_for_om_per_capacity_installed_wind_offshore().values[
        def_subs.values
    ]
    value.loc[["Aluminium mirrors"]] = 0
    value.loc[["Cadmium"]] = 0
    value.loc[["Cement"]] = 0
    value.loc[["Chromium"]] = 0
    value.loc[["Dy"]] = 0
    value.loc[['"Electric/electronic components"']] = 0
    value.loc[["Evacuation lines"]] = 0
    value.loc[["Foam glass"]] = 0
    value.loc[["Galium"]] = 0
    value.loc[["gravel"]] = 0
    value.loc[["Indium"]] = 0
    value.loc[["Iron"]] = 0
    value.loc[["KNO3 mined"]] = 0
    value.loc[["Asphalt"]] = 0
    value.loc[["Limestone"]] = 0
    value.loc[["Lithium"]] = 0
    value.loc[["Manganese"]] = 0
    value.loc[["Heavy equipment"]] = 0
    value.loc[["Concrete"]] = 0
    value.loc[["Molybdenum"]] = 0
    value.loc[["NaNO3 mined"]] = 0
    value.loc[["NaNO3 synthetic"]] = 0
    value.loc[["Neodymium"]] = 0
    value.loc[["Nickel"]] = 0
    value.loc[['"Over grid (15%)"']] = 0
    value.loc[['"Over grid (5%)"']] = 0
    value.loc[["Paint"]] = 0
    value.loc[["Lead"]] = 0
    value.loc[["Polypropylene"]] = 0
    value.loc[["Rock"]] = 0
    value.loc[["Rock wool"]] = 0
    value.loc[["Sand"]] = 0
    value.loc[["Site preparation"]] = 0
    value.loc[["Tin"]] = 0
    value.loc[["soda ash"]] = 0
    value.loc[["steel"]] = 0
    value.loc[["tellurium"]] = 0
    value.loc[["titanium"]] = 0
    value.loc[["titanium dioxide"]] = 0
    value.loc[["vanadium"]] = 0
    value.loc[["wires"]] = 0
    value.loc[["zinc"]] = 0
    return value


_ext_constant_materials_for_om_per_capacity_installed_wind_offshore = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "E99",
    {"materials": ["Aluminium"]},
    _root,
    {"materials": _subscript_dict["materials"]},
    "_ext_constant_materials_for_om_per_capacity_installed_wind_offshore",
)

_ext_constant_materials_for_om_per_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E100", {"materials": ["Carbon fiber"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E101", {"materials": ["Copper"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E102", {"materials": ["diesel"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E103", {"materials": ["Fiberglass"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E104", {"materials": ["Glass"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E105", {"materials": ["Glass reinforcing plastic"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E106", {"materials": ["Lime"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E107", {"materials": ["Lubricant"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E108", {"materials": ["Magnesium"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E109", {"materials": ["Plastics"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E110", {"materials": ["Silicon sand"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E111", {"materials": ["Silicon wafer modules"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E112", {"materials": ["Silver"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E113", {"materials": ["synthetic oil"]}
)


@component.add(
    name='"materials for O&M per capacity installed - wind onshore"',
    units="kg/MW",
    subscripts=["materials"],
    comp_type="Constant",
    comp_subtype="Normal, External",
    depends_on={
        "__external__": "_ext_constant_materials_for_om_per_capacity_installed_wind_onshore"
    },
)
def materials_for_om_per_capacity_installed_wind_onshore():
    """
    Materials requirements for operation and maintenance per unit of new installed capacity of wind onshore.
    """
    value = xr.DataArray(
        np.nan, {"materials": _subscript_dict["materials"]}, ["materials"]
    )
    value.loc[["Adhesive"]] = 0
    def_subs = xr.zeros_like(value, dtype=bool)
    def_subs.loc[["Aluminium"]] = True
    def_subs.loc[["Carbon fiber"]] = True
    def_subs.loc[["Copper"]] = True
    def_subs.loc[["diesel"]] = True
    def_subs.loc[["Fiberglass"]] = True
    def_subs.loc[["Glass"]] = True
    def_subs.loc[["Glass reinforcing plastic"]] = True
    def_subs.loc[["Lime"]] = True
    def_subs.loc[["Lubricant"]] = True
    def_subs.loc[["Magnesium"]] = True
    def_subs.loc[["Plastics"]] = True
    def_subs.loc[["Silicon sand"]] = True
    def_subs.loc[["Silicon wafer modules"]] = True
    def_subs.loc[["Silver"]] = True
    def_subs.loc[["synthetic oil"]] = True
    value.values[
        def_subs.values
    ] = _ext_constant_materials_for_om_per_capacity_installed_wind_onshore().values[
        def_subs.values
    ]
    value.loc[["Aluminium mirrors"]] = 0
    value.loc[["Cadmium"]] = 0
    value.loc[["Cement"]] = 0
    value.loc[["Chromium"]] = 0
    value.loc[["Dy"]] = 0
    value.loc[['"Electric/electronic components"']] = 0
    value.loc[["Evacuation lines"]] = 0
    value.loc[["Foam glass"]] = 0
    value.loc[["Galium"]] = 0
    value.loc[["gravel"]] = 0
    value.loc[["Indium"]] = 0
    value.loc[["Iron"]] = 0
    value.loc[["KNO3 mined"]] = 0
    value.loc[["Asphalt"]] = 0
    value.loc[["Limestone"]] = 0
    value.loc[["Lithium"]] = 0
    value.loc[["Manganese"]] = 0
    value.loc[["Heavy equipment"]] = 0
    value.loc[["Concrete"]] = 0
    value.loc[["Molybdenum"]] = 0
    value.loc[["NaNO3 mined"]] = 0
    value.loc[["NaNO3 synthetic"]] = 0
    value.loc[["Neodymium"]] = 0
    value.loc[["Nickel"]] = 0
    value.loc[['"Over grid (15%)"']] = 0
    value.loc[['"Over grid (5%)"']] = 0
    value.loc[["Paint"]] = 0
    value.loc[["Lead"]] = 0
    value.loc[["Polypropylene"]] = 0
    value.loc[["Rock"]] = 0
    value.loc[["Rock wool"]] = 0
    value.loc[["Sand"]] = 0
    value.loc[["Site preparation"]] = 0
    value.loc[["Tin"]] = 0
    value.loc[["soda ash"]] = 0
    value.loc[["steel"]] = 0
    value.loc[["tellurium"]] = 0
    value.loc[["titanium"]] = 0
    value.loc[["titanium dioxide"]] = 0
    value.loc[["vanadium"]] = 0
    value.loc[["wires"]] = 0
    value.loc[["zinc"]] = 0
    return value


_ext_constant_materials_for_om_per_capacity_installed_wind_onshore = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "D99",
    {"materials": ["Aluminium"]},
    _root,
    {"materials": _subscript_dict["materials"]},
    "_ext_constant_materials_for_om_per_capacity_installed_wind_onshore",
)

_ext_constant_materials_for_om_per_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D100", {"materials": ["Carbon fiber"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D101", {"materials": ["Copper"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D102", {"materials": ["diesel"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D103", {"materials": ["Fiberglass"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D104", {"materials": ["Glass"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D105", {"materials": ["Glass reinforcing plastic"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D106", {"materials": ["Lime"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D107", {"materials": ["Lubricant"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D108", {"materials": ["Magnesium"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D109", {"materials": ["Plastics"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D110", {"materials": ["Silicon sand"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D111", {"materials": ["Silicon wafer modules"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D112", {"materials": ["Silver"]}
)

_ext_constant_materials_for_om_per_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D113", {"materials": ["synthetic oil"]}
)


@component.add(
    name='"materials for O&M per capacity installed - PV"',
    units="kg/MW",
    subscripts=["materials"],
    comp_type="Constant",
    comp_subtype="Normal, External",
    depends_on={
        "__external__": "_ext_constant_materials_for_om_per_capacity_installed_pv"
    },
)
def materials_for_om_per_capacity_installed_pv():
    """
    Materials requirements for operation and maintenance per unit of new installed capacity of solar PV.
    """
    value = xr.DataArray(
        np.nan, {"materials": _subscript_dict["materials"]}, ["materials"]
    )
    value.loc[["Adhesive"]] = 0
    def_subs = xr.zeros_like(value, dtype=bool)
    def_subs.loc[["Aluminium"]] = True
    def_subs.loc[["Carbon fiber"]] = True
    def_subs.loc[["Copper"]] = True
    def_subs.loc[["diesel"]] = True
    def_subs.loc[["Fiberglass"]] = True
    def_subs.loc[["Glass"]] = True
    def_subs.loc[["Glass reinforcing plastic"]] = True
    def_subs.loc[["Lime"]] = True
    def_subs.loc[["Lubricant"]] = True
    def_subs.loc[["Magnesium"]] = True
    def_subs.loc[["Plastics"]] = True
    def_subs.loc[["Silicon sand"]] = True
    def_subs.loc[["Silicon wafer modules"]] = True
    def_subs.loc[["Silver"]] = True
    def_subs.loc[["synthetic oil"]] = True
    value.values[
        def_subs.values
    ] = _ext_constant_materials_for_om_per_capacity_installed_pv().values[
        def_subs.values
    ]
    value.loc[["Aluminium mirrors"]] = 0
    value.loc[["Cadmium"]] = 0
    value.loc[["Cement"]] = 0
    value.loc[["Chromium"]] = 0
    value.loc[["Dy"]] = 0
    value.loc[['"Electric/electronic components"']] = 0
    value.loc[["Evacuation lines"]] = 0
    value.loc[["Foam glass"]] = 0
    value.loc[["Galium"]] = 0
    value.loc[["gravel"]] = 0
    value.loc[["Indium"]] = 0
    value.loc[["Iron"]] = 0
    value.loc[["KNO3 mined"]] = 0
    value.loc[["Asphalt"]] = 0
    value.loc[["Limestone"]] = 0
    value.loc[["Lithium"]] = 0
    value.loc[["Manganese"]] = 0
    value.loc[["Heavy equipment"]] = 0
    value.loc[["Concrete"]] = 0
    value.loc[["Molybdenum"]] = 0
    value.loc[["NaNO3 mined"]] = 0
    value.loc[["NaNO3 synthetic"]] = 0
    value.loc[["Neodymium"]] = 0
    value.loc[["Nickel"]] = 0
    value.loc[['"Over grid (15%)"']] = 0
    value.loc[['"Over grid (5%)"']] = 0
    value.loc[["Paint"]] = 0
    value.loc[["Lead"]] = 0
    value.loc[["Polypropylene"]] = 0
    value.loc[["Rock"]] = 0
    value.loc[["Rock wool"]] = 0
    value.loc[["Sand"]] = 0
    value.loc[["Site preparation"]] = 0
    value.loc[["Tin"]] = 0
    value.loc[["soda ash"]] = 0
    value.loc[["steel"]] = 0
    value.loc[["tellurium"]] = 0
    value.loc[["titanium"]] = 0
    value.loc[["titanium dioxide"]] = 0
    value.loc[["vanadium"]] = 0
    value.loc[["wires"]] = 0
    value.loc[["zinc"]] = 0
    return value


_ext_constant_materials_for_om_per_capacity_installed_pv = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "C99",
    {"materials": ["Aluminium"]},
    _root,
    {"materials": _subscript_dict["materials"]},
    "_ext_constant_materials_for_om_per_capacity_installed_pv",
)

_ext_constant_materials_for_om_per_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C100", {"materials": ["Carbon fiber"]}
)

_ext_constant_materials_for_om_per_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C101", {"materials": ["Copper"]}
)

_ext_constant_materials_for_om_per_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C102", {"materials": ["diesel"]}
)

_ext_constant_materials_for_om_per_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C103", {"materials": ["Fiberglass"]}
)

_ext_constant_materials_for_om_per_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C104", {"materials": ["Glass"]}
)

_ext_constant_materials_for_om_per_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C105", {"materials": ["Glass reinforcing plastic"]}
)

_ext_constant_materials_for_om_per_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C106", {"materials": ["Lime"]}
)

_ext_constant_materials_for_om_per_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C107", {"materials": ["Lubricant"]}
)

_ext_constant_materials_for_om_per_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C108", {"materials": ["Magnesium"]}
)

_ext_constant_materials_for_om_per_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C109", {"materials": ["Plastics"]}
)

_ext_constant_materials_for_om_per_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C110", {"materials": ["Silicon sand"]}
)

_ext_constant_materials_for_om_per_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C111", {"materials": ["Silicon wafer modules"]}
)

_ext_constant_materials_for_om_per_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C112", {"materials": ["Silver"]}
)

_ext_constant_materials_for_om_per_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C113", {"materials": ["synthetic oil"]}
)


@component.add(
    name='"water for O&M - CSP"',
    units="kg/MW",
    subscripts=["water0"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_water_for_om_csp"},
)
def water_for_om_csp():
    return _ext_constant_water_for_om_csp()


_ext_constant_water_for_om_csp = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "B114",
    {"water0": ['"clean, pumped water"']},
    _root,
    {"water0": _subscript_dict["water0"]},
    "_ext_constant_water_for_om_csp",
)

_ext_constant_water_for_om_csp.add(
    "inputs_EU.xlsx", "Materials", "B115", {"water0": ['"distilled, deionized water"']}
)


@component.add(
    name='"materials per capacity installed - PV 0"',
    units="kg/MW",
    subscripts=["materials"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_materials_per_capacity_installed_pv_0"},
)
def materials_per_capacity_installed_pv_0():
    return _ext_constant_materials_per_capacity_installed_pv_0()


_ext_constant_materials_per_capacity_installed_pv_0 = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "C5",
    {"materials": ["Adhesive"]},
    _root,
    {"materials": _subscript_dict["materials"]},
    "_ext_constant_materials_per_capacity_installed_pv_0",
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C6", {"materials": ["Aluminium"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C7", {"materials": ["Aluminium mirrors"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C8", {"materials": ["Cadmium"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C9", {"materials": ["Carbon fiber"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C10", {"materials": ["Cement"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C11", {"materials": ["Chromium"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C12", {"materials": ["Copper"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C13", {"materials": ["diesel"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C14", {"materials": ["Dy"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx",
    "Materials",
    "C15",
    {"materials": ['"Electric/electronic components"']},
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C16", {"materials": ["Evacuation lines"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C17", {"materials": ["Fiberglass"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C18", {"materials": ["Foam glass"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C19", {"materials": ["Galium"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C20", {"materials": ["Glass"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C21", {"materials": ["Glass reinforcing plastic"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C22", {"materials": ["gravel"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C23", {"materials": ["Indium"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C24", {"materials": ["Iron"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C25", {"materials": ["KNO3 mined"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C26", {"materials": ["Asphalt"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C27", {"materials": ["Lime"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C28", {"materials": ["Limestone"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C29", {"materials": ["Lithium"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C30", {"materials": ["Lubricant"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C31", {"materials": ["Magnesium"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C32", {"materials": ["Manganese"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C33", {"materials": ["Heavy equipment"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C34", {"materials": ["Concrete"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C35", {"materials": ["Molybdenum"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C36", {"materials": ["NaNO3 mined"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C37", {"materials": ["NaNO3 synthetic"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C38", {"materials": ["Neodymium"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C39", {"materials": ["Nickel"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C40", {"materials": ['"Over grid (15%)"']}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C41", {"materials": ['"Over grid (5%)"']}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C42", {"materials": ["Paint"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C43", {"materials": ["Lead"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C44", {"materials": ["Plastics"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C45", {"materials": ["Polypropylene"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C46", {"materials": ["Rock"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C47", {"materials": ["Rock wool"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C48", {"materials": ["Sand"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C49", {"materials": ["Silicon sand"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C50", {"materials": ["Silicon wafer modules"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C51", {"materials": ["Silver"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C52", {"materials": ["Site preparation"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C53", {"materials": ["Tin"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C54", {"materials": ["soda ash"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C55", {"materials": ["steel"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C56", {"materials": ["synthetic oil"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C57", {"materials": ["tellurium"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C58", {"materials": ["titanium"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C59", {"materials": ["titanium dioxide"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C60", {"materials": ["vanadium"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C61", {"materials": ["wires"]}
)

_ext_constant_materials_per_capacity_installed_pv_0.add(
    "inputs_EU.xlsx", "Materials", "C62", {"materials": ["zinc"]}
)


@component.add(
    name="cum materials requirements for RES elec",
    units="Mt",
    subscripts=["materials", "scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cum_materials_requirements_for_res_elec": 1},
    other_deps={
        "_integ_cum_materials_requirements_for_res_elec": {
            "initial": {"initial_cumulated_material_requirements_for_res_elec_1995": 1},
            "step": {"total_materials_required_for_res_elec_mt": 1},
        }
    },
)
def cum_materials_requirements_for_res_elec():
    """
    Total cumulative materials requirements for the installation and O&M of RES for electricity generation.
    """
    return _integ_cum_materials_requirements_for_res_elec()


_integ_cum_materials_requirements_for_res_elec = Integ(
    lambda: total_materials_required_for_res_elec_mt(),
    lambda: xr.DataArray(
        initial_cumulated_material_requirements_for_res_elec_1995(),
        {
            "materials": _subscript_dict["materials"],
            "scenarios": _subscript_dict["scenarios"],
        },
        ["materials", "scenarios"],
    ),
    "_integ_cum_materials_requirements_for_res_elec",
)


@component.add(
    name="MJ per EJ",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_mj_per_ej"},
)
def mj_per_ej():
    return _ext_constant_mj_per_ej()


_ext_constant_mj_per_ej = ExtConstant(
    "inputs_EU.xlsx", "Constants", "G12", {}, _root, {}, "_ext_constant_mj_per_ej"
)


@component.add(
    name='"Initial energy cons per unit of material cons (virgin)"',
    units="MJ/kg",
    subscripts=["materials"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin"
    },
)
def initial_energy_cons_per_unit_of_material_cons_virgin():
    """
    Energy consumption required to extract and use virgin materials per unit of material consumption.
    """
    return _ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin()


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "Y5",
    {"materials": ["Adhesive"]},
    _root,
    {"materials": _subscript_dict["materials"]},
    "_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin",
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y6", {"materials": ["Aluminium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y7", {"materials": ["Aluminium mirrors"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y8", {"materials": ["Cadmium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y9", {"materials": ["Carbon fiber"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y10", {"materials": ["Cement"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y11", {"materials": ["Chromium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y12", {"materials": ["Copper"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y13", {"materials": ["diesel"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y14", {"materials": ["Dy"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx",
    "Materials",
    "Y15",
    {"materials": ['"Electric/electronic components"']},
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y16", {"materials": ["Evacuation lines"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y17", {"materials": ["Fiberglass"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y18", {"materials": ["Foam glass"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y19", {"materials": ["Galium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y20", {"materials": ["Glass"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y21", {"materials": ["Glass reinforcing plastic"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y22", {"materials": ["gravel"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y23", {"materials": ["Indium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y24", {"materials": ["Iron"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y25", {"materials": ["KNO3 mined"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y26", {"materials": ["Asphalt"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y27", {"materials": ["Lime"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y28", {"materials": ["Limestone"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y29", {"materials": ["Lithium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y30", {"materials": ["Lubricant"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y31", {"materials": ["Magnesium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y32", {"materials": ["Manganese"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y33", {"materials": ["Heavy equipment"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y34", {"materials": ["Concrete"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y35", {"materials": ["Molybdenum"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y36", {"materials": ["NaNO3 mined"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y37", {"materials": ["NaNO3 synthetic"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y38", {"materials": ["Neodymium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y39", {"materials": ["Nickel"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y40", {"materials": ['"Over grid (15%)"']}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y41", {"materials": ['"Over grid (5%)"']}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y42", {"materials": ["Paint"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y43", {"materials": ["Lead"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y44", {"materials": ["Plastics"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y45", {"materials": ["Polypropylene"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y46", {"materials": ["Rock"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y47", {"materials": ["Rock wool"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y48", {"materials": ["Sand"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y49", {"materials": ["Silicon sand"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y50", {"materials": ["Silicon wafer modules"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y51", {"materials": ["Silver"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y52", {"materials": ["Site preparation"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y53", {"materials": ["Tin"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y54", {"materials": ["soda ash"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y55", {"materials": ["steel"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y56", {"materials": ["synthetic oil"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y57", {"materials": ["tellurium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y58", {"materials": ["titanium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y59", {"materials": ["titanium dioxide"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y60", {"materials": ["vanadium"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y61", {"materials": ["wires"]}
)

_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "inputs_EU.xlsx", "Materials", "Y62", {"materials": ["zinc"]}
)


@component.add(
    name='"materials per new capacity installed - CSP"',
    units="kg/MW",
    subscripts=["materials"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_materials_per_new_capacity_installed_csp"
    },
)
def materials_per_new_capacity_installed_csp():
    """
    Materials requirements per unit of new installed capacity of solar CSP.
    """
    return _ext_constant_materials_per_new_capacity_installed_csp()


_ext_constant_materials_per_new_capacity_installed_csp = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "B5",
    {"materials": ["Adhesive"]},
    _root,
    {"materials": _subscript_dict["materials"]},
    "_ext_constant_materials_per_new_capacity_installed_csp",
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B6", {"materials": ["Aluminium"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B7", {"materials": ["Aluminium mirrors"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B8", {"materials": ["Cadmium"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B9", {"materials": ["Carbon fiber"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B10", {"materials": ["Cement"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B11", {"materials": ["Chromium"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B12", {"materials": ["Copper"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B13", {"materials": ["diesel"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B14", {"materials": ["Dy"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx",
    "Materials",
    "B15",
    {"materials": ['"Electric/electronic components"']},
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B16", {"materials": ["Evacuation lines"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B17", {"materials": ["Fiberglass"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B18", {"materials": ["Foam glass"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B19", {"materials": ["Galium"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B20", {"materials": ["Glass"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B21", {"materials": ["Glass reinforcing plastic"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B22", {"materials": ["gravel"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B23", {"materials": ["Indium"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B24", {"materials": ["Iron"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B25", {"materials": ["KNO3 mined"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B26", {"materials": ["Asphalt"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B27", {"materials": ["Lime"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B28", {"materials": ["Limestone"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B29", {"materials": ["Lithium"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B30", {"materials": ["Lubricant"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B31", {"materials": ["Magnesium"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B32", {"materials": ["Manganese"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B33", {"materials": ["Heavy equipment"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B34", {"materials": ["Concrete"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B35", {"materials": ["Molybdenum"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B36", {"materials": ["NaNO3 mined"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B37", {"materials": ["NaNO3 synthetic"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B38", {"materials": ["Neodymium"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B39", {"materials": ["Nickel"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B40", {"materials": ['"Over grid (15%)"']}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B41", {"materials": ['"Over grid (5%)"']}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B42", {"materials": ["Paint"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B43", {"materials": ["Lead"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B44", {"materials": ["Plastics"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B45", {"materials": ["Polypropylene"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B46", {"materials": ["Rock"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B47", {"materials": ["Rock wool"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B48", {"materials": ["Sand"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B49", {"materials": ["Silicon sand"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B50", {"materials": ["Silicon wafer modules"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B51", {"materials": ["Silver"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B52", {"materials": ["Site preparation"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B53", {"materials": ["Tin"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B54", {"materials": ["soda ash"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B55", {"materials": ["steel"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B56", {"materials": ["synthetic oil"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B57", {"materials": ["tellurium"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B58", {"materials": ["titanium"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B59", {"materials": ["titanium dioxide"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B60", {"materials": ["vanadium"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B61", {"materials": ["wires"]}
)

_ext_constant_materials_per_new_capacity_installed_csp.add(
    "inputs_EU.xlsx", "Materials", "B62", {"materials": ["zinc"]}
)


@component.add(
    name='"materials per new capacity installed - wind offshore"',
    units="kg/MW",
    subscripts=["materials"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_materials_per_new_capacity_installed_wind_offshore"
    },
)
def materials_per_new_capacity_installed_wind_offshore():
    """
    Materials requirements per unit of new installed capacity of wind offshore.
    """
    return _ext_constant_materials_per_new_capacity_installed_wind_offshore()


_ext_constant_materials_per_new_capacity_installed_wind_offshore = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "E5",
    {"materials": ["Adhesive"]},
    _root,
    {"materials": _subscript_dict["materials"]},
    "_ext_constant_materials_per_new_capacity_installed_wind_offshore",
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E6", {"materials": ["Aluminium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E7", {"materials": ["Aluminium mirrors"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E8", {"materials": ["Cadmium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E9", {"materials": ["Carbon fiber"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E10", {"materials": ["Cement"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E11", {"materials": ["Chromium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E12", {"materials": ["Copper"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E13", {"materials": ["diesel"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E14", {"materials": ["Dy"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx",
    "Materials",
    "E15",
    {"materials": ['"Electric/electronic components"']},
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E16", {"materials": ["Evacuation lines"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E17", {"materials": ["Fiberglass"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E18", {"materials": ["Foam glass"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E19", {"materials": ["Galium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E20", {"materials": ["Glass"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E21", {"materials": ["Glass reinforcing plastic"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E22", {"materials": ["gravel"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E23", {"materials": ["Indium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E24", {"materials": ["Iron"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E25", {"materials": ["KNO3 mined"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E26", {"materials": ["Asphalt"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E27", {"materials": ["Lime"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E28", {"materials": ["Limestone"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E29", {"materials": ["Lithium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E30", {"materials": ["Lubricant"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E31", {"materials": ["Magnesium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E32", {"materials": ["Manganese"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E33", {"materials": ["Heavy equipment"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E34", {"materials": ["Concrete"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E35", {"materials": ["Molybdenum"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E36", {"materials": ["NaNO3 mined"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E37", {"materials": ["NaNO3 synthetic"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E38", {"materials": ["Neodymium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E39", {"materials": ["Nickel"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E40", {"materials": ['"Over grid (15%)"']}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E41", {"materials": ['"Over grid (5%)"']}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E42", {"materials": ["Paint"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E43", {"materials": ["Lead"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E44", {"materials": ["Plastics"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E45", {"materials": ["Polypropylene"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E46", {"materials": ["Rock"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E47", {"materials": ["Rock wool"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E48", {"materials": ["Sand"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E49", {"materials": ["Silicon sand"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E50", {"materials": ["Silicon wafer modules"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E51", {"materials": ["Silver"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E52", {"materials": ["Site preparation"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E53", {"materials": ["Tin"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E54", {"materials": ["soda ash"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E55", {"materials": ["steel"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E56", {"materials": ["synthetic oil"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E57", {"materials": ["tellurium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E58", {"materials": ["titanium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E59", {"materials": ["titanium dioxide"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E60", {"materials": ["vanadium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E61", {"materials": ["wires"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_offshore.add(
    "inputs_EU.xlsx", "Materials", "E62", {"materials": ["zinc"]}
)


@component.add(
    name='"materials per new capacity installed - wind onshore"',
    units="kg/MW",
    subscripts=["materials"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_materials_per_new_capacity_installed_wind_onshore"
    },
)
def materials_per_new_capacity_installed_wind_onshore():
    """
    Materials requirements per unit of new installed capacity of wind onshore.
    """
    return _ext_constant_materials_per_new_capacity_installed_wind_onshore()


_ext_constant_materials_per_new_capacity_installed_wind_onshore = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "D5",
    {"materials": ["Adhesive"]},
    _root,
    {"materials": _subscript_dict["materials"]},
    "_ext_constant_materials_per_new_capacity_installed_wind_onshore",
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D6", {"materials": ["Aluminium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D7", {"materials": ["Aluminium mirrors"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D8", {"materials": ["Cadmium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D9", {"materials": ["Carbon fiber"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D10", {"materials": ["Cement"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D11", {"materials": ["Chromium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D12", {"materials": ["Copper"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D13", {"materials": ["diesel"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D14", {"materials": ["Dy"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx",
    "Materials",
    "D15",
    {"materials": ['"Electric/electronic components"']},
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D16", {"materials": ["Evacuation lines"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D17", {"materials": ["Fiberglass"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D18", {"materials": ["Foam glass"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D19", {"materials": ["Galium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D20", {"materials": ["Glass"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D21", {"materials": ["Glass reinforcing plastic"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D22", {"materials": ["gravel"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D23", {"materials": ["Indium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D24", {"materials": ["Iron"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D25", {"materials": ["KNO3 mined"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D26", {"materials": ["Asphalt"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D27", {"materials": ["Lime"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D28", {"materials": ["Limestone"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D29", {"materials": ["Lithium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D30", {"materials": ["Lubricant"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D31", {"materials": ["Magnesium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D32", {"materials": ["Manganese"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D33", {"materials": ["Heavy equipment"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D34", {"materials": ["Concrete"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D35", {"materials": ["Molybdenum"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D36", {"materials": ["NaNO3 mined"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D37", {"materials": ["NaNO3 synthetic"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D38", {"materials": ["Neodymium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D39", {"materials": ["Nickel"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D40", {"materials": ['"Over grid (15%)"']}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D41", {"materials": ['"Over grid (5%)"']}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D42", {"materials": ["Paint"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D43", {"materials": ["Lead"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D44", {"materials": ["Plastics"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D45", {"materials": ["Polypropylene"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D46", {"materials": ["Rock"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D47", {"materials": ["Rock wool"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D48", {"materials": ["Sand"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D49", {"materials": ["Silicon sand"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D50", {"materials": ["Silicon wafer modules"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D51", {"materials": ["Silver"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D52", {"materials": ["Site preparation"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D53", {"materials": ["Tin"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D54", {"materials": ["soda ash"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D55", {"materials": ["steel"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D56", {"materials": ["synthetic oil"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D57", {"materials": ["tellurium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D58", {"materials": ["titanium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D59", {"materials": ["titanium dioxide"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D60", {"materials": ["vanadium"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D61", {"materials": ["wires"]}
)

_ext_constant_materials_per_new_capacity_installed_wind_onshore.add(
    "inputs_EU.xlsx", "Materials", "D62", {"materials": ["zinc"]}
)


@component.add(
    name="initial cumulated material requirements for RES elec 1995",
    units="Mt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_cumulated_material_requirements_for_res_elec_1995():
    return 0


@component.add(
    name='"materials per new capacity installed - PV"',
    units="kg/MW",
    subscripts=["materials"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_materials_per_new_capacity_installed_pv"
    },
)
def materials_per_new_capacity_installed_pv():
    """
    Materials requirements per unit of new installed capacity of solar PV.
    """
    return _ext_constant_materials_per_new_capacity_installed_pv()


_ext_constant_materials_per_new_capacity_installed_pv = ExtConstant(
    "inputs_EU.xlsx",
    "Materials",
    "C5",
    {"materials": ["Adhesive"]},
    _root,
    {"materials": _subscript_dict["materials"]},
    "_ext_constant_materials_per_new_capacity_installed_pv",
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C6", {"materials": ["Aluminium"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C7", {"materials": ["Aluminium mirrors"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C8", {"materials": ["Cadmium"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C9", {"materials": ["Carbon fiber"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C10", {"materials": ["Cement"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C11", {"materials": ["Chromium"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C12", {"materials": ["Copper"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C13", {"materials": ["diesel"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C14", {"materials": ["Dy"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx",
    "Materials",
    "C15",
    {"materials": ['"Electric/electronic components"']},
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C16", {"materials": ["Evacuation lines"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C17", {"materials": ["Fiberglass"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C18", {"materials": ["Foam glass"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C19", {"materials": ["Galium"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C20", {"materials": ["Glass"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C21", {"materials": ["Glass reinforcing plastic"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C22", {"materials": ["gravel"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C23", {"materials": ["Indium"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C24", {"materials": ["Iron"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C25", {"materials": ["KNO3 mined"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C26", {"materials": ["Asphalt"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C27", {"materials": ["Lime"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C28", {"materials": ["Limestone"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C29", {"materials": ["Lithium"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C30", {"materials": ["Lubricant"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C31", {"materials": ["Magnesium"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C32", {"materials": ["Manganese"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C33", {"materials": ["Heavy equipment"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C34", {"materials": ["Concrete"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C35", {"materials": ["Molybdenum"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C36", {"materials": ["NaNO3 mined"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C37", {"materials": ["NaNO3 synthetic"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C38", {"materials": ["Neodymium"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C39", {"materials": ["Nickel"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C40", {"materials": ['"Over grid (15%)"']}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C41", {"materials": ['"Over grid (5%)"']}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C42", {"materials": ["Paint"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C43", {"materials": ["Lead"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C44", {"materials": ["Plastics"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C45", {"materials": ["Polypropylene"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C46", {"materials": ["Rock"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C47", {"materials": ["Rock wool"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C48", {"materials": ["Sand"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C49", {"materials": ["Silicon sand"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C50", {"materials": ["Silicon wafer modules"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C51", {"materials": ["Silver"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C52", {"materials": ["Site preparation"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C53", {"materials": ["Tin"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C54", {"materials": ["soda ash"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C55", {"materials": ["steel"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C56", {"materials": ["synthetic oil"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C57", {"materials": ["tellurium"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C58", {"materials": ["titanium"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C59", {"materials": ["titanium dioxide"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C60", {"materials": ["vanadium"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C61", {"materials": ["wires"]}
)

_ext_constant_materials_per_new_capacity_installed_pv.add(
    "inputs_EU.xlsx", "Materials", "C62", {"materials": ["zinc"]}
)


@component.add(
    name="kg per Mt",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_kg_per_mt"},
)
def kg_per_mt():
    """
    Conversion factor from Mt to kg.
    """
    return _ext_constant_kg_per_mt()


_ext_constant_kg_per_mt = ExtConstant(
    "inputs_EU.xlsx", "Constants", "G9", {}, _root, {}, "_ext_constant_kg_per_mt"
)


@component.add(
    name="M per T",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_m_per_t"},
)
def m_per_t():
    """
    Conversion factor from Tera (T, 1e12) to Mega (M, 1e6).
    """
    return _ext_constant_m_per_t()


_ext_constant_m_per_t = ExtConstant(
    "inputs_EU.xlsx", "Constants", "G8", {}, _root, {}, "_ext_constant_m_per_t"
)


@component.add(
    name="Elec generation variable from RES TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_elec_generation_from_solar_pv_twh": 1,
        "fe_elec_generation_from_csp_twh": 1,
        "fe_elec_generation_from_onshore_wind_twh": 1,
        "fe_elec_generation_from_offshore_wind_twh": 1,
    },
)
def elec_generation_variable_from_res_twh():
    """
    Variable electricity generation from RES.
    """
    return (
        fe_elec_generation_from_solar_pv_twh()
        + fe_elec_generation_from_csp_twh()
        + fe_elec_generation_from_onshore_wind_twh()
        + fe_elec_generation_from_offshore_wind_twh()
    )


@component.add(
    name="Total gen losses demand for Heat plants EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ped_gases_for_heat_plants_ej": 1,
        "efficiency_gases_for_heat_plants": 1,
        "efficiency_liquids_for_heat_plants": 1,
        "ped_oil_for_heat_plants_ej": 1,
        "ped_coal_for_heat_plants_ej": 1,
        "efficiency_coal_for_heat_plants": 1,
    },
)
def total_gen_losses_demand_for_heat_plants_ej():
    """
    Total generation losses associated to heat plants.
    """
    return (
        ped_gases_for_heat_plants_ej() * (1 - efficiency_gases_for_heat_plants())
        + ped_oil_for_heat_plants_ej() * (1 - efficiency_liquids_for_heat_plants())
        + ped_coal_for_heat_plants_ej() * (1 - efficiency_coal_for_heat_plants())
    )


@component.add(
    name="Total gen losses demand for CHP plants EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ped_gas_for_chp_plants_ej": 1,
        "efficiency_heat_gas_chp_plants": 1,
        "efficiency_elec_gas_chp_plants": 1,
        "ped_oil_for_chp_plants_ej": 1,
        "efficiency_elec_oil_chp_plants": 1,
        "efficiency_heat_oil_chp_plants": 1,
        "efficiency_heat_coal_chp_plants": 1,
        "ped_coal_for_chp_plants_ej": 1,
        "efficiency_elec_coal_chp_plants": 1,
    },
)
def total_gen_losses_demand_for_chp_plants_ej():
    """
    Total generation losses associated to CHP plants.
    """
    return (
        ped_gas_for_chp_plants_ej()
        * (1 - efficiency_elec_gas_chp_plants() - efficiency_heat_gas_chp_plants())
        + ped_oil_for_chp_plants_ej()
        * (1 - efficiency_elec_oil_chp_plants() - efficiency_heat_oil_chp_plants())
        + ped_coal_for_chp_plants_ej()
        * (1 - efficiency_heat_coal_chp_plants() - efficiency_elec_coal_chp_plants())
    )


@component.add(
    name="new required capacity nuclear",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "installed_capacity_nuclear_tw": 1,
        "demand_elec_nre_twh": 1,
        "p_nuclear_elec_gen": 1,
        "effects_shortage_uranium": 1,
        "cp_limit_nuclear": 1,
    },
)
def new_required_capacity_nuclear():
    """
    New required capacity of nuclear power plants.
    """
    return (
        np.maximum(
            0,
            if_then_else(
                time() < 2015,
                lambda: xr.DataArray(
                    0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
                ),
                lambda: if_then_else(
                    demand_elec_nre_twh() == 0,
                    lambda: xr.DataArray(
                        0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
                    ),
                    lambda: installed_capacity_nuclear_tw() * p_nuclear_elec_gen(),
                ),
            ),
        )
        * effects_shortage_uranium()
        * cp_limit_nuclear()
    )


@component.add(
    name='"replacement RES for heat-com"',
    units="Dmnl",
    subscripts=["RES heat"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_replacement_res_for_heatcom"},
)
def replacement_res_for_heatcom():
    """
    If =1, we asume that all the power that reaches the end of its lifetime is replaced.
    """
    return _ext_constant_replacement_res_for_heatcom()


_ext_constant_replacement_res_for_heatcom = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "D17",
    {"RES heat": ['"solar-heat"']},
    _root,
    {"RES heat": _subscript_dict["RES heat"]},
    "_ext_constant_replacement_res_for_heatcom",
)

_ext_constant_replacement_res_for_heatcom.add(
    "inputs_EU.xlsx", "Parameters", "D18", {"RES heat": ['"geot-heat"']}
)

_ext_constant_replacement_res_for_heatcom.add(
    "inputs_EU.xlsx", "Parameters", "D19", {"RES heat": ['"solid bioE-heat"']}
)


@component.add(
    name="Losses solar for heat",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_losses_solar_for_heat"},
)
def losses_solar_for_heat():
    """
    Losses (pipelina and storage) of solar for heat.
    """
    return _ext_constant_losses_solar_for_heat()


_ext_constant_losses_solar_for_heat = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G42",
    {},
    _root,
    {},
    "_ext_constant_losses_solar_for_heat",
)


@component.add(
    name='"Cp-ini RES for heat"',
    units="Dmnl",
    subscripts=["RES heat"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_cpini_res_for_heat"},
)
def cpini_res_for_heat():
    return _ext_constant_cpini_res_for_heat()


_ext_constant_cpini_res_for_heat = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "F17",
    {"RES heat": ['"solar-heat"']},
    _root,
    {"RES heat": _subscript_dict["RES heat"]},
    "_ext_constant_cpini_res_for_heat",
)

_ext_constant_cpini_res_for_heat.add(
    "inputs_EU.xlsx", "Parameters", "F18", {"RES heat": ['"geot-heat"']}
)

_ext_constant_cpini_res_for_heat.add(
    "inputs_EU.xlsx", "Parameters", "F19", {"RES heat": ['"solid bioE-heat"']}
)


@component.add(
    name="Efficiency geothermal for heat",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_efficiency_geothermal_for_heat"},
)
def efficiency_geothermal_for_heat():
    return _ext_constant_efficiency_geothermal_for_heat()


_ext_constant_efficiency_geothermal_for_heat = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G43",
    {},
    _root,
    {},
    "_ext_constant_efficiency_geothermal_for_heat",
)


@component.add(
    name="f1 solar panels for heat",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_f1_solar_panels_for_heat"},
)
def f1_solar_panels_for_heat():
    """
    Efficiency solar panels for heat.
    """
    return _ext_constant_f1_solar_panels_for_heat()


_ext_constant_f1_solar_panels_for_heat = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "G41",
    {},
    _root,
    {},
    "_ext_constant_f1_solar_panels_for_heat",
)


@component.add(
    name="P geothermal for heat",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_geothermal_for_heat"},
)
def p_geothermal_for_heat():
    """
    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_geothermal_for_heat()


_ext_constant_p_geothermal_for_heat = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C61",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_geothermal_for_heat",
)

_ext_constant_p_geothermal_for_heat.add(
    "inputs_EU.xlsx", "SCEN1", "C61", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_geothermal_for_heat.add(
    "inputs_EU.xlsx", "SCEN2", "C61", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_geothermal_for_heat.add(
    "inputs_EU.xlsx", "SCEN3", "C61", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_geothermal_for_heat.add(
    "inputs_EU.xlsx", "SCEN4", "C61", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_geothermal_for_heat.add(
    "inputs_EU.xlsx", "User defined", "C61", {"scenarios": ["User defined"]}
)


@component.add(
    name='"past RES growth for heat-com"',
    units="1/Year",
    subscripts=["RES heat"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_past_res_growth_for_heatcom"},
)
def past_res_growth_for_heatcom():
    """
    Historic annual average growth.
    """
    return _ext_constant_past_res_growth_for_heatcom()


_ext_constant_past_res_growth_for_heatcom = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C101",
    {"RES heat": ['"solar-heat"']},
    _root,
    {"RES heat": _subscript_dict["RES heat"]},
    "_ext_constant_past_res_growth_for_heatcom",
)

_ext_constant_past_res_growth_for_heatcom.add(
    "inputs_EU.xlsx", "Constants", "C102", {"RES heat": ['"geot-heat"']}
)

_ext_constant_past_res_growth_for_heatcom.add(
    "inputs_EU.xlsx", "Constants", "C103", {"RES heat": ['"solid bioE-heat"']}
)


@component.add(
    name='"installed capacity RES heat-com TW"',
    units="TW",
    subscripts=["RES heat", "scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_installed_capacity_res_heatcom_tw": 1},
    other_deps={
        "_integ_installed_capacity_res_heatcom_tw": {
            "initial": {"initial_value_res_for_heatcom": 1},
            "step": {
                "new_res_capacity_for_heatcom_tw": 1,
                "replacement_res_for_heatcom_tw": 1,
                "wear_res_capacity_for_heatcom_tw": 1,
            },
        }
    },
)
def installed_capacity_res_heatcom_tw():
    """
    Installed capacity of RES for commercial heat.
    """
    return _integ_installed_capacity_res_heatcom_tw()


_integ_installed_capacity_res_heatcom_tw = Integ(
    lambda: new_res_capacity_for_heatcom_tw()
    + replacement_res_for_heatcom_tw()
    - wear_res_capacity_for_heatcom_tw(),
    lambda: initial_value_res_for_heatcom().expand_dims(
        {"scenarios": _subscript_dict["scenarios"]}, 1
    ),
    "_integ_installed_capacity_res_heatcom_tw",
)


@component.add(
    name='"initial value RES for heat-com"',
    units="TW",
    subscripts=["RES heat"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_value_res_for_heatcom"},
)
def initial_value_res_for_heatcom():
    """
    RES supply by technology for commercial heat in the year 1995.
    """
    return _ext_constant_initial_value_res_for_heatcom()


_ext_constant_initial_value_res_for_heatcom = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "H66",
    {"RES heat": ['"solar-heat"']},
    _root,
    {"RES heat": _subscript_dict["RES heat"]},
    "_ext_constant_initial_value_res_for_heatcom",
)

_ext_constant_initial_value_res_for_heatcom.add(
    "inputs_EU.xlsx", "Constants", "H67", {"RES heat": ['"geot-heat"']}
)

_ext_constant_initial_value_res_for_heatcom.add(
    "inputs_EU.xlsx", "Constants", "H65", {"RES heat": ['"solid bioE-heat"']}
)


@component.add(
    name="P solar for heat",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_solar_for_heat"},
)
def p_solar_for_heat():
    """
    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_solar_for_heat()


_ext_constant_p_solar_for_heat = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C60",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_solar_for_heat",
)

_ext_constant_p_solar_for_heat.add(
    "inputs_EU.xlsx", "SCEN1", "C60", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_solar_for_heat.add(
    "inputs_EU.xlsx", "SCEN2", "C60", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_solar_for_heat.add(
    "inputs_EU.xlsx", "SCEN3", "C60", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_solar_for_heat.add(
    "inputs_EU.xlsx", "SCEN4", "C60", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_solar_for_heat.add(
    "inputs_EU.xlsx", "User defined", "C60", {"scenarios": ["User defined"]}
)


@component.add(
    name="life time RES for heat",
    units="Year",
    subscripts=["RES heat"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_life_time_res_for_heat"},
)
def life_time_res_for_heat():
    """
    Lifetime RES thermal technologies and plants.
    """
    return _ext_constant_life_time_res_for_heat()


_ext_constant_life_time_res_for_heat = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C17",
    {"RES heat": ['"solar-heat"']},
    _root,
    {"RES heat": _subscript_dict["RES heat"]},
    "_ext_constant_life_time_res_for_heat",
)

_ext_constant_life_time_res_for_heat.add(
    "inputs_EU.xlsx", "Parameters", "C18", {"RES heat": ['"geot-heat"']}
)

_ext_constant_life_time_res_for_heat.add(
    "inputs_EU.xlsx", "Parameters", "C19", {"RES heat": ['"solid bioE-heat"']}
)


@component.add(
    name='"wear RES capacity for heat-com TW"',
    units="TW/Year",
    subscripts=["RES heat", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"installed_capacity_res_heatcom_tw": 1, "life_time_res_for_heat": 1},
)
def wear_res_capacity_for_heatcom_tw():
    """
    Decommission of the capacity that reachs the end of its lifetime.
    """
    return installed_capacity_res_heatcom_tw() / life_time_res_for_heat()


@component.add(
    name="Potential FE gen Elec fossil fuel CHP plants EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_fe_gen_elec_coal_chp_plants_ej": 1,
        "potential_fe_gen_elec_gas_chp_plants_ej": 1,
        "potential_fe_gen_elec_liquids_chp_plants_ej": 1,
    },
)
def potential_fe_gen_elec_fossil_fuel_chp_plants_ej():
    """
    Potential electricity generation from CHP plants burning fossil fuels.
    """
    return (
        potential_fe_gen_elec_coal_chp_plants_ej()
        + potential_fe_gen_elec_gas_chp_plants_ej()
        + potential_fe_gen_elec_liquids_chp_plants_ej()
    )


@component.add(
    name="efficiency Heat oil CHP plants",
    units="Dmnl",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_efficiency_heat_oil_chp_plants",
        "__data__": "_ext_data_efficiency_heat_oil_chp_plants",
        "time": 1,
    },
)
def efficiency_heat_oil_chp_plants():
    """
    Efficiency of heat in oil CHP plants. We assume constant last data IEA.
    """
    return _ext_data_efficiency_heat_oil_chp_plants(time())


_ext_data_efficiency_heat_oil_chp_plants = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "219",
    "B228",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_efficiency_heat_oil_chp_plants",
)


@component.add(
    name="FED heat liquids CHP plants EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fed_heat_fossil_fuels_chp_plants_ej": 1, "share_chp_plants_oil": 1},
)
def fed_heat_liquids_chp_plants_ej():
    """
    Final energy demand of oil to produce heat in CHP plants.
    """
    return fed_heat_fossil_fuels_chp_plants_ej() * share_chp_plants_oil()


@component.add(
    name="Potential FE gen Elec liquids CHP plants EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_oil_for_chp_plants_ej": 1, "efficiency_elec_oil_chp_plants": 1},
)
def potential_fe_gen_elec_liquids_chp_plants_ej():
    """
    Potential electricity generation from CHP plants burning oil liquids.
    """
    return ped_oil_for_chp_plants_ej() * efficiency_elec_oil_chp_plants()


@component.add(
    name="efficiency Elec coal CHP plants",
    units="Dmnl",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_efficiency_elec_coal_chp_plants",
        "__data__": "_ext_data_efficiency_elec_coal_chp_plants",
        "time": 1,
    },
)
def efficiency_elec_coal_chp_plants():
    """
    Efficiency of elec in coal CHP plants. We assume constant last data IEA.
    """
    return _ext_data_efficiency_elec_coal_chp_plants(time())


_ext_data_efficiency_elec_coal_chp_plants = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "219",
    "B224",
    None,
    {},
    _root,
    {},
    "_ext_data_efficiency_elec_coal_chp_plants",
)


@component.add(
    name="efficiency Elec gas CHP plants",
    units="Dmnl",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_efficiency_elec_gas_chp_plants",
        "__data__": "_ext_data_efficiency_elec_gas_chp_plants",
        "time": 1,
    },
)
def efficiency_elec_gas_chp_plants():
    """
    Efficiency of elec in gas CHP plants. We assume constant last data IEA.
    """
    return _ext_data_efficiency_elec_gas_chp_plants(time())


_ext_data_efficiency_elec_gas_chp_plants = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "219",
    "B221",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_efficiency_elec_gas_chp_plants",
)


@component.add(
    name="efficiency Elec oil CHP plants",
    units="Dmnl",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_efficiency_elec_oil_chp_plants",
        "__data__": "_ext_data_efficiency_elec_oil_chp_plants",
        "time": 1,
    },
)
def efficiency_elec_oil_chp_plants():
    """
    Efficiency of liquids in gas CHP plants. We assume constant last data IEA.
    """
    return _ext_data_efficiency_elec_oil_chp_plants(time())


_ext_data_efficiency_elec_oil_chp_plants = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "219",
    "B227",
    None,
    {},
    _root,
    {},
    "_ext_data_efficiency_elec_oil_chp_plants",
)


@component.add(
    name="Potential FE gen Elec coal CHP plants EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_coal_for_chp_plants_ej": 1, "efficiency_elec_coal_chp_plants": 1},
)
def potential_fe_gen_elec_coal_chp_plants_ej():
    """
    Potential electricity generation from CHP plants burning coal.
    """
    return ped_coal_for_chp_plants_ej() * efficiency_elec_coal_chp_plants()


@component.add(
    name="Potential FE gen Elec gas CHP plants EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_gas_for_chp_plants_ej": 1, "efficiency_elec_gas_chp_plants": 1},
)
def potential_fe_gen_elec_gas_chp_plants_ej():
    """
    Potential electricity generation from CHP plants burning natural gas.
    """
    return ped_gas_for_chp_plants_ej() * efficiency_elec_gas_chp_plants()


@component.add(
    name="FED heat gas CHP plants EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fed_heat_fossil_fuels_chp_plants_ej": 1,
        "historic_share_chp_plants_gas": 1,
    },
)
def fed_heat_gas_chp_plants_ej():
    """
    Final energy demand of gas to produce heat in CHP plants.
    """
    return fed_heat_fossil_fuels_chp_plants_ej() * historic_share_chp_plants_gas()


@component.add(
    name="efficiency Heat gas CHP plants",
    units="Dmnl",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_efficiency_heat_gas_chp_plants",
        "__data__": "_ext_data_efficiency_heat_gas_chp_plants",
        "time": 1,
    },
)
def efficiency_heat_gas_chp_plants():
    """
    Efficiency of heat in gas CHP plants. We assume constant last data IEA.
    """
    return _ext_data_efficiency_heat_gas_chp_plants(time())


_ext_data_efficiency_heat_gas_chp_plants = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "219",
    "B222",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_efficiency_heat_gas_chp_plants",
)


@component.add(
    name="PED oil for CHP plants EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fed_heat_liquids_chp_plants_ej": 1,
        "efficiency_heat_oil_chp_plants": 1,
    },
)
def ped_oil_for_chp_plants_ej():
    """
    Primary energy demand of oil (EJ) for CHP plants.
    """
    return fed_heat_liquids_chp_plants_ej() / efficiency_heat_oil_chp_plants()


@component.add(
    name='"Share heat-com CHP plants NRE vs NRE tot heat-com generation"',
    units="Dmnl",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_share_heatcom_chp_plants_nre_vs_nre_tot_heatcom_generation",
        "__data__": "_ext_data_share_heatcom_chp_plants_nre_vs_nre_tot_heatcom_generation",
        "time": 1,
    },
)
def share_heatcom_chp_plants_nre_vs_nre_tot_heatcom_generation():
    """
    Share of commercial heat produced in CHP plants from non-renewable energies vs. total commercial heat generation from NRE.
    """
    return _ext_data_share_heatcom_chp_plants_nre_vs_nre_tot_heatcom_generation(time())


_ext_data_share_heatcom_chp_plants_nre_vs_nre_tot_heatcom_generation = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "25",
    "H29",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_share_heatcom_chp_plants_nre_vs_nre_tot_heatcom_generation",
)


@component.add(
    name="efficiency Heat coal CHP plants",
    units="Dmnl",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_efficiency_heat_coal_chp_plants",
        "__data__": "_ext_data_efficiency_heat_coal_chp_plants",
        "time": 1,
    },
)
def efficiency_heat_coal_chp_plants():
    """
    Efficiency of heat in gas CHP plants. We assume constant last data IEA.
    """
    return _ext_data_efficiency_heat_coal_chp_plants(time())


_ext_data_efficiency_heat_coal_chp_plants = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "219",
    "B225",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_efficiency_heat_coal_chp_plants",
)


@component.add(
    name="FED heat coal CHP plants EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fed_heat_fossil_fuels_chp_plants_ej": 1, "share_chp_plants_coal": 1},
)
def fed_heat_coal_chp_plants_ej():
    """
    Final energy demand of coal to produce heat in CHP plants.
    """
    return fed_heat_fossil_fuels_chp_plants_ej() * share_chp_plants_coal()


@component.add(
    name="PED gas for CHP plants EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fed_heat_gas_chp_plants_ej": 1, "efficiency_heat_gas_chp_plants": 1},
)
def ped_gas_for_chp_plants_ej():
    """
    Primary energy demand of gas (EJ) for CHP plants.
    """
    return fed_heat_gas_chp_plants_ej() / efficiency_heat_gas_chp_plants()


@component.add(
    name="PED coal for CHP plants EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fed_heat_coal_chp_plants_ej": 1, "efficiency_heat_coal_chp_plants": 1},
)
def ped_coal_for_chp_plants_ej():
    """
    Primary energy demand of coal (EJ) for CHP plants.
    """
    return fed_heat_coal_chp_plants_ej() / efficiency_heat_coal_chp_plants()


@component.add(
    name="PE CSP for Elec generation EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pe_real_generation_res_elec": 1},
)
def pe_csp_for_elec_generation_ej():
    """
    Annual primary energy to generate electricity (Direct Equivalent Method).
    """
    return pe_real_generation_res_elec().loc["CSP", :].reset_coords(drop=True)


@component.add(
    name="Invest RES for Elec",
    units="Tdollars/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "invest_biow_tdolar": 1,
        "invest_geotelec_tdolar": 1,
        "invest_hydro_tdolar": 1,
        "invest_oceanic_tdolar": 1,
        "invest_solar_tdolar": 1,
        "invest_onshore_wind_tdolar": 1,
        "invest_offshore_wind_tdolar": 1,
        "invest_csp_tdolar": 1,
    },
)
def invest_res_for_elec():
    """
    Annual investment for the installation of RES capacity for electricity .
    """
    return np.maximum(
        invest_biow_tdolar()
        + invest_geotelec_tdolar()
        + invest_hydro_tdolar()
        + invest_oceanic_tdolar()
        + invest_solar_tdolar()
        + invest_onshore_wind_tdolar()
        + invest_offshore_wind_tdolar()
        + invest_csp_tdolar(),
        0,
    )


@component.add(
    name="FE Elec generation from CSP TWh",
    units="TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_generation_res_elec_twh": 1},
)
def fe_elec_generation_from_csp_twh():
    """
    Annual electricity generation.
    """
    return real_generation_res_elec_twh().loc["CSP", :].reset_coords(drop=True)


@component.add(
    name="invest CSP Tdolar",
    units="Tdollars/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"invest_res_elec_tdolar": 1},
)
def invest_csp_tdolar():
    """
    Investment costs.
    """
    return invest_res_elec_tdolar().loc["CSP", :].reset_coords(drop=True)


@component.add(
    name="Cp limit nuclear",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"cp_nuclear": 1, "min_cp_nuclear": 1},
)
def cp_limit_nuclear():
    return if_then_else(
        cp_nuclear() > min_cp_nuclear(),
        lambda: xr.DataArray(
            1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="invest nuclear Tdolar",
    units="Tdollars/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "nuclear_capacity_under_construction": 2,
        "invest_cost_nuclear": 1,
        "replacement_nuclear_capacity": 1,
    },
)
def invest_nuclear_tdolar():
    return np.maximum(
        0,
        if_then_else(
            nuclear_capacity_under_construction() < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: (
                nuclear_capacity_under_construction() + replacement_nuclear_capacity()
            )
            * invest_cost_nuclear()
            / 1000,
        ),
    )


@component.add(
    name="Cp nuclear",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"cp_nuclear_initial": 1, "cp_exogenous_res_elec_dispatch_reduction": 1},
)
def cp_nuclear():
    """
    Capacity factor of nuclear power centrals.
    """
    return cp_nuclear_initial() * cp_exogenous_res_elec_dispatch_reduction()


@component.add(
    name="installed capacity nuclear TW",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_installed_capacity_nuclear_tw": 1},
    other_deps={
        "_integ_installed_capacity_nuclear_tw": {
            "initial": {"initial_capacity_installed_nuclear": 1},
            "step": {
                "nuclear_capacity_under_construction": 1,
                "nuclear_capacity_phaseout": 1,
                "wear_nuclear": 1,
            },
        }
    },
)
def installed_capacity_nuclear_tw():
    """
    Annual installed capacity of nuclear power.
    """
    return _integ_installed_capacity_nuclear_tw()


_integ_installed_capacity_nuclear_tw = Integ(
    lambda: nuclear_capacity_under_construction()
    - nuclear_capacity_phaseout()
    - wear_nuclear(),
    lambda: xr.DataArray(
        initial_capacity_installed_nuclear(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_installed_capacity_nuclear_tw",
)


@component.add(
    name='"nuclear capacity phase-out"',
    units="TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "selection_of_nuclear_scenario": 1,
        "start_year_nuclear_growth_scen34": 1,
        "p_nuclear_scen34": 1,
        "installed_capacity_nuclear_tw": 1,
        "time": 1,
    },
)
def nuclear_capacity_phaseout():
    """
    Annual nuclear capacity phase-out (Scenario 4 for nuclear evolution).
    """
    return if_then_else(
        selection_of_nuclear_scenario() == 4,
        lambda: if_then_else(
            time() < start_year_nuclear_growth_scen34(),
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: p_nuclear_scen34() * installed_capacity_nuclear_tw(),
        ),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="min Cp nuclear",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_min_cp_nuclear"},
)
def min_cp_nuclear():
    """
    Assumption of minimum Cp for nuclear given the high inertia of nuclear reactors.
    """
    return _ext_constant_min_cp_nuclear()


_ext_constant_min_cp_nuclear = ExtConstant(
    "inputs_EU.xlsx", "Parameters", "V15", {}, _root, {}, "_ext_constant_min_cp_nuclear"
)


@component.add(
    name="replacement nuclear capacity",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "nuclear_capacity_under_construction": 1,
        "replacement_rate_nuclear": 1,
        "nuclear_overcapacity": 1,
        "wear_nuclear": 1,
        "selection_of_nuclear_scenario": 2,
        "cp_limit_nuclear": 1,
    },
)
def replacement_nuclear_capacity():
    """
    It is assumed that the step of planning of replaced infraestructure can be done while the infraestructure to be replaced is still under operation.
    """
    return (
        if_then_else(
            time() < 2014,
            lambda: nuclear_capacity_under_construction(),
            lambda: if_then_else(
                selection_of_nuclear_scenario() == 2,
                lambda: xr.DataArray(
                    0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
                ),
                lambda: if_then_else(
                    selection_of_nuclear_scenario() == 4,
                    lambda: xr.DataArray(
                        0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
                    ),
                    lambda: replacement_rate_nuclear()
                    * wear_nuclear()
                    * (1 - nuclear_overcapacity()),
                ),
            ),
        )
        * cp_limit_nuclear()
    )


@component.add(
    name="min Cp baseload RES",
    units="Dmnl",
    subscripts=["RES elec"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_min_cp_baseload_res"},
)
def min_cp_baseload_res():
    """
    Assumption of minimum Cp for baseload RES plants.
    """
    return _ext_constant_min_cp_baseload_res()


_ext_constant_min_cp_baseload_res = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "V13",
    {"RES elec": ["hydro"]},
    _root,
    {"RES elec": _subscript_dict["RES elec"]},
    "_ext_constant_min_cp_baseload_res",
)

_ext_constant_min_cp_baseload_res.add(
    "inputs_EU.xlsx", "Parameters", "V7", {"RES elec": ['"geot-elec"']}
)

_ext_constant_min_cp_baseload_res.add(
    "inputs_EU.xlsx", "Parameters", "V8", {"RES elec": ['"solid bioE-elec"']}
)

_ext_constant_min_cp_baseload_res.add(
    "inputs_EU.xlsx", "Parameters", "V9", {"RES elec": ["oceanic"]}
)

_ext_constant_min_cp_baseload_res.add(
    "inputs_EU.xlsx", "Parameters", "V10", {"RES elec": ["wind onshore"]}
)

_ext_constant_min_cp_baseload_res.add(
    "inputs_EU.xlsx", "Parameters", "V12", {"RES elec": ["wind offshore"]}
)

_ext_constant_min_cp_baseload_res.add(
    "inputs_EU.xlsx", "Parameters", "V11", {"RES elec": ["solar PV"]}
)

_ext_constant_min_cp_baseload_res.add(
    "inputs_EU.xlsx", "Parameters", "V16", {"RES elec": ["CSP"]}
)


@component.add(
    name="nuclear overcapacity",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_generation_nuclear_elec_twh": 3,
        "fe_nuclear_elec_generation_twh": 1,
    },
)
def nuclear_overcapacity():
    """
    Overcapacity of nuclear power taking into account the installed capacity and the real generation.
    """
    return if_then_else(
        potential_generation_nuclear_elec_twh() == 0,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: (
            potential_generation_nuclear_elec_twh() - fe_nuclear_elec_generation_twh()
        )
        / potential_generation_nuclear_elec_twh(),
    )


@component.add(
    name='"P nuclear scen3-4"',
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_nuclear_scen34"},
)
def p_nuclear_scen34():
    """
    Annual variation (growth or phase-out) of new nuclear power plants (scenarios 3 and 4 of nuclear evolution) from the year "start year nuclear growth scen3-4".
    """
    return _ext_constant_p_nuclear_scen34()


_ext_constant_p_nuclear_scen34 = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "F22",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_nuclear_scen34",
)

_ext_constant_p_nuclear_scen34.add(
    "inputs_EU.xlsx", "SCEN1", "F22", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_nuclear_scen34.add(
    "inputs_EU.xlsx", "SCEN2", "F22", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_nuclear_scen34.add(
    "inputs_EU.xlsx", "SCEN3", "F22", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_nuclear_scen34.add(
    "inputs_EU.xlsx", "SCEN4", "F22", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_nuclear_scen34.add(
    "inputs_EU.xlsx", "User defined", "F22", {"scenarios": ["User defined"]}
)


@component.add(
    name='"start year nuclear growth scen3-4"',
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_start_year_nuclear_growth_scen34"},
)
def start_year_nuclear_growth_scen34():
    """
    Start year of increase/phase-out of nuclear power plants (Nuclear scenarios 3 and 4).
    """
    return _ext_constant_start_year_nuclear_growth_scen34()


_ext_constant_start_year_nuclear_growth_scen34 = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "H22",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_year_nuclear_growth_scen34",
)

_ext_constant_start_year_nuclear_growth_scen34.add(
    "inputs_EU.xlsx", "SCEN1", "H22", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_year_nuclear_growth_scen34.add(
    "inputs_EU.xlsx", "SCEN2", "H22", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_year_nuclear_growth_scen34.add(
    "inputs_EU.xlsx", "SCEN3", "H22", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_year_nuclear_growth_scen34.add(
    "inputs_EU.xlsx", "SCEN4", "H22", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_year_nuclear_growth_scen34.add(
    "inputs_EU.xlsx", "User defined", "H22", {"scenarios": ["User defined"]}
)


@component.add(
    name="P nuclear elec gen",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "selection_of_nuclear_scenario": 4,
        "start_year_nuclear_growth_scen34": 1,
        "p_nuclear_scen34": 1,
        "time": 1,
    },
)
def p_nuclear_elec_gen():
    """
    Annual increase of new planned nuclear capacity.
    """
    return if_then_else(
        selection_of_nuclear_scenario() == 1,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: if_then_else(
            selection_of_nuclear_scenario() == 2,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                selection_of_nuclear_scenario() == 4,
                lambda: xr.DataArray(
                    0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
                ),
                lambda: if_then_else(
                    selection_of_nuclear_scenario() == 3,
                    lambda: if_then_else(
                        time() < start_year_nuclear_growth_scen34(),
                        lambda: xr.DataArray(
                            0,
                            {"scenarios": _subscript_dict["scenarios"]},
                            ["scenarios"],
                        ),
                        lambda: p_nuclear_scen34(),
                    ),
                    lambda: xr.DataArray(
                        0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="required capacity nuclear TW",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_required_capacity_nuclear_tw": 1},
    other_deps={
        "_integ_required_capacity_nuclear_tw": {
            "initial": {"initial_required_capacity_nuclear": 1},
            "step": {
                "new_required_capacity_nuclear": 1,
                "new_nuclear_capacity_under_planning": 1,
            },
        }
    },
)
def required_capacity_nuclear_tw():
    """
    Required capacity of nuclear power plants.
    """
    return _integ_required_capacity_nuclear_tw()


_integ_required_capacity_nuclear_tw = Integ(
    lambda: new_required_capacity_nuclear() - new_nuclear_capacity_under_planning(),
    lambda: xr.DataArray(
        initial_required_capacity_nuclear(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_required_capacity_nuclear_tw",
)


@component.add(
    name="time planification nuclear",
    units="Year",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_time_planification_nuclear"},
)
def time_planification_nuclear():
    """
    Average planification time for nuclear power plants.
    """
    return _ext_constant_time_planification_nuclear()


_ext_constant_time_planification_nuclear = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "S15",
    {},
    _root,
    {},
    "_ext_constant_time_planification_nuclear",
)


@component.add(
    name="time construction nuclear",
    units="Time",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_time_construction_nuclear"},
)
def time_construction_nuclear():
    """
    Average construction time for nuclear power plants.
    """
    return _ext_constant_time_construction_nuclear()


_ext_constant_time_construction_nuclear = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "T15",
    {},
    _root,
    {},
    "_ext_constant_time_construction_nuclear",
)


@component.add(
    name="initial capacity installed nuclear",
    units="TW",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"initial_gen_nuclear": 1, "twe_per_twh": 1, "cp_nuclear_initial": 1},
)
def initial_capacity_installed_nuclear():
    """
    Initial capacity installed of nuclear power.
    """
    return initial_gen_nuclear() * twe_per_twh() / cp_nuclear_initial()


@component.add(
    name="Nuclear capacity under construction",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 3,
        "twe_per_twh": 1,
        "cp_nuclear": 1,
        "historic_nuclear_generation_twh": 2,
        "planned_nuclear_capacity_tw": 1,
        "time_construction_nuclear": 1,
    },
)
def nuclear_capacity_under_construction():
    """
    Nuclear capacity under construction.
    """
    return if_then_else(
        time() < 2014,
        lambda: (
            historic_nuclear_generation_twh(integer(time() + 1))
            - historic_nuclear_generation_twh(integer(time()))
        )
        * twe_per_twh()
        / cp_nuclear(),
        lambda: planned_nuclear_capacity_tw() / time_construction_nuclear(),
    )


@component.add(
    name="new nuclear capacity under planning",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"required_capacity_nuclear_tw": 1, "time_planification_nuclear": 1},
)
def new_nuclear_capacity_under_planning():
    """
    New nuclear capacity under planning.
    """
    return np.maximum(0, required_capacity_nuclear_tw() / time_planification_nuclear())


@component.add(
    name="selection of nuclear scenario",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_selection_of_nuclear_scenario"},
)
def selection_of_nuclear_scenario():
    """
    If = 1: Constant power capacity at current levels, If = 2: No more nuclear installed, current capacity depreciates, If = 3: Growth of nuclear power.
    """
    return _ext_constant_selection_of_nuclear_scenario()


_ext_constant_selection_of_nuclear_scenario = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D19",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_selection_of_nuclear_scenario",
)

_ext_constant_selection_of_nuclear_scenario.add(
    "inputs_EU.xlsx", "SCEN1", "D19", {"scenarios": ["SCEN1"]}
)

_ext_constant_selection_of_nuclear_scenario.add(
    "inputs_EU.xlsx", "SCEN2", "D19", {"scenarios": ["SCEN2"]}
)

_ext_constant_selection_of_nuclear_scenario.add(
    "inputs_EU.xlsx", "SCEN3", "D19", {"scenarios": ["SCEN3"]}
)

_ext_constant_selection_of_nuclear_scenario.add(
    "inputs_EU.xlsx", "SCEN4", "D19", {"scenarios": ["SCEN4"]}
)

_ext_constant_selection_of_nuclear_scenario.add(
    "inputs_EU.xlsx", "User defined", "D19", {"scenarios": ["User defined"]}
)


@component.add(
    name="initial gen nuclear",
    units="TWh",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_gen_nuclear"},
)
def initial_gen_nuclear():
    """
    Electric generation from nuclear in the initial year 1995.
    """
    return _ext_constant_initial_gen_nuclear()


_ext_constant_initial_gen_nuclear = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "H69",
    {},
    _root,
    {},
    "_ext_constant_initial_gen_nuclear",
)


@component.add(
    name="initial capacity in construction nuclear",
    units="TW",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_capacity_in_construction_nuclear():
    """
    Initial capacity in construction of nuclear (year 1995).
    """
    return 0


@component.add(
    name="initial required capacity nuclear",
    units="TW",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_required_capacity_nuclear():
    """
    Initial required capacity of nuclear (year 1995).
    """
    return 0


@component.add(
    name="Planned nuclear capacity TW",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_planned_nuclear_capacity_tw": 1},
    other_deps={
        "_integ_planned_nuclear_capacity_tw": {
            "initial": {"initial_capacity_in_construction_nuclear": 1},
            "step": {
                "new_nuclear_capacity_under_planning": 1,
                "replacement_nuclear_capacity": 1,
                "nuclear_capacity_under_construction": 1,
            },
        }
    },
)
def planned_nuclear_capacity_tw():
    """
    Planned nuclear capacity.
    """
    return _integ_planned_nuclear_capacity_tw()


_integ_planned_nuclear_capacity_tw = Integ(
    lambda: new_nuclear_capacity_under_planning()
    + replacement_nuclear_capacity()
    - nuclear_capacity_under_construction(),
    lambda: xr.DataArray(
        initial_capacity_in_construction_nuclear(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_planned_nuclear_capacity_tw",
)


@component.add(
    name="wear nuclear",
    units="TW",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "installed_capacity_nuclear_tw": 1, "life_time_nuclear": 1},
)
def wear_nuclear():
    """
    Depreciation of nuclear power plants.
    """
    return if_then_else(
        time() < 2014,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: installed_capacity_nuclear_tw() / life_time_nuclear(),
    )


@component.add(
    name="TPES intensity EJ T$",
    units="EJ/Tdollars",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"tpes_ej": 1, "gdp_eu": 1},
)
def tpes_intensity_ej_t():
    """
    Total primary energy intensity.
    """
    return zidz(tpes_ej(), gdp_eu())


@component.add(
    name="real PED intensity of Electricity",
    units="EJ/Tdollars",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_fe_elec_demand_ej": 1,
        "elec_gen_related_losses_ej": 1,
        "gdp_eu": 1,
    },
)
def real_ped_intensity_of_electricity():
    """
    Primary energy demand intensity of the electricity sector. Note that the parameter "'a' I-ELEC projection" refers to final energy while here we refer to primary energy. The "real PED intensity of electricity" may thus decrease with the penetration of RES in the electricity generation (see "share RES vs NRE electricity generation").
    """
    return zidz(total_fe_elec_demand_ej() + elec_gen_related_losses_ej(), gdp_eu())


@component.add(
    name="Annual GDP growth rate EU",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gdp_eu": 1, "gdp_delayed_1yr": 1},
)
def annual_gdp_growth_rate_eu():
    """
    Annual GDP growth rate.
    """
    return -1 + zidz(gdp_eu(), gdp_delayed_1yr())


@component.add(
    name="GDP delayed 1yr",
    units="Tdollars/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_gdp_delayed_1yr": 1},
    other_deps={"_delayfixed_gdp_delayed_1yr": {"initial": {}, "step": {"gdp_eu": 1}}},
)
def gdp_delayed_1yr():
    """
    GDP projection delayed 1 year.
    """
    return _delayfixed_gdp_delayed_1yr()


_delayfixed_gdp_delayed_1yr = DelayFixed(
    lambda: gdp_eu(),
    lambda: 1,
    lambda: xr.DataArray(
        8.6, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    time_step,
    "_delayfixed_gdp_delayed_1yr",
)


@component.add(
    name="share tot monet invest Elec RES vs GDP",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_monet_invest_res_for_elec_tdolar": 1, "gdp_eu": 1},
)
def share_tot_monet_invest_elec_res_vs_gdp():
    """
    Annual total monetary investment for RES for electricity as a share of the annual GDP.
    """
    return zidz(total_monet_invest_res_for_elec_tdolar(), gdp_eu())


@component.add(
    name="GDPpc",
    units="$/people",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gdp_eu": 1, "dollars_to_tdollars": 1, "population": 1},
)
def gdppc():
    """
    GDP per capita (1995T$ per capita).
    """
    return gdp_eu() * dollars_to_tdollars() / population()


@component.add(
    name='"unlimited coal?"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_unlimited_coal"},
)
def unlimited_coal():
    """
    Switch to consider if coal is unlimited (1), or if it is limited (0). If limited then the available depletion curves are considered.
    """
    return _ext_constant_unlimited_coal()


_ext_constant_unlimited_coal = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E99",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_unlimited_coal",
)

_ext_constant_unlimited_coal.add(
    "inputs_EU.xlsx", "SCEN1", "E99", {"scenarios": ["SCEN1"]}
)

_ext_constant_unlimited_coal.add(
    "inputs_EU.xlsx", "SCEN2", "E99", {"scenarios": ["SCEN2"]}
)

_ext_constant_unlimited_coal.add(
    "inputs_EU.xlsx", "SCEN3", "E99", {"scenarios": ["SCEN3"]}
)

_ext_constant_unlimited_coal.add(
    "inputs_EU.xlsx", "SCEN4", "E99", {"scenarios": ["SCEN4"]}
)

_ext_constant_unlimited_coal.add(
    "inputs_EU.xlsx", "User defined", "E99", {"scenarios": ["User defined"]}
)


@component.add(
    name="Real TFEC",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_fe_consumption_by_fuel": 1},
)
def real_tfec():
    """
    Real total final energy consumption (not including non-energy uses).
    """
    return sum(
        real_fe_consumption_by_fuel().rename({"final sources1": "final sources!"}),
        dim=["final sources!"],
    )


@component.add(
    name='"unlimited uranium?"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_unlimited_uranium"},
)
def unlimited_uranium():
    """
    Switch to consider if uranium is unlimited (1), or if it is limited (0). If limited then the available depletion curves are considered.
    """
    return _ext_constant_unlimited_uranium()


_ext_constant_unlimited_uranium = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E104",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_unlimited_uranium",
)

_ext_constant_unlimited_uranium.add(
    "inputs_EU.xlsx", "SCEN1", "E104", {"scenarios": ["SCEN1"]}
)

_ext_constant_unlimited_uranium.add(
    "inputs_EU.xlsx", "SCEN2", "E104", {"scenarios": ["SCEN2"]}
)

_ext_constant_unlimited_uranium.add(
    "inputs_EU.xlsx", "SCEN3", "E104", {"scenarios": ["SCEN3"]}
)

_ext_constant_unlimited_uranium.add(
    "inputs_EU.xlsx", "SCEN4", "E104", {"scenarios": ["SCEN4"]}
)

_ext_constant_unlimited_uranium.add(
    "inputs_EU.xlsx", "User defined", "E104", {"scenarios": ["User defined"]}
)


@component.add(
    name="URR coal unlimited", units="EJ", comp_type="Constant", comp_subtype="Normal"
)
def urr_coal_unlimited():
    """
    Arbitrary very high value.
    """
    return 1000000000.0


@component.add(
    name="URR uranium unlimited",
    units="EJ",
    comp_type="Constant",
    comp_subtype="Normal",
)
def urr_uranium_unlimited():
    """
    Arbitrary very high value.
    """
    return 1000000000.0


@component.add(
    name="URR conv gas unlimited",
    units="EJ",
    comp_type="Constant",
    comp_subtype="Normal",
)
def urr_conv_gas_unlimited():
    """
    Arbitrary very high value.
    """
    return 1000000000.0


@component.add(
    name='"unlimited gas?"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_unlimited_gas"},
)
def unlimited_gas():
    """
    Switch to consider if gas is unlimited (1), or if it is limited (0). If limited then the available depletion curves are considered.
    """
    return _ext_constant_unlimited_gas()


_ext_constant_unlimited_gas = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E83",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_unlimited_gas",
)

_ext_constant_unlimited_gas.add(
    "inputs_EU.xlsx", "SCEN1", "E83", {"scenarios": ["SCEN1"]}
)

_ext_constant_unlimited_gas.add(
    "inputs_EU.xlsx", "SCEN2", "E83", {"scenarios": ["SCEN2"]}
)

_ext_constant_unlimited_gas.add(
    "inputs_EU.xlsx", "SCEN3", "E83", {"scenarios": ["SCEN3"]}
)

_ext_constant_unlimited_gas.add(
    "inputs_EU.xlsx", "SCEN4", "E83", {"scenarios": ["SCEN4"]}
)

_ext_constant_unlimited_gas.add(
    "inputs_EU.xlsx", "User defined", "E83", {"scenarios": ["User defined"]}
)


@component.add(
    name='"unlimited oil?"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_unlimited_oil"},
)
def unlimited_oil():
    """
    Switch to consider if oil is unlimited (1), or if it is limited (0). If limited then the available depletion curves are considered.
    """
    return _ext_constant_unlimited_oil()


_ext_constant_unlimited_oil = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "E67",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_unlimited_oil",
)

_ext_constant_unlimited_oil.add(
    "inputs_EU.xlsx", "SCEN1", "E67", {"scenarios": ["SCEN1"]}
)

_ext_constant_unlimited_oil.add(
    "inputs_EU.xlsx", "SCEN2", "E67", {"scenarios": ["SCEN2"]}
)

_ext_constant_unlimited_oil.add(
    "inputs_EU.xlsx", "SCEN3", "E67", {"scenarios": ["SCEN3"]}
)

_ext_constant_unlimited_oil.add(
    "inputs_EU.xlsx", "SCEN4", "E67", {"scenarios": ["SCEN4"]}
)

_ext_constant_unlimited_oil.add(
    "inputs_EU.xlsx", "User defined", "E67", {"scenarios": ["User defined"]}
)


@component.add(
    name="URR conv oil unlimited",
    units="EJ",
    comp_type="Constant",
    comp_subtype="Normal",
)
def urr_conv_oil_unlimited():
    """
    Arbitrary very high value.
    """
    return 1000000000.0


@component.add(
    name='"activate ELF by scen?"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_activate_elf_by_scen"},
)
def activate_elf_by_scen():
    """
    Active/deactivate the energy loss function by scenario: 1: activate 0: not active
    """
    return _ext_constant_activate_elf_by_scen()


_ext_constant_activate_elf_by_scen = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C119",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_activate_elf_by_scen",
)

_ext_constant_activate_elf_by_scen.add(
    "inputs_EU.xlsx", "SCEN1", "C119", {"scenarios": ["SCEN1"]}
)

_ext_constant_activate_elf_by_scen.add(
    "inputs_EU.xlsx", "SCEN2", "C119", {"scenarios": ["SCEN2"]}
)

_ext_constant_activate_elf_by_scen.add(
    "inputs_EU.xlsx", "SCEN3", "C119", {"scenarios": ["SCEN3"]}
)

_ext_constant_activate_elf_by_scen.add(
    "inputs_EU.xlsx", "SCEN4", "C119", {"scenarios": ["SCEN4"]}
)

_ext_constant_activate_elf_by_scen.add(
    "inputs_EU.xlsx", "User defined", "C119", {"scenarios": ["User defined"]}
)


@component.add(
    name='"Total demand liquids mb/d"',
    units="Mb/d",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_liquids_ej": 1, "mbd_per_ejyear": 1},
)
def total_demand_liquids_mbd():
    """
    Total demand of liquids.
    """
    return ped_liquids_ej() * mbd_per_ejyear()


@component.add(
    name="PED coal without CTL",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_coal_ej": 1, "ped_coal_for_ctl_ej": 1},
)
def ped_coal_without_ctl():
    """
    Total demand of coal without CTL.
    """
    return ped_coal_ej() - ped_coal_for_ctl_ej()


@component.add(
    name="Grid reinforcement costs Tdollar",
    units="Tdollar",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "grid_reinforcement_costs": 1,
        "new_capacity_installed_onshore_wind_tw": 1,
        "g_per_t": 1,
    },
)
def grid_reinforcement_costs_tdollar():
    """
    1995 US$.
    """
    return (
        grid_reinforcement_costs()
        * new_capacity_installed_onshore_wind_tw()
        / g_per_t()
    )


@component.add(
    name='"Historic non-energy use"',
    units="EJ",
    subscripts=["final sources1"],
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_nonenergy_use",
        "__lookup__": "_ext_lookup_historic_nonenergy_use",
    },
)
def historic_nonenergy_use(x, final_subs=None):
    """
    Historic data non-energy use by final fuel.
    """
    return _ext_lookup_historic_nonenergy_use(x, final_subs)


_ext_lookup_historic_nonenergy_use = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "189",
    "C191",
    {"final sources1": ["liquids"]},
    _root,
    {"final sources1": _subscript_dict["final sources1"]},
    "_ext_lookup_historic_nonenergy_use",
)

_ext_lookup_historic_nonenergy_use.add(
    "inputs_EU.xlsx", "Constants", "189", "C190", {"final sources1": ["solids"]}
)

_ext_lookup_historic_nonenergy_use.add(
    "inputs_EU.xlsx", "Constants", "189", "C192", {"final sources1": ["gases"]}
)

_ext_lookup_historic_nonenergy_use.add(
    "inputs_EU.xlsx", "Constants", "189", "C193", {"final sources1": ["electricity"]}
)

_ext_lookup_historic_nonenergy_use.add(
    "inputs_EU.xlsx", "Constants", "189", "C193", {"final sources1": ["heat"]}
)


@component.add(
    name='"initial non-energy use"',
    units="EJ",
    subscripts=["final sources1"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_nonenergy_use"},
)
def initial_nonenergy_use():
    """
    Non-energy use consumption in the year 1995.
    """
    return _ext_constant_initial_nonenergy_use()


_ext_constant_initial_nonenergy_use = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C190",
    {"final sources1": ["solids"]},
    _root,
    {"final sources1": _subscript_dict["final sources1"]},
    "_ext_constant_initial_nonenergy_use",
)

_ext_constant_initial_nonenergy_use.add(
    "inputs_EU.xlsx", "Constants", "C191", {"final sources1": ["liquids"]}
)

_ext_constant_initial_nonenergy_use.add(
    "inputs_EU.xlsx", "Constants", "C192", {"final sources1": ["gases"]}
)

_ext_constant_initial_nonenergy_use.add(
    "inputs_EU.xlsx", "Constants", "C193", {"final sources1": ["electricity"]}
)

_ext_constant_initial_nonenergy_use.add(
    "inputs_EU.xlsx", "Constants", "C193", {"final sources1": ["heat"]}
)


@component.add(
    name="Real total output",
    units="Mdollars",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_total_output_by_sector_eu": 1},
)
def real_total_output():
    """
    Total output (1995$).
    """
    return sum(
        real_total_output_by_sector_eu().rename({"sectors": "sectors!"}),
        dim=["sectors!"],
    )


@component.add(
    name="PE onshore wind for Elec generation EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pe_real_generation_res_elec": 1},
)
def pe_onshore_wind_for_elec_generation_ej():
    """
    Annual primary energy to generate electricity (Direct Equivalent Method).
    """
    return pe_real_generation_res_elec().loc["wind onshore", :].reset_coords(drop=True)


@component.add(
    name="FE Elec generation from solar PV TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_generation_res_elec_twh": 1},
)
def fe_elec_generation_from_solar_pv_twh():
    """
    Annual electricity generation.
    """
    return real_generation_res_elec_twh().loc["solar PV", :].reset_coords(drop=True)


@component.add(
    name="PE hydro for Elec generation EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pe_real_generation_res_elec": 1},
)
def pe_hydro_for_elec_generation_ej():
    """
    Annual primary energy to generate electricity (Direct Equivalent Method).
    """
    return pe_real_generation_res_elec().loc["hydro", :].reset_coords(drop=True)


@component.add(
    name="invest bioW Tdolar",
    units="Tdollars/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"invest_res_elec_tdolar": 1},
)
def invest_biow_tdolar():
    """
    Investment costs.
    """
    return invest_res_elec_tdolar().loc['"solid bioE-elec"', :].reset_coords(drop=True)


@component.add(
    name="FE Elec generation from hydro TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_generation_res_elec_twh": 1},
)
def fe_elec_generation_from_hydro_twh():
    """
    Annual electricity generation.
    """
    return real_generation_res_elec_twh().loc["hydro", :].reset_coords(drop=True)


@component.add(
    name='"invest geot-elec Tdolar"',
    units="Tdollars/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"invest_res_elec_tdolar": 1},
)
def invest_geotelec_tdolar():
    """
    Investment costs.
    """
    return invest_res_elec_tdolar().loc['"geot-elec"', :].reset_coords(drop=True)


@component.add(
    name="invest hydro Tdolar",
    units="Tdollars/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"invest_res_elec_tdolar": 1},
)
def invest_hydro_tdolar():
    """
    Investment costs.
    """
    return invest_res_elec_tdolar().loc["hydro", :].reset_coords(drop=True)


@component.add(
    name="FE Elec generation from onshore wind TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_generation_res_elec_twh": 1},
)
def fe_elec_generation_from_onshore_wind_twh():
    """
    Annual electricity generation.
    """
    return real_generation_res_elec_twh().loc["wind onshore", :].reset_coords(drop=True)


@component.add(
    name="invest oceanic Tdolar",
    units="Tdollars/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"invest_res_elec_tdolar": 1},
)
def invest_oceanic_tdolar():
    """
    Investment costs.
    """
    return invest_res_elec_tdolar().loc["oceanic", :].reset_coords(drop=True)


@component.add(
    name="invest onshore wind Tdolar",
    units="Tdollars/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"invest_res_elec_tdolar": 1},
)
def invest_onshore_wind_tdolar():
    """
    Investment costs.
    """
    return invest_res_elec_tdolar().loc["wind onshore", :].reset_coords(drop=True)


@component.add(
    name="invest offshore wind Tdolar",
    units="Tdollars/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"invest_res_elec_tdolar": 1},
)
def invest_offshore_wind_tdolar():
    """
    Investment costs.
    """
    return invest_res_elec_tdolar().loc["wind offshore", :].reset_coords(drop=True)


@component.add(
    name='"FE Elec generation from geot-elec TWh"',
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_generation_res_elec_twh": 1},
)
def fe_elec_generation_from_geotelec_twh():
    """
    Annual electricity generation.
    """
    return real_generation_res_elec_twh().loc['"geot-elec"', :].reset_coords(drop=True)


@component.add(
    name='"PE geot-elec for Elec generation EJ"',
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pe_real_generation_res_elec": 1},
)
def pe_geotelec_for_elec_generation_ej():
    """
    Annual primary energy to generate electricity (Direct Equivalent Method).
    """
    return pe_real_generation_res_elec().loc['"geot-elec"', :].reset_coords(drop=True)


@component.add(
    name="PE solar PV for Elec generation EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pe_real_generation_res_elec": 1},
)
def pe_solar_pv_for_elec_generation_ej():
    """
    Annual primary energy to generate electricity (Direct Equivalent Method).
    """
    return pe_real_generation_res_elec().loc["solar PV", :].reset_coords(drop=True)


@component.add(
    name="FE Elec generation from bioE TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_generation_res_elec_twh": 1},
)
def fe_elec_generation_from_bioe_twh():
    """
    Annual electricity generation.
    """
    return (
        real_generation_res_elec_twh()
        .loc['"solid bioE-elec"', :]
        .reset_coords(drop=True)
    )


@component.add(
    name="PE oceanic for Elec generation EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pe_real_generation_res_elec": 1},
)
def pe_oceanic_for_elec_generation_ej():
    """
    Annual primary energy to generate electricity (Direct Equivalent Method).
    """
    return pe_real_generation_res_elec().loc["oceanic", :].reset_coords(drop=True)


@component.add(
    name="PE bioE for Elec generation EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pe_real_generation_res_elec": 1},
)
def pe_bioe_for_elec_generation_ej():
    """
    Annual primary energy to generate electricity (Direct Equivalent Method).
    """
    return (
        pe_real_generation_res_elec()
        .loc['"solid bioE-elec"', :]
        .reset_coords(drop=True)
    )


@component.add(
    name="FE Elec generation from offshore wind TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_generation_res_elec_twh": 1},
)
def fe_elec_generation_from_offshore_wind_twh():
    """
    Annual electricity generation.
    """
    return (
        real_generation_res_elec_twh().loc["wind offshore", :].reset_coords(drop=True)
    )


@component.add(
    name="FE Elec generation from oceanic TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_generation_res_elec_twh": 1},
)
def fe_elec_generation_from_oceanic_twh():
    """
    Annual electricity generation.
    """
    return real_generation_res_elec_twh().loc["oceanic", :].reset_coords(drop=True)


@component.add(
    name="PE offshore wind for Elec generation EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pe_real_generation_res_elec": 1},
)
def pe_offshore_wind_for_elec_generation_ej():
    """
    Annual primary energy to generate electricity (Direct Equivalent Method).
    """
    return pe_real_generation_res_elec().loc["wind offshore", :].reset_coords(drop=True)


@component.add(
    name="invest solar Tdolar",
    units="Tdollars/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"invest_res_elec_tdolar": 1},
)
def invest_solar_tdolar():
    """
    Investment costs.
    """
    return invest_res_elec_tdolar().loc["solar PV", :].reset_coords(drop=True)


@component.add(
    name="initial value land compet biofuels 2gen Mha",
    units="EJ/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"initial_value_land_compet_biofuels_2gen_ktoe": 1, "ej_per_ktoe": 1},
)
def initial_value_land_compet_biofuels_2gen_mha():
    """
    Initial value of land occupation by biofuels of second generation.
    """
    return initial_value_land_compet_biofuels_2gen_ktoe() * ej_per_ktoe()


@component.add(
    name="initial value land compet biofuels 2gen ktoe",
    units="EJ/Year",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_initial_value_land_compet_biofuels_2gen_ktoe"
    },
)
def initial_value_land_compet_biofuels_2gen_ktoe():
    """
    Initial value in 1995 derived from (BP 2016).
    """
    return _ext_constant_initial_value_land_compet_biofuels_2gen_ktoe()


_ext_constant_initial_value_land_compet_biofuels_2gen_ktoe = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "H56",
    {},
    _root,
    {},
    "_ext_constant_initial_value_land_compet_biofuels_2gen_ktoe",
)


@component.add(
    name="efficiency liquids for heat plants",
    units="Dmnl",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_efficiency_liquids_for_heat_plants",
        "__data__": "_ext_data_efficiency_liquids_for_heat_plants",
        "time": 1,
    },
)
def efficiency_liquids_for_heat_plants():
    """
    Efficiency of liquids heat plants. We assume constant last data IEA.
    """
    return _ext_data_efficiency_liquids_for_heat_plants(time())


_ext_data_efficiency_liquids_for_heat_plants = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "219",
    "B226",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_efficiency_liquids_for_heat_plants",
)


@component.add(
    name='"share gas/(coal+gas) for heat plants"',
    units="Dmnl",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_share_gascoalgas_for_heat_plants",
        "__data__": "_ext_data_share_gascoalgas_for_heat_plants",
        "time": 1,
    },
)
def share_gascoalgas_for_heat_plants():
    """
    Share of natural gas for electricity in relation to the total fossil fuels for heat
    """
    return _ext_data_share_gascoalgas_for_heat_plants(time())


_ext_data_share_gascoalgas_for_heat_plants = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "25",
    "H72",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_share_gascoalgas_for_heat_plants",
)


@component.add(
    name="Share heat distribution losses",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_heat_distribution_losses"},
)
def share_heat_distribution_losses():
    """
    Current share of heat transmission and distribution losses in relation to heat consumption. We define these losses at around 6.5% following historical data of IEA database.
    """
    return _ext_constant_share_heat_distribution_losses()


_ext_constant_share_heat_distribution_losses = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C77",
    {},
    _root,
    {},
    "_ext_constant_share_heat_distribution_losses",
)


@component.add(
    name="efficiency coal for heat plants",
    units="Dmnl",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_efficiency_coal_for_heat_plants",
        "__data__": "_ext_data_efficiency_coal_for_heat_plants",
        "time": 1,
    },
)
def efficiency_coal_for_heat_plants():
    """
    Efficiency of coal heat plants. We assume constant last data IEA.
    """
    return _ext_data_efficiency_coal_for_heat_plants(time())


_ext_data_efficiency_coal_for_heat_plants = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "219",
    "B223",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_efficiency_coal_for_heat_plants",
)


@component.add(
    name="efficiency gases for heat plants",
    units="Dmnl",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_efficiency_gases_for_heat_plants",
        "__data__": "_ext_data_efficiency_gases_for_heat_plants",
        "time": 1,
    },
)
def efficiency_gases_for_heat_plants():
    """
    Efficiency of gas heat plants. We assume constant last data IEA.
    """
    return _ext_data_efficiency_gases_for_heat_plants(time())


_ext_data_efficiency_gases_for_heat_plants = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "219",
    "B220",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_efficiency_gases_for_heat_plants",
)


@component.add(
    name="potential tot RES elec after intermitt",
    units="TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"potential_res_elec_after_intermitt_twh": 1},
)
def potential_tot_res_elec_after_intermitt():
    """
    Total potential of RES for electricity after accounting for the reduction of the maximal potential given the reduction of the Cp.
    """
    return sum(
        potential_res_elec_after_intermitt_twh().rename({"RES elec": "RES elec!"}),
        dim=["RES elec!"],
    )


@component.add(
    name="invest RES elec Tdolar",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "res_elec_capacity_under_construction_tw": 1,
        "invest_cost_res_elec": 1,
    },
)
def invest_res_elec_tdolar():
    return np.maximum(
        0, res_elec_capacity_under_construction_tw() * invest_cost_res_elec()
    )


@component.add(
    name="PE BioW for Elec generation Mtoe",
    units="MToe/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pe_real_generation_res_elec": 1, "mtoe_per_ej": 1},
)
def pe_biow_for_elec_generation_mtoe():
    """
    Annual primary energy to generate electricity (Direct Equivalent Method).
    """
    return (
        pe_real_generation_res_elec()
        .loc['"solid bioE-elec"', :]
        .reset_coords(drop=True)
        * mtoe_per_ej()
    )


@component.add(
    name="remaining potential tot RES elec after intermitt",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_tot_res_elec_after_intermitt": 3,
        "fe_real_tot_generation_res_elec_twh": 2,
    },
)
def remaining_potential_tot_res_elec_after_intermitt():
    return if_then_else(
        potential_tot_res_elec_after_intermitt()
        > fe_real_tot_generation_res_elec_twh(),
        lambda: (
            potential_tot_res_elec_after_intermitt()
            - fe_real_tot_generation_res_elec_twh()
        )
        / potential_tot_res_elec_after_intermitt(),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="invest cost RES elec",
    units="T$/TW",
    subscripts=["RES elec"],
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_invest_cost_res_elec",
        "__data__": "_ext_data_invest_cost_res_elec",
        "time": 1,
    },
)
def invest_cost_res_elec():
    """
    Input assumption on installation cost of new RES capacity for electricity.
    """
    return _ext_data_invest_cost_res_elec(time())


_ext_data_invest_cost_res_elec = ExtData(
    "inputs_EU.xlsx",
    "Parameters",
    "6",
    "G14",
    "interpolate",
    {"RES elec": ["hydro"]},
    _root,
    {"RES elec": _subscript_dict["RES elec"]},
    "_ext_data_invest_cost_res_elec",
)

_ext_data_invest_cost_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "6", "G7", None, {"RES elec": ['"geot-elec"']}
)

_ext_data_invest_cost_res_elec.add(
    "inputs_EU.xlsx",
    "Parameters",
    "6",
    "G8",
    "interpolate",
    {"RES elec": ['"solid bioE-elec"']},
)

_ext_data_invest_cost_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "6", "G9", None, {"RES elec": ["oceanic"]}
)

_ext_data_invest_cost_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "6", "G10", None, {"RES elec": ["wind onshore"]}
)

_ext_data_invest_cost_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "6", "G12", None, {"RES elec": ["wind offshore"]}
)

_ext_data_invest_cost_res_elec.add(
    "inputs_EU.xlsx",
    "Parameters",
    "6",
    "G11",
    "interpolate",
    {"RES elec": ["solar PV"]},
)

_ext_data_invest_cost_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "6", "G16", None, {"RES elec": ["CSP"]}
)


@component.add(
    name="Time 95pc TS potential RES elec",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"remaining_potential_res_elec_after_intermitt": 1, "time": 1},
)
def time_95pc_ts_potential_res_elec():
    """
    Time when the remaining resource availability falls bellow 5% of the techno-ecological potential, i.e. when the 95% of the techno-ecological potential is reached.
    """
    return if_then_else(
        remaining_potential_res_elec_after_intermitt() > 0.05,
        lambda: xr.DataArray(
            0,
            {
                "RES elec": _subscript_dict["RES elec"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["RES elec", "scenarios"],
        ),
        lambda: xr.DataArray(
            time(),
            {
                "RES elec": _subscript_dict["RES elec"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["RES elec", "scenarios"],
        ),
    )


@component.add(
    name='"max geot-elec TWe"',
    units="TWe",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_pe_geotelec_twth": 1, "efficiency_conversion_geot_pe_to_elec": 1},
)
def max_geotelec_twe():
    """
    Techno-ecological potential of electric geothermal (1 TWe = 8760 TWh in one year). We assume that the global potential of 0.2 TWe.
    """
    return max_pe_geotelec_twth() * efficiency_conversion_geot_pe_to_elec()


@component.add(
    name='"max PE geot-elec TWth"',
    units="TWe",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_max_pe_geotelec_twth"},
)
def max_pe_geotelec_twth():
    """
    Primary energy of geothermal for electricity.
    """
    return _ext_constant_max_pe_geotelec_twth()


_ext_constant_max_pe_geotelec_twth = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C25",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_max_pe_geotelec_twth",
)

_ext_constant_max_pe_geotelec_twth.add(
    "inputs_EU.xlsx", "SCEN1", "C25", {"scenarios": ["SCEN1"]}
)

_ext_constant_max_pe_geotelec_twth.add(
    "inputs_EU.xlsx", "SCEN2", "C25", {"scenarios": ["SCEN2"]}
)

_ext_constant_max_pe_geotelec_twth.add(
    "inputs_EU.xlsx", "SCEN3", "C25", {"scenarios": ["SCEN3"]}
)

_ext_constant_max_pe_geotelec_twth.add(
    "inputs_EU.xlsx", "SCEN4", "C25", {"scenarios": ["SCEN4"]}
)

_ext_constant_max_pe_geotelec_twth.add(
    "inputs_EU.xlsx", "User defined", "C25", {"scenarios": ["User defined"]}
)


@component.add(
    name="Efficiency conversion geot PE to Elec",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_efficiency_conversion_geot_pe_to_elec"},
)
def efficiency_conversion_geot_pe_to_elec():
    """
    Efficiency of the transformation from geothermal (primary energy) to electricity.
    """
    return _ext_constant_efficiency_conversion_geot_pe_to_elec()


_ext_constant_efficiency_conversion_geot_pe_to_elec = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C42",
    {},
    _root,
    {},
    "_ext_constant_efficiency_conversion_geot_pe_to_elec",
)


@component.add(
    name="Geot PE potential for heat EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "geot_pe_potential_for_heat_twth": 1,
        "ej_per_twh": 1,
        "twe_per_twh": 1,
    },
)
def geot_pe_potential_for_heat_ej():
    """
    Geothermal potential (primary energy) for producing heat.
    """
    return geot_pe_potential_for_heat_twth() * ej_per_twh() / twe_per_twh()


@component.add(
    name="initial instal cap RES elec",
    units="TW",
    subscripts=["RES elec"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_instal_cap_res_elec"},
)
def initial_instal_cap_res_elec():
    """
    Installed capacity per RES elec by technology in the initial year 1995.
    """
    return _ext_constant_initial_instal_cap_res_elec()


_ext_constant_initial_instal_cap_res_elec = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "H174",
    {"RES elec": ["hydro"]},
    _root,
    {"RES elec": _subscript_dict["RES elec"]},
    "_ext_constant_initial_instal_cap_res_elec",
)

_ext_constant_initial_instal_cap_res_elec.add(
    "inputs_EU.xlsx", "Constants", "H175", {"RES elec": ['"geot-elec"']}
)

_ext_constant_initial_instal_cap_res_elec.add(
    "inputs_EU.xlsx", "Constants", "H176", {"RES elec": ['"solid bioE-elec"']}
)

_ext_constant_initial_instal_cap_res_elec.add(
    "inputs_EU.xlsx", "Constants", "H177", {"RES elec": ["oceanic"]}
)

_ext_constant_initial_instal_cap_res_elec.add(
    "inputs_EU.xlsx", "Constants", "H178", {"RES elec": ["wind onshore"]}
)

_ext_constant_initial_instal_cap_res_elec.add(
    "inputs_EU.xlsx", "Constants", "H179", {"RES elec": ["wind offshore"]}
)

_ext_constant_initial_instal_cap_res_elec.add(
    "inputs_EU.xlsx", "Constants", "H180", {"RES elec": ["solar PV"]}
)

_ext_constant_initial_instal_cap_res_elec.add(
    "inputs_EU.xlsx", "Constants", "H181", {"RES elec": ["CSP"]}
)


@component.add(
    name="abundance RES elec2",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_res_elec": 1},
)
def abundance_res_elec2():
    """
    Adaptation of the parameter abundance for better behaviour of the model.
    """
    return np.sqrt(abundance_res_elec())


@component.add(
    name="potential tot generation RES elec TWh",
    units="TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"potential_generation_res_elec_twh": 1},
)
def potential_tot_generation_res_elec_twh():
    """
    Total potential generation of electricity from RES given the installed capacity.
    """
    return sum(
        potential_generation_res_elec_twh().rename({"RES elec": "RES elec!"}),
        dim=["RES elec!"],
    )


@component.add(
    name="RES elec tot overcapacity",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_tot_generation_res_elec_twh": 3,
        "fe_real_tot_generation_res_elec_twh": 1,
    },
)
def res_elec_tot_overcapacity():
    """
    Overcapacity for each technology RES for electricity taking into account the installed capacity and the real generation.
    """
    return if_then_else(
        potential_tot_generation_res_elec_twh() == 0,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: (
            potential_tot_generation_res_elec_twh()
            - fe_real_tot_generation_res_elec_twh()
        )
        / potential_tot_generation_res_elec_twh(),
    )


@component.add(
    name="wear RES elec",
    units="TW/Year",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "lifetime_res_elec": 1, "installed_capacity_res_elec_tw": 1},
)
def wear_res_elec():
    """
    Depreciation of RES infraestructures.
    """
    return if_then_else(
        time() < 2015,
        lambda: xr.DataArray(
            0,
            {
                "RES elec": _subscript_dict["RES elec"],
                "scenarios": _subscript_dict["scenarios"],
            },
            ["RES elec", "scenarios"],
        ),
        lambda: installed_capacity_res_elec_tw() / lifetime_res_elec(),
    )


@component.add(
    name='"Cp-ini RES elec"',
    units="Dmnl",
    subscripts=["RES elec"],
    comp_type="Constant, Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_cpini_res_elec",
        "__data__": "_ext_data_cpini_res_elec",
        "time": 1,
    },
)
def cpini_res_elec():
    """
    Initial capacity factor (before accounting for the reduction of Cp of the base-load plants with the penetration of the intermittent RES (solar and wind) in the electricity generation mix).
    """
    value = xr.DataArray(
        np.nan, {"RES elec": _subscript_dict["RES elec"]}, ["RES elec"]
    )
    def_subs = xr.zeros_like(value, dtype=bool)
    def_subs.loc[["hydro"]] = True
    value.values[def_subs.values] = _ext_data_cpini_res_elec(time()).values[
        def_subs.values
    ]
    def_subs = xr.zeros_like(value, dtype=bool)
    def_subs.loc[['"geot-elec"']] = True
    def_subs.loc[['"solid bioE-elec"']] = True
    def_subs.loc[["oceanic"]] = True
    def_subs.loc[["wind onshore"]] = True
    def_subs.loc[["wind offshore"]] = True
    def_subs.loc[["solar PV"]] = True
    def_subs.loc[["CSP"]] = True
    value.values[def_subs.values] = _ext_constant_cpini_res_elec().values[
        def_subs.values
    ]
    return value


_ext_data_cpini_res_elec = ExtData(
    "inputs_EU.xlsx",
    "Parameters",
    "6",
    "G13",
    "interpolate",
    {"RES elec": ["hydro"]},
    _root,
    {"RES elec": _subscript_dict["RES elec"]},
    "_ext_data_cpini_res_elec",
)

_ext_constant_cpini_res_elec = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "F7",
    {"RES elec": ['"geot-elec"']},
    _root,
    {"RES elec": _subscript_dict["RES elec"]},
    "_ext_constant_cpini_res_elec",
)

_ext_constant_cpini_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "F8", {"RES elec": ['"solid bioE-elec"']}
)

_ext_constant_cpini_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "F9", {"RES elec": ["oceanic"]}
)

_ext_constant_cpini_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "F10", {"RES elec": ["wind onshore"]}
)

_ext_constant_cpini_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "F12", {"RES elec": ["wind offshore"]}
)

_ext_constant_cpini_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "F11", {"RES elec": ["solar PV"]}
)

_ext_constant_cpini_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "F16", {"RES elec": ["CSP"]}
)


@component.add(
    name="G per T",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_g_per_t"},
)
def g_per_t():
    return _ext_constant_g_per_t()


_ext_constant_g_per_t = ExtConstant(
    "inputs_EU.xlsx", "Constants", "G7", {}, _root, {}, "_ext_constant_g_per_t"
)


@component.add(
    name="time construction RES elec",
    units="Year",
    subscripts=["RES elec"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_time_construction_res_elec"},
)
def time_construction_res_elec():
    """
    Average construction time for each RES generating electricity. For replaced infraestructures, the construction time should be smaller than for new infaestructures, however we compensate for this assuming that the demantling time is included in onstruction time for replaced infrastructure.
    """
    return _ext_constant_time_construction_res_elec()


_ext_constant_time_construction_res_elec = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "T13",
    {"RES elec": ["hydro"]},
    _root,
    {"RES elec": _subscript_dict["RES elec"]},
    "_ext_constant_time_construction_res_elec",
)

_ext_constant_time_construction_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "T7", {"RES elec": ['"geot-elec"']}
)

_ext_constant_time_construction_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "T8", {"RES elec": ['"solid bioE-elec"']}
)

_ext_constant_time_construction_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "T9", {"RES elec": ["oceanic"]}
)

_ext_constant_time_construction_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "T10", {"RES elec": ["wind onshore"]}
)

_ext_constant_time_construction_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "T12", {"RES elec": ["wind offshore"]}
)

_ext_constant_time_construction_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "T11", {"RES elec": ["solar PV"]}
)

_ext_constant_time_construction_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "T16", {"RES elec": ["CSP"]}
)


@component.add(
    name="time planification RES elec",
    units="Year",
    subscripts=["RES elec"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_time_planification_res_elec"},
)
def time_planification_res_elec():
    """
    Average planification time for each RES generating electricity.
    """
    return _ext_constant_time_planification_res_elec()


_ext_constant_time_planification_res_elec = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "S13",
    {"RES elec": ["hydro"]},
    _root,
    {"RES elec": _subscript_dict["RES elec"]},
    "_ext_constant_time_planification_res_elec",
)

_ext_constant_time_planification_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "S7", {"RES elec": ['"geot-elec"']}
)

_ext_constant_time_planification_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "S8", {"RES elec": ['"solid bioE-elec"']}
)

_ext_constant_time_planification_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "S9", {"RES elec": ["oceanic"]}
)

_ext_constant_time_planification_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "S10", {"RES elec": ["wind onshore"]}
)

_ext_constant_time_planification_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "S12", {"RES elec": ["wind offshore"]}
)

_ext_constant_time_planification_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "S11", {"RES elec": ["solar PV"]}
)

_ext_constant_time_planification_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "S16", {"RES elec": ["CSP"]}
)


@component.add(
    name="initial required capacity RES elec",
    units="TW",
    subscripts=["RES elec"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"table_hist_capacity_res_elec": 2},
)
def initial_required_capacity_res_elec():
    """
    Initial required capacity of RES by technology (year 1995). We assume that it is the same than the additional installed capacity between 1995 and 1996.
    """
    return table_hist_capacity_res_elec(1996) - table_hist_capacity_res_elec(1995)


@component.add(
    name="new RES elec capacity under planning",
    units="TW/Year",
    subscripts=["RES elec", "scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "required_capacity_res_elec_tw": 1,
        "time_planification_res_elec": 1,
        "time_step": 1,
    },
)
def new_res_elec_capacity_under_planning():
    """
    New RES infraestructure for electricity generation capacity under planning.
    """
    return np.maximum(
        0,
        required_capacity_res_elec_tw()
        / np.maximum(time_planification_res_elec(), time_step()),
    )


@component.add(
    name="lifetime RES elec",
    units="Years",
    subscripts=["RES elec"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_lifetime_res_elec"},
)
def lifetime_res_elec():
    """
    Lifetime of each RES technology for electricity generation.
    """
    return _ext_constant_lifetime_res_elec()


_ext_constant_lifetime_res_elec = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C13",
    {"RES elec": ["hydro"]},
    _root,
    {"RES elec": _subscript_dict["RES elec"]},
    "_ext_constant_lifetime_res_elec",
)

_ext_constant_lifetime_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "C7", {"RES elec": ['"geot-elec"']}
)

_ext_constant_lifetime_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "C8", {"RES elec": ['"solid bioE-elec"']}
)

_ext_constant_lifetime_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "C9", {"RES elec": ["oceanic"]}
)

_ext_constant_lifetime_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "C10", {"RES elec": ["wind onshore"]}
)

_ext_constant_lifetime_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "C12", {"RES elec": ["wind offshore"]}
)

_ext_constant_lifetime_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "C11", {"RES elec": ["solar PV"]}
)

_ext_constant_lifetime_res_elec.add(
    "inputs_EU.xlsx", "Parameters", "C16", {"RES elec": ["CSP"]}
)


@component.add(
    name="past RES elec capacity growth",
    units="1/Year",
    subscripts=["RES elec"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_past_res_elec_capacity_growth"},
)
def past_res_elec_capacity_growth():
    """
    Current growth levels.
    """
    return _ext_constant_past_res_elec_capacity_growth()


_ext_constant_past_res_elec_capacity_growth = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C85",
    {"RES elec": ["hydro"]},
    _root,
    {"RES elec": _subscript_dict["RES elec"]},
    "_ext_constant_past_res_elec_capacity_growth",
)

_ext_constant_past_res_elec_capacity_growth.add(
    "inputs_EU.xlsx", "Constants", "C86", {"RES elec": ['"geot-elec"']}
)

_ext_constant_past_res_elec_capacity_growth.add(
    "inputs_EU.xlsx", "Constants", "C87", {"RES elec": ['"solid bioE-elec"']}
)

_ext_constant_past_res_elec_capacity_growth.add(
    "inputs_EU.xlsx", "Constants", "C88", {"RES elec": ["oceanic"]}
)

_ext_constant_past_res_elec_capacity_growth.add(
    "inputs_EU.xlsx", "Constants", "C89", {"RES elec": ["wind onshore"]}
)

_ext_constant_past_res_elec_capacity_growth.add(
    "inputs_EU.xlsx", "Constants", "C90", {"RES elec": ["wind offshore"]}
)

_ext_constant_past_res_elec_capacity_growth.add(
    "inputs_EU.xlsx", "Constants", "C91", {"RES elec": ["solar PV"]}
)

_ext_constant_past_res_elec_capacity_growth.add(
    "inputs_EU.xlsx", "Constants", "C92", {"RES elec": ["CSP"]}
)


@component.add(
    name="Afforestation program 2020 GtCO2",
    units="GtCO2/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "afforestation_program_2020": 1,
        "activate_affores_program": 1,
        "c_per_co2": 1,
        "mt_per_gt": 1,
    },
)
def afforestation_program_2020_gtco2():
    """
    Annual emissions captured by the afforestation program.
    """
    return (
        afforestation_program_2020()
        * activate_affores_program()
        / (c_per_co2() * mt_per_gt())
    )


@component.add(
    name="Mt per Gt",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_mt_per_gt"},
)
def mt_per_gt():
    """
    Conversion from Mega to Giga (1000 M = 1 G).
    """
    return _ext_constant_mt_per_gt()


_ext_constant_mt_per_gt = ExtConstant(
    "inputs_EU.xlsx", "Constants", "G6", {}, _root, {}, "_ext_constant_mt_per_gt"
)


@component.add(
    name="GTL efficiency",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_gtl_efficiency"},
)
def gtl_efficiency():
    """
    Efficiency of GTL plants. Source: IEA balances (see Technical Report).
    """
    return _ext_constant_gtl_efficiency()


_ext_constant_gtl_efficiency = ExtConstant(
    "inputs_EU.xlsx", "Parameters", "C50", {}, _root, {}, "_ext_constant_gtl_efficiency"
)


@component.add(
    name="CTL efficiency",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ctl_efficiency"},
)
def ctl_efficiency():
    """
    Efficiency of CTL plants. Source: IEA balances (see Technical Report).
    """
    return _ext_constant_ctl_efficiency()


_ext_constant_ctl_efficiency = ExtConstant(
    "inputs_EU.xlsx", "Parameters", "C49", {}, _root, {}, "_ext_constant_ctl_efficiency"
)


@component.add(
    name='"CTL+GTL Gb"',
    units="Gboe/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fes_ctlgtl_ej": 1, "gboe_per_ej": 1},
)
def ctlgtl_gb():
    """
    CTL and GTL production.
    """
    return fes_ctlgtl_ej() / gboe_per_ej()


@component.add(
    name='"Mb/d per EJ/year"',
    units="Mb*Year/(EJ*d)",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_mbd_per_ejyear"},
)
def mbd_per_ejyear():
    """
    Conversion between Mb/d to EJ/year.
    """
    return _ext_constant_mbd_per_ejyear()


_ext_constant_mbd_per_ejyear = ExtConstant(
    "inputs_EU.xlsx", "Constants", "C17", {}, _root, {}, "_ext_constant_mbd_per_ejyear"
)


@component.add(
    name="Hist growth CTL",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_hist_growth_ctl"},
)
def hist_growth_ctl():
    """
    Historic growth of CTL 1990-2014 (IEA Balances).
    """
    return _ext_constant_hist_growth_ctl()


_ext_constant_hist_growth_ctl = ExtConstant(
    "inputs_EU.xlsx", "Constants", "C82", {}, _root, {}, "_ext_constant_hist_growth_ctl"
)


@component.add(
    name="Gboe per EJ",
    units="EJ/Gboe",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_gboe_per_ej"},
)
def gboe_per_ej():
    """
    Unit conversion (1 EJ = 5.582 Gb).
    """
    return _ext_constant_gboe_per_ej()


_ext_constant_gboe_per_ej = ExtConstant(
    "inputs_EU.xlsx", "Constants", "G10", {}, _root, {}, "_ext_constant_gboe_per_ej"
)


@component.add(
    name="table max extraction uranium user defined",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_uranium_user_defined",
        "__lookup__": "_ext_lookup_table_max_extraction_uranium_user_defined",
    },
)
def table_max_extraction_uranium_user_defined(x, final_subs=None):
    return _ext_lookup_table_max_extraction_uranium_user_defined(x, final_subs)


_ext_lookup_table_max_extraction_uranium_user_defined = ExtLookup(
    "inputs_EU.xlsx",
    "User defined",
    "156",
    "E157",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_uranium_user_defined",
)


@component.add(
    name='"User-defined extraction growth unconv gas"',
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_userdefined_extraction_growth_unconv_gas",
        "__lookup__": "_ext_lookup_userdefined_extraction_growth_unconv_gas",
    },
)
def userdefined_extraction_growth_unconv_gas(x, final_subs=None):
    """
    User-defined annual extraction growth constraint path as a function of time for unconventional gas.
    """
    return _ext_lookup_userdefined_extraction_growth_unconv_gas(x, final_subs)


_ext_lookup_userdefined_extraction_growth_unconv_gas = ExtLookup(
    "inputs_EU.xlsx",
    "User defined",
    "163",
    "D164",
    {},
    _root,
    {},
    "_ext_lookup_userdefined_extraction_growth_unconv_gas",
)


@component.add(
    name='"User-defined extraction growth unconv oil"',
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_userdefined_extraction_growth_unconv_oil",
        "__lookup__": "_ext_lookup_userdefined_extraction_growth_unconv_oil",
    },
)
def userdefined_extraction_growth_unconv_oil(x, final_subs=None):
    """
    User-defined annual extraction growth constraint path as a function of time for unconventional oil.
    """
    return _ext_lookup_userdefined_extraction_growth_unconv_oil(x, final_subs)


_ext_lookup_userdefined_extraction_growth_unconv_oil = ExtLookup(
    "inputs_EU.xlsx",
    "User defined",
    "161",
    "D162",
    {},
    _root,
    {},
    "_ext_lookup_userdefined_extraction_growth_unconv_oil",
)


@component.add(
    name="Hist growth GTL",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_hist_growth_gtl"},
)
def hist_growth_gtl():
    """
    Historic growth of GTL 2000-2014 (IEA Balances).
    """
    return _ext_constant_hist_growth_gtl()


_ext_constant_hist_growth_gtl = ExtConstant(
    "inputs_EU.xlsx", "Constants", "C83", {}, _root, {}, "_ext_constant_hist_growth_gtl"
)


@component.add(
    name="URR uranium User defined",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_uranium_user_defined"},
)
def urr_uranium_user_defined():
    return _ext_constant_urr_uranium_user_defined()


_ext_constant_urr_uranium_user_defined = ExtConstant(
    "inputs_EU.xlsx",
    "User defined",
    "C156",
    {},
    _root,
    {},
    "_ext_constant_urr_uranium_user_defined",
)


@component.add(
    name="replacement rate nuclear",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_replacement_rate_nuclear"},
)
def replacement_rate_nuclear():
    """
    If =1, we asume that all the power that reaches the end of its lifetime is replaced.
    """
    return _ext_constant_replacement_rate_nuclear()


_ext_constant_replacement_rate_nuclear = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "D15",
    {},
    _root,
    {},
    "_ext_constant_replacement_rate_nuclear",
)


@component.add(
    name="demand gas for oil refinery gains",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"oil_refinery_gains_ej": 1, "efficiency_gas_for_oil_refinery_gains": 1},
)
def demand_gas_for_oil_refinery_gains():
    """
    Demand of natural gas to be used as input in the refineries to obtain the so-called "oil refinery gains".
    """
    return oil_refinery_gains_ej() * efficiency_gas_for_oil_refinery_gains()


@component.add(
    name="share RES vs TPES",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"tpe_from_res_ej": 1, "tpes_ej": 1},
)
def share_res_vs_tpes():
    """
    Share of primary energy from RES in the TPES.
    """
    return tpe_from_res_ej() / tpes_ej()


@component.add(
    name="TPES Mtoe",
    units="MToe/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"tpes_ej": 1, "mtoe_per_ej": 1},
)
def tpes_mtoe():
    """
    Total Primary Energy Supply.
    """
    return tpes_ej() * mtoe_per_ej()


@component.add(
    name="FE Elec generation from NRE TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_elec_generation_from_fossil_fuels_twh": 1,
        "fe_nuclear_elec_generation_twh": 1,
    },
)
def fe_elec_generation_from_nre_twh():
    """
    Electricity generation from non-renewable resources (fossil fuels and uranium).
    """
    return fe_elec_generation_from_fossil_fuels_twh() + fe_nuclear_elec_generation_twh()


@component.add(
    name="PEpc consumption people depending on trad biomass",
    units="MToe/people",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "pe_consumption_trad_biomass_ref": 1,
        "people_relying_trad_biomass_ref": 1,
    },
)
def pepc_consumption_people_depending_on_trad_biomass():
    """
    Primary energy per capita consumption of people currently depending on trad biomass.
    """
    return zidz(pe_consumption_trad_biomass_ref(), people_relying_trad_biomass_ref())


@component.add(
    name="share gas for oil refinery gains",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_nat_gas_without_gtl": 2, "demand_gas_for_oil_refinery_gains": 1},
)
def share_gas_for_oil_refinery_gains():
    """
    Share of gas to cover oil refinery gains. Condition to avoid error when the total demand of gas without GTL falls to zero (0.5 is an arbitrary value).
    """
    return if_then_else(
        ped_nat_gas_without_gtl() > 0,
        lambda: demand_gas_for_oil_refinery_gains() / ped_nat_gas_without_gtl(),
        lambda: xr.DataArray(
            0.5, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="People relying trad biomass ref",
    units="people",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_people_relying_trad_biomass_ref"},
)
def people_relying_trad_biomass_ref():
    """
    People relying on traditional biomass in 2008. WEO 2010 reportad that in 2008, 2.5 billion people consumed 724 Mtoe of traditional biomass.
    """
    return _ext_constant_people_relying_trad_biomass_ref()


_ext_constant_people_relying_trad_biomass_ref = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C58",
    {},
    _root,
    {},
    "_ext_constant_people_relying_trad_biomass_ref",
)


@component.add(
    name="PE consumption trad biomass ref",
    units="EJ/Year",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_pe_consumption_trad_biomass_ref"},
)
def pe_consumption_trad_biomass_ref():
    """
    Primary energy consumption of trad biomass. From IEA balances, 39.626 EJ were consumed as primary solids biofuels for TFC in 2008.
    """
    return _ext_constant_pe_consumption_trad_biomass_ref()


_ext_constant_pe_consumption_trad_biomass_ref = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C57",
    {},
    _root,
    {},
    "_ext_constant_pe_consumption_trad_biomass_ref",
)


@component.add(
    name="TPEFpc threshold high development",
    units="GJ/people",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_tpefpc_threshold_high_development"},
)
def tpefpc_threshold_high_development():
    """
    Energy use threshold (in terms of total primary energy footprint) found by Arto et al., (2016) to reach high development (HDI>0.8).
    """
    return _ext_constant_tpefpc_threshold_high_development()


_ext_constant_tpefpc_threshold_high_development = ExtConstant(
    "inputs_EU.xlsx",
    "Result comparison",
    "C10",
    {},
    _root,
    {},
    "_ext_constant_tpefpc_threshold_high_development",
)


@component.add(
    name="TPEDpc acceptable standard living",
    units="GJ/people",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_tpedpc_acceptable_standard_living"},
)
def tpedpc_acceptable_standard_living():
    """
    Approximative energy use value to fulfill the aceptable standard of living (in terms of total primary energy use): 40 GJ/person. Source: (Goldemberg, 2011; Rao et al, 2014, WBGU,2003) cited in Arto et al., (2016).
    """
    return _ext_constant_tpedpc_acceptable_standard_living()


_ext_constant_tpedpc_acceptable_standard_living = ExtConstant(
    "inputs_EU.xlsx",
    "Result comparison",
    "C11",
    {},
    _root,
    {},
    "_ext_constant_tpedpc_acceptable_standard_living",
)


@component.add(
    name="Pop not dependent on trad biomass",
    units="people",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"population": 1, "population_dependent_on_trad_biomass": 1},
)
def pop_not_dependent_on_trad_biomass():
    """
    Global population not dependent on traditional biomass.
    """
    return population() - population_dependent_on_trad_biomass()


@component.add(
    name='"Carbon footprint tCO2/person"',
    units="tCO2/person",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_co2_emissions_gtco2": 1, "t_per_gt": 1, "population": 1},
)
def carbon_footprint_tco2person():
    """
    CO2 emissions per capita.
    """
    return total_co2_emissions_gtco2() * t_per_gt() / population()


@component.add(
    name='"Average TPESpc (without trad biomass)"',
    units="GJ/people",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "tpes_without_trad_biomass": 1,
        "gj_per_ej": 1,
        "pop_not_dependent_on_trad_biomass": 1,
    },
)
def average_tpespc_without_trad_biomass():
    """
    Average per capita TPES without accounting for the energy supplied by traditional biomass. The population considered for estimating the average is not the global population, but the share of the population not relying on traditional biomass for covering their energy uses.
    """
    return (
        tpes_without_trad_biomass() * gj_per_ej() / pop_not_dependent_on_trad_biomass()
    )


@component.add(
    name='"TPES (without trad biomass)"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"tpes_ej": 1, "pe_traditional_biomass_ej_delayed_1yr": 1},
)
def tpes_without_trad_biomass():
    """
    TPES without accounting for traditional biomass.
    """
    return tpes_ej() - pe_traditional_biomass_ej_delayed_1yr()


@component.add(
    name='"Max NPP potential BioE residues for non-biofuels"',
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_npp_potential_bioe_residues": 1,
        "share_cellulosic_biofuels_vs_bioe_residues": 1,
    },
)
def max_npp_potential_bioe_residues_for_nonbiofuels():
    """
    Share of bioE for other uses than biofuels (heat, solids and electricity).
    """
    return max_npp_potential_bioe_residues() * (
        1 - share_cellulosic_biofuels_vs_bioe_residues()
    )


@component.add(
    name="Max NPP potential BioE residues for cellulosic biofuels",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_npp_potential_bioe_residues": 1,
        "share_cellulosic_biofuels_vs_bioe_residues": 1,
    },
)
def max_npp_potential_bioe_residues_for_cellulosic_biofuels():
    """
    Potential assigned to the cellulosic biofuels from bioE residues.
    """
    return (
        max_npp_potential_bioe_residues() * share_cellulosic_biofuels_vs_bioe_residues()
    )


@component.add(
    name="Total cumulative emissions GtCO2",
    units="GtCO2",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_cumulative_emissions_gtc": 1, "c_per_co2": 1},
)
def total_cumulative_emissions_gtco2():
    """
    Total cumulative emissions.
    """
    return total_cumulative_emissions_gtc() / c_per_co2()


@component.add(
    name="GtCO2 historic emissions RCPs",
    units="GTCO2e",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "gtc_historic_emissions_rcps": 1, "c_per_co2": 1},
)
def gtco2_historic_emissions_rcps():
    return gtc_historic_emissions_rcps(time()) / c_per_co2()


@component.add(
    name="Carbon emissions GtC",
    units="GtC/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_co2_emissions_gtco2": 1, "c_per_co2": 1},
)
def carbon_emissions_gtc():
    """
    Total anual carbon emissions.
    """
    return total_co2_emissions_gtco2() * c_per_co2()


@component.add(
    name="Historic unconv oil",
    units="EJ/Year",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_historic_unconv_oil",
        "__data__": "_ext_data_historic_unconv_oil",
        "time": 1,
    },
)
def historic_unconv_oil():
    """
    Historic unconventional extraction from Mohr et al (2015).
    """
    return _ext_data_historic_unconv_oil(time())


_ext_data_historic_unconv_oil = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "25",
    "C34",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_historic_unconv_oil",
)


@component.add(
    name="gCO2 per MJ unconv gas",
    units="gCO2/MJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_gco2_per_mj_unconv_gas"},
)
def gco2_per_mj_unconv_gas():
    """
    CO2 emission factor of unconventional gas.
    """
    return _ext_constant_gco2_per_mj_unconv_gas()


_ext_constant_gco2_per_mj_unconv_gas = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C94",
    {},
    _root,
    {},
    "_ext_constant_gco2_per_mj_unconv_gas",
)


@component.add(
    name="gCO2 per MJ unconv oil",
    units="gCO2/MJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_gco2_per_mj_unconv_oil"},
)
def gco2_per_mj_unconv_oil():
    """
    Emission factor unconventional oil (tar sands/extra heavy oil).
    """
    return _ext_constant_gco2_per_mj_unconv_oil()


_ext_constant_gco2_per_mj_unconv_oil = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C95",
    {},
    _root,
    {},
    "_ext_constant_gco2_per_mj_unconv_oil",
)


@component.add(
    name="gCO2 per MJ conv gas",
    units="gCO2/MJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_gco2_per_mj_conv_gas"},
)
def gco2_per_mj_conv_gas():
    """
    CO2 emission factor conventional natural gas.
    """
    return _ext_constant_gco2_per_mj_conv_gas()


_ext_constant_gco2_per_mj_conv_gas = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C92",
    {},
    _root,
    {},
    "_ext_constant_gco2_per_mj_conv_gas",
)


@component.add(
    name="gCO2 per MJ CTL",
    units="gCO2/MJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_gco2_per_mj_ctl"},
)
def gco2_per_mj_ctl():
    """
    CO2 emissions coefficient of CTL.
    """
    return _ext_constant_gco2_per_mj_ctl()


_ext_constant_gco2_per_mj_ctl = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C89",
    {},
    _root,
    {},
    "_ext_constant_gco2_per_mj_ctl",
)


@component.add(
    name="gCO2 per MJ GTL",
    units="gCO2/MJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_gco2_per_mj_gtl"},
)
def gco2_per_mj_gtl():
    """
    CO2 emissions coefficient of GTL.
    """
    return _ext_constant_gco2_per_mj_gtl()


_ext_constant_gco2_per_mj_gtl = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C90",
    {},
    _root,
    {},
    "_ext_constant_gco2_per_mj_gtl",
)


@component.add(
    name="Historic unconv gas",
    units="EJ/Year",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_historic_unconv_gas",
        "__data__": "_ext_data_historic_unconv_gas",
        "time": 1,
    },
)
def historic_unconv_gas():
    """
    Historic unconventional extraction from Mohr et al (2015).
    """
    return _ext_data_historic_unconv_gas(time())


_ext_data_historic_unconv_gas = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "25",
    "C35",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_historic_unconv_gas",
)


@component.add(
    name="gCO2 per MJ coal",
    units="gCO2/MJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_gco2_per_mj_coal"},
)
def gco2_per_mj_coal():
    """
    CO2 emission factor coal.
    """
    return _ext_constant_gco2_per_mj_coal()


_ext_constant_gco2_per_mj_coal = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C91",
    {},
    _root,
    {},
    "_ext_constant_gco2_per_mj_coal",
)


@component.add(
    name="gCO2 per MJ conv oil",
    units="gCO2/MJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_gco2_per_mj_conv_oil"},
)
def gco2_per_mj_conv_oil():
    """
    CO2 emission factor conventional oil.
    """
    return _ext_constant_gco2_per_mj_conv_oil()


_ext_constant_gco2_per_mj_conv_oil = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C93",
    {},
    _root,
    {},
    "_ext_constant_gco2_per_mj_conv_oil",
)


@component.add(
    name="gCO2 per MJ shale oil",
    units="gCO2/MJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_gco2_per_mj_shale_oil"},
)
def gco2_per_mj_shale_oil():
    """
    CO2 emission factor shale oil.
    """
    return _ext_constant_gco2_per_mj_shale_oil()


_ext_constant_gco2_per_mj_shale_oil = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C96",
    {},
    _root,
    {},
    "_ext_constant_gco2_per_mj_shale_oil",
)


@component.add(
    name="dollars to Tdollars",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_dollars_to_tdollars"},
)
def dollars_to_tdollars():
    """
    Conversion from dollars to Tdollars (1 T$ = 1e12 $).
    """
    return _ext_constant_dollars_to_tdollars()


_ext_constant_dollars_to_tdollars = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C15",
    {},
    _root,
    {},
    "_ext_constant_dollars_to_tdollars",
)


@component.add(
    name="variation historic pop",
    units="people/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 3, "historic_pop": 2},
)
def variation_historic_pop():
    """
    Population historic variation.
    """
    return if_then_else(
        time() < 2014,
        lambda: historic_pop(integer(time() + 1)) - historic_pop(integer(time())),
        lambda: 0,
    )


@component.add(
    name="Historic pop",
    units="people",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_pop",
        "__lookup__": "_ext_lookup_historic_pop",
    },
)
def historic_pop(x, final_subs=None):
    """
    Historic population (1995-2015). Ref: World bank.
    """
    return _ext_lookup_historic_pop(x, final_subs)


_ext_lookup_historic_pop = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "25",
    "H28",
    {},
    _root,
    {},
    "_ext_lookup_historic_pop",
)


@component.add(
    name="land compet 2gen vs total land compet",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "land_compet_biofuels_2gen_mha": 1,
        "land_compet_required_dedicated_crops_for_biofuels": 1,
    },
)
def land_compet_2gen_vs_total_land_compet():
    """
    Land dedicated to 2nd generation biofuels vs total land competition for biofuels [to prevent stock "Land compet biofuels 2gen Mha" goes negative].
    """
    return (
        land_compet_biofuels_2gen_mha()
        / land_compet_required_dedicated_crops_for_biofuels()
    )


@component.add(
    name="GJ per EJ",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_gj_per_ej"},
)
def gj_per_ej():
    """
    Conversion from GJ to EJ (1 EJ = 1e9 GJ).
    """
    return _ext_constant_gj_per_ej()


_ext_constant_gj_per_ej = ExtConstant(
    "inputs_EU.xlsx", "Constants", "C14", {}, _root, {}, "_ext_constant_gj_per_ej"
)


@component.add(
    name="Average TPES per capita",
    units="GJ/(Year*people)",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"tpes_ej": 1, "gj_per_ej": 1, "population": 1},
)
def average_tpes_per_capita():
    """
    Average Total Primary Energy Supply per capita (GJ per capita).
    """
    return tpes_ej() * gj_per_ej() / population()


@component.add(
    name="Geot PE potential for heat TWth",
    units="TWth",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_geot_pe_potential_for_heat_twth"},
)
def geot_pe_potential_for_heat_twth():
    """
    Geothermal primary energy potential for heat.
    """
    return _ext_constant_geot_pe_potential_for_heat_twth()


_ext_constant_geot_pe_potential_for_heat_twth = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C56",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_geot_pe_potential_for_heat_twth",
)

_ext_constant_geot_pe_potential_for_heat_twth.add(
    "inputs_EU.xlsx", "SCEN1", "C56", {"scenarios": ["SCEN1"]}
)

_ext_constant_geot_pe_potential_for_heat_twth.add(
    "inputs_EU.xlsx", "SCEN2", "C56", {"scenarios": ["SCEN2"]}
)

_ext_constant_geot_pe_potential_for_heat_twth.add(
    "inputs_EU.xlsx", "SCEN3", "C56", {"scenarios": ["SCEN3"]}
)

_ext_constant_geot_pe_potential_for_heat_twth.add(
    "inputs_EU.xlsx", "SCEN4", "C56", {"scenarios": ["SCEN4"]}
)

_ext_constant_geot_pe_potential_for_heat_twth.add(
    "inputs_EU.xlsx", "User defined", "C56", {"scenarios": ["User defined"]}
)


@component.add(
    name="share RES for Elec vs TPE RES",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pe_elec_generation_from_res_ej": 2, "pe_supply_res_nonelec_ej": 1},
)
def share_res_for_elec_vs_tpe_res():
    """
    Share of RES for electricity in relation to TPE RES.
    """
    return pe_elec_generation_from_res_ej() / (
        pe_supply_res_nonelec_ej() + pe_elec_generation_from_res_ej()
    )


@component.add(
    name="\"TPES de Castro PhD - Scen 'madcoal' EJ\"",
    units="EJ/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "tpes_de_castro_phd_scen_madcoal": 1, "mtoe_per_ej": 1},
)
def tpes_de_castro_phd_scen_madcoal_ej():
    return tpes_de_castro_phd_scen_madcoal(time()) / mtoe_per_ej()


@component.add(
    name="extraction coal Mtoe",
    units="MToe/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"extraction_coal_ej_eu": 1, "mtoe_per_ej": 1},
)
def extraction_coal_mtoe():
    """
    Annual extraction of coal.
    """
    return extraction_coal_ej_eu() * mtoe_per_ej()


@component.add(
    name="max extraction coal Mtoe",
    units="MToe/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_extraction_coal_ej": 1, "mtoe_per_ej": 1},
)
def max_extraction_coal_mtoe():
    """
    Maximum extraction curve selected for the simulations.
    """
    return max_extraction_coal_ej() * mtoe_per_ej()


@component.add(
    name="TPE from RES EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pe_elec_generation_from_res_ej": 1, "pe_supply_res_nonelec_ej": 1},
)
def tpe_from_res_ej():
    """
    Total primary energy supply from all RES.
    """
    return pe_elec_generation_from_res_ej() + pe_supply_res_nonelec_ej()


@component.add(
    name="TPE from RES Mtoe",
    units="MToe/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"tpe_from_res_ej": 1, "mtoe_per_ej": 1},
)
def tpe_from_res_mtoe():
    """
    Total primary energy supply from all RES.
    """
    return tpe_from_res_ej() * mtoe_per_ej()


@component.add(
    name='"TPES de Castro PhD - Scen II EJ"',
    units="EJ/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "tpes_de_castro_phd_scen_ii": 1, "mtoe_per_ej": 1},
)
def tpes_de_castro_phd_scen_ii_ej():
    """
    TPES. (Add "Energía perdida" to the net energy extraction in the original model).
    """
    return tpes_de_castro_phd_scen_ii(time()) / mtoe_per_ej()


@component.add(
    name="Electrical distribution losses EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"electrical_distribution_losses_twh": 1, "ej_per_twh": 1},
)
def electrical_distribution_losses_ej():
    """
    Electical distribution losses (EJ)
    """
    return electrical_distribution_losses_twh() * ej_per_twh()


@component.add(
    name="Efficiency conversion BioE plants to heat",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_efficiency_conversion_bioe_plants_to_heat"
    },
)
def efficiency_conversion_bioe_plants_to_heat():
    """
    Efficiency of the transformation from bioenergy to heat in heat and CHP plants (aggregated). Efficiency of the transformation from bioenergy to electricity (estimation for 2014 from the IEA balances.
    """
    return _ext_constant_efficiency_conversion_bioe_plants_to_heat()


_ext_constant_efficiency_conversion_bioe_plants_to_heat = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C43",
    {},
    _root,
    {},
    "_ext_constant_efficiency_conversion_bioe_plants_to_heat",
)


@component.add(
    name="Efficiency improvement biofuels 3gen",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_efficiency_improvement_biofuels_3gen"},
)
def efficiency_improvement_biofuels_3gen():
    """
    Efficiency improvements of 3rd generation (cellulosic) in relation to 2nd generation biofuels.
    """
    return _ext_constant_efficiency_improvement_biofuels_3gen()


_ext_constant_efficiency_improvement_biofuels_3gen = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C47",
    {},
    _root,
    {},
    "_ext_constant_efficiency_improvement_biofuels_3gen",
)


@component.add(
    name="Potential PEavail biofuels 2gen land compet EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "land_compet_biofuels_2gen_mha": 1,
        "land_productivity_biofuels_2gen_ej_mha": 1,
    },
)
def potential_peavail_biofuels_2gen_land_compet_ej():
    """
    Potential primary energy available of biofuels from dedicated crops (2nd generation).
    """
    return land_compet_biofuels_2gen_mha() * land_productivity_biofuels_2gen_ej_mha()


@component.add(
    name="Annual additional historic land use biofuels 2gen",
    units="MHa/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "annual_additional_historic_product_biofuels_2gen": 1,
        "ej_per_ktoe": 1,
        "land_productivity_biofuels_2gen_ej_mha": 1,
    },
)
def annual_additional_historic_land_use_biofuels_2gen():
    return xr.DataArray(
        annual_additional_historic_product_biofuels_2gen()
        * ej_per_ktoe()
        / land_productivity_biofuels_2gen_ej_mha(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    )


@component.add(
    name="Max NPP potential bioE residues",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_max_npp_potential_bioe_residues"},
)
def max_npp_potential_bioe_residues():
    """
    Potencial following WBGU (2009).
    """
    return _ext_constant_max_npp_potential_bioe_residues()


_ext_constant_max_npp_potential_bioe_residues = ExtConstant(
    "inputs_EU.xlsx",
    "User defined",
    "C41",
    {"scenarios": ["User defined"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_max_npp_potential_bioe_residues",
)

_ext_constant_max_npp_potential_bioe_residues.add(
    "inputs_EU.xlsx", "BAU", "C41", {"scenarios": ["BAU"]}
)

_ext_constant_max_npp_potential_bioe_residues.add(
    "inputs_EU.xlsx", "SCEN1", "C41", {"scenarios": ["SCEN1"]}
)

_ext_constant_max_npp_potential_bioe_residues.add(
    "inputs_EU.xlsx", "SCEN2", "C41", {"scenarios": ["SCEN2"]}
)

_ext_constant_max_npp_potential_bioe_residues.add(
    "inputs_EU.xlsx", "SCEN3", "C41", {"scenarios": ["SCEN3"]}
)

_ext_constant_max_npp_potential_bioe_residues.add(
    "inputs_EU.xlsx", "SCEN4", "C41", {"scenarios": ["SCEN4"]}
)


@component.add(
    name="Grid reinforcement costs",
    units="dollars/kW",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_grid_reinforcement_costs"},
)
def grid_reinforcement_costs():
    """
    Grid reinforcement costs. We take the median from the study of Mills et al (2012) for wind: 300 $/kW (238.33 US1995$).
    """
    return _ext_constant_grid_reinforcement_costs()


_ext_constant_grid_reinforcement_costs = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C74",
    {},
    _root,
    {},
    "_ext_constant_grid_reinforcement_costs",
)


@component.add(
    name="Balancing costs",
    units="Tdollars/TWh",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "share_variable_res_elec_generation_vs_total": 1,
        "balancing_costs_ref": 1,
        "m_per_t": 1,
    },
)
def balancing_costs():
    """
    Balancing costs (1995T$ / TWh produced).
    """
    return (
        balancing_costs_ref(
            share_variable_res_elec_generation_vs_total(),
            {"scenarios": ["SCEN1", "SCEN2", "SCEN3", "SCEN4", "BAU", "User defined"]},
        )
        / m_per_t()
    )


@component.add(
    name="Historic land compet available for biofuels 2gen",
    units="MHa/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ej_per_ktoe": 1, "land_productivity_biofuels_2gen_ej_mha": 1},
)
def historic_land_compet_available_for_biofuels_2gen():
    """
    Land occupied by biofuels in 2015. Biofuels production in 2015: 7,4847.7 ktoe (BP 2016).
    """
    return xr.DataArray(
        74847.7 * ej_per_ktoe() / land_productivity_biofuels_2gen_ej_mha(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    )


@component.add(
    name="Land productivity biofuels 2gen EJ MHa",
    units="EJ/MHa",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_land_productivity_biofuels_2gen_ej_mha"},
)
def land_productivity_biofuels_2gen_ej_mha():
    """
    Energy output per area of biofuels 2nd generation (final energy). Source: de Castro et al (2014): 0.155 W/m2.
    """
    return _ext_constant_land_productivity_biofuels_2gen_ej_mha()


_ext_constant_land_productivity_biofuels_2gen_ej_mha = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C59",
    {},
    _root,
    {},
    "_ext_constant_land_productivity_biofuels_2gen_ej_mha",
)


@component.add(
    name="Max PEavail potential biofuels land compet",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "start_year_3gen_cellulosic_biofuels": 1,
        "max_land_compet_biofuels_2gen": 2,
        "land_productivity_biofuels_2gen_ej_mha": 2,
        "efficiency_improvement_biofuels_3gen": 1,
    },
)
def max_peavail_potential_biofuels_land_compet():
    """
    Annual biofuels potential (primary energy) available from land competition.
    """
    return if_then_else(
        time() < start_year_3gen_cellulosic_biofuels(),
        lambda: max_land_compet_biofuels_2gen()
        * land_productivity_biofuels_2gen_ej_mha(),
        lambda: max_land_compet_biofuels_2gen()
        * land_productivity_biofuels_2gen_ej_mha()
        * (1 + efficiency_improvement_biofuels_3gen()),
    )


@component.add(
    name="Balancing costs ref",
    units="dollars/MWh",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_balancing_costs_ref",
        "__lookup__": "_ext_lookup_balancing_costs_ref",
    },
)
def balancing_costs_ref(x, final_subs=None):
    """
    Balancing costs adapting data from Holttinen et al (2011).
    """
    return _ext_lookup_balancing_costs_ref(x, final_subs)


_ext_lookup_balancing_costs_ref = ExtLookup(
    "inputs_EU.xlsx",
    "Parameters",
    "24",
    "B25",
    {},
    _root,
    {},
    "_ext_lookup_balancing_costs_ref",
)


@component.add(
    name="efficiency conversion bioE to Elec",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_efficiency_conversion_bioe_to_elec"},
)
def efficiency_conversion_bioe_to_elec():
    """
    Efficiency of the transformation from bioenergy to electricity in both electricity plants and CHPs (estimation for 2014 from the IEA balances).
    """
    return _ext_constant_efficiency_conversion_bioe_to_elec()


_ext_constant_efficiency_conversion_bioe_to_elec = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C44",
    {},
    _root,
    {},
    "_ext_constant_efficiency_conversion_bioe_to_elec",
)


@component.add(
    name="Potential PEavail biofuels prod 3gen EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "land_compet_biofuels_3gen_mha": 1,
        "land_productivity_biofuels_2gen_ej_mha": 1,
        "efficiency_improvement_biofuels_3gen": 1,
    },
)
def potential_peavail_biofuels_prod_3gen_ej():
    """
    Potential Final Energy production (EJ) of biofuels from dedicated crops (3rd generation).
    """
    return (
        land_compet_biofuels_3gen_mha()
        * land_productivity_biofuels_2gen_ej_mha()
        * (1 + efficiency_improvement_biofuels_3gen())
    )


@component.add(
    name="Max PEavail potential bioE residues for cellulosic biofuels",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_npp_potential_bioe_residues_for_cellulosic_biofuels": 1,
        "efficiency_bioe_residues_to_cellulosic_liquids": 1,
    },
)
def max_peavail_potential_bioe_residues_for_cellulosic_biofuels():
    return (
        max_npp_potential_bioe_residues_for_cellulosic_biofuels()
        * efficiency_bioe_residues_to_cellulosic_liquids()
    )


@component.add(
    name="P biofuels 3gen land compet",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_biofuels_3gen_land_compet"},
)
def p_biofuels_3gen_land_compet():
    """
    Annual growth in energy output demand depending on the policy of the scenario.
    """
    return _ext_constant_p_biofuels_3gen_land_compet()


_ext_constant_p_biofuels_3gen_land_compet = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C47",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_biofuels_3gen_land_compet",
)

_ext_constant_p_biofuels_3gen_land_compet.add(
    "inputs_EU.xlsx", "SCEN1", "C47", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_biofuels_3gen_land_compet.add(
    "inputs_EU.xlsx", "SCEN2", "C47", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_biofuels_3gen_land_compet.add(
    "inputs_EU.xlsx", "SCEN3", "C47", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_biofuels_3gen_land_compet.add(
    "inputs_EU.xlsx", "SCEN4", "C47", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_biofuels_3gen_land_compet.add(
    "inputs_EU.xlsx", "User defined", "C47", {"scenarios": ["User defined"]}
)


@component.add(
    name='"constrain gas exogenous growth? delayed 1yr"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_constrain_gas_exogenous_growth_delayed_1yr": 1},
    other_deps={
        "_delayfixed_constrain_gas_exogenous_growth_delayed_1yr": {
            "initial": {},
            "step": {"constrain_gas_exogenous_growth": 1},
        }
    },
)
def constrain_gas_exogenous_growth_delayed_1yr():
    return _delayfixed_constrain_gas_exogenous_growth_delayed_1yr()


_delayfixed_constrain_gas_exogenous_growth_delayed_1yr = DelayFixed(
    lambda: constrain_gas_exogenous_growth(),
    lambda: 1,
    lambda: xr.DataArray(1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_constrain_gas_exogenous_growth_delayed_1yr",
)


@component.add(
    name='"constrain gas exogenous growth?"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"check_gases": 2},
)
def constrain_gas_exogenous_growth():
    """
    If negative, there is oversupply of gas. This variable is used to constrain the exogenous growth of exogenously-driven policies.
    """
    return if_then_else(
        check_gases() > -0.01,
        lambda: xr.DataArray(
            1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: check_gases(),
    )


@component.add(
    name='"constrain liquids exogenous growth? delayed 1yr"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_constrain_liquids_exogenous_growth_delayed_1yr": 1},
    other_deps={
        "_delayfixed_constrain_liquids_exogenous_growth_delayed_1yr": {
            "initial": {},
            "step": {"constrain_liquids_exogenous_growth": 1},
        }
    },
)
def constrain_liquids_exogenous_growth_delayed_1yr():
    return _delayfixed_constrain_liquids_exogenous_growth_delayed_1yr()


_delayfixed_constrain_liquids_exogenous_growth_delayed_1yr = DelayFixed(
    lambda: constrain_liquids_exogenous_growth(),
    lambda: 1,
    lambda: xr.DataArray(1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_constrain_liquids_exogenous_growth_delayed_1yr",
)


@component.add(
    name="check liquids delayed 1yr",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_check_liquids_delayed_1yr": 1},
    other_deps={
        "_delayfixed_check_liquids_delayed_1yr": {
            "initial": {},
            "step": {"check_liquids": 1},
        }
    },
)
def check_liquids_delayed_1yr():
    """
    Variable to avoid energy oversupply caused by exogenously driven policies.
    """
    return _delayfixed_check_liquids_delayed_1yr()


_delayfixed_check_liquids_delayed_1yr = DelayFixed(
    lambda: check_liquids(),
    lambda: 1,
    lambda: xr.DataArray(1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_check_liquids_delayed_1yr",
)


@component.add(
    name="check gas delayed 1yr",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_check_gas_delayed_1yr": 1},
    other_deps={
        "_delayfixed_check_gas_delayed_1yr": {"initial": {}, "step": {"check_gases": 1}}
    },
)
def check_gas_delayed_1yr():
    """
    Variable to avoid energy oversupply caused by exogenously driven policies.
    """
    return _delayfixed_check_gas_delayed_1yr()


_delayfixed_check_gas_delayed_1yr = DelayFixed(
    lambda: check_gases(),
    lambda: 1,
    lambda: xr.DataArray(1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_check_gas_delayed_1yr",
)


@component.add(
    name='"constrain liquids exogenous growth?"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"check_liquids": 2},
)
def constrain_liquids_exogenous_growth():
    """
    If negative, there is oversupply of liquids. This variable is used to constrain the exogenous growth of exogenously-driven policies.
    """
    return if_then_else(
        check_liquids() > 0,
        lambda: xr.DataArray(
            1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: check_liquids(),
    )


@component.add(
    name="Share variable RES elec vs total generation delayed 1yr",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={
        "_delayfixed_share_variable_res_elec_vs_total_generation_delayed_1yr": 1
    },
    other_deps={
        "_delayfixed_share_variable_res_elec_vs_total_generation_delayed_1yr": {
            "initial": {},
            "step": {"share_variable_res_elec_generation_vs_total": 1},
        }
    },
)
def share_variable_res_elec_vs_total_generation_delayed_1yr():
    """
    "Share variable RES elec generation vs total" delayed 1 year.
    """
    return _delayfixed_share_variable_res_elec_vs_total_generation_delayed_1yr()


_delayfixed_share_variable_res_elec_vs_total_generation_delayed_1yr = DelayFixed(
    lambda: share_variable_res_elec_generation_vs_total(),
    lambda: 1,
    lambda: xr.DataArray(
        0.0071, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    time_step,
    "_delayfixed_share_variable_res_elec_vs_total_generation_delayed_1yr",
)


@component.add(
    name='"overcapacity vs. intermittent RES penetration 0"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"share_variable_res_elec_vs_total_generation_delayed_1yr": 1},
)
def overcapacity_vs_intermittent_res_penetration_0():
    """
    Total overcapacity vs. intermittent RES penetration in electricity generation.
    """
    return np.maximum(
        1,
        0.9599
        * np.exp(0.8938 * share_variable_res_elec_vs_total_generation_delayed_1yr()),
    )


@component.add(
    name="Total electrical losses EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "elec_gen_related_losses_ej": 1,
        "electrical_distribution_losses_ej": 1,
    },
)
def total_electrical_losses_ej():
    """
    Total losses from electricity generation (generation + distribution).
    """
    return elec_gen_related_losses_ej() + electrical_distribution_losses_ej()


@component.add(
    name="Gen losses vs PE for elec",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "elec_gen_related_losses_ej": 1,
        "total_pe_for_electricity_consumption_ej": 1,
    },
)
def gen_losses_vs_pe_for_elec():
    """
    Generation losses as a share of the total PE for electricity.
    """
    return elec_gen_related_losses_ej() / total_pe_for_electricity_consumption_ej()


@component.add(
    name="initial GTL production",
    units="EJ/Year",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_gtl_production"},
)
def initial_gtl_production():
    """
    GTL production in the initial year 1995 (IEA balances).
    """
    return _ext_constant_initial_gtl_production()


_ext_constant_initial_gtl_production = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "H37",
    {},
    _root,
    {},
    "_ext_constant_initial_gtl_production",
)


@component.add(
    name="variation CTL",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 3,
        "historic_ctl_production": 2,
        "constrain_liquids_exogenous_growth": 1,
        "check_liquids": 1,
        "real_growth_ctl": 1,
        "ctl_potential_production": 2,
    },
)
def variation_ctl():
    """
    New annual CTL production.
    """
    return if_then_else(
        time() < 2013,
        lambda: xr.DataArray(
            historic_ctl_production(integer(time() + 1))
            - historic_ctl_production(integer(time())),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            check_liquids() < 0,
            lambda: constrain_liquids_exogenous_growth() * ctl_potential_production(),
            lambda: ctl_potential_production() * real_growth_ctl(),
        ),
    )


@component.add(
    name="variation GTL",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 3,
        "historic_gtl_production": 2,
        "real_growth_gtl": 1,
        "constrain_liquids_exogenous_growth": 1,
        "check_liquids": 1,
        "gtl_potential_production": 2,
    },
)
def variation_gtl():
    """
    New annual GTL production.
    """
    return if_then_else(
        time() < 2013,
        lambda: xr.DataArray(
            historic_gtl_production(integer(time() + 1))
            - historic_gtl_production(integer(time())),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            check_liquids() < 0,
            lambda: constrain_liquids_exogenous_growth() * gtl_potential_production(),
            lambda: gtl_potential_production() * real_growth_gtl(),
        ),
    )


@component.add(
    name="Historic GTL production",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_gtl_production",
        "__lookup__": "_ext_lookup_historic_gtl_production",
    },
)
def historic_gtl_production(x, final_subs=None):
    """
    Historic generation of GTL 1990-2014 (IEA Balances).
    """
    return _ext_lookup_historic_gtl_production(x, final_subs)


_ext_lookup_historic_gtl_production = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "25",
    "C37",
    {},
    _root,
    {},
    "_ext_lookup_historic_gtl_production",
)


@component.add(
    name="initial CTL production",
    units="EJ/Year",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_ctl_production"},
)
def initial_ctl_production():
    """
    CTL production in the initial year 1995 (IEA balances).
    """
    return _ext_constant_initial_ctl_production()


_ext_constant_initial_ctl_production = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "H36",
    {},
    _root,
    {},
    "_ext_constant_initial_ctl_production",
)


@component.add(
    name="Historic CTL production",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_ctl_production",
        "__lookup__": "_ext_lookup_historic_ctl_production",
    },
)
def historic_ctl_production(x, final_subs=None):
    """
    Historic generation of CTL 1990-2014 (IEA Balances).
    """
    return _ext_lookup_historic_ctl_production(x, final_subs)


_ext_lookup_historic_ctl_production = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "25",
    "C36",
    {},
    _root,
    {},
    "_ext_lookup_historic_ctl_production",
)


@component.add(
    name="improvement efficiency gas for electricity",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 3,
        "historic_efficiency_gas_for_electricity": 2,
        "percent_to_share": 1,
        "efficiency_gas_for_electricity": 1,
        "efficiency_improv_gas_for_electricity": 1,
        "remaining_efficiency_improv_gas_for_electricity": 1,
    },
)
def improvement_efficiency_gas_for_electricity():
    """
    Annual efficiency improvement of the gas power centrals.
    """
    return if_then_else(
        time() < 2013,
        lambda: (
            historic_efficiency_gas_for_electricity(integer(time() + 1))
            - historic_efficiency_gas_for_electricity(integer(time()))
        )
        * percent_to_share(),
        lambda: efficiency_gas_for_electricity()
        * remaining_efficiency_improv_gas_for_electricity()
        * efficiency_improv_gas_for_electricity(),
    )


@component.add(
    name="PE demand gas Elec plants EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_demand_gas_elec_plants_twh": 1,
        "efficiency_gas_for_electricity": 1,
        "ej_per_twh": 1,
    },
)
def pe_demand_gas_elec_plants_ej():
    """
    Primary energy demand of natural gas (EJ) for electricity consumption (including generation losses).
    """
    return (
        fe_demand_gas_elec_plants_twh() / efficiency_gas_for_electricity()
    ) * ej_per_twh()


@component.add(
    name="PE demand coal Elec plants EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_demand_coal_elec_plants_twh": 1,
        "efficiency_coal_for_electricity": 1,
        "ej_per_twh": 1,
    },
)
def pe_demand_coal_elec_plants_ej():
    """
    Primary energy demand of coal (EJ) for electricity consumption (including generation losses).
    """
    return (
        fe_demand_coal_elec_plants_twh() / efficiency_coal_for_electricity()
    ) * ej_per_twh()


@component.add(
    name="Max efficiency gas power plants",
    units="Dnml",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_max_efficiency_gas_power_plants"},
)
def max_efficiency_gas_power_plants():
    """
    Assumed maximum efficiency level for gas power centrals.
    """
    return _ext_constant_max_efficiency_gas_power_plants()


_ext_constant_max_efficiency_gas_power_plants = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C48",
    {},
    _root,
    {},
    "_ext_constant_max_efficiency_gas_power_plants",
)


@component.add(
    name="Total PE for electricity consumption EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_fe_elec_demand_ej": 1, "elec_gen_related_losses_ej": 1},
)
def total_pe_for_electricity_consumption_ej():
    """
    Total primary energy for electricity consumption (EJ).
    """
    return total_fe_elec_demand_ej() + elec_gen_related_losses_ej()


@component.add(
    name="initial efficiency gas for electricity",
    units="percent",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_efficiency_gas_for_electricity"},
)
def initial_efficiency_gas_for_electricity():
    """
    Efficiency of gas power centrals in the initial year 1995 (IEA balances).
    """
    return _ext_constant_initial_efficiency_gas_for_electricity()


_ext_constant_initial_efficiency_gas_for_electricity = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "H70",
    {},
    _root,
    {},
    "_ext_constant_initial_efficiency_gas_for_electricity",
)


@component.add(
    name="remaining efficiency improv gas for electricity",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_efficiency_gas_power_plants": 2,
        "efficiency_gas_for_electricity": 1,
    },
)
def remaining_efficiency_improv_gas_for_electricity():
    """
    Remaining efficiency improvement for gas power centrals.
    """
    return (
        max_efficiency_gas_power_plants() - efficiency_gas_for_electricity()
    ) / max_efficiency_gas_power_plants()


@component.add(
    name="Efficiency improv gas for electricity",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_efficiency_improv_gas_for_electricity"},
)
def efficiency_improv_gas_for_electricity():
    """
    Annual efficiency improvement in percentage of the gas power centrals for electricity production.
    """
    return _ext_constant_efficiency_improv_gas_for_electricity()


_ext_constant_efficiency_improv_gas_for_electricity = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C52",
    {},
    _root,
    {},
    "_ext_constant_efficiency_improv_gas_for_electricity",
)


@component.add(
    name="efficiency gas for electricity",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_efficiency_gas_for_electricity": 1},
    other_deps={
        "_integ_efficiency_gas_for_electricity": {
            "initial": {
                "initial_efficiency_gas_for_electricity": 1,
                "percent_to_share": 1,
            },
            "step": {"improvement_efficiency_gas_for_electricity": 1},
        }
    },
)
def efficiency_gas_for_electricity():
    """
    Efficiency of the gas power centrals.
    """
    return _integ_efficiency_gas_for_electricity()


_integ_efficiency_gas_for_electricity = Integ(
    lambda: improvement_efficiency_gas_for_electricity(),
    lambda: initial_efficiency_gas_for_electricity() * percent_to_share(),
    "_integ_efficiency_gas_for_electricity",
)


@component.add(
    name="percent to share",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_percent_to_share"},
)
def percent_to_share():
    """
    Conversion of percent to share.
    """
    return _ext_constant_percent_to_share()


_ext_constant_percent_to_share = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C12",
    {},
    _root,
    {},
    "_ext_constant_percent_to_share",
)


@component.add(
    name='"Additional PE production of CTL+GTL for liquids"',
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ped_coal_for_ctl_ej": 1,
        "ped_nat_gas_for_gtl_ej": 1,
        "fes_ctlgtl_ej": 1,
    },
)
def additional_pe_production_of_ctlgtl_for_liquids():
    """
    Additional primary energy production of CTL and GTL for liquids. We need to account for this difference since the oil replaced by CTL liquids is accounted for primary energy in WoLiM, while there are additional losses to process coal to obtain CTL (required to balance the TPES with the TPED).
    """
    return ped_coal_for_ctl_ej() + ped_nat_gas_for_gtl_ej() - fes_ctlgtl_ej()


@component.add(
    name="Annual additional historic product biofuels 2gen",
    units="ktoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 3, "historic_produc_biofuels_2gen": 2},
)
def annual_additional_historic_product_biofuels_2gen():
    """
    Annual additional historic production of liquids from biofuels ethanol and biodiesel, ktoe/Year (1990-2015). Ref: BP 2016.
    """
    return if_then_else(
        time() < 2015,
        lambda: historic_produc_biofuels_2gen(integer(time() + 1))
        - historic_produc_biofuels_2gen(integer(time())),
        lambda: 0,
    )


@component.add(
    name="Historic produc biofuels 2gen",
    units="ktoe/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_produc_biofuels_2gen",
        "__lookup__": "_ext_lookup_historic_produc_biofuels_2gen",
    },
)
def historic_produc_biofuels_2gen(x, final_subs=None):
    """
    Historic production of biofuels 2nd generation (1990-2015).
    """
    return _ext_lookup_historic_produc_biofuels_2gen(x, final_subs)


_ext_lookup_historic_produc_biofuels_2gen = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "25",
    "C56",
    {},
    _root,
    {},
    "_ext_lookup_historic_produc_biofuels_2gen",
)


@component.add(
    name="Cumulative emissions to 1995",
    units="GtC",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_cumulative_emissions_to_1995"},
)
def cumulative_emissions_to_1995():
    """
    Cumulative emissions 1751-1995 due to carbon emissions from fossil fuel consumption, cement production and land-use changes. Data from CDIAC and World Resources Institute.
    """
    return _ext_constant_cumulative_emissions_to_1995()


_ext_constant_cumulative_emissions_to_1995 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C108",
    {},
    _root,
    {},
    "_ext_constant_cumulative_emissions_to_1995",
)


@component.add(
    name='"start year BioE residues for non-biofuels"',
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_start_year_bioe_residues_for_nonbiofuels"
    },
)
def start_year_bioe_residues_for_nonbiofuels():
    """
    First year when the technology is available.
    """
    return _ext_constant_start_year_bioe_residues_for_nonbiofuels()


_ext_constant_start_year_bioe_residues_for_nonbiofuels = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C48",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_year_bioe_residues_for_nonbiofuels",
)

_ext_constant_start_year_bioe_residues_for_nonbiofuels.add(
    "inputs_EU.xlsx", "SCEN1", "C48", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_year_bioe_residues_for_nonbiofuels.add(
    "inputs_EU.xlsx", "SCEN2", "C48", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_year_bioe_residues_for_nonbiofuels.add(
    "inputs_EU.xlsx", "SCEN3", "C48", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_year_bioe_residues_for_nonbiofuels.add(
    "inputs_EU.xlsx", "SCEN4", "C48", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_year_bioe_residues_for_nonbiofuels.add(
    "inputs_EU.xlsx", "User defined", "C48", {"scenarios": ["User defined"]}
)


@component.add(
    name="CO2 fossil fuel emissions",
    units="GtCO2/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "co2_emissions_conv_gas_without_gtl": 1,
        "co2_emissions_unconv_gas": 1,
        "co2_emissions_gtl": 1,
        "co2_emissions_conv_oil": 1,
        "co2_emissions_unconv_oil": 1,
        "co2_emissions_coal_without_ctl": 1,
        "co2_emissions_ctl": 1,
    },
)
def co2_fossil_fuel_emissions():
    """
    Total CO2 emissions from fossil fuels.
    """
    return (
        co2_emissions_conv_gas_without_gtl()
        + co2_emissions_unconv_gas()
        + co2_emissions_gtl()
        + co2_emissions_conv_oil()
        + co2_emissions_unconv_oil()
        + co2_emissions_coal_without_ctl()
        + co2_emissions_ctl()
    )


@component.add(
    name="t per Gt",
    units="TonC/GtC",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_t_per_gt"},
)
def t_per_gt():
    """
    Conversion from tones to Gigatonnes of carbon.
    """
    return _ext_constant_t_per_gt()


_ext_constant_t_per_gt = ExtConstant(
    "inputs_EU.xlsx", "Constants", "C13", {}, _root, {}, "_ext_constant_t_per_gt"
)


@component.add(
    name="Share land compet biofuels",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "land_compet_required_dedicated_crops_for_biofuels": 1,
        "agricultural_land_2015": 1,
    },
)
def share_land_compet_biofuels():
    """
    Share of global arable land required by dedicated crops for biofuels (in land competition).
    """
    return (
        land_compet_required_dedicated_crops_for_biofuels() / agricultural_land_2015()
    )


@component.add(
    name="share land total RES vs arable",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_land_requirements_renew_mha": 1, "agricultural_land_2015": 1},
)
def share_land_total_res_vs_arable():
    """
    Land requirements for all RES as a share of the global arable land.
    """
    return total_land_requirements_renew_mha() / agricultural_land_2015()


@component.add(
    name="Year scarcity oil",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_total_oil_eu": 1, "time": 1},
)
def year_scarcity_oil():
    """
    Year when the parameter abundance falls below 0.95, i.e. year when scarcity starts.
    """
    return if_then_else(
        abundance_total_oil_eu() > 0.95,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: xr.DataArray(
            time(), {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="cumulated conv gas extraction",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cumulated_conv_gas_extraction": 1},
    other_deps={
        "_integ_cumulated_conv_gas_extraction": {
            "initial": {"cumulated_conv_gas_extraction_to_1995": 1},
            "step": {"extraction_conv_gas_ej": 1},
        }
    },
)
def cumulated_conv_gas_extraction():
    """
    Cumulated conventional gas extraction.
    """
    return _integ_cumulated_conv_gas_extraction()


_integ_cumulated_conv_gas_extraction = Integ(
    lambda: extraction_conv_gas_ej(),
    lambda: xr.DataArray(
        cumulated_conv_gas_extraction_to_1995(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_cumulated_conv_gas_extraction",
)


@component.add(
    name="cumulated conv gas extraction to 1995",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_cumulated_conv_gas_extraction_to_1995"},
)
def cumulated_conv_gas_extraction_to_1995():
    """
    Cumulated conventional gas extraction to 1995 (Mohr et al., 2015).
    """
    return _ext_constant_cumulated_conv_gas_extraction_to_1995()


_ext_constant_cumulated_conv_gas_extraction_to_1995 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C96",
    {},
    _root,
    {},
    "_ext_constant_cumulated_conv_gas_extraction_to_1995",
)


@component.add(
    name="Cumulated unconv gas extraction",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cumulated_unconv_gas_extraction": 1},
    other_deps={
        "_integ_cumulated_unconv_gas_extraction": {
            "initial": {"cumulated_unconv_gas_extraction_to_1995": 1},
            "step": {"extraction_unconv_gas_ej": 1},
        }
    },
)
def cumulated_unconv_gas_extraction():
    """
    Cumulated unconventional gas extraction.
    """
    return _integ_cumulated_unconv_gas_extraction()


_integ_cumulated_unconv_gas_extraction = Integ(
    lambda: extraction_unconv_gas_ej(),
    lambda: xr.DataArray(
        cumulated_unconv_gas_extraction_to_1995(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_cumulated_unconv_gas_extraction",
)


@component.add(
    name="cumulated unconv gas extraction to 1995",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_cumulated_unconv_gas_extraction_to_1995"
    },
)
def cumulated_unconv_gas_extraction_to_1995():
    """
    Cumulated unconventional gas extraction to 1995 (Mohr et al., 2015).
    """
    return _ext_constant_cumulated_unconv_gas_extraction_to_1995()


_ext_constant_cumulated_unconv_gas_extraction_to_1995 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C97",
    {},
    _root,
    {},
    "_ext_constant_cumulated_unconv_gas_extraction_to_1995",
)


@component.add(
    name="RURR uranium",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_rurr_uranium": 1},
    other_deps={
        "_integ_rurr_uranium": {
            "initial": {"urr_uranium": 1, "cumulated_uranium_extraction_to_1995": 1},
            "step": {"extraction_uranium_ej_eu": 1},
        }
    },
)
def rurr_uranium():
    """
    RURR uranium. 720 EJ extracted before 1990.
    """
    return _integ_rurr_uranium()


_integ_rurr_uranium = Integ(
    lambda: -extraction_uranium_ej_eu(),
    lambda: urr_uranium() - cumulated_uranium_extraction_to_1995(),
    "_integ_rurr_uranium",
)


@component.add(
    name="cumulated uranium extraction to 1995",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_cumulated_uranium_extraction_to_1995"},
)
def cumulated_uranium_extraction_to_1995():
    """
    Cumulated coal extraction to 1995 (EWG 2006).
    """
    return _ext_constant_cumulated_uranium_extraction_to_1995()


_ext_constant_cumulated_uranium_extraction_to_1995 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C99",
    {},
    _root,
    {},
    "_ext_constant_cumulated_uranium_extraction_to_1995",
)


@component.add(
    name="cumulated conv oil extraction",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cumulated_conv_oil_extraction": 1},
    other_deps={
        "_integ_cumulated_conv_oil_extraction": {
            "initial": {"cumulated_conv_oil_extraction_to_1995": 1},
            "step": {"extraction_conv_oil_ej": 1},
        }
    },
)
def cumulated_conv_oil_extraction():
    """
    Cumulated conventional oil extraction.
    """
    return _integ_cumulated_conv_oil_extraction()


_integ_cumulated_conv_oil_extraction = Integ(
    lambda: extraction_conv_oil_ej(),
    lambda: xr.DataArray(
        cumulated_conv_oil_extraction_to_1995(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_cumulated_conv_oil_extraction",
)


@component.add(
    name="cumulated conv oil extraction to 1995",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_cumulated_conv_oil_extraction_to_1995"},
)
def cumulated_conv_oil_extraction_to_1995():
    """
    Cumulated conventional oil extraction to 1995 (Mohr et al., 2015).
    """
    return _ext_constant_cumulated_conv_oil_extraction_to_1995()


_ext_constant_cumulated_conv_oil_extraction_to_1995 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C94",
    {},
    _root,
    {},
    "_ext_constant_cumulated_conv_oil_extraction_to_1995",
)


@component.add(
    name="cumulated unconv oil extraction",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cumulated_unconv_oil_extraction": 1},
    other_deps={
        "_integ_cumulated_unconv_oil_extraction": {
            "initial": {"cumulated_unconv_oil_extraction_to_1995": 1},
            "step": {"extraction_unconv_oil_ej": 1},
        }
    },
)
def cumulated_unconv_oil_extraction():
    """
    Cumulated unconventional oil extracted.
    """
    return _integ_cumulated_unconv_oil_extraction()


_integ_cumulated_unconv_oil_extraction = Integ(
    lambda: extraction_unconv_oil_ej(),
    lambda: xr.DataArray(
        cumulated_unconv_oil_extraction_to_1995(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_cumulated_unconv_oil_extraction",
)


@component.add(
    name="Cumulated coal extraction",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cumulated_coal_extraction": 1},
    other_deps={
        "_integ_cumulated_coal_extraction": {
            "initial": {"cumulated_coal_extraction_to_1995": 1},
            "step": {"extraction_coal_ej_eu": 1},
        }
    },
)
def cumulated_coal_extraction():
    """
    Cumulated coal extraction.
    """
    return _integ_cumulated_coal_extraction()


_integ_cumulated_coal_extraction = Integ(
    lambda: extraction_coal_ej_eu(),
    lambda: xr.DataArray(
        cumulated_coal_extraction_to_1995(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_cumulated_coal_extraction",
)


@component.add(
    name="cumulated coal extraction to 1995",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_cumulated_coal_extraction_to_1995"},
)
def cumulated_coal_extraction_to_1995():
    """
    Cumulated coal extraction to 1995 (Mohr et al., 2015).
    """
    return _ext_constant_cumulated_coal_extraction_to_1995()


_ext_constant_cumulated_coal_extraction_to_1995 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C98",
    {},
    _root,
    {},
    "_ext_constant_cumulated_coal_extraction_to_1995",
)


@component.add(
    name="cumulated unconv oil extraction to 1995",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_cumulated_unconv_oil_extraction_to_1995"
    },
)
def cumulated_unconv_oil_extraction_to_1995():
    """
    Cumulated unconventional oil extraction to 1995 (Mohr et al., 2015).
    """
    return _ext_constant_cumulated_unconv_oil_extraction_to_1995()


_ext_constant_cumulated_unconv_oil_extraction_to_1995 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C95",
    {},
    _root,
    {},
    "_ext_constant_cumulated_unconv_oil_extraction_to_1995",
)


@component.add(
    name="Cumulated uranium extraction",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cumulated_uranium_extraction": 1},
    other_deps={
        "_integ_cumulated_uranium_extraction": {
            "initial": {"cumulated_uranium_extraction_to_1995": 1},
            "step": {"extraction_uranium_ej_eu": 1},
        }
    },
)
def cumulated_uranium_extraction():
    """
    Cumulated uranium extraction.
    """
    return _integ_cumulated_uranium_extraction()


_integ_cumulated_uranium_extraction = Integ(
    lambda: extraction_uranium_ej_eu(),
    lambda: xr.DataArray(
        cumulated_uranium_extraction_to_1995(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_cumulated_uranium_extraction",
)


@component.add(
    name="Oil refinery gains EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"oil_refinery_gains_share": 1, "pes_oil_ej_delayed": 1},
)
def oil_refinery_gains_ej():
    """
    Oil refinery gains.
    """
    return oil_refinery_gains_share() * pes_oil_ej_delayed()


@component.add(
    name="Oil refinery gains share",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_oil_refinery_gains_share"},
)
def oil_refinery_gains_share():
    """
    We assume these energy gains are reached by applying natural gas as energy input. Historically, their share has been growing in the last decades (1.9% in 1980). WEO (2010) gives a 2.8% for the year 2009 and BP (2007) 2.6%. The value 2.7% is taken.
    """
    return _ext_constant_oil_refinery_gains_share()


_ext_constant_oil_refinery_gains_share = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C75",
    {},
    _root,
    {},
    "_ext_constant_oil_refinery_gains_share",
)


@component.add(
    name="Efficiency gas for oil refinery gains",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_efficiency_gas_for_oil_refinery_gains"},
)
def efficiency_gas_for_oil_refinery_gains():
    """
    We assume a 100% efficiency as first approximation.
    """
    return _ext_constant_efficiency_gas_for_oil_refinery_gains()


_ext_constant_efficiency_gas_for_oil_refinery_gains = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C51",
    {},
    _root,
    {},
    "_ext_constant_efficiency_gas_for_oil_refinery_gains",
)


@component.add(
    name="one year", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def one_year():
    return 1


@component.add(
    name="Land compet required dedicated crops for biofuels",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"land_compet_biofuels_2gen_mha": 1, "land_compet_biofuels_3gen_mha": 1},
)
def land_compet_required_dedicated_crops_for_biofuels():
    """
    Land requirements for crops for biofuels 2nd and 3rd generation (in land competing with other uses).
    """
    return land_compet_biofuels_2gen_mha() + land_compet_biofuels_3gen_mha()


@component.add(
    name="Annual shift from 2gen to 3gen",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_annual_shift_from_2gen_to_3gen"},
)
def annual_shift_from_2gen_to_3gen():
    """
    Share of the land dedicated for biofuels from the 2nd generation shifted to 3rd generation in the next year.
    """
    return _ext_constant_annual_shift_from_2gen_to_3gen()


_ext_constant_annual_shift_from_2gen_to_3gen = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C64",
    {},
    _root,
    {},
    "_ext_constant_annual_shift_from_2gen_to_3gen",
)


@component.add(
    name="P bioE residues",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_bioe_residues"},
)
def p_bioe_residues():
    """
    Annual growth in energy output demand depending on the policy of the scenario.
    """
    return _ext_constant_p_bioe_residues()


_ext_constant_p_bioe_residues = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C50",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_bioe_residues",
)

_ext_constant_p_bioe_residues.add(
    "inputs_EU.xlsx", "SCEN1", "C50", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_bioe_residues.add(
    "inputs_EU.xlsx", "SCEN2", "C50", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_bioe_residues.add(
    "inputs_EU.xlsx", "SCEN3", "C50", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_bioe_residues.add(
    "inputs_EU.xlsx", "SCEN4", "C50", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_bioe_residues.add(
    "inputs_EU.xlsx", "User defined", "C50", {"scenarios": ["User defined"]}
)


@component.add(
    name="Cellulosic biofuels available",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_npp_potential_bioe_residues_for_cellulosic_biofuels": 2,
        "potential_pe_cellulosic_biofuel_ej": 1,
    },
)
def cellulosic_biofuels_available():
    """
    Remaining potential available as given as a fraction of unity.
    """
    return zidz(
        max_npp_potential_bioe_residues_for_cellulosic_biofuels()
        - potential_pe_cellulosic_biofuel_ej(),
        max_npp_potential_bioe_residues_for_cellulosic_biofuels(),
    )


@component.add(
    name='"BioE residues for non-biofuels available"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_npp_potential_bioe_residues_for_nonbiofuels": 2,
        "pe_bioe_residues_nonbiofuels_ej": 1,
    },
)
def bioe_residues_for_nonbiofuels_available():
    """
    Remaining potential available of bioenergy residues for other uses than biofuels (heat, electricity and solids) as given as a fraction of unity.
    """
    return zidz(
        max_npp_potential_bioe_residues_for_nonbiofuels()
        - pe_bioe_residues_nonbiofuels_ej(),
        max_npp_potential_bioe_residues_for_nonbiofuels(),
    )


@component.add(
    name='"PE bioE residues non-biofuels EJ"',
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_pe_bioe_residues_nonbiofuels_ej": 1},
    other_deps={
        "_integ_pe_bioe_residues_nonbiofuels_ej": {
            "initial": {},
            "step": {"new_bioe_residues_for_nonbiofuels": 1},
        }
    },
)
def pe_bioe_residues_nonbiofuels_ej():
    """
    Total annual bioE residues production for other final uses than biofuels.
    """
    return _integ_pe_bioe_residues_nonbiofuels_ej()


_integ_pe_bioe_residues_nonbiofuels_ej = Integ(
    lambda: new_bioe_residues_for_nonbiofuels(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    "_integ_pe_bioe_residues_nonbiofuels_ej",
)


@component.add(
    name="share cellulosic biofuels vs BioE residues",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_share_cellulosic_biofuels_vs_bioe_residues"
    },
)
def share_cellulosic_biofuels_vs_bioe_residues():
    """
    Share bioenergy residues potential allocated to cellulosic biofuels production.
    """
    return _ext_constant_share_cellulosic_biofuels_vs_bioe_residues()


_ext_constant_share_cellulosic_biofuels_vs_bioe_residues = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C49",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_share_cellulosic_biofuels_vs_bioe_residues",
)

_ext_constant_share_cellulosic_biofuels_vs_bioe_residues.add(
    "inputs_EU.xlsx", "SCEN1", "C49", {"scenarios": ["SCEN1"]}
)

_ext_constant_share_cellulosic_biofuels_vs_bioe_residues.add(
    "inputs_EU.xlsx", "SCEN2", "C49", {"scenarios": ["SCEN2"]}
)

_ext_constant_share_cellulosic_biofuels_vs_bioe_residues.add(
    "inputs_EU.xlsx", "SCEN3", "C49", {"scenarios": ["SCEN3"]}
)

_ext_constant_share_cellulosic_biofuels_vs_bioe_residues.add(
    "inputs_EU.xlsx", "SCEN4", "C49", {"scenarios": ["SCEN4"]}
)

_ext_constant_share_cellulosic_biofuels_vs_bioe_residues.add(
    "inputs_EU.xlsx", "User defined", "C49", {"scenarios": ["User defined"]}
)


@component.add(
    name="share land total RES vs urban surface",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_land_requirements_renew_mha": 1, "urban_surface_2015": 1},
)
def share_land_total_res_vs_urban_surface():
    """
    Land requirements for all RES as a share of the global urban land.
    """
    return total_land_requirements_renew_mha() / urban_surface_2015()


@component.add(
    name="Max land compet biofuels 2gen",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "additional_land_compet_available_for_biofuels": 1,
        "historic_land_compet_available_for_biofuels_2gen": 1,
    },
)
def max_land_compet_biofuels_2gen():
    """
    Annual potential of biofuels (final energy) 2nd generation competing with other land uses.
    """
    return (
        additional_land_compet_available_for_biofuels()
        + historic_land_compet_available_for_biofuels_2gen()
    )


@component.add(
    name="P biofuels 2gen land compet",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_biofuels_2gen_land_compet"},
)
def p_biofuels_2gen_land_compet():
    """
    Annual growth in energy output demand depending on the policy of the scenario.
    """
    return _ext_constant_p_biofuels_2gen_land_compet()


_ext_constant_p_biofuels_2gen_land_compet = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C45",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_biofuels_2gen_land_compet",
)

_ext_constant_p_biofuels_2gen_land_compet.add(
    "inputs_EU.xlsx", "SCEN1", "C45", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_biofuels_2gen_land_compet.add(
    "inputs_EU.xlsx", "SCEN2", "C45", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_biofuels_2gen_land_compet.add(
    "inputs_EU.xlsx", "SCEN3", "C45", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_biofuels_2gen_land_compet.add(
    "inputs_EU.xlsx", "SCEN4", "C45", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_biofuels_2gen_land_compet.add(
    "inputs_EU.xlsx", "User defined", "C45", {"scenarios": ["User defined"]}
)


@component.add(
    name="past biofuels 2gen",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_past_biofuels_2gen"},
)
def past_biofuels_2gen():
    """
    Current growth patterns (1990-2015).
    """
    return _ext_constant_past_biofuels_2gen()


_ext_constant_past_biofuels_2gen = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C81",
    {},
    _root,
    {},
    "_ext_constant_past_biofuels_2gen",
)


@component.add(
    name="EJ per ktoe",
    units="EJ/ktoe",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ej_per_ktoe"},
)
def ej_per_ktoe():
    """
    1 ktoe = 0.000041868 EJ.
    """
    return _ext_constant_ej_per_ktoe()


_ext_constant_ej_per_ktoe = ExtConstant(
    "inputs_EU.xlsx", "Constants", "C16", {}, _root, {}, "_ext_constant_ej_per_ktoe"
)


@component.add(
    name="abundance total oil EU",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_total_oil_ej": 3, "pes_total_oil_ej_eu": 2},
)
def abundance_total_oil_eu():
    """
    The parameter abundance varies between (1;0). Abundance=1 while the supply covers the demand; the closest to 0 indicates a higher divergence between supply and demand.
    """
    return if_then_else(
        ped_total_oil_ej() < pes_total_oil_ej_eu(),
        lambda: xr.DataArray(
            1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: 1
        - zidz(ped_total_oil_ej() - pes_total_oil_ej_eu(), ped_total_oil_ej()),
    )


@component.add(
    name="Cp nuclear initial",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_cp_nuclear_initial"},
)
def cp_nuclear_initial():
    """
    Capacity factor of nuclear taking historic data as reference: in 2011, there were 374 GW of nuclear capacity operating that generated 2,507 TWh.
    """
    return _ext_constant_cp_nuclear_initial()


_ext_constant_cp_nuclear_initial = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "F15",
    {},
    _root,
    {},
    "_ext_constant_cp_nuclear_initial",
)


@component.add(
    name="extraction coal without CTL EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"extraction_coal_ej_eu": 1, "extraction_coal_for_ctl_ej": 1},
)
def extraction_coal_without_ctl_ej():
    """
    Extraction of conventional gas excepting the resource used to produce GTL.
    """
    return np.maximum(extraction_coal_ej_eu() - extraction_coal_for_ctl_ej(), 0)


@component.add(
    name="extraction coal for CTL EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_coal_for_ctl_ej": 1},
)
def extraction_coal_for_ctl_ej():
    """
    Extraction of coal for CTL. CTL demand is given priority over other uses since it is an exogenous assumption depending on the scenario.
    """
    return ped_coal_for_ctl_ej()


@component.add(
    name="Other liquids supply EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "oil_refinery_gains_ej": 1,
        "fes_ctlgtl_ej": 1,
        "fes_total_biofuels_production_ej": 1,
    },
)
def other_liquids_supply_ej():
    """
    Other liquids refer to: refinery gains, CTL, GTL and biofuels.
    """
    return (
        oil_refinery_gains_ej() + fes_ctlgtl_ej() + fes_total_biofuels_production_ej()
    )


@component.add(
    name="max offshore wind TWe",
    units="TWe",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_max_offshore_wind_twe"},
)
def max_offshore_wind_twe():
    """
    Techno-ecological potential of offshore wind (1 TWe = 8760 TWh in one year).
    """
    return _ext_constant_max_offshore_wind_twe()


_ext_constant_max_offshore_wind_twe = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C29",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_max_offshore_wind_twe",
)

_ext_constant_max_offshore_wind_twe.add(
    "inputs_EU.xlsx", "SCEN1", "C29", {"scenarios": ["SCEN1"]}
)

_ext_constant_max_offshore_wind_twe.add(
    "inputs_EU.xlsx", "SCEN2", "C29", {"scenarios": ["SCEN2"]}
)

_ext_constant_max_offshore_wind_twe.add(
    "inputs_EU.xlsx", "SCEN3", "C29", {"scenarios": ["SCEN3"]}
)

_ext_constant_max_offshore_wind_twe.add(
    "inputs_EU.xlsx", "SCEN4", "C29", {"scenarios": ["SCEN4"]}
)

_ext_constant_max_offshore_wind_twe.add(
    "inputs_EU.xlsx", "User defined", "C29", {"scenarios": ["User defined"]}
)


@component.add(
    name="URR unconv oil High Mohr15",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_unconv_oil_high_mohr15"},
)
def urr_unconv_oil_high_mohr15():
    return _ext_constant_urr_unconv_oil_high_mohr15()


_ext_constant_urr_unconv_oil_high_mohr15 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C136",
    {},
    _root,
    {},
    "_ext_constant_urr_unconv_oil_high_mohr15",
)


@component.add(
    name="URR unconv oil Low Mohr15",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_unconv_oil_low_mohr15"},
)
def urr_unconv_oil_low_mohr15():
    return _ext_constant_urr_unconv_oil_low_mohr15()


_ext_constant_urr_unconv_oil_low_mohr15 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C132",
    {},
    _root,
    {},
    "_ext_constant_urr_unconv_oil_low_mohr15",
)


@component.add(
    name="URR unconv oil User defined",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_unconv_oil_user_defined"},
)
def urr_unconv_oil_user_defined():
    return _ext_constant_urr_unconv_oil_user_defined()


_ext_constant_urr_unconv_oil_user_defined = ExtConstant(
    "inputs_EU.xlsx",
    "User defined",
    "C141",
    {},
    _root,
    {},
    "_ext_constant_urr_unconv_oil_user_defined",
)


@component.add(
    name="URR conv oil Mohr15 High",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_conv_oil_mohr15_high"},
)
def urr_conv_oil_mohr15_high():
    return _ext_constant_urr_conv_oil_mohr15_high()


_ext_constant_urr_conv_oil_mohr15_high = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C130",
    {},
    _root,
    {},
    "_ext_constant_urr_conv_oil_mohr15_high",
)


@component.add(
    name="URR conv oil Mohr15 Low",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_conv_oil_mohr15_low"},
)
def urr_conv_oil_mohr15_low():
    return _ext_constant_urr_conv_oil_mohr15_low()


_ext_constant_urr_conv_oil_mohr15_low = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C126",
    {},
    _root,
    {},
    "_ext_constant_urr_conv_oil_mohr15_low",
)


@component.add(
    name="table max extraction Mohr15 High conv oil EJ",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_mohr15_high_conv_oil_ej",
        "__lookup__": "_ext_lookup_table_max_extraction_mohr15_high_conv_oil_ej",
    },
)
def table_max_extraction_mohr15_high_conv_oil_ej(x, final_subs=None):
    return _ext_lookup_table_max_extraction_mohr15_high_conv_oil_ej(x, final_subs)


_ext_lookup_table_max_extraction_mohr15_high_conv_oil_ej = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "130",
    "E131",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_mohr15_high_conv_oil_ej",
)


@component.add(
    name="table max extraction Mohr15 Low conv oil EJ",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_mohr15_low_conv_oil_ej",
        "__lookup__": "_ext_lookup_table_max_extraction_mohr15_low_conv_oil_ej",
    },
)
def table_max_extraction_mohr15_low_conv_oil_ej(x, final_subs=None):
    return _ext_lookup_table_max_extraction_mohr15_low_conv_oil_ej(x, final_subs)


_ext_lookup_table_max_extraction_mohr15_low_conv_oil_ej = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "126",
    "E127",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_mohr15_low_conv_oil_ej",
)


@component.add(
    name="table max extraction Mohr15 BG conv oil EJ",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_mohr15_bg_conv_oil_ej",
        "__lookup__": "_ext_lookup_table_max_extraction_mohr15_bg_conv_oil_ej",
    },
)
def table_max_extraction_mohr15_bg_conv_oil_ej(x, final_subs=None):
    return _ext_lookup_table_max_extraction_mohr15_bg_conv_oil_ej(x, final_subs)


_ext_lookup_table_max_extraction_mohr15_bg_conv_oil_ej = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "128",
    "E129",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_mohr15_bg_conv_oil_ej",
)


@component.add(
    name='"separate conv and unconv gas?"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_separate_conv_and_unconv_gas"},
)
def separate_conv_and_unconv_gas():
    """
    Switch to disaggregate between conventional and unconventional fuel: "1" = disaggregation, "0" = conv+unconv aggregated (all the gas flows then through the right side of this view, i.e. the "conventional gas" modelling side).
    """
    return _ext_constant_separate_conv_and_unconv_gas()


_ext_constant_separate_conv_and_unconv_gas = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C83",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_separate_conv_and_unconv_gas",
)

_ext_constant_separate_conv_and_unconv_gas.add(
    "inputs_EU.xlsx", "SCEN1", "C83", {"scenarios": ["SCEN1"]}
)

_ext_constant_separate_conv_and_unconv_gas.add(
    "inputs_EU.xlsx", "SCEN2", "C83", {"scenarios": ["SCEN2"]}
)

_ext_constant_separate_conv_and_unconv_gas.add(
    "inputs_EU.xlsx", "SCEN3", "C83", {"scenarios": ["SCEN3"]}
)

_ext_constant_separate_conv_and_unconv_gas.add(
    "inputs_EU.xlsx", "SCEN4", "C83", {"scenarios": ["SCEN4"]}
)

_ext_constant_separate_conv_and_unconv_gas.add(
    "inputs_EU.xlsx", "User defined", "C83", {"scenarios": ["User defined"]}
)


@component.add(
    name="table max extraction unconv oil User defined",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_unconv_oil_user_defined",
        "__lookup__": "_ext_lookup_table_max_extraction_unconv_oil_user_defined",
    },
)
def table_max_extraction_unconv_oil_user_defined(x, final_subs=None):
    return _ext_lookup_table_max_extraction_unconv_oil_user_defined(x, final_subs)


_ext_lookup_table_max_extraction_unconv_oil_user_defined = ExtLookup(
    "inputs_EU.xlsx",
    "User defined",
    "141",
    "E142",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_unconv_oil_user_defined",
)


@component.add(
    name="URR tot agg oil User defined",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_tot_agg_oil_user_defined"},
)
def urr_tot_agg_oil_user_defined():
    return _ext_constant_urr_tot_agg_oil_user_defined()


_ext_constant_urr_tot_agg_oil_user_defined = ExtConstant(
    "inputs_EU.xlsx",
    "User defined",
    "C143",
    {},
    _root,
    {},
    "_ext_constant_urr_tot_agg_oil_user_defined",
)


@component.add(
    name="choose extraction curve tot agg oil",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_choose_extraction_curve_tot_agg_oil"},
)
def choose_extraction_curve_tot_agg_oil():
    """
    1-Laherrère12 2-User defined
    """
    return _ext_constant_choose_extraction_curve_tot_agg_oil()


_ext_constant_choose_extraction_curve_tot_agg_oil = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D76",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_choose_extraction_curve_tot_agg_oil",
)

_ext_constant_choose_extraction_curve_tot_agg_oil.add(
    "inputs_EU.xlsx", "SCEN1", "D76", {"scenarios": ["SCEN1"]}
)

_ext_constant_choose_extraction_curve_tot_agg_oil.add(
    "inputs_EU.xlsx", "SCEN2", "D76", {"scenarios": ["SCEN2"]}
)

_ext_constant_choose_extraction_curve_tot_agg_oil.add(
    "inputs_EU.xlsx", "SCEN3", "D76", {"scenarios": ["SCEN3"]}
)

_ext_constant_choose_extraction_curve_tot_agg_oil.add(
    "inputs_EU.xlsx", "SCEN4", "D76", {"scenarios": ["SCEN4"]}
)

_ext_constant_choose_extraction_curve_tot_agg_oil.add(
    "inputs_EU.xlsx", "User defined", "D76", {"scenarios": ["User defined"]}
)


@component.add(
    name="URR conv oil Mohr15 BG",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_conv_oil_mohr15_bg"},
)
def urr_conv_oil_mohr15_bg():
    return _ext_constant_urr_conv_oil_mohr15_bg()


_ext_constant_urr_conv_oil_mohr15_bg = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C128",
    {},
    _root,
    {},
    "_ext_constant_urr_conv_oil_mohr15_bg",
)


@component.add(
    name="URR conv oil User defined",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_conv_oil_user_defined"},
)
def urr_conv_oil_user_defined():
    return _ext_constant_urr_conv_oil_user_defined()


_ext_constant_urr_conv_oil_user_defined = ExtConstant(
    "inputs_EU.xlsx",
    "User defined",
    "C139",
    {},
    _root,
    {},
    "_ext_constant_urr_conv_oil_user_defined",
)


@component.add(
    name="choose extraction tot agg gas curve",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_choose_extraction_tot_agg_gas_curve"},
)
def choose_extraction_tot_agg_gas_curve():
    """
    1- Laherrère10 2- BG Mohr12 3- User defined
    """
    return _ext_constant_choose_extraction_tot_agg_gas_curve()


_ext_constant_choose_extraction_tot_agg_gas_curve = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D92",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_choose_extraction_tot_agg_gas_curve",
)

_ext_constant_choose_extraction_tot_agg_gas_curve.add(
    "inputs_EU.xlsx", "SCEN1", "D92", {"scenarios": ["SCEN1"]}
)

_ext_constant_choose_extraction_tot_agg_gas_curve.add(
    "inputs_EU.xlsx", "SCEN2", "D92", {"scenarios": ["SCEN2"]}
)

_ext_constant_choose_extraction_tot_agg_gas_curve.add(
    "inputs_EU.xlsx", "SCEN3", "D92", {"scenarios": ["SCEN3"]}
)

_ext_constant_choose_extraction_tot_agg_gas_curve.add(
    "inputs_EU.xlsx", "SCEN4", "D92", {"scenarios": ["SCEN4"]}
)

_ext_constant_choose_extraction_tot_agg_gas_curve.add(
    "inputs_EU.xlsx", "User defined", "D92", {"scenarios": ["User defined"]}
)


@component.add(
    name="table max extraction unconv oil Low Mohr15",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_unconv_oil_low_mohr15",
        "__lookup__": "_ext_lookup_table_max_extraction_unconv_oil_low_mohr15",
    },
)
def table_max_extraction_unconv_oil_low_mohr15(x, final_subs=None):
    return _ext_lookup_table_max_extraction_unconv_oil_low_mohr15(x, final_subs)


_ext_lookup_table_max_extraction_unconv_oil_low_mohr15 = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "132",
    "E133",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_unconv_oil_low_mohr15",
)


@component.add(
    name="URR unconv oil BG Mohr15",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_unconv_oil_bg_mohr15"},
)
def urr_unconv_oil_bg_mohr15():
    return _ext_constant_urr_unconv_oil_bg_mohr15()


_ext_constant_urr_unconv_oil_bg_mohr15 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C134",
    {},
    _root,
    {},
    "_ext_constant_urr_unconv_oil_bg_mohr15",
)


@component.add(
    name="table max extraction unconv oil High Mohr15",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_unconv_oil_high_mohr15",
        "__lookup__": "_ext_lookup_table_max_extraction_unconv_oil_high_mohr15",
    },
)
def table_max_extraction_unconv_oil_high_mohr15(x, final_subs=None):
    return _ext_lookup_table_max_extraction_unconv_oil_high_mohr15(x, final_subs)


_ext_lookup_table_max_extraction_unconv_oil_high_mohr15 = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "136",
    "E137",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_unconv_oil_high_mohr15",
)


@component.add(
    name="table max extraction tot agg oil User defined",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_tot_agg_oil_user_defined",
        "__lookup__": "_ext_lookup_table_max_extraction_tot_agg_oil_user_defined",
    },
)
def table_max_extraction_tot_agg_oil_user_defined(x, final_subs=None):
    return _ext_lookup_table_max_extraction_tot_agg_oil_user_defined(x, final_subs)


_ext_lookup_table_max_extraction_tot_agg_oil_user_defined = ExtLookup(
    "inputs_EU.xlsx",
    "User defined",
    "143",
    "E144",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_tot_agg_oil_user_defined",
)


@component.add(
    name="table max conv oil extraction User defined",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_conv_oil_extraction_user_defined",
        "__lookup__": "_ext_lookup_table_max_conv_oil_extraction_user_defined",
    },
)
def table_max_conv_oil_extraction_user_defined(x, final_subs=None):
    return _ext_lookup_table_max_conv_oil_extraction_user_defined(x, final_subs)


_ext_lookup_table_max_conv_oil_extraction_user_defined = ExtLookup(
    "inputs_EU.xlsx",
    "User defined",
    "139",
    "E140",
    {},
    _root,
    {},
    "_ext_lookup_table_max_conv_oil_extraction_user_defined",
)


@component.add(
    name='"separate conv and unconv oil?"',
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_separate_conv_and_unconv_oil"},
)
def separate_conv_and_unconv_oil():
    """
    Switch to disaggregate between conventional and unconventional fuel: "1" = disaggregation, "0" = conv+unconv aggregated (all the oil flows then through the right side of this view, i.e. the "conventional oil" modelling side).
    """
    return _ext_constant_separate_conv_and_unconv_oil()


_ext_constant_separate_conv_and_unconv_oil = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C67",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_separate_conv_and_unconv_oil",
)

_ext_constant_separate_conv_and_unconv_oil.add(
    "inputs_EU.xlsx", "SCEN1", "C67", {"scenarios": ["SCEN1"]}
)

_ext_constant_separate_conv_and_unconv_oil.add(
    "inputs_EU.xlsx", "SCEN2", "C67", {"scenarios": ["SCEN2"]}
)

_ext_constant_separate_conv_and_unconv_oil.add(
    "inputs_EU.xlsx", "SCEN3", "C67", {"scenarios": ["SCEN3"]}
)

_ext_constant_separate_conv_and_unconv_oil.add(
    "inputs_EU.xlsx", "SCEN4", "C67", {"scenarios": ["SCEN4"]}
)

_ext_constant_separate_conv_and_unconv_oil.add(
    "inputs_EU.xlsx", "User defined", "C67", {"scenarios": ["User defined"]}
)


@component.add(
    name="kt uranium per EJ",
    units="Kt/EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_kt_uranium_per_ej"},
)
def kt_uranium_per_ej():
    """
    Unit conversion (1 EJ thermal = 2.3866). See EWG (2006).
    """
    return _ext_constant_kt_uranium_per_ej()


_ext_constant_kt_uranium_per_ej = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C10",
    {},
    _root,
    {},
    "_ext_constant_kt_uranium_per_ej",
)


@component.add(
    name="life time nuclear",
    units="Year",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_life_time_nuclear"},
)
def life_time_nuclear():
    """
    Lifetime of nuclear.
    """
    return _ext_constant_life_time_nuclear()


_ext_constant_life_time_nuclear = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C15",
    {},
    _root,
    {},
    "_ext_constant_life_time_nuclear",
)


@component.add(
    name='"Hist share oil/FF Elec"',
    units="Dmnl",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_hist_share_oilff_elec",
        "__data__": "_ext_data_hist_share_oilff_elec",
        "time": 1,
    },
)
def hist_share_oilff_elec():
    """
    Historica share of oil for electricity vs total electricity generation from fossil fuels.
    """
    return _ext_data_hist_share_oilff_elec(time())


_ext_data_hist_share_oilff_elec = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "25",
    "H39",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_hist_share_oilff_elec",
)


@component.add(
    name="Cumulated uranium extraction kt",
    units="Kt",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"cumulated_uranium_extraction": 1, "kt_uranium_per_ej": 1},
)
def cumulated_uranium_extraction_kt():
    """
    Cumulated uranium extraction (kt).
    """
    return cumulated_uranium_extraction() * kt_uranium_per_ej()


@component.add(
    name="extraction uranium kt",
    units="Kt/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"extraction_uranium_ej_eu": 1, "kt_uranium_per_ej": 1},
)
def extraction_uranium_kt():
    """
    Extracción of uranium in kt.
    """
    return extraction_uranium_ej_eu() * kt_uranium_per_ej()


@component.add(
    name="efficiency uranium for electricity",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_efficiency_uranium_for_electricity"},
)
def efficiency_uranium_for_electricity():
    """
    Efficiency of uranium in nuclear power centrals. [IEA Balances].
    """
    return _ext_constant_efficiency_uranium_for_electricity()


_ext_constant_efficiency_uranium_for_electricity = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C41",
    {},
    _root,
    {},
    "_ext_constant_efficiency_uranium_for_electricity",
)


@component.add(
    name='"Hist share gas/(coal +gas) Elec"',
    units="Dmnl",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_hist_share_gascoal_gas_elec",
        "__data__": "_ext_data_hist_share_gascoal_gas_elec",
        "time": 1,
    },
)
def hist_share_gascoal_gas_elec():
    """
    Share of natural gas for electricity in relation to the total gas+coal.
    """
    return _ext_data_hist_share_gascoal_gas_elec(time())


_ext_data_hist_share_gascoal_gas_elec = ExtData(
    "inputs_EU.xlsx",
    "Constants",
    "25",
    "H40",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_hist_share_gascoal_gas_elec",
)


@component.add(
    name="Historic nuclear generation TWh",
    units="TWh/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_nuclear_generation_twh",
        "__lookup__": "_ext_lookup_historic_nuclear_generation_twh",
    },
)
def historic_nuclear_generation_twh(x, final_subs=None):
    """
    Historic data of annual production from nuclear energy in TWh.
    """
    return _ext_lookup_historic_nuclear_generation_twh(x, final_subs)


_ext_lookup_historic_nuclear_generation_twh = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "25",
    "C69",
    {},
    _root,
    {},
    "_ext_lookup_historic_nuclear_generation_twh",
)


@component.add(
    name="invest cost nuclear",
    units="Tdollars/TWe",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_invest_cost_nuclear",
        "__data__": "_ext_data_invest_cost_nuclear",
        "time": 1,
    },
)
def invest_cost_nuclear():
    """
    Investment cost of nuclear power considering that future reactors would require the same investment as the recent Hinkley Point C nuclear power station in UK of 8,000 US$/kW (5536.71 1995US$/kW).
    """
    return _ext_data_invest_cost_nuclear(time())


_ext_data_invest_cost_nuclear = ExtData(
    "inputs_EU.xlsx",
    "Parameters",
    "6",
    "G15",
    None,
    {},
    _root,
    {},
    "_ext_data_invest_cost_nuclear",
)


@component.add(
    name="kWh per TWh",
    units="kWh/TWh",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_kwh_per_twh"},
)
def kwh_per_twh():
    """
    Conversion between kWh and TWh (1 TWh=1e9 kWh).
    """
    return _ext_constant_kwh_per_twh()


_ext_constant_kwh_per_twh = ExtConstant(
    "inputs_EU.xlsx", "Constants", "C9", {}, _root, {}, "_ext_constant_kwh_per_twh"
)


@component.add(
    name="Total FE Elec demand EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_fe_elec_demand_twh": 1, "ej_per_twh": 1},
)
def total_fe_elec_demand_ej():
    """
    Electricity demand generation (final energy, includes distribution losses).
    """
    return total_fe_elec_demand_twh() * ej_per_twh()


@component.add(
    name="gCO2e per KWh biomass",
    units="gCO2e/kWh",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_gco2e_per_kwh_biomass"},
)
def gco2e_per_kwh_biomass():
    """
    No data.
    """
    return _ext_constant_gco2e_per_kwh_biomass()


_ext_constant_gco2e_per_kwh_biomass = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "E8",
    {},
    _root,
    {},
    "_ext_constant_gco2e_per_kwh_biomass",
)


@component.add(
    name="MToe per EJ",
    units="MToe/EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_mtoe_per_ej"},
)
def mtoe_per_ej():
    """
    Unit conversion (1000 Mtoe=41.868 EJ)
    """
    return _ext_constant_mtoe_per_ej()


_ext_constant_mtoe_per_ej = ExtConstant(
    "inputs_EU.xlsx", "Constants", "C6", {}, _root, {}, "_ext_constant_mtoe_per_ej"
)


@component.add(
    name='"share transm&distr elec losses initial"',
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_share_transmdistr_elec_losses_initial"},
)
def share_transmdistr_elec_losses_initial():
    """
    Current share of electrical transmission and distribution losses in relation to electricity consumption. We define these losses at around 9.5% following historical data.
    """
    return _ext_constant_share_transmdistr_elec_losses_initial()


_ext_constant_share_transmdistr_elec_losses_initial = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C54",
    {},
    _root,
    {},
    "_ext_constant_share_transmdistr_elec_losses_initial",
)


@component.add(
    name="EJ per TWh",
    units="EJ/TWh",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_ej_per_twh"},
)
def ej_per_twh():
    """
    Unit conversion (3.6 EJ=1000 TWh)
    """
    return _ext_constant_ej_per_twh()


_ext_constant_ej_per_twh = ExtConstant(
    "inputs_EU.xlsx", "Constants", "C5", {}, _root, {}, "_ext_constant_ej_per_twh"
)


@component.add(
    name="TWe per TWh",
    units="TWe/(TWh/Year)",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_twe_per_twh"},
)
def twe_per_twh():
    """
    Unit conversion (1 TWe=8760 TWh per year)
    """
    return _ext_constant_twe_per_twh()


_ext_constant_twe_per_twh = ExtConstant(
    "inputs_EU.xlsx", "Constants", "C7", {}, _root, {}, "_ext_constant_twe_per_twh"
)


@component.add(
    name="initial population",
    units="people",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_population"},
)
def initial_population():
    """
    Initial value from WorldBank in 1995.
    """
    return _ext_constant_initial_population()


_ext_constant_initial_population = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "H28",
    {},
    _root,
    {},
    "_ext_constant_initial_population",
)


@component.add(
    name="Population",
    units="people",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_population": 1},
    other_deps={
        "_integ_population": {
            "initial": {"initial_population": 1},
            "step": {"pop_variation": 1},
        }
    },
)
def population():
    """
    Population projection.
    """
    return _integ_population()


_integ_population = Integ(
    lambda: pop_variation(),
    lambda: xr.DataArray(
        initial_population(), {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    "_integ_population",
)


@component.add(
    name="VE objetive UE2020 extrap",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def ve_objetive_ue2020_extrap():
    return 1


@component.add(
    name="VE objetive UE2020", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def ve_objetive_ue2020():
    return 1


@component.add(
    name="Choose extraction uranium curve",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_choose_extraction_uranium_curve"},
)
def choose_extraction_uranium_curve():
    """
    1-EWG13 2-Other
    """
    return _ext_constant_choose_extraction_uranium_curve()


_ext_constant_choose_extraction_uranium_curve = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D105",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_choose_extraction_uranium_curve",
)

_ext_constant_choose_extraction_uranium_curve.add(
    "inputs_EU.xlsx", "SCEN1", "D105", {"scenarios": ["SCEN1"]}
)

_ext_constant_choose_extraction_uranium_curve.add(
    "inputs_EU.xlsx", "SCEN2", "D105", {"scenarios": ["SCEN2"]}
)

_ext_constant_choose_extraction_uranium_curve.add(
    "inputs_EU.xlsx", "SCEN3", "D105", {"scenarios": ["SCEN3"]}
)

_ext_constant_choose_extraction_uranium_curve.add(
    "inputs_EU.xlsx", "SCEN4", "D105", {"scenarios": ["SCEN4"]}
)

_ext_constant_choose_extraction_uranium_curve.add(
    "inputs_EU.xlsx", "User defined", "D105", {"scenarios": ["User defined"]}
)


@component.add(
    name="Year scarcity TPE",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_tpe": 1, "time": 1},
)
def year_scarcity_tpe():
    """
    Year when the parameter abundance falls below 0.95, i.e. year when scarcity starts.
    """
    return if_then_else(
        abundance_tpe() > 0.95,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: xr.DataArray(
            time(), {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="Year scarcity uranium",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_uranium": 1, "time": 1},
)
def year_scarcity_uranium():
    """
    Year when the parameter abundance falls below 0.95, i.e. year when scarcity starts.
    """
    return if_then_else(
        abundance_uranium() > 0.95,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: xr.DataArray(
            time(), {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="Year scarcity coal",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_coal_eu": 1, "time": 1},
)
def year_scarcity_coal():
    """
    Year when the parameter abundance falls below 0.95, i.e. year when scarcity starts.
    """
    return if_then_else(
        abundance_coal_eu() > 0.95,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: xr.DataArray(
            time(), {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="Year scarcity liquids",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_liquids": 1, "time": 1},
)
def year_scarcity_liquids():
    """
    Year when the parameter abundance falls below 0.95, i.e. year when scarcity starts.
    """
    return if_then_else(
        abundance_liquids() > 0.95,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: xr.DataArray(
            time(), {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="effects shortage gas",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_gases": 2},
)
def effects_shortage_gas():
    """
    The eventual scarcity of gas would likely constrain the development of NGVs/GTLs. The proposed relationship avoids an abrupt limitation by introducing a range (1;0.8) in the gas abundance that constrains the development of NGVs/GTLs.
    """
    return if_then_else(
        abundance_gases() > 0.8,
        lambda: ((abundance_gases() - 0.8) * 5) ** 2,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="Year scarcity gases",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_gases": 1, "time": 1},
)
def year_scarcity_gases():
    """
    Year when the parameter abundance falls below 0.95, i.e. year when scarcity starts.
    """
    return if_then_else(
        abundance_gases() > 0.95,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: xr.DataArray(
            time(), {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="max percent of change",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def max_percent_of_change():
    return xr.DataArray(
        0.448, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    )


@component.add(
    name="choose extraction coal curve",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_choose_extraction_coal_curve"},
)
def choose_extraction_coal_curve():
    """
    1= Mohr15 Low 2= Mohr15 BG 3= Mohr15 High 4= User defined
    """
    return _ext_constant_choose_extraction_coal_curve()


_ext_constant_choose_extraction_coal_curve = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D100",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_choose_extraction_coal_curve",
)

_ext_constant_choose_extraction_coal_curve.add(
    "inputs_EU.xlsx", "SCEN1", "D100", {"scenarios": ["SCEN1"]}
)

_ext_constant_choose_extraction_coal_curve.add(
    "inputs_EU.xlsx", "SCEN2", "D100", {"scenarios": ["SCEN2"]}
)

_ext_constant_choose_extraction_coal_curve.add(
    "inputs_EU.xlsx", "SCEN3", "D100", {"scenarios": ["SCEN3"]}
)

_ext_constant_choose_extraction_coal_curve.add(
    "inputs_EU.xlsx", "SCEN4", "D100", {"scenarios": ["SCEN4"]}
)

_ext_constant_choose_extraction_coal_curve.add(
    "inputs_EU.xlsx", "User defined", "D100", {"scenarios": ["User defined"]}
)


@component.add(
    name="Selection constraint extraction unconv gas",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_selection_constraint_extraction_unconv_gas"
    },
)
def selection_constraint_extraction_unconv_gas():
    """
    Selection of type of constraint to annual growth extraction of unconventional gas: 3? 1= Constraint annual growth (%) 2= User defined as a function of time
    """
    return _ext_constant_selection_constraint_extraction_unconv_gas()


_ext_constant_selection_constraint_extraction_unconv_gas = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D96",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_selection_constraint_extraction_unconv_gas",
)

_ext_constant_selection_constraint_extraction_unconv_gas.add(
    "inputs_EU.xlsx", "SCEN1", "D96", {"scenarios": ["SCEN1"]}
)

_ext_constant_selection_constraint_extraction_unconv_gas.add(
    "inputs_EU.xlsx", "SCEN2", "D96", {"scenarios": ["SCEN2"]}
)

_ext_constant_selection_constraint_extraction_unconv_gas.add(
    "inputs_EU.xlsx", "SCEN3", "D96", {"scenarios": ["SCEN3"]}
)

_ext_constant_selection_constraint_extraction_unconv_gas.add(
    "inputs_EU.xlsx", "SCEN4", "D96", {"scenarios": ["SCEN4"]}
)

_ext_constant_selection_constraint_extraction_unconv_gas.add(
    "inputs_EU.xlsx", "User defined", "D96", {"scenarios": ["User defined"]}
)


@component.add(
    name="Year scarcity Elec",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"abundance_electricity": 1, "time": 1},
)
def year_scarcity_elec():
    """
    Year when the parameter abundance falls below 0.95, i.e. year when scarcity starts.
    """
    return if_then_else(
        abundance_electricity() > 0.95,
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: xr.DataArray(
            time(), {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="extraction unconv gas delayed",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_extraction_unconv_gas_delayed": 1},
    other_deps={
        "_delayfixed_extraction_unconv_gas_delayed": {
            "initial": {"time_step": 1},
            "step": {"extraction_unconv_gas_ej": 1},
        }
    },
)
def extraction_unconv_gas_delayed():
    return _delayfixed_extraction_unconv_gas_delayed()


_delayfixed_extraction_unconv_gas_delayed = DelayFixed(
    lambda: extraction_unconv_gas_ej(),
    lambda: time_step(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    time_step,
    "_delayfixed_extraction_unconv_gas_delayed",
)


@component.add(
    name="max unconv gas growth extraction EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "check_gas_delayed_1yr": 1,
        "constrain_gas_exogenous_growth_delayed_1yr": 1,
        "extraction_unconv_gas_delayed": 2,
        "max_unconv_gas_growth_extraction": 1,
    },
)
def max_unconv_gas_growth_extraction_ej():
    """
    Constrained unconventional gas extraction growth (EJ/Year), i.e. maximum annual growth compatible with the constraint selected in the scenario.
    """
    return if_then_else(
        check_gas_delayed_1yr() < -0.01,
        lambda: (1 + constrain_gas_exogenous_growth_delayed_1yr())
        * extraction_unconv_gas_delayed(),
        lambda: extraction_unconv_gas_delayed() * max_unconv_gas_growth_extraction(),
    )


@component.add(
    name="P constraint growth extraction unconv gas",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_p_constraint_growth_extraction_unconv_gas"
    },
)
def p_constraint_growth_extraction_unconv_gas():
    """
    Constant constraint to annual extraction of unconventional gas.
    """
    return _ext_constant_p_constraint_growth_extraction_unconv_gas()


_ext_constant_p_constraint_growth_extraction_unconv_gas = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C96",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_constraint_growth_extraction_unconv_gas",
)

_ext_constant_p_constraint_growth_extraction_unconv_gas.add(
    "inputs_EU.xlsx", "SCEN1", "C96", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_constraint_growth_extraction_unconv_gas.add(
    "inputs_EU.xlsx", "SCEN2", "C96", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_constraint_growth_extraction_unconv_gas.add(
    "inputs_EU.xlsx", "SCEN3", "C96", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_constraint_growth_extraction_unconv_gas.add(
    "inputs_EU.xlsx", "SCEN4", "C96", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_constraint_growth_extraction_unconv_gas.add(
    "inputs_EU.xlsx", "User defined", "C96", {"scenarios": ["User defined"]}
)


@component.add(
    name="choose extraction curve unconv gas",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_choose_extraction_curve_unconv_gas"},
)
def choose_extraction_curve_unconv_gas():
    """
    1= Mohr15 Low 2= Mohr15 BG 3= Mohr15 High 4= User defined
    """
    return _ext_constant_choose_extraction_curve_unconv_gas()


_ext_constant_choose_extraction_curve_unconv_gas = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D88",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_choose_extraction_curve_unconv_gas",
)

_ext_constant_choose_extraction_curve_unconv_gas.add(
    "inputs_EU.xlsx", "SCEN1", "D88", {"scenarios": ["SCEN1"]}
)

_ext_constant_choose_extraction_curve_unconv_gas.add(
    "inputs_EU.xlsx", "SCEN2", "D88", {"scenarios": ["SCEN2"]}
)

_ext_constant_choose_extraction_curve_unconv_gas.add(
    "inputs_EU.xlsx", "SCEN3", "D88", {"scenarios": ["SCEN3"]}
)

_ext_constant_choose_extraction_curve_unconv_gas.add(
    "inputs_EU.xlsx", "SCEN4", "D88", {"scenarios": ["SCEN4"]}
)

_ext_constant_choose_extraction_curve_unconv_gas.add(
    "inputs_EU.xlsx", "User defined", "D88", {"scenarios": ["User defined"]}
)


@component.add(
    name="choose extraction curve unconv oil",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_choose_extraction_curve_unconv_oil"},
)
def choose_extraction_curve_unconv_oil():
    """
    1= Mohr15 Low 2= Mohr15 BG 3= Mohr15 High 4= User defined
    """
    return _ext_constant_choose_extraction_curve_unconv_oil()


_ext_constant_choose_extraction_curve_unconv_oil = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D72",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_choose_extraction_curve_unconv_oil",
)

_ext_constant_choose_extraction_curve_unconv_oil.add(
    "inputs_EU.xlsx", "SCEN1", "D72", {"scenarios": ["SCEN1"]}
)

_ext_constant_choose_extraction_curve_unconv_oil.add(
    "inputs_EU.xlsx", "SCEN2", "D72", {"scenarios": ["SCEN2"]}
)

_ext_constant_choose_extraction_curve_unconv_oil.add(
    "inputs_EU.xlsx", "SCEN3", "D72", {"scenarios": ["SCEN3"]}
)

_ext_constant_choose_extraction_curve_unconv_oil.add(
    "inputs_EU.xlsx", "SCEN4", "D72", {"scenarios": ["SCEN4"]}
)

_ext_constant_choose_extraction_curve_unconv_oil.add(
    "inputs_EU.xlsx", "User defined", "D72", {"scenarios": ["User defined"]}
)


@component.add(
    name="Biofuels land compet available",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_land_compet_biofuels_2gen": 2,
        "land_compet_biofuels_2gen_mha": 1,
        "land_compet_biofuels_3gen_mha": 1,
    },
)
def biofuels_land_compet_available():
    """
    Remaining potential land available as given as a fraction of unity.
    """
    return (
        max_land_compet_biofuels_2gen()
        - land_compet_biofuels_2gen_mha()
        - land_compet_biofuels_3gen_mha()
    ) / max_land_compet_biofuels_2gen()


@component.add(
    name="URR oil ASPO",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def urr_oil_aspo():
    return xr.DataArray(
        12800, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    )


@component.add(
    name="URR gas Mohr High2013",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def urr_gas_mohr_high2013():
    return xr.DataArray(
        28500, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    )


@component.add(
    name="URR gas Leherrere2010",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def urr_gas_leherrere2010():
    return xr.DataArray(
        13600, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    )


@component.add(
    name="URR gas Mohr BG2012",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def urr_gas_mohr_bg2012():
    return xr.DataArray(
        19900, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    )


@component.add(
    name="RES to fossil accounting",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def res_to_fossil_accounting():
    """
    There are different methods to report primary energy. If=1, it corresponds with the direct equivalent method which counts one unit of secondary energy provided from non-combustible sources as one unit of primary energy, that is, 1 kWh of (useful) electricity or heat is accounted for as 1 kWh = 3.6 MJ of primary energy. For more information see Annex II of (IPCC, 2011).
    """
    return 1


@component.add(
    name="new C GtC",
    units="GtC/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"carbon_emissions_gtc": 1},
)
def new_c_gtc():
    """
    Annual carbon emissions.
    """
    return carbon_emissions_gtc()


@component.add(
    name="year adjust",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def year_adjust():
    return xr.DataArray(1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"])


@component.add(
    name="\"TPES de Castro PhD - Scen 'madcoal'\"",
    units="MToe/Year",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_tpes_de_castro_phd_scen_madcoal"},
)
def tpes_de_castro_phd_scen_madcoal(x, final_subs=None):
    """
    Total primary energy extraction (Add "Energía perdida" to the net energy extraction in the original model).
    """
    return _hardcodedlookup_tpes_de_castro_phd_scen_madcoal(x, final_subs)


_hardcodedlookup_tpes_de_castro_phd_scen_madcoal = HardcodedLookups(
    [
        1985.0,
        1986.0,
        1987.0,
        1988.0,
        1989.0,
        1990.0,
        1991.0,
        1992.0,
        1993.0,
        1994.0,
        1995.0,
        1996.0,
        1997.0,
        1998.0,
        1999.0,
        2000.0,
        2001.0,
        2002.0,
        2003.0,
        2004.0,
        2005.0,
        2006.0,
        2007.0,
        2008.0,
        2009.0,
        2010.0,
        2011.0,
        2012.0,
        2013.0,
        2014.0,
        2015.0,
        2016.0,
        2017.0,
        2018.0,
        2019.0,
        2020.0,
        2021.0,
        2022.0,
        2023.0,
        2024.0,
        2025.0,
        2026.0,
        2027.0,
        2028.0,
        2029.0,
        2030.0,
        2031.0,
        2032.0,
        2033.0,
        2034.0,
        2035.0,
        2036.0,
        2037.0,
        2038.0,
        2039.0,
        2040.0,
        2041.0,
        2042.0,
        2043.0,
        2044.0,
        2045.0,
        2046.0,
        2047.0,
        2048.0,
        2049.0,
        2050.0,
        2051.0,
        2052.0,
        2053.0,
        2054.0,
        2055.0,
        2056.0,
        2057.0,
        2058.0,
        2059.0,
        2060.0,
        2061.0,
        2062.0,
        2063.0,
        2064.0,
        2065.0,
        2066.0,
        2067.0,
        2068.0,
        2069.0,
        2070.0,
        2071.0,
        2072.0,
        2073.0,
        2074.0,
        2075.0,
        2076.0,
        2077.0,
        2078.0,
        2079.0,
        2080.0,
        2081.0,
        2082.0,
        2083.0,
        2084.0,
        2085.0,
        2086.0,
        2087.0,
        2088.0,
        2089.0,
        2090.0,
        2091.0,
        2092.0,
        2093.0,
        2094.0,
        2095.0,
        2096.0,
        2097.0,
        2098.0,
        2099.0,
        2100.0,
    ],
    [
        7727.25,
        7904.71,
        8090.31,
        8272.83,
        8453.11,
        8632.09,
        8810.72,
        8989.94,
        9170.63,
        9353.55,
        9539.38,
        9728.58,
        9921.49,
        10118.2,
        10318.7,
        10522.5,
        10729.3,
        10938.4,
        11148.8,
        11359.5,
        11569.5,
        11786.3,
        11999.6,
        12211.4,
        12420.8,
        12626.9,
        12829.2,
        13027.3,
        13221.0,
        13410.5,
        13596.1,
        13774.0,
        13924.7,
        14047.6,
        14141.5,
        14208.3,
        14251.8,
        14277.8,
        14292.7,
        14303.7,
        14317.3,
        14343.2,
        14382.9,
        14441.4,
        14521.6,
        14625.6,
        14754.7,
        14909.2,
        15089.5,
        15295.1,
        15525.7,
        15768.7,
        16021.4,
        16282.5,
        16551.3,
        16827.5,
        17111.3,
        17402.7,
        17701.8,
        18008.4,
        18322.2,
        18642.6,
        18968.8,
        19299.8,
        19634.2,
        19970.7,
        20218.4,
        20503.9,
        20792.3,
        21082.0,
        21370.6,
        21655.5,
        21933.9,
        22202.8,
        22459.9,
        22702.5,
        22928.4,
        23135.7,
        23322.3,
        23486.7,
        23627.4,
        23743.2,
        23833.1,
        23896.3,
        23932.3,
        23940.6,
        23921.3,
        23874.3,
        23810.4,
        23774.2,
        23753.0,
        23746.1,
        23752.7,
        23771.8,
        23802.3,
        23843.3,
        23893.7,
        23952.6,
        24018.9,
        24091.6,
        24169.7,
        24252.2,
        24338.1,
        24426.4,
        24516.1,
        24606.1,
        24695.4,
        24783.0,
        24868.0,
        24949.3,
        25026.0,
        25097.2,
        25162.0,
        25219.5,
        25268.9,
        25309.5,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_tpes_de_castro_phd_scen_madcoal",
)


@component.add(
    name="urban surface 2015",
    units="MHa",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urban_surface_2015"},
)
def urban_surface_2015():
    """
    Area currently occupied by human settlement and infraestructures.
    """
    return _ext_constant_urban_surface_2015()


_ext_constant_urban_surface_2015 = ExtConstant(
    "inputs_EU.xlsx", "Land", "AB27", {}, _root, {}, "_ext_constant_urban_surface_2015"
)


@component.add(
    name="C per CO2",
    units="GtC/GTCO2e",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_c_per_co2"},
)
def c_per_co2():
    """
    1 kg of CO2 contains 3/11 of carbon.
    """
    return _ext_constant_c_per_co2()


_ext_constant_c_per_co2 = ExtConstant(
    "inputs_EU.xlsx", "Constants", "C20", {}, _root, {}, "_ext_constant_c_per_co2"
)


@component.add(
    name="GtC historic emissions RCPs",
    units="GtC",
    subscripts=["scenarios"],
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_gtc_historic_emissions_rcps"},
)
def gtc_historic_emissions_rcps(x, final_subs=None):
    """
    RCP database: http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=welcome
    """
    return _hardcodedlookup_gtc_historic_emissions_rcps(x, final_subs)


_hardcodedlookup_gtc_historic_emissions_rcps = HardcodedLookups(
    [1990.0, 1995.0, 2000.0, 2005.0],
    [6.144, 6.4395, 6.735, 7.971],
    {"scenarios": ["SCEN1", "SCEN2", "SCEN3", "SCEN4", "BAU", "User defined"]},
    "interpolate",
    {"scenarios": _subscript_dict["scenarios"]},
    "_hardcodedlookup_gtc_historic_emissions_rcps",
)


@component.add(
    name="activate Affores program",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_activate_affores_program"},
)
def activate_affores_program():
    """
    1. Activated. 2. No.
    """
    return _ext_constant_activate_affores_program()


_ext_constant_activate_affores_program = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "B65",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_activate_affores_program",
)

_ext_constant_activate_affores_program.add(
    "inputs_EU.xlsx", "SCEN1", "B65", {"scenarios": ["SCEN1"]}
)

_ext_constant_activate_affores_program.add(
    "inputs_EU.xlsx", "SCEN2", "B65", {"scenarios": ["SCEN2"]}
)

_ext_constant_activate_affores_program.add(
    "inputs_EU.xlsx", "SCEN3", "B65", {"scenarios": ["SCEN3"]}
)

_ext_constant_activate_affores_program.add(
    "inputs_EU.xlsx", "SCEN4", "B65", {"scenarios": ["SCEN4"]}
)

_ext_constant_activate_affores_program.add(
    "inputs_EU.xlsx", "User defined", "B65", {"scenarios": ["User defined"]}
)


@component.add(
    name="Afforestation program 2020",
    units="MtC/Year",
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_afforestation_program_2020",
        "__data__": "_ext_data_afforestation_program_2020",
        "time": 1,
    },
)
def afforestation_program_2020():
    """
    Afforestation program from 2020 following [Nilsson 1995] (time to inverse the deforestation trend).
    """
    return _ext_data_afforestation_program_2020(time())


_ext_data_afforestation_program_2020 = ExtData(
    "inputs_EU.xlsx",
    "Parameters",
    "125",
    "C126",
    "interpolate",
    {},
    _root,
    {},
    "_ext_data_afforestation_program_2020",
)


@component.add(
    name="Agricultural land 2015",
    units="MHa",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_agricultural_land_2015"},
)
def agricultural_land_2015():
    return _ext_constant_agricultural_land_2015()


_ext_constant_agricultural_land_2015 = ExtConstant(
    "inputs_EU.xlsx",
    "Land",
    "AB23",
    {},
    _root,
    {},
    "_ext_constant_agricultural_land_2015",
)


@component.add(
    name="choose extraction curve conv oil",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_choose_extraction_curve_conv_oil"},
)
def choose_extraction_curve_conv_oil():
    """
    1= Mohr15 Low 2= Mohr15 BG 3= Mohr15 High 4= User defined
    """
    return _ext_constant_choose_extraction_curve_conv_oil()


_ext_constant_choose_extraction_curve_conv_oil = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D68",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_choose_extraction_curve_conv_oil",
)

_ext_constant_choose_extraction_curve_conv_oil.add(
    "inputs_EU.xlsx", "SCEN1", "D68", {"scenarios": ["SCEN1"]}
)

_ext_constant_choose_extraction_curve_conv_oil.add(
    "inputs_EU.xlsx", "SCEN2", "D68", {"scenarios": ["SCEN2"]}
)

_ext_constant_choose_extraction_curve_conv_oil.add(
    "inputs_EU.xlsx", "SCEN3", "D68", {"scenarios": ["SCEN3"]}
)

_ext_constant_choose_extraction_curve_conv_oil.add(
    "inputs_EU.xlsx", "SCEN4", "D68", {"scenarios": ["SCEN4"]}
)

_ext_constant_choose_extraction_curve_conv_oil.add(
    "inputs_EU.xlsx", "User defined", "D68", {"scenarios": ["User defined"]}
)


@component.add(
    name="choose extraction conv gas curve",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_choose_extraction_conv_gas_curve"},
)
def choose_extraction_conv_gas_curve():
    """
    1= Mohr15 Low 2= Mohr15 BG 3= Mohr15 High 4= User defined
    """
    return _ext_constant_choose_extraction_conv_gas_curve()


_ext_constant_choose_extraction_conv_gas_curve = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D84",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_choose_extraction_conv_gas_curve",
)

_ext_constant_choose_extraction_conv_gas_curve.add(
    "inputs_EU.xlsx", "SCEN1", "D84", {"scenarios": ["SCEN1"]}
)

_ext_constant_choose_extraction_conv_gas_curve.add(
    "inputs_EU.xlsx", "SCEN2", "D84", {"scenarios": ["SCEN2"]}
)

_ext_constant_choose_extraction_conv_gas_curve.add(
    "inputs_EU.xlsx", "SCEN3", "D84", {"scenarios": ["SCEN3"]}
)

_ext_constant_choose_extraction_conv_gas_curve.add(
    "inputs_EU.xlsx", "SCEN4", "D84", {"scenarios": ["SCEN4"]}
)

_ext_constant_choose_extraction_conv_gas_curve.add(
    "inputs_EU.xlsx", "User defined", "D84", {"scenarios": ["User defined"]}
)


@component.add(
    name="Cumulated total monet invest RES for Elec",
    units="Tdollars",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cumulated_total_monet_invest_res_for_elec": 1},
    other_deps={
        "_integ_cumulated_total_monet_invest_res_for_elec": {
            "initial": {},
            "step": {"total_monet_invest_res_for_elec_tdolar": 1},
        }
    },
)
def cumulated_total_monet_invest_res_for_elec():
    """
    Cumulated total monetary investment in RES for electricity generation from 1995 (1995 US$).
    """
    return _integ_cumulated_total_monet_invest_res_for_elec()


_integ_cumulated_total_monet_invest_res_for_elec = Integ(
    lambda: total_monet_invest_res_for_elec_tdolar(),
    lambda: xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]),
    "_integ_cumulated_total_monet_invest_res_for_elec",
)


@component.add(
    name="efficiency coal for electricity",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_efficiency_coal_for_electricity"},
)
def efficiency_coal_for_electricity():
    """
    Efficiency of coal gas power centrals. Stable trend between 1971 and 2014 (IEA Balances), average of the period.
    """
    return _ext_constant_efficiency_coal_for_electricity()


_ext_constant_efficiency_coal_for_electricity = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C46",
    {},
    _root,
    {},
    "_ext_constant_efficiency_coal_for_electricity",
)


@component.add(
    name="Historic efficiency gas for electricity",
    units="percent",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_historic_efficiency_gas_for_electricity",
        "__lookup__": "_ext_lookup_historic_efficiency_gas_for_electricity",
    },
)
def historic_efficiency_gas_for_electricity(x, final_subs=None):
    """
    Historical evolution of efficiency of natural gas power centrals 1995-2013 (IEA Balances).
    """
    return _ext_lookup_historic_efficiency_gas_for_electricity(x, final_subs)


_ext_lookup_historic_efficiency_gas_for_electricity = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "25",
    "H70",
    {},
    _root,
    {},
    "_ext_lookup_historic_efficiency_gas_for_electricity",
)


@component.add(
    name="efficiency liquids for electricity",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_efficiency_liquids_for_electricity"},
)
def efficiency_liquids_for_electricity():
    """
    Efficiency of oil in electricity power centrals. Stable trend between 1971 and 2014 (IEA Balances), average of the period.
    """
    return _ext_constant_efficiency_liquids_for_electricity()


_ext_constant_efficiency_liquids_for_electricity = ExtConstant(
    "inputs_EU.xlsx",
    "Parameters",
    "C45",
    {},
    _root,
    {},
    "_ext_constant_efficiency_liquids_for_electricity",
)


@component.add(
    name="Additional land compet available for biofuels",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_additional_land_compet_available_for_biofuels"
    },
)
def additional_land_compet_available_for_biofuels():
    """
    Available land for biofuels in competition with other uses depending on the scenario.
    """
    return _ext_constant_additional_land_compet_available_for_biofuels()


_ext_constant_additional_land_compet_available_for_biofuels = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C42",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_additional_land_compet_available_for_biofuels",
)

_ext_constant_additional_land_compet_available_for_biofuels.add(
    "inputs_EU.xlsx", "SCEN1", "C42", {"scenarios": ["SCEN1"]}
)

_ext_constant_additional_land_compet_available_for_biofuels.add(
    "inputs_EU.xlsx", "SCEN2", "C42", {"scenarios": ["SCEN2"]}
)

_ext_constant_additional_land_compet_available_for_biofuels.add(
    "inputs_EU.xlsx", "SCEN3", "C42", {"scenarios": ["SCEN3"]}
)

_ext_constant_additional_land_compet_available_for_biofuels.add(
    "inputs_EU.xlsx", "SCEN4", "C42", {"scenarios": ["SCEN4"]}
)

_ext_constant_additional_land_compet_available_for_biofuels.add(
    "inputs_EU.xlsx", "User defined", "C42", {"scenarios": ["User defined"]}
)


@component.add(
    name="max hydro TWe",
    units="TWe",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_max_hydro_twe"},
)
def max_hydro_twe():
    """
    Techno-ecological potential of hydro (1 TWe = 8760 TWh in one year).
    """
    return _ext_constant_max_hydro_twe()


_ext_constant_max_hydro_twe = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C24",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_max_hydro_twe",
)

_ext_constant_max_hydro_twe.add(
    "inputs_EU.xlsx", "SCEN1", "C24", {"scenarios": ["SCEN1"]}
)

_ext_constant_max_hydro_twe.add(
    "inputs_EU.xlsx", "SCEN2", "C24", {"scenarios": ["SCEN2"]}
)

_ext_constant_max_hydro_twe.add(
    "inputs_EU.xlsx", "SCEN3", "C24", {"scenarios": ["SCEN3"]}
)

_ext_constant_max_hydro_twe.add(
    "inputs_EU.xlsx", "SCEN4", "C24", {"scenarios": ["SCEN4"]}
)

_ext_constant_max_hydro_twe.add(
    "inputs_EU.xlsx", "User defined", "C24", {"scenarios": ["User defined"]}
)


@component.add(
    name="max oceanic TWe",
    units="TWe",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_max_oceanic_twe"},
)
def max_oceanic_twe():
    """
    Techno-ecological potential of oceanic (1 TWe = 8760 TWh in one year).
    """
    return _ext_constant_max_oceanic_twe()


_ext_constant_max_oceanic_twe = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C27",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_max_oceanic_twe",
)

_ext_constant_max_oceanic_twe.add(
    "inputs_EU.xlsx", "SCEN1", "C27", {"scenarios": ["SCEN1"]}
)

_ext_constant_max_oceanic_twe.add(
    "inputs_EU.xlsx", "SCEN2", "C27", {"scenarios": ["SCEN2"]}
)

_ext_constant_max_oceanic_twe.add(
    "inputs_EU.xlsx", "SCEN3", "C27", {"scenarios": ["SCEN3"]}
)

_ext_constant_max_oceanic_twe.add(
    "inputs_EU.xlsx", "SCEN4", "C27", {"scenarios": ["SCEN4"]}
)

_ext_constant_max_oceanic_twe.add(
    "inputs_EU.xlsx", "User defined", "C27", {"scenarios": ["User defined"]}
)


@component.add(
    name="max onshore wind TWe",
    units="TWe",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_max_onshore_wind_twe"},
)
def max_onshore_wind_twe():
    """
    Techno-ecological potential of onshore wind (1 TWe = 8760 TWh in one year).
    """
    return _ext_constant_max_onshore_wind_twe()


_ext_constant_max_onshore_wind_twe = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C28",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_max_onshore_wind_twe",
)

_ext_constant_max_onshore_wind_twe.add(
    "inputs_EU.xlsx", "SCEN1", "C28", {"scenarios": ["SCEN1"]}
)

_ext_constant_max_onshore_wind_twe.add(
    "inputs_EU.xlsx", "SCEN2", "C28", {"scenarios": ["SCEN2"]}
)

_ext_constant_max_onshore_wind_twe.add(
    "inputs_EU.xlsx", "SCEN3", "C28", {"scenarios": ["SCEN3"]}
)

_ext_constant_max_onshore_wind_twe.add(
    "inputs_EU.xlsx", "SCEN4", "C28", {"scenarios": ["SCEN4"]}
)

_ext_constant_max_onshore_wind_twe.add(
    "inputs_EU.xlsx", "User defined", "C28", {"scenarios": ["User defined"]}
)


@component.add(
    name="P timeseries pop growth rate",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Data",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_data_p_timeseries_pop_growth_rate",
        "__data__": "_ext_data_p_timeseries_pop_growth_rate",
        "time": 1,
    },
)
def p_timeseries_pop_growth_rate():
    """
    Annual population growth from timeseries. UN projections in their medium scenario (Medium fertility variant)
    """
    return _ext_data_p_timeseries_pop_growth_rate(time())


_ext_data_p_timeseries_pop_growth_rate = ExtData(
    "inputs_EU.xlsx",
    "BAU",
    "12",
    "E13",
    "interpolate",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_data_p_timeseries_pop_growth_rate",
)

_ext_data_p_timeseries_pop_growth_rate.add(
    "inputs_EU.xlsx", "SCEN1", "12", "E13", "interpolate", {"scenarios": ["SCEN1"]}
)

_ext_data_p_timeseries_pop_growth_rate.add(
    "inputs_EU.xlsx", "SCEN2", "12", "E13", "interpolate", {"scenarios": ["SCEN2"]}
)

_ext_data_p_timeseries_pop_growth_rate.add(
    "inputs_EU.xlsx", "SCEN3", "12", "E13", "interpolate", {"scenarios": ["SCEN3"]}
)

_ext_data_p_timeseries_pop_growth_rate.add(
    "inputs_EU.xlsx", "SCEN4", "12", "E13", "interpolate", {"scenarios": ["SCEN4"]}
)

_ext_data_p_timeseries_pop_growth_rate.add(
    "inputs_EU.xlsx",
    "User defined",
    "12",
    "E13",
    "interpolate",
    {"scenarios": ["User defined"]},
)


@component.add(
    name="P CTL",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_ctl"},
)
def p_ctl():
    """
    Annual growth in energy output demand depending on the policy of the scenario.
    """
    return _ext_constant_p_ctl()


_ext_constant_p_ctl = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C110",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_ctl",
)

_ext_constant_p_ctl.add("inputs_EU.xlsx", "SCEN1", "C110", {"scenarios": ["SCEN1"]})

_ext_constant_p_ctl.add("inputs_EU.xlsx", "SCEN2", "C110", {"scenarios": ["SCEN2"]})

_ext_constant_p_ctl.add("inputs_EU.xlsx", "SCEN3", "C110", {"scenarios": ["SCEN3"]})

_ext_constant_p_ctl.add("inputs_EU.xlsx", "SCEN4", "C110", {"scenarios": ["SCEN4"]})

_ext_constant_p_ctl.add(
    "inputs_EU.xlsx", "User defined", "C110", {"scenarios": ["User defined"]}
)


@component.add(
    name="P GTL",
    units="1/Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_p_gtl"},
)
def p_gtl():
    """
    Annual growth in energy output demand depending on the policy of the scenario.
    """
    return _ext_constant_p_gtl()


_ext_constant_p_gtl = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C112",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_gtl",
)

_ext_constant_p_gtl.add("inputs_EU.xlsx", "SCEN1", "C112", {"scenarios": ["SCEN1"]})

_ext_constant_p_gtl.add("inputs_EU.xlsx", "SCEN2", "C112", {"scenarios": ["SCEN2"]})

_ext_constant_p_gtl.add("inputs_EU.xlsx", "SCEN3", "C112", {"scenarios": ["SCEN3"]})

_ext_constant_p_gtl.add("inputs_EU.xlsx", "SCEN4", "C112", {"scenarios": ["SCEN4"]})

_ext_constant_p_gtl.add(
    "inputs_EU.xlsx", "User defined", "C112", {"scenarios": ["User defined"]}
)


@component.add(
    name="start year 3gen cellulosic biofuels",
    units="Year",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_start_year_3gen_cellulosic_biofuels"},
)
def start_year_3gen_cellulosic_biofuels():
    """
    First year when 3rd generation biofuels are available.
    """
    return _ext_constant_start_year_3gen_cellulosic_biofuels()


_ext_constant_start_year_3gen_cellulosic_biofuels = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C46",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_start_year_3gen_cellulosic_biofuels",
)

_ext_constant_start_year_3gen_cellulosic_biofuels.add(
    "inputs_EU.xlsx", "SCEN1", "C46", {"scenarios": ["SCEN1"]}
)

_ext_constant_start_year_3gen_cellulosic_biofuels.add(
    "inputs_EU.xlsx", "SCEN2", "C46", {"scenarios": ["SCEN2"]}
)

_ext_constant_start_year_3gen_cellulosic_biofuels.add(
    "inputs_EU.xlsx", "SCEN3", "C46", {"scenarios": ["SCEN3"]}
)

_ext_constant_start_year_3gen_cellulosic_biofuels.add(
    "inputs_EU.xlsx", "SCEN4", "C46", {"scenarios": ["SCEN4"]}
)

_ext_constant_start_year_3gen_cellulosic_biofuels.add(
    "inputs_EU.xlsx", "User defined", "C46", {"scenarios": ["User defined"]}
)


@component.add(
    name="Time dmnl",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_time_dmnl"},
)
def time_dmnl(x, final_subs=None):
    """
    Vector that assigns for every year the number of that same year.
    """
    return _hardcodedlookup_time_dmnl(x, final_subs)


_hardcodedlookup_time_dmnl = HardcodedLookups(
    [
        1990,
        1991,
        1992,
        1993,
        1994,
        1995,
        1996,
        1997,
        1998,
        1999,
        2000,
        2001,
        2002,
        2003,
        2004,
        2005,
        2006,
        2007,
        2008,
        2009,
        2010,
        2011,
        2012,
        2013,
        2014,
        2015,
        2016,
        2017,
        2018,
        2019,
        2020,
        2021,
        2022,
        2023,
        2024,
        2025,
        2026,
        2027,
        2028,
        2029,
        2030,
        2031,
        2032,
        2033,
        2034,
        2035,
        2036,
        2037,
        2038,
        2039,
        2040,
        2041,
        2042,
        2043,
        2044,
        2045,
        2046,
        2047,
        2048,
        2049,
        2050,
        2051,
        2052,
        2053,
        2054,
        2055,
        2056,
        2057,
        2058,
        2059,
        2060,
        2061,
        2062,
        2063,
        2064,
        2065,
        2066,
        2067,
        2068,
        2069,
        2070,
        2071,
        2072,
        2073,
        2074,
        2075,
        2076,
        2077,
        2078,
        2079,
        2080,
        2081,
        2082,
        2083,
        2084,
        2085,
        2086,
        2087,
        2088,
        2089,
        2090,
        2091,
        2092,
        2093,
        2094,
        2095,
        2096,
        2097,
        2098,
        2099,
        2100,
    ],
    [
        1990,
        1991,
        1992,
        1993,
        1994,
        1995,
        1996,
        1997,
        1998,
        1999,
        2000,
        2001,
        2002,
        2003,
        2004,
        2005,
        2006,
        2007,
        2008,
        2009,
        2010,
        2011,
        2012,
        2013,
        2014,
        2015,
        2016,
        2017,
        2018,
        2019,
        2020,
        2021,
        2022,
        2023,
        2024,
        2025,
        2026,
        2027,
        2028,
        2029,
        2030,
        2031,
        2032,
        2033,
        2034,
        2035,
        2036,
        2037,
        2038,
        2039,
        2040,
        2041,
        2042,
        2043,
        2044,
        2045,
        2046,
        2047,
        2048,
        2049,
        2050,
        2051,
        2052,
        2053,
        2054,
        2055,
        2056,
        2057,
        2058,
        2059,
        2060,
        2061,
        2062,
        2063,
        2064,
        2065,
        2066,
        2067,
        2068,
        2069,
        2070,
        2071,
        2072,
        2073,
        2074,
        2075,
        2076,
        2077,
        2078,
        2079,
        2080,
        2081,
        2082,
        2083,
        2084,
        2085,
        2086,
        2087,
        2088,
        2089,
        2090,
        2091,
        2092,
        2093,
        2094,
        2095,
        2096,
        2097,
        2098,
        2099,
        2100,
    ],
    {"scenarios": ["SCEN1", "SCEN2", "SCEN3", "SCEN4", "BAU", "User defined"]},
    "interpolate",
    {"scenarios": _subscript_dict["scenarios"]},
    "_hardcodedlookup_time_dmnl",
)


@component.add(
    name="Share variable RES elec generation vs total",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_elec_generation_from_nre_twh": 2,
        "elec_generation_variable_from_res_twh": 3,
        "elec_generation_dispatch_from_res_twh": 2,
    },
)
def share_variable_res_elec_generation_vs_total():
    """
    Share of variable vs. total electricity generation. Condition to avoid error when the denominator is zero (0.5 is an arbitrary value).
    """
    return if_then_else(
        fe_elec_generation_from_nre_twh()
        + elec_generation_variable_from_res_twh()
        + elec_generation_dispatch_from_res_twh()
        > 0,
        lambda: elec_generation_variable_from_res_twh()
        / (
            fe_elec_generation_from_nre_twh()
            + elec_generation_variable_from_res_twh()
            + elec_generation_dispatch_from_res_twh()
        ),
        lambda: xr.DataArray(
            0.5, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="table max extraction ASPO oil EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_table_max_extraction_aspo_oil_ej"},
)
def table_max_extraction_aspo_oil_ej(x, final_subs=None):
    """
    Curva ASPO de extracción de oil hasta 2050. Unidades: EJ. Para los puntos a partir del 2050 se ha realizado una exponencial negativa hasta anular las reservas en 2100. /*Considera crude y unconvencional oil, así que una vez separado no vale esta tabla*/
    """
    return _hardcodedlookup_table_max_extraction_aspo_oil_ej(x, final_subs)


_hardcodedlookup_table_max_extraction_aspo_oil_ej = HardcodedLookups(
    [
        0.0,
        600.0,
        1200.0,
        1800.0,
        2400.0,
        3000.0,
        3600.0,
        4200.0,
        4800.0,
        5400.0,
        6000.0,
        6600.0,
        7200.0,
        7800.0,
        8400.0,
        9000.0,
        9600.0,
        10200.0,
        10800.0,
        11400.0,
        12000.0,
        12600.0,
        13200.0,
    ],
    [
        0.0,
        29.9783,
        46.7403,
        59.4953,
        71.3603,
        84.9357,
        96.0997,
        107.465,
        118.46,
        127.537,
        137.018,
        145.888,
        152.005,
        156.288,
        162.47,
        166.659,
        171.044,
        171.044,
        171.044,
        171.044,
        171.044,
        171.044,
        171.044,
    ],
    {"scenarios": ["SCEN1", "SCEN2", "SCEN3", "SCEN4", "BAU", "User defined"]},
    "interpolate",
    {"scenarios": _subscript_dict["scenarios"]},
    "_hardcodedlookup_table_max_extraction_aspo_oil_ej",
)


@component.add(
    name="table max extraction gas Laherrere2010",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_max_extraction_gas_laherrere2010"
    },
)
def table_max_extraction_gas_laherrere2010(x, final_subs=None):
    """
    Curva Laherrere2010 de extracción de gas hasta 2100. Unidades: EJ. Para los puntos a partir del 2100 se ha realizado una exponencial negativa hasta anular las reservas en 2120.
    """
    return _hardcodedlookup_table_max_extraction_gas_laherrere2010(x, final_subs)


_hardcodedlookup_table_max_extraction_gas_laherrere2010 = HardcodedLookups(
    [
        0.0,
        500.0,
        1000.0,
        1500.0,
        2000.0,
        2500.0,
        3000.0,
        3500.0,
        4000.0,
        4500.0,
        5000.0,
        5500.0,
        6000.0,
        6500.0,
        7000.0,
        7500.0,
        8000.0,
        8500.0,
        9000.0,
        9500.0,
        10000.0,
        10500.0,
        11000.0,
        11500.0,
        12000.0,
        12500.0,
        13000.0,
    ],
    [
        0.0,
        23.8621,
        44.631,
        62.3067,
        77.7729,
        93.8891,
        107.821,
        119.752,
        129.033,
        137.87,
        144.16,
        148.917,
        151.78,
        152.895,
        152.895,
        152.895,
        152.895,
        152.895,
        152.895,
        152.895,
        152.895,
        152.895,
        152.895,
        152.895,
        152.895,
        152.895,
        152.895,
    ],
    {"scenarios": ["SCEN1", "SCEN2", "SCEN3", "SCEN4", "BAU", "User defined"]},
    "interpolate",
    {"scenarios": _subscript_dict["scenarios"]},
    "_hardcodedlookup_table_max_extraction_gas_laherrere2010",
)


@component.add(
    name="table max extraction gas Mohr High2012",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_max_extraction_gas_mohr_high2012"
    },
)
def table_max_extraction_gas_mohr_high2012(x, final_subs=None):
    """
    Curva Mohr High case 2013 de extracción de gas hasta 2100. Unidades: EJ.
    """
    return _hardcodedlookup_table_max_extraction_gas_mohr_high2012(x, final_subs)


_hardcodedlookup_table_max_extraction_gas_mohr_high2012 = HardcodedLookups(
    [
        0.0,
        1500.0,
        3000.0,
        4500.0,
        6000.0,
        7500.0,
        9000.0,
        10500.0,
        12000.0,
        13500.0,
        15000.0,
        16500.0,
        18000.0,
        19500.0,
        21000.0,
        22500.0,
        24000.0,
        25500.0,
        27000.0,
        28500.0,
    ],
    [
        0.0,
        36.4477,
        58.3656,
        72.8198,
        98.5,
        130.439,
        159.979,
        177.268,
        190.383,
        194.052,
        194.197,
        194.197,
        194.197,
        194.197,
        194.197,
        194.197,
        194.197,
        194.197,
        194.197,
        194.197,
    ],
    {"scenarios": ["SCEN1", "SCEN2", "SCEN3", "SCEN4", "BAU", "User defined"]},
    "interpolate",
    {"scenarios": _subscript_dict["scenarios"]},
    "_hardcodedlookup_table_max_extraction_gas_mohr_high2012",
)


@component.add(
    name="table max extraction gas Mohr BG2012",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_table_max_extraction_gas_mohr_bg2012"},
)
def table_max_extraction_gas_mohr_bg2012(x, final_subs=None):
    """
    Curva MohrBG2012 de extracción de gas hasta 2100. Unidades: EJ.
    """
    return _hardcodedlookup_table_max_extraction_gas_mohr_bg2012(x, final_subs)


_hardcodedlookup_table_max_extraction_gas_mohr_bg2012 = HardcodedLookups(
    [
        0.0,
        1000.0,
        2000.0,
        3000.0,
        4000.0,
        5000.0,
        6000.0,
        7000.0,
        8000.0,
        9000.0,
        10000.0,
        11000.0,
        12000.0,
        13000.0,
        14000.0,
        15000.0,
        16000.0,
        17000.0,
        18000.0,
        19000.0,
        20000.0,
    ],
    [
        0.0,
        27.4739,
        42.1041,
        51.2745,
        58.1215,
        69.3726,
        79.5334,
        99.1636,
        115.575,
        128.798,
        138.387,
        147.465,
        150.753,
        157.008,
        159.247,
        159.247,
        159.247,
        159.247,
        159.247,
        159.247,
        159.247,
    ],
    {"scenarios": ["SCEN1", "SCEN2", "SCEN3", "SCEN4", "BAU", "User defined"]},
    "interpolate",
    {"scenarios": _subscript_dict["scenarios"]},
    "_hardcodedlookup_table_max_extraction_gas_mohr_bg2012",
)


@component.add(
    name="Total cumulative emissions GtC",
    units="GtC",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_cumulative_emissions_gtc": 1},
    other_deps={
        "_integ_total_cumulative_emissions_gtc": {
            "initial": {"cumulative_emissions_to_1995": 1},
            "step": {"new_c_gtc": 1},
        }
    },
)
def total_cumulative_emissions_gtc():
    """
    Total cumulative emissions.
    """
    return _integ_total_cumulative_emissions_gtc()


_integ_total_cumulative_emissions_gtc = Integ(
    lambda: new_c_gtc(),
    lambda: xr.DataArray(
        cumulative_emissions_to_1995(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_total_cumulative_emissions_gtc",
)


@component.add(
    name='"TNES de Castro PhD - Scen I"',
    units="MToe/Year",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_tnes_de_castro_phd_scen_i"},
)
def tnes_de_castro_phd_scen_i(x, final_subs=None):
    """
    Total net energy supply scenario I.
    """
    return _hardcodedlookup_tnes_de_castro_phd_scen_i(x, final_subs)


_hardcodedlookup_tnes_de_castro_phd_scen_i = HardcodedLookups(
    [
        1985.0,
        1986.0,
        1987.0,
        1988.0,
        1989.0,
        1990.0,
        1991.0,
        1992.0,
        1993.0,
        1994.0,
        1995.0,
        1996.0,
        1997.0,
        1998.0,
        1999.0,
        2000.0,
        2001.0,
        2002.0,
        2003.0,
        2004.0,
        2005.0,
        2006.0,
        2007.0,
        2008.0,
        2009.0,
        2010.0,
        2011.0,
        2012.0,
        2013.0,
        2014.0,
        2015.0,
        2016.0,
        2017.0,
        2018.0,
        2019.0,
        2020.0,
        2021.0,
        2022.0,
        2023.0,
        2024.0,
        2025.0,
        2026.0,
        2027.0,
        2028.0,
        2029.0,
        2030.0,
        2031.0,
        2032.0,
        2033.0,
        2034.0,
        2035.0,
        2036.0,
        2037.0,
        2038.0,
        2039.0,
        2040.0,
        2041.0,
        2042.0,
        2043.0,
        2044.0,
        2045.0,
        2046.0,
        2047.0,
        2048.0,
        2049.0,
        2050.0,
        2051.0,
        2052.0,
        2053.0,
        2054.0,
        2055.0,
        2056.0,
        2057.0,
        2058.0,
        2059.0,
        2060.0,
        2061.0,
        2062.0,
        2063.0,
        2064.0,
        2065.0,
        2066.0,
        2067.0,
        2068.0,
        2069.0,
        2070.0,
        2071.0,
        2072.0,
        2073.0,
        2074.0,
        2075.0,
        2076.0,
        2077.0,
        2078.0,
        2079.0,
        2080.0,
        2081.0,
        2082.0,
        2083.0,
        2084.0,
        2085.0,
        2086.0,
        2087.0,
        2088.0,
        2089.0,
        2090.0,
        2091.0,
        2092.0,
        2093.0,
        2094.0,
        2095.0,
        2096.0,
        2097.0,
        2098.0,
        2099.0,
        2100.0,
    ],
    [
        7173.13,
        7368.39,
        7560.95,
        7750.95,
        7938.54,
        8123.85,
        8306.94,
        8487.87,
        8666.6,
        8843.01,
        9016.91,
        9188.0,
        9355.9,
        9520.11,
        9680.06,
        9835.12,
        9984.57,
        10127.7,
        10263.7,
        10391.9,
        10511.6,
        10622.1,
        10723.1,
        10814.1,
        10894.8,
        10965.4,
        11025.8,
        11076.5,
        11117.8,
        11150.3,
        11174.8,
        11187.2,
        11171.3,
        11125.6,
        11048.7,
        10941.3,
        10806.3,
        10648.5,
        10473.6,
        10288.0,
        10098.3,
        9914.3,
        9737.27,
        9572.49,
        9422.99,
        9290.79,
        9176.91,
        9081.61,
        9004.54,
        8944.92,
        8901.71,
        8868.15,
        8842.36,
        8822.52,
        8807.44,
        8796.45,
        8789.34,
        8786.33,
        8787.93,
        8794.91,
        8800.9,
        8805.38,
        8813.47,
        8826.89,
        8847.13,
        8844.22,
        8829.3,
        8822.62,
        8829.47,
        8853.12,
        8895.31,
        8956.7,
        9037.27,
        9136.56,
        9253.94,
        9388.68,
        9540.13,
        9707.65,
        9890.73,
        10089.0,
        10302.0,
        10529.6,
        10771.5,
        11027.7,
        11298.0,
        11582.2,
        11880.5,
        12192.5,
        12518.4,
        12857.9,
        13211.0,
        13577.5,
        13957.4,
        14350.4,
        14756.5,
        15175.4,
        15606.9,
        16051.0,
        16507.3,
        16975.7,
        17456.0,
        17947.9,
        18451.3,
        18965.9,
        19491.6,
        20028.0,
        20575.1,
        21132.7,
        21700.6,
        22278.8,
        22867.1,
        23465.6,
        24074.2,
        24693.1,
        25322.3,
        25962.1,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_tnes_de_castro_phd_scen_i",
)


@component.add(
    name='"Net oil extraction de Castro PhD - Scen I"',
    units="MToe/Year",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_net_oil_extraction_de_castro_phd_scen_i"
    },
)
def net_oil_extraction_de_castro_phd_scen_i(x, final_subs=None):
    return _hardcodedlookup_net_oil_extraction_de_castro_phd_scen_i(x, final_subs)


_hardcodedlookup_net_oil_extraction_de_castro_phd_scen_i = HardcodedLookups(
    [
        1985.0,
        1986.0,
        1987.0,
        1988.0,
        1989.0,
        1990.0,
        1991.0,
        1992.0,
        1993.0,
        1994.0,
        1995.0,
        1996.0,
        1997.0,
        1998.0,
        1999.0,
        2000.0,
        2001.0,
        2002.0,
        2003.0,
        2004.0,
        2005.0,
        2006.0,
        2007.0,
        2008.0,
        2009.0,
        2010.0,
        2011.0,
        2012.0,
        2013.0,
        2014.0,
        2015.0,
        2016.0,
        2017.0,
        2018.0,
        2019.0,
        2020.0,
        2021.0,
        2022.0,
        2023.0,
        2024.0,
        2025.0,
        2026.0,
        2027.0,
        2028.0,
        2029.0,
        2030.0,
        2031.0,
        2032.0,
        2033.0,
        2034.0,
        2035.0,
        2036.0,
        2037.0,
        2038.0,
        2039.0,
        2040.0,
        2041.0,
        2042.0,
        2043.0,
        2044.0,
        2045.0,
        2046.0,
        2047.0,
        2048.0,
        2049.0,
        2050.0,
        2051.0,
        2052.0,
        2053.0,
        2054.0,
        2055.0,
        2056.0,
        2057.0,
        2058.0,
        2059.0,
        2060.0,
        2061.0,
        2062.0,
        2063.0,
        2064.0,
        2065.0,
        2066.0,
        2067.0,
        2068.0,
        2069.0,
        2070.0,
        2071.0,
        2072.0,
        2073.0,
        2074.0,
        2075.0,
        2076.0,
        2077.0,
        2078.0,
        2079.0,
        2080.0,
        2081.0,
        2082.0,
        2083.0,
        2084.0,
        2085.0,
        2086.0,
        2087.0,
        2088.0,
        2089.0,
        2090.0,
        2091.0,
        2092.0,
        2093.0,
        2094.0,
        2095.0,
        2096.0,
        2097.0,
        2098.0,
        2099.0,
        2100.0,
    ],
    [
        2586.21,
        2657.24,
        2727.03,
        2795.64,
        2863.08,
        2929.39,
        2994.56,
        3058.58,
        3121.38,
        3182.87,
        3242.92,
        3301.35,
        3357.93,
        3412.41,
        3464.47,
        3513.79,
        3559.99,
        3602.72,
        3641.58,
        3676.21,
        3706.25,
        3731.41,
        3751.42,
        3766.07,
        3775.24,
        3778.86,
        3776.96,
        3769.61,
        3756.99,
        3739.31,
        3716.84,
        3688.03,
        3646.76,
        3592.8,
        3525.96,
        3446.96,
        3357.36,
        3259.3,
        3155.32,
        3048.04,
        2940.0,
        2833.9,
        2731.45,
        2633.99,
        2542.41,
        2457.18,
        2378.41,
        2305.92,
        2239.3,
        2178.03,
        2121.51,
        2067.41,
        2015.01,
        1963.69,
        1913.01,
        1862.72,
        1812.75,
        1763.12,
        1713.95,
        1665.41,
        1617.7,
        1569.24,
        1521.33,
        1474.43,
        1428.88,
        1378.91,
        1326.44,
        1276.28,
        1229.49,
        1186.64,
        1147.86,
        1113.07,
        1082.06,
        1054.53,
        1030.2,
        1008.79,
        990.086,
        973.882,
        960.031,
        948.419,
        938.964,
        931.608,
        926.306,
        923.025,
        921.731,
        922.385,
        924.939,
        929.328,
        935.469,
        943.259,
        952.569,
        963.248,
        975.123,
        987.996,
        1001.65,
        1015.86,
        1030.38,
        1044.96,
        1059.33,
        1073.23,
        1086.43,
        1098.65,
        1109.67,
        1119.27,
        1127.24,
        1133.4,
        1137.59,
        1139.68,
        1139.56,
        1137.17,
        1132.46,
        1125.41,
        1116.04,
        1104.39,
        1090.55,
        1074.6,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_net_oil_extraction_de_castro_phd_scen_i",
)


@component.add(
    name='"PE oil extraction de Castro PhD - Scen II"',
    units="MToe/Year",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_pe_oil_extraction_de_castro_phd_scen_ii"
    },
)
def pe_oil_extraction_de_castro_phd_scen_ii(x, final_subs=None):
    """
    Primary energy (Add "Energía perdida" to the net energy extraction in the original model).
    """
    return _hardcodedlookup_pe_oil_extraction_de_castro_phd_scen_ii(x, final_subs)


_hardcodedlookup_pe_oil_extraction_de_castro_phd_scen_ii = HardcodedLookups(
    [
        1985.0,
        1986.0,
        1987.0,
        1988.0,
        1989.0,
        1990.0,
        1991.0,
        1992.0,
        1993.0,
        1994.0,
        1995.0,
        1996.0,
        1997.0,
        1998.0,
        1999.0,
        2000.0,
        2001.0,
        2002.0,
        2003.0,
        2004.0,
        2005.0,
        2006.0,
        2007.0,
        2008.0,
        2009.0,
        2010.0,
        2011.0,
        2012.0,
        2013.0,
        2014.0,
        2015.0,
        2016.0,
        2017.0,
        2018.0,
        2019.0,
        2020.0,
        2021.0,
        2022.0,
        2023.0,
        2024.0,
        2025.0,
        2026.0,
        2027.0,
        2028.0,
        2029.0,
        2030.0,
        2031.0,
        2032.0,
        2033.0,
        2034.0,
        2035.0,
        2036.0,
        2037.0,
        2038.0,
        2039.0,
        2040.0,
        2041.0,
        2042.0,
        2043.0,
        2044.0,
        2045.0,
        2046.0,
        2047.0,
        2048.0,
        2049.0,
        2050.0,
        2051.0,
        2052.0,
        2053.0,
        2054.0,
        2055.0,
        2056.0,
        2057.0,
        2058.0,
        2059.0,
        2060.0,
        2061.0,
        2062.0,
        2063.0,
        2064.0,
        2065.0,
        2066.0,
        2067.0,
        2068.0,
        2069.0,
        2070.0,
        2071.0,
        2072.0,
        2073.0,
        2074.0,
        2075.0,
        2076.0,
        2077.0,
        2078.0,
        2079.0,
        2080.0,
        2081.0,
        2082.0,
        2083.0,
        2084.0,
        2085.0,
        2086.0,
        2087.0,
        2088.0,
        2089.0,
        2090.0,
        2091.0,
        2092.0,
        2093.0,
        2094.0,
        2095.0,
        2096.0,
        2097.0,
        2098.0,
        2099.0,
        2100.0,
    ],
    [
        2853.6,
        2932.69,
        3010.55,
        3087.22,
        3162.74,
        3237.16,
        3310.47,
        3382.67,
        3453.7,
        3523.47,
        3591.83,
        3658.6,
        3723.55,
        3786.39,
        3846.79,
        3904.4,
        3958.81,
        4009.62,
        4056.42,
        4098.78,
        4136.27,
        4169.57,
        4198.24,
        4222.15,
        4241.19,
        4255.33,
        4264.62,
        4269.17,
        4269.15,
        4264.78,
        4256.34,
        4242.11,
        4215.12,
        4174.81,
        4120.76,
        4053.66,
        3975.16,
        3887.67,
        3794.08,
        3697.45,
        3600.71,
        3506.78,
        3417.66,
        3334.64,
        3258.44,
        3189.17,
        3126.44,
        3069.5,
        3017.29,
        2968.65,
        2922.37,
        2873.74,
        2821.48,
        2764.72,
        2703.17,
        2637.04,
        2566.93,
        2493.69,
        2418.33,
        2341.94,
        2265.58,
        2190.28,
        2116.99,
        2046.54,
        1979.65,
        1909.2,
        1839.5,
        1776.01,
        1719.36,
        1669.55,
        1626.19,
        1588.74,
        1556.59,
        1529.08,
        1505.57,
        1485.41,
        1467.99,
        1452.74,
        1439.12,
        1426.63,
        1414.83,
        1403.34,
        1391.81,
        1379.96,
        1367.57,
        1354.44,
        1340.44,
        1325.47,
        1309.44,
        1293.54,
        1278.69,
        1264.85,
        1251.89,
        1239.63,
        1227.89,
        1216.49,
        1205.3,
        1194.17,
        1182.97,
        1171.6,
        1159.95,
        1147.95,
        1135.52,
        1122.6,
        1109.14,
        1095.1,
        1080.45,
        1065.16,
        1049.24,
        1032.67,
        1015.47,
        997.651,
        979.238,
        960.264,
        940.765,
        920.786,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_pe_oil_extraction_de_castro_phd_scen_ii",
)


@component.add(
    name='"Net oil extraction de Castro PhD - Scen III"',
    units="MToe/Year",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_net_oil_extraction_de_castro_phd_scen_iii"
    },
)
def net_oil_extraction_de_castro_phd_scen_iii(x, final_subs=None):
    return _hardcodedlookup_net_oil_extraction_de_castro_phd_scen_iii(x, final_subs)


_hardcodedlookup_net_oil_extraction_de_castro_phd_scen_iii = HardcodedLookups(
    [
        1985.0,
        1986.0,
        1987.0,
        1988.0,
        1989.0,
        1990.0,
        1991.0,
        1992.0,
        1993.0,
        1994.0,
        1995.0,
        1996.0,
        1997.0,
        1998.0,
        1999.0,
        2000.0,
        2001.0,
        2002.0,
        2003.0,
        2004.0,
        2005.0,
        2006.0,
        2007.0,
        2008.0,
        2009.0,
        2010.0,
        2011.0,
        2012.0,
        2013.0,
        2014.0,
        2015.0,
        2016.0,
        2017.0,
        2018.0,
        2019.0,
        2020.0,
        2021.0,
        2022.0,
        2023.0,
        2024.0,
        2025.0,
        2026.0,
        2027.0,
        2028.0,
        2029.0,
        2030.0,
        2031.0,
        2032.0,
        2033.0,
        2034.0,
        2035.0,
        2036.0,
        2037.0,
        2038.0,
        2039.0,
        2040.0,
        2041.0,
        2042.0,
        2043.0,
        2044.0,
        2045.0,
        2046.0,
        2047.0,
        2048.0,
        2049.0,
        2050.0,
        2051.0,
        2052.0,
        2053.0,
        2054.0,
        2055.0,
        2056.0,
        2057.0,
        2058.0,
        2059.0,
        2060.0,
        2061.0,
        2062.0,
        2063.0,
        2064.0,
        2065.0,
        2066.0,
        2067.0,
        2068.0,
        2069.0,
        2070.0,
        2071.0,
        2072.0,
        2073.0,
        2074.0,
        2075.0,
        2076.0,
        2077.0,
        2078.0,
        2079.0,
        2080.0,
        2081.0,
        2082.0,
        2083.0,
        2084.0,
        2085.0,
        2086.0,
        2087.0,
        2088.0,
        2089.0,
        2090.0,
        2091.0,
        2092.0,
        2093.0,
        2094.0,
        2095.0,
        2096.0,
        2097.0,
        2098.0,
        2099.0,
        2100.0,
    ],
    [
        2586.21,
        2657.24,
        2727.03,
        2795.64,
        2863.08,
        2929.39,
        2994.56,
        3058.58,
        3121.38,
        3182.87,
        3242.92,
        3301.35,
        3357.93,
        3412.41,
        3464.47,
        3513.79,
        3559.99,
        3602.72,
        3641.58,
        3676.21,
        3706.25,
        3731.41,
        3751.42,
        3766.07,
        3775.24,
        3778.86,
        3776.96,
        3769.56,
        3756.02,
        3735.73,
        3708.45,
        3672.29,
        3621.03,
        3554.53,
        3472.85,
        3377.15,
        3269.46,
        3152.43,
        3029.07,
        2902.39,
        2775.22,
        2649.98,
        2528.6,
        2412.5,
        2302.57,
        2199.24,
        2102.59,
        2012.4,
        1928.26,
        1849.64,
        1775.94,
        1705.9,
        1639.0,
        1574.79,
        1512.89,
        1453.04,
        1395.04,
        1338.77,
        1284.12,
        1231.05,
        1179.51,
        1129.49,
        1080.95,
        1033.89,
        988.283,
        939.916,
        888.983,
        838.921,
        790.425,
        743.889,
        699.498,
        657.297,
        617.242,
        579.24,
        543.177,
        508.93,
        476.381,
        445.423,
        415.961,
        387.915,
        361.216,
        335.808,
        311.643,
        288.683,
        266.895,
        246.251,
        226.726,
        208.297,
        190.943,
        174.638,
        159.36,
        145.082,
        131.775,
        119.409,
        107.95,
        97.3636,
        87.6112,
        78.6537,
        70.4503,
        62.9592,
        56.1382,
        49.9448,
        44.3368,
        39.2727,
        34.7122,
        30.6158,
        26.9459,
        23.6663,
        20.743,
        18.1435,
        15.8376,
        13.797,
        11.9953,
        10.4082,
        9.01332,
        7.79015,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_net_oil_extraction_de_castro_phd_scen_iii",
)


@component.add(
    name='"PE coal extraction de Castro PhD - Scen II"',
    units="MToe/Year",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_pe_coal_extraction_de_castro_phd_scen_ii"
    },
)
def pe_coal_extraction_de_castro_phd_scen_ii(x, final_subs=None):
    """
    Primary energy (Add "Energía perdida" to the net energy extraction in the original model).
    """
    return _hardcodedlookup_pe_coal_extraction_de_castro_phd_scen_ii(x, final_subs)


_hardcodedlookup_pe_coal_extraction_de_castro_phd_scen_ii = HardcodedLookups(
    [
        1985.0,
        1986.0,
        1987.0,
        1988.0,
        1989.0,
        1990.0,
        1991.0,
        1992.0,
        1993.0,
        1994.0,
        1995.0,
        1996.0,
        1997.0,
        1998.0,
        1999.0,
        2000.0,
        2001.0,
        2002.0,
        2003.0,
        2004.0,
        2005.0,
        2006.0,
        2007.0,
        2008.0,
        2009.0,
        2010.0,
        2011.0,
        2012.0,
        2013.0,
        2014.0,
        2015.0,
        2016.0,
        2017.0,
        2018.0,
        2019.0,
        2020.0,
        2021.0,
        2022.0,
        2023.0,
        2024.0,
        2025.0,
        2026.0,
        2027.0,
        2028.0,
        2029.0,
        2030.0,
        2031.0,
        2032.0,
        2033.0,
        2034.0,
        2035.0,
        2036.0,
        2037.0,
        2038.0,
        2039.0,
        2040.0,
        2041.0,
        2042.0,
        2043.0,
        2044.0,
        2045.0,
        2046.0,
        2047.0,
        2048.0,
        2049.0,
        2050.0,
        2051.0,
        2052.0,
        2053.0,
        2054.0,
        2055.0,
        2056.0,
        2057.0,
        2058.0,
        2059.0,
        2060.0,
        2061.0,
        2062.0,
        2063.0,
        2064.0,
        2065.0,
        2066.0,
        2067.0,
        2068.0,
        2069.0,
        2070.0,
        2071.0,
        2072.0,
        2073.0,
        2074.0,
        2075.0,
        2076.0,
        2077.0,
        2078.0,
        2079.0,
        2080.0,
        2081.0,
        2082.0,
        2083.0,
        2084.0,
        2085.0,
        2086.0,
        2087.0,
        2088.0,
        2089.0,
        2090.0,
        2091.0,
        2092.0,
        2093.0,
        2094.0,
        2095.0,
        2096.0,
        2097.0,
        2098.0,
        2099.0,
        2100.0,
    ],
    [
        2081.44,
        2135.51,
        2188.27,
        2239.78,
        2290.12,
        2339.37,
        2387.58,
        2434.81,
        2481.08,
        2526.43,
        2570.82,
        2614.21,
        2656.54,
        2697.73,
        2737.64,
        2776.16,
        2813.12,
        2848.39,
        2881.79,
        2913.19,
        2942.43,
        2970.14,
        2996.14,
        3020.47,
        3043.2,
        3064.45,
        3084.36,
        3103.16,
        3121.08,
        3138.41,
        3155.49,
        3171.11,
        3180.04,
        3181.73,
        3175.59,
        3161.8,
        3141.21,
        3115.28,
        3085.91,
        3055.2,
        3025.33,
        2998.72,
        2977.04,
        2961.66,
        2953.52,
        2953.18,
        2960.78,
        2976.17,
        2998.94,
        3028.5,
        3064.18,
        3101.34,
        3138.56,
        3174.51,
        3208.26,
        3239.24,
        3267.14,
        3291.87,
        3313.47,
        3332.03,
        3347.68,
        3360.5,
        3370.53,
        3377.77,
        3382.15,
        3369.61,
        3346.49,
        3321.23,
        3294.99,
        3268.1,
        3240.42,
        3211.63,
        3181.37,
        3149.3,
        3115.17,
        3078.78,
        3040.04,
        2998.94,
        2955.52,
        2909.85,
        2862.1,
        2812.42,
        2761.01,
        2708.07,
        2653.84,
        2598.53,
        2542.37,
        2485.58,
        2428.5,
        2374.08,
        2323.46,
        2276.45,
        2232.72,
        2191.9,
        2153.67,
        2117.71,
        2083.74,
        2051.52,
        2020.82,
        1991.45,
        1963.21,
        1935.96,
        1909.56,
        1883.85,
        1858.74,
        1834.13,
        1809.91,
        1786.01,
        1762.35,
        1738.88,
        1715.54,
        1692.29,
        1669.09,
        1645.91,
        1622.73,
        1599.53,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_pe_coal_extraction_de_castro_phd_scen_ii",
)


@component.add(
    name='"Net gas extraction de Castro PhD - Scen I"',
    units="MToe/Year",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_net_gas_extraction_de_castro_phd_scen_i"
    },
)
def net_gas_extraction_de_castro_phd_scen_i(x, final_subs=None):
    return _hardcodedlookup_net_gas_extraction_de_castro_phd_scen_i(x, final_subs)


_hardcodedlookup_net_gas_extraction_de_castro_phd_scen_i = HardcodedLookups(
    [
        1985.0,
        1986.0,
        1987.0,
        1988.0,
        1989.0,
        1990.0,
        1991.0,
        1992.0,
        1993.0,
        1994.0,
        1995.0,
        1996.0,
        1997.0,
        1998.0,
        1999.0,
        2000.0,
        2001.0,
        2002.0,
        2003.0,
        2004.0,
        2005.0,
        2006.0,
        2007.0,
        2008.0,
        2009.0,
        2010.0,
        2011.0,
        2012.0,
        2013.0,
        2014.0,
        2015.0,
        2016.0,
        2017.0,
        2018.0,
        2019.0,
        2020.0,
        2021.0,
        2022.0,
        2023.0,
        2024.0,
        2025.0,
        2026.0,
        2027.0,
        2028.0,
        2029.0,
        2030.0,
        2031.0,
        2032.0,
        2033.0,
        2034.0,
        2035.0,
        2036.0,
        2037.0,
        2038.0,
        2039.0,
        2040.0,
        2041.0,
        2042.0,
        2043.0,
        2044.0,
        2045.0,
        2046.0,
        2047.0,
        2048.0,
        2049.0,
        2050.0,
        2051.0,
        2052.0,
        2053.0,
        2054.0,
        2055.0,
        2056.0,
        2057.0,
        2058.0,
        2059.0,
        2060.0,
        2061.0,
        2062.0,
        2063.0,
        2064.0,
        2065.0,
        2066.0,
        2067.0,
        2068.0,
        2069.0,
        2070.0,
        2071.0,
        2072.0,
        2073.0,
        2074.0,
        2075.0,
        2076.0,
        2077.0,
        2078.0,
        2079.0,
        2080.0,
        2081.0,
        2082.0,
        2083.0,
        2084.0,
        2085.0,
        2086.0,
        2087.0,
        2088.0,
        2089.0,
        2090.0,
        2091.0,
        2092.0,
        2093.0,
        2094.0,
        2095.0,
        2096.0,
        2097.0,
        2098.0,
        2099.0,
        2100.0,
    ],
    [
        1378.15,
        1422.43,
        1466.37,
        1509.97,
        1553.27,
        1596.27,
        1639.0,
        1681.45,
        1723.6,
        1765.43,
        1806.88,
        1847.87,
        1888.31,
        1928.08,
        1967.04,
        2005.02,
        2041.85,
        2077.35,
        2111.34,
        2143.61,
        2174.01,
        2202.36,
        2228.55,
        2252.45,
        2274.0,
        2293.18,
        2310.0,
        2324.5,
        2336.78,
        2346.97,
        2355.23,
        2360.56,
        2358.93,
        2349.91,
        2333.02,
        2308.36,
        2276.56,
        2238.66,
        2196.02,
        2150.19,
        2102.72,
        2055.42,
        2009.48,
        1965.96,
        1925.6,
        1888.94,
        1856.22,
        1827.53,
        1802.76,
        1781.69,
        1764.05,
        1748.05,
        1733.15,
        1718.83,
        1704.69,
        1690.47,
        1676.02,
        1661.3,
        1646.32,
        1631.17,
        1615.96,
        1598.98,
        1581.36,
        1563.41,
        1545.42,
        1521.06,
        1491.54,
        1462.02,
        1433.79,
        1407.58,
        1383.71,
        1362.23,
        1342.98,
        1325.69,
        1310.03,
        1295.68,
        1282.28,
        1269.52,
        1257.12,
        1244.82,
        1232.39,
        1219.62,
        1206.36,
        1192.45,
        1177.78,
        1162.23,
        1145.74,
        1128.25,
        1109.71,
        1090.12,
        1069.47,
        1047.78,
        1025.09,
        1001.45,
        976.929,
        951.611,
        925.587,
        898.96,
        871.837,
        844.332,
        816.56,
        788.637,
        760.675,
        732.784,
        705.067,
        677.624,
        650.543,
        623.906,
        597.787,
        572.25,
        547.351,
        523.135,
        499.642,
        476.902,
        454.936,
        433.76,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_net_gas_extraction_de_castro_phd_scen_i",
)


@component.add(
    name='"PE gas extraction de Castro PhD - Scen II"',
    units="MToe/Year",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_pe_gas_extraction_de_castro_phd_scen_ii"
    },
)
def pe_gas_extraction_de_castro_phd_scen_ii(x, final_subs=None):
    """
    Primary energy (Add "Energía perdida" to the net energy extraction in the original model).
    """
    return _hardcodedlookup_pe_gas_extraction_de_castro_phd_scen_ii(x, final_subs)


_hardcodedlookup_pe_gas_extraction_de_castro_phd_scen_ii = HardcodedLookups(
    [
        1985.0,
        1986.0,
        1987.0,
        1988.0,
        1989.0,
        1990.0,
        1991.0,
        1992.0,
        1993.0,
        1994.0,
        1995.0,
        1996.0,
        1997.0,
        1998.0,
        1999.0,
        2000.0,
        2001.0,
        2002.0,
        2003.0,
        2004.0,
        2005.0,
        2006.0,
        2007.0,
        2008.0,
        2009.0,
        2010.0,
        2011.0,
        2012.0,
        2013.0,
        2014.0,
        2015.0,
        2016.0,
        2017.0,
        2018.0,
        2019.0,
        2020.0,
        2021.0,
        2022.0,
        2023.0,
        2024.0,
        2025.0,
        2026.0,
        2027.0,
        2028.0,
        2029.0,
        2030.0,
        2031.0,
        2032.0,
        2033.0,
        2034.0,
        2035.0,
        2036.0,
        2037.0,
        2038.0,
        2039.0,
        2040.0,
        2041.0,
        2042.0,
        2043.0,
        2044.0,
        2045.0,
        2046.0,
        2047.0,
        2048.0,
        2049.0,
        2050.0,
        2051.0,
        2052.0,
        2053.0,
        2054.0,
        2055.0,
        2056.0,
        2057.0,
        2058.0,
        2059.0,
        2060.0,
        2061.0,
        2062.0,
        2063.0,
        2064.0,
        2065.0,
        2066.0,
        2067.0,
        2068.0,
        2069.0,
        2070.0,
        2071.0,
        2072.0,
        2073.0,
        2074.0,
        2075.0,
        2076.0,
        2077.0,
        2078.0,
        2079.0,
        2080.0,
        2081.0,
        2082.0,
        2083.0,
        2084.0,
        2085.0,
        2086.0,
        2087.0,
        2088.0,
        2089.0,
        2090.0,
        2091.0,
        2092.0,
        2093.0,
        2094.0,
        2095.0,
        2096.0,
        2097.0,
        2098.0,
        2099.0,
        2100.0,
    ],
    [
        1511.25,
        1560.28,
        1609.0,
        1657.46,
        1705.67,
        1753.67,
        1801.48,
        1849.09,
        1896.51,
        1943.7,
        1990.62,
        2037.18,
        2083.29,
        2128.84,
        2173.66,
        2217.6,
        2260.46,
        2302.05,
        2342.18,
        2380.64,
        2417.18,
        2452.25,
        2485.65,
        2517.3,
        2547.21,
        2575.39,
        2601.9,
        2626.83,
        2650.34,
        2672.6,
        2693.85,
        2713.04,
        2725.69,
        2731.16,
        2728.82,
        2718.75,
        2701.64,
        2678.7,
        2651.58,
        2622.12,
        2592.25,
        2564.02,
        2538.98,
        2518.29,
        2502.75,
        2492.79,
        2488.48,
        2489.57,
        2495.59,
        2505.9,
        2519.76,
        2533.25,
        2544.98,
        2553.75,
        2558.7,
        2559.31,
        2555.33,
        2546.69,
        2533.45,
        2515.76,
        2493.79,
        2467.71,
        2437.67,
        2403.82,
        2366.26,
        2315.78,
        2256.66,
        2195.62,
        2133.79,
        2071.61,
        2009.2,
        1946.54,
        1883.58,
        1820.32,
        1756.81,
        1693.17,
        1629.56,
        1566.17,
        1503.21,
        1440.92,
        1379.52,
        1319.21,
        1260.2,
        1202.66,
        1146.75,
        1092.58,
        1040.26,
        989.855,
        941.438,
        895.994,
        853.858,
        814.762,
        778.406,
        744.501,
        712.786,
        683.028,
        655.029,
        628.61,
        603.618,
        579.92,
        557.398,
        535.948,
        515.482,
        495.919,
        477.189,
        459.233,
        441.995,
        425.428,
        409.491,
        394.147,
        379.364,
        365.113,
        351.369,
        338.109,
        325.314,
        312.966,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_pe_gas_extraction_de_castro_phd_scen_ii",
)


@component.add(
    name='"Net gas extraction de Castro PhD - Scen III"',
    units="MToe/Year",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_net_gas_extraction_de_castro_phd_scen_iii"
    },
)
def net_gas_extraction_de_castro_phd_scen_iii(x, final_subs=None):
    return _hardcodedlookup_net_gas_extraction_de_castro_phd_scen_iii(x, final_subs)


_hardcodedlookup_net_gas_extraction_de_castro_phd_scen_iii = HardcodedLookups(
    [
        1985.0,
        1986.0,
        1987.0,
        1988.0,
        1989.0,
        1990.0,
        1991.0,
        1992.0,
        1993.0,
        1994.0,
        1995.0,
        1996.0,
        1997.0,
        1998.0,
        1999.0,
        2000.0,
        2001.0,
        2002.0,
        2003.0,
        2004.0,
        2005.0,
        2006.0,
        2007.0,
        2008.0,
        2009.0,
        2010.0,
        2011.0,
        2012.0,
        2013.0,
        2014.0,
        2015.0,
        2016.0,
        2017.0,
        2018.0,
        2019.0,
        2020.0,
        2021.0,
        2022.0,
        2023.0,
        2024.0,
        2025.0,
        2026.0,
        2027.0,
        2028.0,
        2029.0,
        2030.0,
        2031.0,
        2032.0,
        2033.0,
        2034.0,
        2035.0,
        2036.0,
        2037.0,
        2038.0,
        2039.0,
        2040.0,
        2041.0,
        2042.0,
        2043.0,
        2044.0,
        2045.0,
        2046.0,
        2047.0,
        2048.0,
        2049.0,
        2050.0,
        2051.0,
        2052.0,
        2053.0,
        2054.0,
        2055.0,
        2056.0,
        2057.0,
        2058.0,
        2059.0,
        2060.0,
        2061.0,
        2062.0,
        2063.0,
        2064.0,
        2065.0,
        2066.0,
        2067.0,
        2068.0,
        2069.0,
        2070.0,
        2071.0,
        2072.0,
        2073.0,
        2074.0,
        2075.0,
        2076.0,
        2077.0,
        2078.0,
        2079.0,
        2080.0,
        2081.0,
        2082.0,
        2083.0,
        2084.0,
        2085.0,
        2086.0,
        2087.0,
        2088.0,
        2089.0,
        2090.0,
        2091.0,
        2092.0,
        2093.0,
        2094.0,
        2095.0,
        2096.0,
        2097.0,
        2098.0,
        2099.0,
        2100.0,
    ],
    [
        1378.15,
        1422.43,
        1466.37,
        1509.97,
        1553.27,
        1596.27,
        1639.0,
        1681.45,
        1723.6,
        1765.43,
        1806.88,
        1847.87,
        1888.31,
        1928.08,
        1967.04,
        2005.02,
        2041.85,
        2077.35,
        2111.34,
        2143.61,
        2174.01,
        2202.36,
        2228.55,
        2252.45,
        2274.0,
        2293.18,
        2310.0,
        2324.47,
        2336.18,
        2344.72,
        2349.88,
        2350.38,
        2342.04,
        2324.36,
        2296.96,
        2260.1,
        2214.64,
        2161.88,
        2103.47,
        2041.17,
        1976.72,
        1911.72,
        1847.53,
        1785.2,
        1725.49,
        1668.87,
        1615.53,
        1565.49,
        1518.59,
        1474.56,
        1433.08,
        1393.24,
        1354.7,
        1317.14,
        1280.29,
        1243.98,
        1208.07,
        1172.48,
        1137.16,
        1102.09,
        1067.27,
        1032.71,
        998.441,
        964.476,
        930.845,
        893.625,
        852.817,
        811.701,
        771.01,
        731.211,
        692.579,
        655.254,
        619.284,
        584.664,
        551.358,
        519.318,
        488.491,
        458.831,
        430.297,
        402.855,
        376.484,
        351.166,
        326.892,
        303.655,
        281.454,
        260.289,
        240.158,
        221.061,
        202.995,
        185.952,
        169.922,
        154.893,
        140.845,
        127.756,
        115.6,
        104.347,
        93.9612,
        84.4072,
        75.6455,
        67.6349,
        60.3331,
        53.697,
        47.6834,
        42.2492,
        37.3523,
        32.9516,
        29.0072,
        25.481,
        22.3367,
        19.5399,
        17.0583,
        14.8618,
        12.922,
        11.2131,
        9.71091,
        8.39349,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_net_gas_extraction_de_castro_phd_scen_iii",
)


@component.add(
    name='"Net coal extraction de Castro PhD - Scen III"',
    units="MToe/Year",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_net_coal_extraction_de_castro_phd_scen_iii"
    },
)
def net_coal_extraction_de_castro_phd_scen_iii(x, final_subs=None):
    return _hardcodedlookup_net_coal_extraction_de_castro_phd_scen_iii(x, final_subs)


_hardcodedlookup_net_coal_extraction_de_castro_phd_scen_iii = HardcodedLookups(
    [
        1985.0,
        1986.0,
        1987.0,
        1988.0,
        1989.0,
        1990.0,
        1991.0,
        1992.0,
        1993.0,
        1994.0,
        1995.0,
        1996.0,
        1997.0,
        1998.0,
        1999.0,
        2000.0,
        2001.0,
        2002.0,
        2003.0,
        2004.0,
        2005.0,
        2006.0,
        2007.0,
        2008.0,
        2009.0,
        2010.0,
        2011.0,
        2012.0,
        2013.0,
        2014.0,
        2015.0,
        2016.0,
        2017.0,
        2018.0,
        2019.0,
        2020.0,
        2021.0,
        2022.0,
        2023.0,
        2024.0,
        2025.0,
        2026.0,
        2027.0,
        2028.0,
        2029.0,
        2030.0,
        2031.0,
        2032.0,
        2033.0,
        2034.0,
        2035.0,
        2036.0,
        2037.0,
        2038.0,
        2039.0,
        2040.0,
        2041.0,
        2042.0,
        2043.0,
        2044.0,
        2045.0,
        2046.0,
        2047.0,
        2048.0,
        2049.0,
        2050.0,
        2051.0,
        2052.0,
        2053.0,
        2054.0,
        2055.0,
        2056.0,
        2057.0,
        2058.0,
        2059.0,
        2060.0,
        2061.0,
        2062.0,
        2063.0,
        2064.0,
        2065.0,
        2066.0,
        2067.0,
        2068.0,
        2069.0,
        2070.0,
        2071.0,
        2072.0,
        2073.0,
        2074.0,
        2075.0,
        2076.0,
        2077.0,
        2078.0,
        2079.0,
        2080.0,
        2081.0,
        2082.0,
        2083.0,
        2084.0,
        2085.0,
        2086.0,
        2087.0,
        2088.0,
        2089.0,
        2090.0,
        2091.0,
        2092.0,
        2093.0,
        2094.0,
        2095.0,
        2096.0,
        2097.0,
        2098.0,
        2099.0,
        2100.0,
    ],
    [
        1945.63,
        1995.96,
        2045.03,
        2092.89,
        2139.62,
        2185.28,
        2229.93,
        2273.61,
        2316.36,
        2358.19,
        2399.06,
        2438.96,
        2477.8,
        2515.5,
        2551.95,
        2587.03,
        2620.58,
        2652.48,
        2682.56,
        2710.7,
        2736.76,
        2760.66,
        2782.31,
        2801.7,
        2818.82,
        2833.73,
        2846.52,
        2857.31,
        2865.65,
        2871.1,
        2873.47,
        2871.23,
        2859.31,
        2837.16,
        2804.26,
        2760.86,
        2707.91,
        2646.88,
        2579.6,
        2508.07,
        2434.29,
        2360.07,
        2286.98,
        2216.23,
        2148.71,
        2084.94,
        2025.17,
        1969.39,
        1917.4,
        1868.88,
        1823.41,
        1779.85,
        1737.75,
        1696.69,
        1656.32,
        1616.38,
        1576.69,
        1537.11,
        1497.56,
        1458.0,
        1418.41,
        1378.78,
        1339.14,
        1299.51,
        1259.91,
        1215.03,
        1164.71,
        1113.39,
        1062.05,
        1011.37,
        961.747,
        913.409,
        866.46,
        820.93,
        776.805,
        734.051,
        692.63,
        652.506,
        613.653,
        576.054,
        539.706,
        504.611,
        470.782,
        438.236,
        406.994,
        377.077,
        348.507,
        321.3,
        295.471,
        271.027,
        247.969,
        226.292,
        205.981,
        187.015,
        169.365,
        152.995,
        137.864,
        123.924,
        111.123,
        99.4056,
        88.714,
        78.9881,
        70.1672,
        62.1905,
        54.9978,
        48.5302,
        42.7303,
        37.5432,
        32.916,
        28.7988,
        25.1446,
        21.9093,
        19.0516,
        16.5334,
        14.3195,
        12.3777,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_net_coal_extraction_de_castro_phd_scen_iii",
)


@component.add(
    name='"Net coal extraction de Castro PhD - Scen I"',
    units="MToe/Year",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_net_coal_extraction_de_castro_phd_scen_i"
    },
)
def net_coal_extraction_de_castro_phd_scen_i(x, final_subs=None):
    return _hardcodedlookup_net_coal_extraction_de_castro_phd_scen_i(x, final_subs)


_hardcodedlookup_net_coal_extraction_de_castro_phd_scen_i = HardcodedLookups(
    [
        1985.0,
        1986.0,
        1987.0,
        1988.0,
        1989.0,
        1990.0,
        1991.0,
        1992.0,
        1993.0,
        1994.0,
        1995.0,
        1996.0,
        1997.0,
        1998.0,
        1999.0,
        2000.0,
        2001.0,
        2002.0,
        2003.0,
        2004.0,
        2005.0,
        2006.0,
        2007.0,
        2008.0,
        2009.0,
        2010.0,
        2011.0,
        2012.0,
        2013.0,
        2014.0,
        2015.0,
        2016.0,
        2017.0,
        2018.0,
        2019.0,
        2020.0,
        2021.0,
        2022.0,
        2023.0,
        2024.0,
        2025.0,
        2026.0,
        2027.0,
        2028.0,
        2029.0,
        2030.0,
        2031.0,
        2032.0,
        2033.0,
        2034.0,
        2035.0,
        2036.0,
        2037.0,
        2038.0,
        2039.0,
        2040.0,
        2041.0,
        2042.0,
        2043.0,
        2044.0,
        2045.0,
        2046.0,
        2047.0,
        2048.0,
        2049.0,
        2050.0,
        2051.0,
        2052.0,
        2053.0,
        2054.0,
        2055.0,
        2056.0,
        2057.0,
        2058.0,
        2059.0,
        2060.0,
        2061.0,
        2062.0,
        2063.0,
        2064.0,
        2065.0,
        2066.0,
        2067.0,
        2068.0,
        2069.0,
        2070.0,
        2071.0,
        2072.0,
        2073.0,
        2074.0,
        2075.0,
        2076.0,
        2077.0,
        2078.0,
        2079.0,
        2080.0,
        2081.0,
        2082.0,
        2083.0,
        2084.0,
        2085.0,
        2086.0,
        2087.0,
        2088.0,
        2089.0,
        2090.0,
        2091.0,
        2092.0,
        2093.0,
        2094.0,
        2095.0,
        2096.0,
        2097.0,
        2098.0,
        2099.0,
        2100.0,
    ],
    [
        1378.15,
        1422.43,
        1466.37,
        1509.97,
        1553.27,
        1596.27,
        1639.0,
        1681.45,
        1723.6,
        1765.43,
        1806.88,
        1847.87,
        1888.31,
        1928.08,
        1967.04,
        2005.02,
        2041.85,
        2077.35,
        2111.34,
        2143.61,
        2174.01,
        2202.36,
        2228.55,
        2252.45,
        2274.0,
        2293.18,
        2310.0,
        2324.5,
        2336.78,
        2346.97,
        2355.23,
        2360.56,
        2358.93,
        2349.91,
        2333.02,
        2308.36,
        2276.56,
        2238.66,
        2196.02,
        2150.19,
        2102.72,
        2055.42,
        2009.48,
        1965.96,
        1925.6,
        1888.94,
        1856.22,
        1827.53,
        1802.76,
        1781.69,
        1764.05,
        1748.05,
        1733.15,
        1718.83,
        1704.69,
        1690.47,
        1676.02,
        1661.3,
        1646.32,
        1631.17,
        1615.96,
        1598.98,
        1581.36,
        1563.41,
        1545.42,
        1521.06,
        1491.54,
        1462.02,
        1433.79,
        1407.58,
        1383.71,
        1362.23,
        1342.98,
        1325.69,
        1310.03,
        1295.68,
        1282.28,
        1269.52,
        1257.12,
        1244.82,
        1232.39,
        1219.62,
        1206.36,
        1192.45,
        1177.78,
        1162.23,
        1145.74,
        1128.25,
        1109.71,
        1090.12,
        1069.47,
        1047.78,
        1025.09,
        1001.45,
        976.929,
        951.611,
        925.587,
        898.96,
        871.837,
        844.332,
        816.56,
        788.637,
        760.675,
        732.784,
        705.067,
        677.624,
        650.543,
        623.906,
        597.787,
        572.25,
        547.351,
        523.135,
        499.642,
        476.902,
        454.936,
        433.76,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_net_coal_extraction_de_castro_phd_scen_i",
)


@component.add(
    name='"TNES de Castro PhD - Scen III"',
    units="MToe/Year",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_tnes_de_castro_phd_scen_iii"},
)
def tnes_de_castro_phd_scen_iii(x, final_subs=None):
    """
    Total net energy supply scenario III.
    """
    return _hardcodedlookup_tnes_de_castro_phd_scen_iii(x, final_subs)


_hardcodedlookup_tnes_de_castro_phd_scen_iii = HardcodedLookups(
    [
        1985.0,
        1986.0,
        1987.0,
        1988.0,
        1989.0,
        1990.0,
        1991.0,
        1992.0,
        1993.0,
        1994.0,
        1995.0,
        1996.0,
        1997.0,
        1998.0,
        1999.0,
        2000.0,
        2001.0,
        2002.0,
        2003.0,
        2004.0,
        2005.0,
        2006.0,
        2007.0,
        2008.0,
        2009.0,
        2010.0,
        2011.0,
        2012.0,
        2013.0,
        2014.0,
        2015.0,
        2016.0,
        2017.0,
        2018.0,
        2019.0,
        2020.0,
        2021.0,
        2022.0,
        2023.0,
        2024.0,
        2025.0,
        2026.0,
        2027.0,
        2028.0,
        2029.0,
        2030.0,
        2031.0,
        2032.0,
        2033.0,
        2034.0,
        2035.0,
        2036.0,
        2037.0,
        2038.0,
        2039.0,
        2040.0,
        2041.0,
        2042.0,
        2043.0,
        2044.0,
        2045.0,
        2046.0,
        2047.0,
        2048.0,
        2049.0,
        2050.0,
        2051.0,
        2052.0,
        2053.0,
        2054.0,
        2055.0,
        2056.0,
        2057.0,
        2058.0,
        2059.0,
        2060.0,
        2061.0,
        2062.0,
        2063.0,
        2064.0,
        2065.0,
        2066.0,
        2067.0,
        2068.0,
        2069.0,
        2070.0,
        2071.0,
        2072.0,
        2073.0,
        2074.0,
        2075.0,
        2076.0,
        2077.0,
        2078.0,
        2079.0,
        2080.0,
        2081.0,
        2082.0,
        2083.0,
        2084.0,
        2085.0,
        2086.0,
        2087.0,
        2088.0,
        2089.0,
        2090.0,
        2091.0,
        2092.0,
        2093.0,
        2094.0,
        2095.0,
        2096.0,
        2097.0,
        2098.0,
        2099.0,
        2100.0,
    ],
    [
        7173.13,
        7368.39,
        7560.95,
        7750.95,
        7938.54,
        8123.85,
        8306.94,
        8487.87,
        8666.6,
        8843.01,
        9016.91,
        9188.0,
        9355.9,
        9520.11,
        9680.06,
        9835.12,
        9984.57,
        10127.7,
        10263.7,
        10391.9,
        10511.6,
        10622.1,
        10723.1,
        10814.1,
        10894.8,
        10965.4,
        11025.8,
        11075.0,
        11109.9,
        11131.5,
        11139.1,
        11127.4,
        11079.5,
        10993.9,
        10869.3,
        10707.1,
        10511.3,
        10287.5,
        10042.6,
        9783.87,
        9518.5,
        9252.88,
        8992.4,
        8741.21,
        8502.22,
        8277.14,
        8066.69,
        7870.72,
        7688.5,
        7518.87,
        7360.42,
        7209.45,
        7064.52,
        6924.25,
        6787.58,
        6653.67,
        6521.96,
        6392.02,
        6263.61,
        6136.56,
        6010.8,
        5886.31,
        5763.1,
        5641.19,
        5520.62,
        5379.15,
        5222.66,
        5064.42,
        4907.35,
        4753.31,
        4603.4,
        4458.15,
        4317.76,
        4182.18,
        4051.27,
        3924.82,
        3802.6,
        3684.43,
        3570.15,
        3459.62,
        3352.78,
        3249.57,
        3149.98,
        3054.03,
        2961.73,
        2873.14,
        2788.3,
        2707.25,
        2630.04,
        2556.68,
        2487.21,
        2421.6,
        2359.84,
        2301.9,
        2247.7,
        2197.16,
        2150.2,
        2106.69,
        2066.5,
        2029.49,
        1995.52,
        1964.42,
        1936.03,
        1910.19,
        1886.73,
        1865.5,
        1846.32,
        1829.04,
        1813.51,
        1799.59,
        1787.14,
        1776.03,
        1766.14,
        1757.35,
        1749.56,
        1742.67,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_tnes_de_castro_phd_scen_iii",
)


@component.add(
    name="\"Primary coal extraction de Castro PhD - Scen 'madcoal'\"",
    units="MToe/Year",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_primary_coal_extraction_de_castro_phd_scen_madcoal"
    },
)
def primary_coal_extraction_de_castro_phd_scen_madcoal(x, final_subs=None):
    """
    Primary energy (Add "Energía perdida" to the net energy extraction in the original model).
    """
    return _hardcodedlookup_primary_coal_extraction_de_castro_phd_scen_madcoal(
        x, final_subs
    )


_hardcodedlookup_primary_coal_extraction_de_castro_phd_scen_madcoal = HardcodedLookups(
    [
        1985.0,
        1986.0,
        1987.0,
        1988.0,
        1989.0,
        1990.0,
        1991.0,
        1992.0,
        1993.0,
        1994.0,
        1995.0,
        1996.0,
        1997.0,
        1998.0,
        1999.0,
        2000.0,
        2001.0,
        2002.0,
        2003.0,
        2004.0,
        2005.0,
        2006.0,
        2007.0,
        2008.0,
        2009.0,
        2010.0,
        2011.0,
        2012.0,
        2013.0,
        2014.0,
        2015.0,
        2016.0,
        2017.0,
        2018.0,
        2019.0,
        2020.0,
        2021.0,
        2022.0,
        2023.0,
        2024.0,
        2025.0,
        2026.0,
        2027.0,
        2028.0,
        2029.0,
        2030.0,
        2031.0,
        2032.0,
        2033.0,
        2034.0,
        2035.0,
        2036.0,
        2037.0,
        2038.0,
        2039.0,
        2040.0,
        2041.0,
        2042.0,
        2043.0,
        2044.0,
        2045.0,
        2046.0,
        2047.0,
        2048.0,
        2049.0,
        2050.0,
        2051.0,
        2052.0,
        2053.0,
        2054.0,
        2055.0,
        2056.0,
        2057.0,
        2058.0,
        2059.0,
        2060.0,
        2061.0,
        2062.0,
        2063.0,
        2064.0,
        2065.0,
        2066.0,
        2067.0,
        2068.0,
        2069.0,
        2070.0,
        2071.0,
        2072.0,
        2073.0,
        2074.0,
        2075.0,
        2076.0,
        2077.0,
        2078.0,
        2079.0,
        2080.0,
        2081.0,
        2082.0,
        2083.0,
        2084.0,
        2085.0,
        2086.0,
        2087.0,
        2088.0,
        2089.0,
        2090.0,
        2091.0,
        2092.0,
        2093.0,
        2094.0,
        2095.0,
        2096.0,
        2097.0,
        2098.0,
        2099.0,
        2100.0,
    ],
    [
        2058.92,
        2092.27,
        2125.72,
        2159.47,
        2193.76,
        2228.81,
        2264.86,
        2302.13,
        2340.84,
        2381.18,
        2423.34,
        2467.47,
        2513.71,
        2562.15,
        2612.87,
        2665.92,
        2721.31,
        2779.03,
        2839.06,
        2901.33,
        2965.74,
        3032.57,
        3101.67,
        3172.97,
        3246.4,
        3321.9,
        3399.43,
        3478.96,
        3560.51,
        3644.12,
        3729.86,
        3816.11,
        3897.75,
        3974.81,
        4046.62,
        4112.97,
        4174.06,
        4230.44,
        4282.94,
        4332.57,
        4380.4,
        4427.69,
        4475.38,
        4524.25,
        4574.94,
        4627.89,
        4683.41,
        4741.63,
        4802.57,
        4866.15,
        4932.23,
        4997.04,
        5059.9,
        5120.05,
        5176.96,
        5230.21,
        5279.47,
        5324.46,
        5364.9,
        5400.52,
        5431.05,
        5456.18,
        5475.61,
        5489.04,
        5496.15,
        5485.53,
        5462.41,
        5433.0,
        5397.99,
        5357.58,
        5311.76,
        5260.45,
        5203.57,
        5141.1,
        5073.11,
        4999.72,
        4921.11,
        4837.56,
        4749.39,
        4656.95,
        4560.64,
        4460.9,
        4358.16,
        4252.9,
        4145.55,
        4036.59,
        3926.47,
        3815.6,
        3704.47,
        3595.32,
        3489.22,
        3386.16,
        3286.01,
        3188.63,
        3093.87,
        3001.58,
        2911.63,
        2823.91,
        2738.31,
        2654.74,
        2573.11,
        2493.35,
        2415.41,
        2339.22,
        2264.73,
        2191.92,
        2120.74,
        2051.16,
        1983.17,
        1916.73,
        1851.84,
        1788.49,
        1726.66,
        1666.35,
        1607.54,
        1550.24,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_primary_coal_extraction_de_castro_phd_scen_madcoal",
)


@component.add(
    name='"TPES de Castro PhD - Scen II"',
    units="MToe/Year",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_tpes_de_castro_phd_scen_ii"},
)
def tpes_de_castro_phd_scen_ii(x, final_subs=None):
    """
    TPES. (Add "Energía perdida" to the net energy extraction in the original model).
    """
    return _hardcodedlookup_tpes_de_castro_phd_scen_ii(x, final_subs)


_hardcodedlookup_tpes_de_castro_phd_scen_ii = HardcodedLookups(
    [
        1985.0,
        1986.0,
        1987.0,
        1988.0,
        1989.0,
        1990.0,
        1991.0,
        1992.0,
        1993.0,
        1994.0,
        1995.0,
        1996.0,
        1997.0,
        1998.0,
        1999.0,
        2000.0,
        2001.0,
        2002.0,
        2003.0,
        2004.0,
        2005.0,
        2006.0,
        2007.0,
        2008.0,
        2009.0,
        2010.0,
        2011.0,
        2012.0,
        2013.0,
        2014.0,
        2015.0,
        2016.0,
        2017.0,
        2018.0,
        2019.0,
        2020.0,
        2021.0,
        2022.0,
        2023.0,
        2024.0,
        2025.0,
        2026.0,
        2027.0,
        2028.0,
        2029.0,
        2030.0,
        2031.0,
        2032.0,
        2033.0,
        2034.0,
        2035.0,
        2036.0,
        2037.0,
        2038.0,
        2039.0,
        2040.0,
        2041.0,
        2042.0,
        2043.0,
        2044.0,
        2045.0,
        2046.0,
        2047.0,
        2048.0,
        2049.0,
        2050.0,
        2051.0,
        2052.0,
        2053.0,
        2054.0,
        2055.0,
        2056.0,
        2057.0,
        2058.0,
        2059.0,
        2060.0,
        2061.0,
        2062.0,
        2063.0,
        2064.0,
        2065.0,
        2066.0,
        2067.0,
        2068.0,
        2069.0,
        2070.0,
        2071.0,
        2072.0,
        2073.0,
        2074.0,
        2075.0,
        2076.0,
        2077.0,
        2078.0,
        2079.0,
        2080.0,
        2081.0,
        2082.0,
        2083.0,
        2084.0,
        2085.0,
        2086.0,
        2087.0,
        2088.0,
        2089.0,
        2090.0,
        2091.0,
        2092.0,
        2093.0,
        2094.0,
        2095.0,
        2096.0,
        2097.0,
        2098.0,
        2099.0,
        2100.0,
    ],
    [
        7749.13,
        7949.4,
        8160.47,
        8369.05,
        8575.33,
        8779.44,
        8981.51,
        9181.61,
        9379.72,
        9575.75,
        9769.52,
        9960.74,
        10149.0,
        10333.8,
        10514.5,
        10690.6,
        10861.1,
        11025.4,
        11182.6,
        11331.9,
        11472.6,
        11613.1,
        11744.0,
        11868.2,
        11985.7,
        12096.8,
        12202.0,
        12302.1,
        12398.0,
        12490.6,
        12581.3,
        12667.2,
        12730.0,
        12767.9,
        12779.1,
        12764.7,
        12728.4,
        12676.0,
        12615.0,
        12553.4,
        12499.7,
        12465.2,
        12453.3,
        12470.3,
        12519.7,
        12603.9,
        12723.6,
        12878.5,
        13067.2,
        13287.8,
        13538.2,
        13805.0,
        14082.5,
        14367.0,
        14656.3,
        14949.0,
        15244.7,
        15543.8,
        15846.7,
        16154.3,
        16467.1,
        16785.7,
        17110.0,
        17439.8,
        17774.5,
        18113.2,
        18354.1,
        18638.3,
        18929.8,
        19227.6,
        19529.3,
        19832.1,
        20132.6,
        20427.7,
        20714.2,
        20989.2,
        21250.3,
        21494.8,
        21720.8,
        21926.3,
        22109.7,
        22269.4,
        22404.4,
        22513.5,
        22596.2,
        22651.7,
        22679.9,
        22680.6,
        22664.5,
        22677.2,
        22706.2,
        22750.8,
        22809.7,
        22881.7,
        22965.5,
        23059.8,
        23163.4,
        23275.1,
        23393.7,
        23518.0,
        23647.0,
        23779.6,
        23914.5,
        24050.7,
        24187.2,
        24322.8,
        24456.4,
        24587.0,
        24713.6,
        24835.1,
        24950.6,
        25059.1,
        25159.7,
        25251.6,
        25333.9,
        25405.8,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_tpes_de_castro_phd_scen_ii",
)


@component.add(
    name="P nuclear scen 1", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def p_nuclear_scen_1():
    """
    Si P_nuclear_1 = 0 --> escenario 1. P_nuclear_1 = 1 --> permito los escenarios 2 y 3 (PLEX)
    """
    return 0


@component.add(
    name='"P nuclear 2-3"', units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def p_nuclear_23():
    """
    Si P_nuclear = 0 --> escenario 2. P_nuclear = 1 --> escenario 3 (PLEX)
    """
    return 1


@component.add(
    name="gCO2e per GTCO2e 4",
    units="GTCO2e/gCO2e",
    comp_type="Constant",
    comp_subtype="Normal",
)
def gco2e_per_gtco2e_4():
    """
    /* Comprobar esta relación de unidades */
    """
    return 1 / 1000


@component.add(
    name="gCO2e per GTCO2e 3",
    units="GTCO2e/gCO2e",
    comp_type="Constant",
    comp_subtype="Normal",
)
def gco2e_per_gtco2e_3():
    """
    /* Comprobar esta relación de unidades */
    """
    return 1 / 1000


@component.add(
    name="gCO2e per GTCO2e 0",
    units="GTCO2e/gCO2e",
    comp_type="Constant",
    comp_subtype="Normal",
)
def gco2e_per_gtco2e_0():
    """
    /* Comprobar esta relación de unidades */
    """
    return 1 / 1000


@component.add(
    name="gCO2e per GTCO2e 1",
    units="GTCO2e/gCO2e",
    comp_type="Constant",
    comp_subtype="Normal",
)
def gco2e_per_gtco2e_1():
    """
    /* Comprobar esta relación de unidades */
    """
    return 1 / 1000


@component.add(
    name="TWh per gCO2e 0",
    units="gCO2e/TWh",
    comp_type="Constant",
    comp_subtype="Normal",
)
def twh_per_gco2e_0():
    """
    17-22 gCO2e/KWh [Arvesen 2011] /*Comprobar esta relación*/
    """
    return 0.02


@component.add(
    name="Other liquids required EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "energy_distr_losses_ff_ej": 1,
        "transformation_ff_losses_ej": 1,
        "nonenergy_use_demand_by_final_fuel_ej": 1,
    },
)
def other_liquids_required_ej():
    return (
        energy_distr_losses_ff_ej().loc[:, "liquids"].reset_coords(drop=True)
        + transformation_ff_losses_ej().loc[:, "liquids"].reset_coords(drop=True)
        + nonenergy_use_demand_by_final_fuel_ej()
        .loc[:, "liquids"]
        .reset_coords(drop=True)
    )


@component.add(
    name="Agricultural land",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_agricultural_land": 1},
    other_deps={
        "_integ_agricultural_land": {
            "initial": {"initial_agricultural_area": 1},
            "step": {
                "deforestation_rate": 1,
                "forest_loss_to_sustain_agriculture": 1,
                "increase_agricultural_land": 1,
                "compet_land_for_biofuels_rate": 1,
                "urban_land_rate": 1,
            },
        }
    },
)
def agricultural_land():
    """
    Agricultural land includes both categories from FAOSTAT: "Arable land and Permanent crops" and "Permanent pastures".
    """
    return _integ_agricultural_land()


_integ_agricultural_land = Integ(
    lambda: deforestation_rate()
    + forest_loss_to_sustain_agriculture()
    + increase_agricultural_land()
    - compet_land_for_biofuels_rate()
    - urban_land_rate(),
    lambda: xr.DataArray(
        initial_agricultural_area(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_agricultural_land",
)


@component.add(
    name="Compet agricultural land for biofuels",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_compet_agricultural_land_for_biofuels": 1},
    other_deps={
        "_integ_compet_agricultural_land_for_biofuels": {
            "initial": {"initial_value_land_compet_biofuels_2gen_mha": 1},
            "step": {"compet_land_for_biofuels_rate": 1},
        }
    },
)
def compet_agricultural_land_for_biofuels():
    """
    Biofuels plantation on land subject to competition with other agricultural uses.
    """
    return _integ_compet_agricultural_land_for_biofuels()


_integ_compet_agricultural_land_for_biofuels = Integ(
    lambda: compet_land_for_biofuels_rate(),
    lambda: xr.DataArray(
        initial_value_land_compet_biofuels_2gen_mha(),
        {"scenarios": _subscript_dict["scenarios"]},
        ["scenarios"],
    ),
    "_integ_compet_agricultural_land_for_biofuels",
)


@component.add(
    name="Marginal land for biofuels",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_marginal_land_for_biofuels": 1},
    other_deps={
        "_integ_marginal_land_for_biofuels": {
            "initial": {"initial_marginal_land_occupied_by_biofuels": 1},
            "step": {"marginal_land_for_biofuels_rate": 1},
        }
    },
)
def marginal_land_for_biofuels():
    """
    Marginal land dedicated to biofuels
    """
    return _integ_marginal_land_for_biofuels()


_integ_marginal_land_for_biofuels = Integ(
    lambda: marginal_land_for_biofuels_rate(),
    lambda: initial_marginal_land_occupied_by_biofuels(),
    "_integ_marginal_land_for_biofuels",
)


@component.add(
    name="Real GFCF by sector",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_final_demand_by_sector_eu": 1,
        "government_expenditure_and_changes_in_inventories_shares": 1,
        "share_gfcf_vs_gfcfhdexp": 1,
    },
)
def real_gfcf_by_sector():
    """
    Real Gross Fixed Capital Formation after energy feedback
    """
    return (
        real_final_demand_by_sector_eu()
        * (1 - government_expenditure_and_changes_in_inventories_shares())
        * share_gfcf_vs_gfcfhdexp()
    )


@component.add(
    name="URR coal",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "unlimited_nre": 1,
        "urr_coal_unlimited": 2,
        "unlimited_coal": 1,
        "urr_coal_user_defined_ej": 2,
        "urr_coal_low_mohr15": 1,
        "urr_coal_high15": 1,
        "urr_coal_bg_mohr15": 1,
        "choose_extraction_coal_curve": 4,
    },
)
def urr_coal():
    """
    Ultimately Recoverable Resources (URR) associated to the selected depletion curve.
    """
    return if_then_else(
        unlimited_nre() == 1,
        lambda: xr.DataArray(
            urr_coal_unlimited(),
            {"scenarios": _subscript_dict["scenarios"]},
            ["scenarios"],
        ),
        lambda: if_then_else(
            unlimited_coal() == 1,
            lambda: xr.DataArray(
                urr_coal_unlimited(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                choose_extraction_coal_curve() == 1,
                lambda: xr.DataArray(
                    urr_coal_user_defined_ej(),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    choose_extraction_coal_curve() == 2,
                    lambda: xr.DataArray(
                        urr_coal_low_mohr15(),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                    lambda: if_then_else(
                        choose_extraction_coal_curve() == 3,
                        lambda: xr.DataArray(
                            urr_coal_bg_mohr15(),
                            {"scenarios": _subscript_dict["scenarios"]},
                            ["scenarios"],
                        ),
                        lambda: if_then_else(
                            choose_extraction_coal_curve() == 4,
                            lambda: xr.DataArray(
                                urr_coal_high15(),
                                {"scenarios": _subscript_dict["scenarios"]},
                                ["scenarios"],
                            ),
                            lambda: xr.DataArray(
                                urr_coal_user_defined_ej(),
                                {"scenarios": _subscript_dict["scenarios"]},
                                ["scenarios"],
                            ),
                        ),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="Real demand by sector delayed EU",
    units="$",
    subscripts=["scenarios", "sectors"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_real_demand_by_sector_delayed_eu": 1},
    other_deps={
        "_delayfixed_real_demand_by_sector_delayed_eu": {
            "initial": {},
            "step": {"real_final_demand_by_sector_eu": 1},
        }
    },
)
def real_demand_by_sector_delayed_eu():
    return _delayfixed_real_demand_by_sector_delayed_eu()


_delayfixed_real_demand_by_sector_delayed_eu = DelayFixed(
    lambda: real_final_demand_by_sector_eu(),
    lambda: 1,
    lambda: xr.DataArray(
        10,
        {
            "scenarios": _subscript_dict["scenarios"],
            "sectors": _subscript_dict["sectors"],
        },
        ["scenarios", "sectors"],
    ),
    time_step,
    "_delayfixed_real_demand_by_sector_delayed_eu",
)


@component.add(
    name="Real final energy by sector and fuel EU",
    units="EJ",
    subscripts=["scenarios", "final sources", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "required_final_energy_by_sector_and_fuel_eu": 1,
        "energy_scarcity_feedback_shortage_coeff_eu": 1,
        "cc_impacts_feedback_shortage_coeff": 1,
    },
)
def real_final_energy_by_sector_and_fuel_eu():
    """
    Real final energy to be used by economic sectors and fuel after accounting for energy scarcity and CC impacts.
    """
    return (
        required_final_energy_by_sector_and_fuel_eu()
        * energy_scarcity_feedback_shortage_coeff_eu()
        * cc_impacts_feedback_shortage_coeff()
    )


@component.add(
    name="Required final energy by sector and fuel EU",
    units="EJ",
    subscripts=["scenarios", "final sources", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_output_required_by_sector": 1,
        "final_energy_intensity_by_sector_and_fuel_eu": 1,
    },
)
def required_final_energy_by_sector_and_fuel_eu():
    """
    Required final energy by sector and fuel (35 WIOD sectors & 5 final sources).
    """
    return (
        total_output_required_by_sector()
        * final_energy_intensity_by_sector_and_fuel_eu().transpose(
            "scenarios", "sectors", "final sources"
        )
        / 1000000.0
    ).transpose("scenarios", "final sources", "sectors")


@component.add(
    name="Real total output by fuel and sector",
    units="Mdollars",
    subscripts=["scenarios", "final sources", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_final_energy_by_sector_and_fuel_eu": 1,
        "final_energy_intensity_by_sector_and_fuel_eu": 1,
        "total_output_required_by_sector": 1,
    },
)
def real_total_output_by_fuel_and_sector():
    """
    Real total output by sector (35 WIOD sectors). US$1995
    """
    return (
        xidz(
            real_final_energy_by_sector_and_fuel_eu(),
            final_energy_intensity_by_sector_and_fuel_eu(),
            (total_output_required_by_sector() / 1000000.0).expand_dims(
                {"final sources": _subscript_dict["final sources"]}, 1
            ),
        )
        * 1000000.0
    )


@component.add(
    name="FE demand Elec consum TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"required_fed_by_fuel": 1, "ej_per_twh": 1},
)
def fe_demand_elec_consum_twh():
    """
    Electricity consumption (TWh)
    """
    return (
        required_fed_by_fuel().loc[:, "electricity"].reset_coords(drop=True)
        / ej_per_twh()
    )


@component.add(
    name='"FED Heat-com EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"required_fed_by_fuel_before_heat_correction": 1},
)
def fed_heatcom_ej():
    """
    Final energy demand heat commercial.
    """
    return (
        required_fed_by_fuel_before_heat_correction()
        .loc[:, "heat"]
        .reset_coords(drop=True)
    )


@component.add(
    name="initial marginal land occupied by biofuels",
    units="MHa",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_marginal_land_occupied_by_biofuels():
    """
    Initial value of marginal land occupied by biofuels.
    """
    return xr.DataArray(0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"])


@component.add(
    name="PED oil for Heat plants EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fed_heat_liquids_plants_ej": 1,
        "efficiency_liquids_for_heat_plants": 1,
    },
)
def ped_oil_for_heat_plants_ej():
    """
    Primary energy demand of oil (EJ) for heat consumption (including generation losses).
    """
    return fed_heat_liquids_plants_ej() / efficiency_liquids_for_heat_plants()


@component.add(
    name="Total FE Elec demand TWh",
    units="TWh/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_demand_elec_consum_twh": 1, "share_transmdistr_elec_losses": 1},
)
def total_fe_elec_demand_twh():
    """
    Total final energy electricity demand (TWh). It includes new electric uses (e.g. EV & HEV) and electrical transmission and distribution losses.
    """
    return fe_demand_elec_consum_twh() * (1 + share_transmdistr_elec_losses())


@component.add(
    name="Real domestic demand by sector EU",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ia_matrix": 35, "real_total_output_by_sector_eu": 35},
)
def real_domestic_demand_by_sector_eu():
    """
    Total real domestic (without exports) final demand of EU28 products (after energy-economy feedback).
    """
    return np.maximum(
        0,
        ia_matrix()
        .loc[:, "Agriculture Hunting Forestry and Fishing"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Agriculture Hunting Forestry and Fishing"]
        .reset_coords(drop=True)
        + ia_matrix().loc[:, "Mining and Quarrying"].reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Mining and Quarrying"]
        .reset_coords(drop=True)
        + ia_matrix().loc[:, "Food Beverages and Tobacco"].reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Food Beverages and Tobacco"]
        .reset_coords(drop=True)
        + ia_matrix().loc[:, "Textiles and Textile Products"].reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Textiles and Textile Products"]
        .reset_coords(drop=True)
        + ia_matrix().loc[:, "Leather Leather and Footwear"].reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Leather Leather and Footwear"]
        .reset_coords(drop=True)
        + ia_matrix()
        .loc[:, "Wood and Products of Woood and Cork"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Wood and Products of Woood and Cork"]
        .reset_coords(drop=True)
        + ia_matrix()
        .loc[:, "Pulp Paper Printing and Publishing"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Pulp Paper Printing and Publishing"]
        .reset_coords(drop=True)
        + ia_matrix()
        .loc[:, "Coke Refined Petroleum and Nuclear Fuel"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Coke Refined Petroleum and Nuclear Fuel"]
        .reset_coords(drop=True)
        + ia_matrix().loc[:, "Chemicals and Chemical products"].reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Chemicals and Chemical products"]
        .reset_coords(drop=True)
        + ia_matrix().loc[:, "Rubber and Plastics"].reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Rubber and Plastics"]
        .reset_coords(drop=True)
        + ia_matrix().loc[:, "Other Non Metalic Mineral"].reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Other Non Metalic Mineral"]
        .reset_coords(drop=True)
        + ia_matrix()
        .loc[:, "Basic Metals and Fabricated Metal"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Basic Metals and Fabricated Metal"]
        .reset_coords(drop=True)
        + ia_matrix().loc[:, "Machinery Nec"].reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Machinery Nec"]
        .reset_coords(drop=True)
        + ia_matrix().loc[:, "Electrical and Optical Equipment"].reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Electrical and Optical Equipment"]
        .reset_coords(drop=True)
        + ia_matrix().loc[:, "Transport Equipment"].reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Transport Equipment"]
        .reset_coords(drop=True)
        + ia_matrix().loc[:, "Manufacturing Nec Recycling"].reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Manufacturing Nec Recycling"]
        .reset_coords(drop=True)
        + ia_matrix().loc[:, "Electricity Gas and Water Supply"].reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Electricity Gas and Water Supply"]
        .reset_coords(drop=True)
        + ia_matrix().loc[:, "Construction"].reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Construction"]
        .reset_coords(drop=True)
        + ia_matrix()
        .loc[
            :,
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
        ]
        .reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[
            :,
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
        ]
        .reset_coords(drop=True)
        + ia_matrix()
        .loc[
            :,
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
        ]
        .reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[
            :,
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
        ]
        .reset_coords(drop=True)
        + ia_matrix()
        .loc[
            :,
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
        ]
        .reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[
            :,
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
        ]
        .reset_coords(drop=True)
        + ia_matrix().loc[:, "Hotels and Restaurants"].reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Hotels and Restaurants"]
        .reset_coords(drop=True)
        + ia_matrix().loc[:, "Inland Transport"].reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Inland Transport"]
        .reset_coords(drop=True)
        + ia_matrix().loc[:, "Water Transport"].reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Water Transport"]
        .reset_coords(drop=True)
        + ia_matrix().loc[:, "Air Transport"].reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Air Transport"]
        .reset_coords(drop=True)
        + ia_matrix()
        .loc[
            :,
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
        ]
        .reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[
            :,
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
        ]
        .reset_coords(drop=True)
        + ia_matrix().loc[:, "Post and Telecommunications"].reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Post and Telecommunications"]
        .reset_coords(drop=True)
        + ia_matrix().loc[:, "Financial Intermedation"].reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Financial Intermedation"]
        .reset_coords(drop=True)
        + ia_matrix().loc[:, "Real Estate Activities"].reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Real Estate Activities"]
        .reset_coords(drop=True)
        + ia_matrix()
        .loc[:, "Renting od MEq and Other Business Activities"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Renting od MEq and Other Business Activities"]
        .reset_coords(drop=True)
        + ia_matrix()
        .loc[:, "Public Admin and Defence Compulsory Social Security"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Public Admin and Defence Compulsory Social Security"]
        .reset_coords(drop=True)
        + ia_matrix().loc[:, "Education"].reset_coords(drop=True)
        * real_total_output_by_sector_eu().loc[:, "Education"].reset_coords(drop=True)
        + ia_matrix().loc[:, "Health and Social Work"].reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Health and Social Work"]
        .reset_coords(drop=True)
        + ia_matrix()
        .loc[:, "Other Community Social and Persona Services"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Other Community Social and Persona Services"]
        .reset_coords(drop=True)
        + ia_matrix()
        .loc[:, "Private Households with Employed Persons"]
        .reset_coords(drop=True)
        * real_total_output_by_sector_eu()
        .loc[:, "Private Households with Employed Persons"]
        .reset_coords(drop=True),
    ).transpose("scenarios", "sectors")


@component.add(
    name="Total domestic output required by sector",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"leontief_matrix_domestic": 35, "domestic_demand_by_sector": 35},
)
def total_domestic_output_required_by_sector():
    """
    Required total EU28 output by sector (35 WIOD sectors). US$1995
    """
    return (
        leontief_matrix_domestic()
        .loc[:, "Agriculture Hunting Forestry and Fishing"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Agriculture Hunting Forestry and Fishing"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Mining and Quarrying"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Mining and Quarrying"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Food Beverages and Tobacco"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Food Beverages and Tobacco"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Textiles and Textile Products"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Textiles and Textile Products"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Leather Leather and Footwear"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Leather Leather and Footwear"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Wood and Products of Woood and Cork"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Wood and Products of Woood and Cork"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Pulp Paper Printing and Publishing"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Pulp Paper Printing and Publishing"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Coke Refined Petroleum and Nuclear Fuel"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Coke Refined Petroleum and Nuclear Fuel"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Chemicals and Chemical products"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Chemicals and Chemical products"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Rubber and Plastics"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Rubber and Plastics"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Other Non Metalic Mineral"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Other Non Metalic Mineral"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Basic Metals and Fabricated Metal"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Basic Metals and Fabricated Metal"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic().loc[:, "Machinery Nec"].reset_coords(drop=True)
        * domestic_demand_by_sector().loc[:, "Machinery Nec"].reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Electrical and Optical Equipment"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Electrical and Optical Equipment"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Transport Equipment"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Transport Equipment"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Manufacturing Nec Recycling"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Manufacturing Nec Recycling"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Electricity Gas and Water Supply"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Electricity Gas and Water Supply"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic().loc[:, "Construction"].reset_coords(drop=True)
        * domestic_demand_by_sector().loc[:, "Construction"].reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[
            :,
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
        ]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[
            :,
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
        ]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[
            :,
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
        ]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[
            :,
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
        ]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[
            :,
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
        ]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[
            :,
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
        ]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Hotels and Restaurants"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Hotels and Restaurants"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic().loc[:, "Inland Transport"].reset_coords(drop=True)
        * domestic_demand_by_sector().loc[:, "Inland Transport"].reset_coords(drop=True)
        + leontief_matrix_domestic().loc[:, "Water Transport"].reset_coords(drop=True)
        * domestic_demand_by_sector().loc[:, "Water Transport"].reset_coords(drop=True)
        + leontief_matrix_domestic().loc[:, "Air Transport"].reset_coords(drop=True)
        * domestic_demand_by_sector().loc[:, "Air Transport"].reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[
            :,
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
        ]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[
            :,
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
        ]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Post and Telecommunications"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Post and Telecommunications"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Financial Intermedation"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Financial Intermedation"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Real Estate Activities"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Real Estate Activities"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Renting od MEq and Other Business Activities"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Renting od MEq and Other Business Activities"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Public Admin and Defence Compulsory Social Security"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Public Admin and Defence Compulsory Social Security"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic().loc[:, "Education"].reset_coords(drop=True)
        * domestic_demand_by_sector().loc[:, "Education"].reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Health and Social Work"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Health and Social Work"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Other Community Social and Persona Services"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Other Community Social and Persona Services"]
        .reset_coords(drop=True)
        + leontief_matrix_domestic()
        .loc[:, "Private Households with Employed Persons"]
        .reset_coords(drop=True)
        * domestic_demand_by_sector()
        .loc[:, "Private Households with Employed Persons"]
        .reset_coords(drop=True)
    ).transpose("scenarios", "sectors")


@component.add(
    name="RURR unconv oil EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_rurr_unconv_oil_ej": 1},
    other_deps={
        "_integ_rurr_unconv_oil_ej": {
            "initial": {
                "urr_unconv_oil": 1,
                "cumulated_unconv_oil_extraction_to_1995": 1,
                "separate_conv_and_unconv_oil": 1,
            },
            "step": {
                "extraction_unconv_oil_ej": 1,
                "flow_unconv_oil_left_in_ground": 1,
            },
        }
    },
)
def rurr_unconv_oil_ej():
    """
    RURR unconventional oil.
    """
    return _integ_rurr_unconv_oil_ej()


_integ_rurr_unconv_oil_ej = Integ(
    lambda: -extraction_unconv_oil_ej() - flow_unconv_oil_left_in_ground(),
    lambda: urr_unconv_oil()
    - cumulated_unconv_oil_extraction_to_1995() * separate_conv_and_unconv_oil(),
    "_integ_rurr_unconv_oil_ej",
)


@component.add(
    name="share liquids for final energy",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "required_fed_by_liquids_ej": 1,
        "ped_liquids_ej": 1,
        "other_liquids_required_ej": 1,
    },
)
def share_liquids_for_final_energy():
    """
    Share of final energy vs primary energy for liquids.
    """
    return zidz(
        required_fed_by_liquids_ej(), ped_liquids_ej() - other_liquids_required_ej()
    )


@component.add(
    name="PED liquids EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "required_fed_by_liquids_ej": 1,
        "other_liquids_required_ej": 1,
        "pe_demand_oil_elec_plants_ej": 1,
        "ped_oil_for_heat_plants_ej": 1,
        "ped_oil_for_chp_plants_ej": 1,
        "ped_liquids_heatnc": 1,
    },
)
def ped_liquids_ej():
    """
    Primary energy demand of total liquids.
    """
    return np.maximum(
        0,
        required_fed_by_liquids_ej()
        + other_liquids_required_ej()
        + pe_demand_oil_elec_plants_ej()
        + ped_oil_for_heat_plants_ej()
        + ped_oil_for_chp_plants_ej()
        + ped_liquids_heatnc(),
    )


@component.add(
    name="FED Heat liquids plants EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fed_heatcom_plants_fossil_fuels_ej": 1,
        "share_liquids_for_heat_plants": 1,
    },
)
def fed_heat_liquids_plants_ej():
    """
    Final energy demand of liquids to produce heat.
    """
    return fed_heatcom_plants_fossil_fuels_ej() * share_liquids_for_heat_plants()


@component.add(
    name="hist var inlandT",
    units="Dmnl",
    subscripts=["scenarios", "vehicleT"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def hist_var_inlandt():
    """
    Historical growth of alternative percentages of transport vehicles. For inland transport vehicles the initial percentages of vehicles are neglictible in 2015.
    """
    return xr.DataArray(
        0,
        {
            "scenarios": _subscript_dict["scenarios"],
            "vehicleT": _subscript_dict["vehicleT"],
        },
        ["scenarios", "vehicleT"],
    )


@component.add(
    name="inland transport variation intensity",
    units="EJ/TS/yr",
    subscripts=["scenarios", "final sources1"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"var_i_inland_elec": 1, "var_i_inlandt_liq": 1, "var_i_inlandt_gas": 1},
)
def inland_transport_variation_intensity():
    """
    Variation of the energy intensity of inland transport
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "final sources1": _subscript_dict["final sources1"],
        },
        ["scenarios", "final sources1"],
    )
    value.loc[:, ["electricity"]] = (
        var_i_inland_elec().expand_dims({"final sources1": ["electricity"]}, 1).values
    )
    value.loc[:, ["heat"]] = 0
    value.loc[:, ["liquids"]] = (
        var_i_inlandt_liq().expand_dims({"final sources1": ["liquids"]}, 1).values
    )
    value.loc[:, ["solids"]] = 0
    value.loc[:, ["gases"]] = (
        var_i_inlandt_gas().expand_dims({"final sources1": ["gases"]}, 1).values
    )
    return value


@component.add(
    name="max unconv oil growth extraction",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "selection_constraint_extraction_unconv_oil": 1,
        "scarcity_conv_oil_stock": 1,
        "p_constraint_growth_extraction_unconv_oil": 1,
        "time_step": 2,
        "userdefined_extraction_growth_unconv_oil": 1,
        "time": 1,
        "abundance_unconv_oil2": 1,
    },
)
def max_unconv_oil_growth_extraction():
    """
    Constraint to maximum annual unconventional gas extraction (%). This constraint is affected by the relative scarcity of conventional vs unconventional resource (priority to conventional resource to cover the demand while the maximum extraction level of energy/time is not reached).
    """
    return np.maximum(
        0,
        1
        + if_then_else(
            selection_constraint_extraction_unconv_oil() == 1,
            lambda: p_constraint_growth_extraction_unconv_oil()
            * time_step()
            * scarcity_conv_oil_stock(),
            lambda: xr.DataArray(
                userdefined_extraction_growth_unconv_oil(time()) * time_step(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
        )
        * abundance_unconv_oil2(),
    )


@component.add(
    name='"FED Heat-com NRE EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fed_heatcom_after_priorities_ej": 1,
        "total_fe_real_supply_res_for_heatcom_ej": 1,
    },
)
def fed_heatcom_nre_ej():
    """
    Demand of non renewable energy to produce commercial Heat (final energy). We give priority to RES.
    """
    return np.maximum(
        fed_heatcom_after_priorities_ej() - total_fe_real_supply_res_for_heatcom_ej(), 0
    )


@component.add(
    name="real FE consumption by fuel",
    units="EJ",
    subscripts=["scenarios", "final sources1"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_fe_elec_consumption_ej": 1,
        "total_fe_heat_consumption_ej": 1,
        "real_fe_consumption_liquids_ej": 1,
        "real_fe_consumption_solids_ej": 1,
        "real_fe_consumption_gases_ej": 1,
    },
)
def real_fe_consumption_by_fuel():
    """
    Real final energy consumption by fuel after accounting for energy availability. test2[scenarios]+0*Total FE Elec consumption EJ[scenarios]
    """
    value = xr.DataArray(
        np.nan,
        {
            "scenarios": _subscript_dict["scenarios"],
            "final sources1": _subscript_dict["final sources1"],
        },
        ["scenarios", "final sources1"],
    )
    value.loc[:, ["electricity"]] = (
        total_fe_elec_consumption_ej()
        .expand_dims({"final sources1": ["electricity"]}, 1)
        .values
    )
    value.loc[:, ["heat"]] = (
        total_fe_heat_consumption_ej()
        .expand_dims({"final sources1": ["heat"]}, 1)
        .values
    )
    value.loc[:, ["liquids"]] = (
        real_fe_consumption_liquids_ej()
        .expand_dims({"final sources1": ["liquids"]}, 1)
        .values
    )
    value.loc[:, ["solids"]] = (
        real_fe_consumption_solids_ej()
        .expand_dims({"final sources1": ["solids"]}, 1)
        .values
    )
    value.loc[:, ["gases"]] = (
        real_fe_consumption_gases_ej()
        .expand_dims({"final sources1": ["gases"]}, 1)
        .values
    )
    return value


@component.add(
    name="Required FED by liquids EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"required_fed_by_fuel": 1},
)
def required_fed_by_liquids_ej():
    """
    Required final energy demand by liquids.
    """
    return required_fed_by_fuel().loc[:, "liquids"].reset_coords(drop=True)


@component.add(
    name="extraction unconv oil EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rurr_unconv_oil_ej": 1,
        "max_unconv_oil_growth_extraction_ej": 1,
        "time": 1,
        "historic_unconv_oil": 1,
        "separate_conv_and_unconv_oil": 1,
        "max_extraction_unconv_oil": 1,
        "ped_total_oil_ej": 1,
    },
)
def extraction_unconv_oil_ej():
    """
    Annual extraction of unconventional oil. MIN(IF THEN ELSE(RURR unconv oil EJ[scenarios]<0,0, IF THEN ELSE(Time<=2013, Historic unconv oil, IF THEN ELSE("separate conv and unconv oil?"[scenarios]=1, MIN(max extraction unconv oil[scenarios], max unconv oil growth extraction EJ [scenarios]),0))),PED total oil EJ[scenarios])
    """
    return np.minimum(
        if_then_else(
            rurr_unconv_oil_ej() < 0,
            lambda: xr.DataArray(
                0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
            ),
            lambda: if_then_else(
                time() > 2012,
                lambda: if_then_else(
                    separate_conv_and_unconv_oil() == 1,
                    lambda: np.minimum(
                        max_extraction_unconv_oil(),
                        max_unconv_oil_growth_extraction_ej(),
                    ),
                    lambda: xr.DataArray(
                        0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
                    ),
                ),
                lambda: xr.DataArray(
                    historic_unconv_oil(),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
            ),
        ),
        ped_total_oil_ej(),
    )


@component.add(
    name="Demand conv oil EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ped_total_oil_ej": 1, "extraction_unconv_oil_ej": 1},
)
def demand_conv_oil_ej():
    """
    Demand of conventional oil. It is assumed that conventional oil covers the rest of the liquids demand after accounting for the contributions from other liquids and unconventional oil.
    """
    return np.maximum(ped_total_oil_ej() - extraction_unconv_oil_ej(), 0)


@component.add(
    name="max unconv oil growth extraction EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "check_liquids_delayed_1yr": 1,
        "constrain_liquids_exogenous_growth_delayed_1yr": 1,
        "extraction_unconv_oil_delayed": 2,
        "max_unconv_oil_growth_extraction": 1,
    },
)
def max_unconv_oil_growth_extraction_ej():
    """
    Constrained unconventional oil extraction growth (EJ/Year), i.e. maximum annual growth compatible with the constraint selected in the scenario.
    """
    return if_then_else(
        check_liquids_delayed_1yr() < 0,
        lambda: (1 + constrain_liquids_exogenous_growth_delayed_1yr())
        * extraction_unconv_oil_delayed(),
        lambda: extraction_unconv_oil_delayed() * max_unconv_oil_growth_extraction(),
    )


@component.add(
    name='"Total FED Heat-com EJ"',
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fed_heatcom_ej": 1, "share_heat_distribution_losses": 1},
)
def total_fed_heatcom_ej():
    """
    Total commercial heat demand including distribution losses.
    """
    return fed_heatcom_ej() * (1 + share_heat_distribution_losses())


@component.add(
    name="URR unconv oil",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "separate_conv_and_unconv_oil": 1,
        "urr_unconv_oil_bg_mohr15": 1,
        "urr_unconv_oil_user_defined": 1,
        "choose_extraction_curve_unconv_oil": 3,
        "urr_unconv_oil_high_mohr15": 1,
        "urr_unconv_oil_low_mohr15": 1,
    },
)
def urr_unconv_oil():
    """
    URR unconventional oil.
    """
    return if_then_else(
        separate_conv_and_unconv_oil() == 1,
        lambda: if_then_else(
            choose_extraction_curve_unconv_oil() == 1,
            lambda: xr.DataArray(
                urr_unconv_oil_bg_mohr15(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                choose_extraction_curve_unconv_oil() == 2,
                lambda: xr.DataArray(
                    urr_unconv_oil_low_mohr15(),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    choose_extraction_curve_unconv_oil() == 3,
                    lambda: xr.DataArray(
                        urr_unconv_oil_high_mohr15(),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                    lambda: xr.DataArray(
                        urr_unconv_oil_user_defined(),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                ),
            ),
        ),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="max extraction unconv gas",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "choose_extraction_curve_unconv_gas": 3,
        "tot_rurr_unconv_gas": 4,
        "table_max_extraction_unconv_gas_bg_mohr15": 1,
        "table_max_extraction_unconv_gas_high_mohr15": 1,
        "table_max_extraction_unconv_gas_low_mohr15": 1,
        "table_max_extraction_unconv_gas_user_defined": 1,
    },
)
def max_extraction_unconv_gas():
    """
    Maximum extraction curve selected for the simulations.
    """
    return if_then_else(
        choose_extraction_curve_unconv_gas() == 1,
        lambda: table_max_extraction_unconv_gas_bg_mohr15(
            tot_rurr_unconv_gas(),
            {"scenarios": ["SCEN1", "SCEN2", "SCEN3", "SCEN4", "BAU", "User defined"]},
        ),
        lambda: if_then_else(
            choose_extraction_curve_unconv_gas() == 2,
            lambda: table_max_extraction_unconv_gas_low_mohr15(
                tot_rurr_unconv_gas(),
                {
                    "scenarios": [
                        "SCEN1",
                        "SCEN2",
                        "SCEN3",
                        "SCEN4",
                        "BAU",
                        "User defined",
                    ]
                },
            ),
            lambda: if_then_else(
                choose_extraction_curve_unconv_gas() == 3,
                lambda: table_max_extraction_unconv_gas_high_mohr15(
                    tot_rurr_unconv_gas(),
                    {
                        "scenarios": [
                            "SCEN1",
                            "SCEN2",
                            "SCEN3",
                            "SCEN4",
                            "BAU",
                            "User defined",
                        ]
                    },
                ),
                lambda: table_max_extraction_unconv_gas_user_defined(
                    tot_rurr_unconv_gas(),
                    {
                        "scenarios": [
                            "SCEN1",
                            "SCEN2",
                            "SCEN3",
                            "SCEN4",
                            "BAU",
                            "User defined",
                        ]
                    },
                ),
            ),
        ),
    )


@component.add(
    name="max extraction unconv oil",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "choose_extraction_curve_unconv_oil": 3,
        "tot_rurr_unconv_oil": 4,
        "table_max_extraction_unconv_oil_low_mohr15": 1,
        "table_max_extraction_unconv_oil_user_defined": 1,
        "table_max_extraction_unconv_oil_high_mohr15": 1,
        "table_max_extraction_unconv_oil_bg_mohr15": 1,
    },
)
def max_extraction_unconv_oil():
    """
    Maximum extraction curve selected for the simulations.
    """
    return if_then_else(
        choose_extraction_curve_unconv_oil() == 1,
        lambda: table_max_extraction_unconv_oil_low_mohr15(
            tot_rurr_unconv_oil(),
            {"scenarios": ["SCEN1", "SCEN2", "SCEN3", "SCEN4", "BAU", "User defined"]},
        ),
        lambda: if_then_else(
            choose_extraction_curve_unconv_oil() == 2,
            lambda: table_max_extraction_unconv_oil_bg_mohr15(
                tot_rurr_unconv_oil(),
                {
                    "scenarios": [
                        "SCEN1",
                        "SCEN2",
                        "SCEN3",
                        "SCEN4",
                        "BAU",
                        "User defined",
                    ]
                },
            ),
            lambda: if_then_else(
                choose_extraction_curve_unconv_oil() == 3,
                lambda: table_max_extraction_unconv_oil_high_mohr15(
                    tot_rurr_unconv_oil(),
                    {
                        "scenarios": [
                            "SCEN1",
                            "SCEN2",
                            "SCEN3",
                            "SCEN4",
                            "BAU",
                            "User defined",
                        ]
                    },
                ),
                lambda: table_max_extraction_unconv_oil_user_defined(
                    tot_rurr_unconv_oil(),
                    {
                        "scenarios": [
                            "SCEN1",
                            "SCEN2",
                            "SCEN3",
                            "SCEN4",
                            "BAU",
                            "User defined",
                        ]
                    },
                ),
            ),
        ),
    )


@component.add(
    name="max extraction coal EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "choose_extraction_coal_curve": 4,
        "tot_rurr_coal": 5,
        "table_max_extraction_coal_user_defined": 2,
        "table_max_extraction_coal_low_mohr15": 1,
        "table_max_extraction_coal_high_mohr15": 1,
        "table_max_extraction_coal_bg_mohr15": 1,
    },
)
def max_extraction_coal_ej():
    """
    Maximum extraction curve selected for the simulations.
    """
    return if_then_else(
        choose_extraction_coal_curve() == 1,
        lambda: table_max_extraction_coal_user_defined(
            tot_rurr_coal(),
            {"scenarios": ["SCEN1", "SCEN2", "SCEN3", "SCEN4", "BAU", "User defined"]},
        ),
        lambda: if_then_else(
            choose_extraction_coal_curve() == 2,
            lambda: table_max_extraction_coal_low_mohr15(
                tot_rurr_coal(),
                {
                    "scenarios": [
                        "SCEN1",
                        "SCEN2",
                        "SCEN3",
                        "SCEN4",
                        "BAU",
                        "User defined",
                    ]
                },
            ),
            lambda: if_then_else(
                choose_extraction_coal_curve() == 3,
                lambda: table_max_extraction_coal_bg_mohr15(
                    tot_rurr_coal(),
                    {
                        "scenarios": [
                            "SCEN1",
                            "SCEN2",
                            "SCEN3",
                            "SCEN4",
                            "BAU",
                            "User defined",
                        ]
                    },
                ),
                lambda: if_then_else(
                    choose_extraction_coal_curve() == 4,
                    lambda: table_max_extraction_coal_high_mohr15(
                        tot_rurr_coal(),
                        {
                            "scenarios": [
                                "SCEN1",
                                "SCEN2",
                                "SCEN3",
                                "SCEN4",
                                "BAU",
                                "User defined",
                            ]
                        },
                    ),
                    lambda: table_max_extraction_coal_user_defined(
                        tot_rurr_coal(),
                        {
                            "scenarios": [
                                "SCEN1",
                                "SCEN2",
                                "SCEN3",
                                "SCEN4",
                                "BAU",
                                "User defined",
                            ]
                        },
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="max extraction conv gas EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "separate_conv_and_unconv_gas": 1,
        "table_max_extraction_conv_gas_high_mohr15": 1,
        "table_max_extraction_conv_gas_bg_mohr15": 1,
        "table_max_extraction_conv_gas_user_defined": 1,
        "table_max_extraction_conv_gas_low_mohr15": 1,
        "tot_rurr_conv_gas": 4,
        "choose_extraction_conv_gas_curve": 3,
    },
)
def max_extraction_conv_gas_ej():
    """
    Maximum extraction curve selected for the simulations.
    """
    return if_then_else(
        separate_conv_and_unconv_gas() == 1,
        lambda: if_then_else(
            choose_extraction_conv_gas_curve() == 1,
            lambda: table_max_extraction_conv_gas_bg_mohr15(
                tot_rurr_conv_gas(),
                {
                    "scenarios": [
                        "SCEN1",
                        "SCEN2",
                        "SCEN3",
                        "SCEN4",
                        "BAU",
                        "User defined",
                    ]
                },
            ),
            lambda: if_then_else(
                choose_extraction_conv_gas_curve() == 2,
                lambda: table_max_extraction_conv_gas_low_mohr15(
                    tot_rurr_conv_gas(),
                    {
                        "scenarios": [
                            "SCEN1",
                            "SCEN2",
                            "SCEN3",
                            "SCEN4",
                            "BAU",
                            "User defined",
                        ]
                    },
                ),
                lambda: if_then_else(
                    choose_extraction_conv_gas_curve() == 3,
                    lambda: table_max_extraction_conv_gas_high_mohr15(
                        tot_rurr_conv_gas(),
                        {
                            "scenarios": [
                                "SCEN1",
                                "SCEN2",
                                "SCEN3",
                                "SCEN4",
                                "BAU",
                                "User defined",
                            ]
                        },
                    ),
                    lambda: table_max_extraction_conv_gas_user_defined(
                        tot_rurr_conv_gas(),
                        {
                            "scenarios": [
                                "SCEN1",
                                "SCEN2",
                                "SCEN3",
                                "SCEN4",
                                "BAU",
                                "User defined",
                            ]
                        },
                    ),
                ),
            ),
        ),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="FED Heat gas plants EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fed_heat_gascoal_ej": 1, "share_gascoalgas_for_heat_plants": 1},
)
def fed_heat_gas_plants_ej():
    """
    Final energy demand of gas to produce heat.
    """
    return fed_heat_gascoal_ej() * share_gascoalgas_for_heat_plants()


@component.add(
    name="FED Heat coal plants EJ",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fed_heat_gascoal_ej": 1, "share_coalcoalgas_for_heat_plants": 1},
)
def fed_heat_coal_plants_ej():
    """
    Final energy demand of coal to produce heat.
    """
    return fed_heat_gascoal_ej() * share_coalcoalgas_for_heat_plants()


@component.add(
    name="URR conv gas",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "separate_conv_and_unconv_gas": 1,
        "urr_conv_gas_bg_mohr15": 1,
        "urr_conv_gas_unlimited": 2,
        "unlimited_nre": 1,
        "urr_conv_gas_high_mohr15": 1,
        "urr_conv_gas_low_mohr15": 1,
        "unlimited_gas": 1,
        "urr_conv_gas_user_defined": 1,
        "choose_extraction_conv_gas_curve": 3,
    },
)
def urr_conv_gas():
    """
    Ultimately Recoverable Resources (URR) associated to the selected depletion curve.
    """
    return if_then_else(
        separate_conv_and_unconv_gas() == 1,
        lambda: if_then_else(
            unlimited_nre() == 1,
            lambda: xr.DataArray(
                urr_conv_gas_unlimited(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                unlimited_gas() == 1,
                lambda: xr.DataArray(
                    urr_conv_gas_unlimited(),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    choose_extraction_conv_gas_curve() == 1,
                    lambda: xr.DataArray(
                        urr_conv_gas_low_mohr15(),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                    lambda: if_then_else(
                        choose_extraction_conv_gas_curve() == 2,
                        lambda: xr.DataArray(
                            urr_conv_gas_bg_mohr15(),
                            {"scenarios": _subscript_dict["scenarios"]},
                            ["scenarios"],
                        ),
                        lambda: if_then_else(
                            choose_extraction_conv_gas_curve() == 3,
                            lambda: xr.DataArray(
                                urr_conv_gas_high_mohr15(),
                                {"scenarios": _subscript_dict["scenarios"]},
                                ["scenarios"],
                            ),
                            lambda: xr.DataArray(
                                urr_conv_gas_user_defined(),
                                {"scenarios": _subscript_dict["scenarios"]},
                                ["scenarios"],
                            ),
                        ),
                    ),
                ),
            ),
        ),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="Required final energy other transport",
    units="EJ/Year",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"required_final_energy_by_sector_and_fuel_eu": 1},
)
def required_final_energy_other_transport():
    """
    Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies Final Energy
    """
    return (
        required_final_energy_by_sector_and_fuel_eu()
        .loc[
            :,
            :,
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
        ]
        .reset_coords(drop=True)
    )


@component.add(
    name="PED gases for Heat plants EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fed_heat_gas_plants_ej": 1, "efficiency_gases_for_heat_plants": 1},
)
def ped_gases_for_heat_plants_ej():
    """
    Primary energy demand of gas (EJ) for heat consumption (including generation losses).
    """
    return fed_heat_gas_plants_ej() / efficiency_gases_for_heat_plants()


@component.add(
    name="PED coal for Heat plants EJ",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fed_heat_coal_plants_ej": 1, "efficiency_coal_for_heat_plants": 1},
)
def ped_coal_for_heat_plants_ej():
    """
    Primary energy demand of coal (EJ) for heat consumption (including generation losses).
    """
    return fed_heat_coal_plants_ej() / efficiency_coal_for_heat_plants()


@component.add(
    name="Real total output by sector EU",
    units="Mdollars",
    subscripts=["scenarios", "sectors"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"real_total_output_by_fuel_and_sector": 5},
)
def real_total_output_by_sector_eu():
    """
    Real total output by sector (35 WIOD sectors). US$1995. We assume the most limiting resources.
    """
    return np.minimum(
        real_total_output_by_fuel_and_sector()
        .loc[:, "electricity", :]
        .reset_coords(drop=True),
        np.minimum(
            real_total_output_by_fuel_and_sector()
            .loc[:, "heat", :]
            .reset_coords(drop=True),
            np.minimum(
                real_total_output_by_fuel_and_sector()
                .loc[:, "liquids", :]
                .reset_coords(drop=True),
                np.minimum(
                    real_total_output_by_fuel_and_sector()
                    .loc[:, "gases", :]
                    .reset_coords(drop=True),
                    real_total_output_by_fuel_and_sector()
                    .loc[:, "solids", :]
                    .reset_coords(drop=True),
                ),
            ),
        ),
    )


@component.add(
    name="Required final energy air transport",
    units="EJ/Year",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"required_final_energy_by_sector_and_fuel_eu": 1},
)
def required_final_energy_air_transport():
    """
    Air transport final Energy EJ
    """
    return (
        required_final_energy_by_sector_and_fuel_eu()
        .loc[:, :, "Air Transport"]
        .reset_coords(drop=True)
    )


@component.add(
    name="Required final energy inland transport",
    units="EJ/Year",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"required_final_energy_by_sector_and_fuel_eu": 1},
)
def required_final_energy_inland_transport():
    """
    Inland transport final energy
    """
    return (
        required_final_energy_by_sector_and_fuel_eu()
        .loc[:, :, "Inland Transport"]
        .reset_coords(drop=True)
    )


@component.add(
    name="Required final energy water transport",
    units="EJ/Year",
    subscripts=["scenarios", "final sources"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"required_final_energy_by_sector_and_fuel_eu": 1},
)
def required_final_energy_water_transport():
    """
    Water transport final energy EJ
    """
    return (
        required_final_energy_by_sector_and_fuel_eu()
        .loc[:, :, "Water Transport"]
        .reset_coords(drop=True)
    )


@component.add(
    name="table max extraction conv gas Low Mohr15",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_conv_gas_low_mohr15",
        "__lookup__": "_ext_lookup_table_max_extraction_conv_gas_low_mohr15",
    },
)
def table_max_extraction_conv_gas_low_mohr15(x, final_subs=None):
    return _ext_lookup_table_max_extraction_conv_gas_low_mohr15(x, final_subs)


_ext_lookup_table_max_extraction_conv_gas_low_mohr15 = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "141",
    "E142",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_conv_gas_low_mohr15",
)


@component.add(
    name="table max extraction conv gas User defined",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_conv_gas_user_defined",
        "__lookup__": "_ext_lookup_table_max_extraction_conv_gas_user_defined",
    },
)
def table_max_extraction_conv_gas_user_defined(x, final_subs=None):
    return _ext_lookup_table_max_extraction_conv_gas_user_defined(x, final_subs)


_ext_lookup_table_max_extraction_conv_gas_user_defined = ExtLookup(
    "inputs_EU.xlsx",
    "User defined",
    "146",
    "E147",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_conv_gas_user_defined",
)


@component.add(
    name="table max extraction total gas User defined",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_total_gas_user_defined",
        "__lookup__": "_ext_lookup_table_max_extraction_total_gas_user_defined",
    },
)
def table_max_extraction_total_gas_user_defined(x, final_subs=None):
    return _ext_lookup_table_max_extraction_total_gas_user_defined(x, final_subs)


_ext_lookup_table_max_extraction_total_gas_user_defined = ExtLookup(
    "inputs_EU.xlsx",
    "User defined",
    "150",
    "E151",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_total_gas_user_defined",
)


@component.add(
    name="table max extraction unconv gas BG Mohr15",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_unconv_gas_bg_mohr15",
        "__lookup__": "_ext_lookup_table_max_extraction_unconv_gas_bg_mohr15",
    },
)
def table_max_extraction_unconv_gas_bg_mohr15(x, final_subs=None):
    return _ext_lookup_table_max_extraction_unconv_gas_bg_mohr15(x, final_subs)


_ext_lookup_table_max_extraction_unconv_gas_bg_mohr15 = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "149",
    "E150",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_unconv_gas_bg_mohr15",
)


@component.add(
    name="table max extraction unconv gas High Mohr15",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_unconv_gas_high_mohr15",
        "__lookup__": "_ext_lookup_table_max_extraction_unconv_gas_high_mohr15",
    },
)
def table_max_extraction_unconv_gas_high_mohr15(x, final_subs=None):
    return _ext_lookup_table_max_extraction_unconv_gas_high_mohr15(x, final_subs)


_ext_lookup_table_max_extraction_unconv_gas_high_mohr15 = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "151",
    "E152",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_unconv_gas_high_mohr15",
)


@component.add(
    name="table max extraction unconv gas Low Mohr15",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_unconv_gas_low_mohr15",
        "__lookup__": "_ext_lookup_table_max_extraction_unconv_gas_low_mohr15",
    },
)
def table_max_extraction_unconv_gas_low_mohr15(x, final_subs=None):
    return _ext_lookup_table_max_extraction_unconv_gas_low_mohr15(x, final_subs)


_ext_lookup_table_max_extraction_unconv_gas_low_mohr15 = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "147",
    "E148",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_unconv_gas_low_mohr15",
)


@component.add(
    name="table max extraction unconv gas User defined",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_unconv_gas_user_defined",
        "__lookup__": "_ext_lookup_table_max_extraction_unconv_gas_user_defined",
    },
)
def table_max_extraction_unconv_gas_user_defined(x, final_subs=None):
    return _ext_lookup_table_max_extraction_unconv_gas_user_defined(x, final_subs)


_ext_lookup_table_max_extraction_unconv_gas_user_defined = ExtLookup(
    "inputs_EU.xlsx",
    "User defined",
    "148",
    "E149",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_unconv_gas_user_defined",
)


@component.add(
    name="table max extraction coal BG Mohr15",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_coal_bg_mohr15",
        "__lookup__": "_ext_lookup_table_max_extraction_coal_bg_mohr15",
    },
)
def table_max_extraction_coal_bg_mohr15(x, final_subs=None):
    return _ext_lookup_table_max_extraction_coal_bg_mohr15(x, final_subs)


_ext_lookup_table_max_extraction_coal_bg_mohr15 = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "162",
    "E163",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_coal_bg_mohr15",
)


@component.add(
    name="table max extraction coal High Mohr15",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_coal_high_mohr15",
        "__lookup__": "_ext_lookup_table_max_extraction_coal_high_mohr15",
    },
)
def table_max_extraction_coal_high_mohr15(x, final_subs=None):
    return _ext_lookup_table_max_extraction_coal_high_mohr15(x, final_subs)


_ext_lookup_table_max_extraction_coal_high_mohr15 = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "164",
    "E165",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_coal_high_mohr15",
)


@component.add(
    name="URR coal BG Mohr15",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_coal_bg_mohr15"},
)
def urr_coal_bg_mohr15():
    return _ext_constant_urr_coal_bg_mohr15()


_ext_constant_urr_coal_bg_mohr15 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C162",
    {},
    _root,
    {},
    "_ext_constant_urr_coal_bg_mohr15",
)


@component.add(
    name="URR coal User defined EJ",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_coal_user_defined_ej"},
)
def urr_coal_user_defined_ej():
    return _ext_constant_urr_coal_user_defined_ej()


_ext_constant_urr_coal_user_defined_ej = ExtConstant(
    "inputs_EU.xlsx",
    "User defined",
    "C153",
    {},
    _root,
    {},
    "_ext_constant_urr_coal_user_defined_ej",
)


@component.add(
    name="URR conv gas BG Mohr15",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_conv_gas_bg_mohr15"},
)
def urr_conv_gas_bg_mohr15():
    return _ext_constant_urr_conv_gas_bg_mohr15()


_ext_constant_urr_conv_gas_bg_mohr15 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C143",
    {},
    _root,
    {},
    "_ext_constant_urr_conv_gas_bg_mohr15",
)


@component.add(
    name="URR conv gas High Mohr15",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_conv_gas_high_mohr15"},
)
def urr_conv_gas_high_mohr15():
    return _ext_constant_urr_conv_gas_high_mohr15()


_ext_constant_urr_conv_gas_high_mohr15 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C145",
    {},
    _root,
    {},
    "_ext_constant_urr_conv_gas_high_mohr15",
)


@component.add(
    name="URR conv gas Low Mohr15",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_conv_gas_low_mohr15"},
)
def urr_conv_gas_low_mohr15():
    return _ext_constant_urr_conv_gas_low_mohr15()


_ext_constant_urr_conv_gas_low_mohr15 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C141",
    {},
    _root,
    {},
    "_ext_constant_urr_conv_gas_low_mohr15",
)


@component.add(
    name="URR conv gas User defined",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_conv_gas_user_defined"},
)
def urr_conv_gas_user_defined():
    return _ext_constant_urr_conv_gas_user_defined()


_ext_constant_urr_conv_gas_user_defined = ExtConstant(
    "inputs_EU.xlsx",
    "User defined",
    "C146",
    {},
    _root,
    {},
    "_ext_constant_urr_conv_gas_user_defined",
)


@component.add(
    name="URR total gas User defined",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_total_gas_user_defined"},
)
def urr_total_gas_user_defined():
    return _ext_constant_urr_total_gas_user_defined()


_ext_constant_urr_total_gas_user_defined = ExtConstant(
    "inputs_EU.xlsx",
    "User defined",
    "C150",
    {},
    _root,
    {},
    "_ext_constant_urr_total_gas_user_defined",
)


@component.add(
    name="URR unconv gas",
    units="EJ",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "separate_conv_and_unconv_gas": 1,
        "urr_unconv_gas_bg_mohr15": 1,
        "choose_extraction_curve_unconv_gas": 3,
        "urr_unconv_gas_user_defined": 1,
        "urr_unconv_gas_low_mohr15": 1,
        "urr_unconv_gas_high_mohr15": 1,
    },
)
def urr_unconv_gas():
    """
    RURR unconventional gas.
    """
    return if_then_else(
        separate_conv_and_unconv_gas() == 1,
        lambda: if_then_else(
            choose_extraction_curve_unconv_gas() == 1,
            lambda: xr.DataArray(
                urr_unconv_gas_low_mohr15(),
                {"scenarios": _subscript_dict["scenarios"]},
                ["scenarios"],
            ),
            lambda: if_then_else(
                choose_extraction_curve_unconv_gas() == 2,
                lambda: xr.DataArray(
                    urr_unconv_gas_bg_mohr15(),
                    {"scenarios": _subscript_dict["scenarios"]},
                    ["scenarios"],
                ),
                lambda: if_then_else(
                    choose_extraction_curve_unconv_gas() == 3,
                    lambda: xr.DataArray(
                        urr_unconv_gas_high_mohr15(),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                    lambda: xr.DataArray(
                        urr_unconv_gas_user_defined(),
                        {"scenarios": _subscript_dict["scenarios"]},
                        ["scenarios"],
                    ),
                ),
            ),
        ),
        lambda: xr.DataArray(
            0, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
    )


@component.add(
    name="URR unconv gas BG Mohr15",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_unconv_gas_bg_mohr15"},
)
def urr_unconv_gas_bg_mohr15():
    return _ext_constant_urr_unconv_gas_bg_mohr15()


_ext_constant_urr_unconv_gas_bg_mohr15 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C149",
    {},
    _root,
    {},
    "_ext_constant_urr_unconv_gas_bg_mohr15",
)


@component.add(
    name="table max extraction coal Low Mohr15",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_coal_low_mohr15",
        "__lookup__": "_ext_lookup_table_max_extraction_coal_low_mohr15",
    },
)
def table_max_extraction_coal_low_mohr15(x, final_subs=None):
    return _ext_lookup_table_max_extraction_coal_low_mohr15(x, final_subs)


_ext_lookup_table_max_extraction_coal_low_mohr15 = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "160",
    "E161",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_coal_low_mohr15",
)


@component.add(
    name="table max extraction coal User defined",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_coal_user_defined",
        "__lookup__": "_ext_lookup_table_max_extraction_coal_user_defined",
    },
)
def table_max_extraction_coal_user_defined(x, final_subs=None):
    return _ext_lookup_table_max_extraction_coal_user_defined(x, final_subs)


_ext_lookup_table_max_extraction_coal_user_defined = ExtLookup(
    "inputs_EU.xlsx",
    "User defined",
    "153",
    "E154",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_coal_user_defined",
)


@component.add(
    name="table max extraction conv gas BG Mohr15",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_conv_gas_bg_mohr15",
        "__lookup__": "_ext_lookup_table_max_extraction_conv_gas_bg_mohr15",
    },
)
def table_max_extraction_conv_gas_bg_mohr15(x, final_subs=None):
    return _ext_lookup_table_max_extraction_conv_gas_bg_mohr15(x, final_subs)


_ext_lookup_table_max_extraction_conv_gas_bg_mohr15 = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "143",
    "E144",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_conv_gas_bg_mohr15",
)


@component.add(
    name="table max extraction conv gas High Mohr15",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_conv_gas_high_mohr15",
        "__lookup__": "_ext_lookup_table_max_extraction_conv_gas_high_mohr15",
    },
)
def table_max_extraction_conv_gas_high_mohr15(x, final_subs=None):
    return _ext_lookup_table_max_extraction_conv_gas_high_mohr15(x, final_subs)


_ext_lookup_table_max_extraction_conv_gas_high_mohr15 = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "145",
    "E146",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_conv_gas_high_mohr15",
)


@component.add(
    name="URR unconv gas Low Mohr15",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_unconv_gas_low_mohr15"},
)
def urr_unconv_gas_low_mohr15():
    return _ext_constant_urr_unconv_gas_low_mohr15()


_ext_constant_urr_unconv_gas_low_mohr15 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C147",
    {},
    _root,
    {},
    "_ext_constant_urr_unconv_gas_low_mohr15",
)


@component.add(
    name="URR coal High15",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_coal_high15"},
)
def urr_coal_high15():
    return _ext_constant_urr_coal_high15()


_ext_constant_urr_coal_high15 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C164",
    {},
    _root,
    {},
    "_ext_constant_urr_coal_high15",
)


@component.add(
    name="URR coal Low Mohr15",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_coal_low_mohr15"},
)
def urr_coal_low_mohr15():
    return _ext_constant_urr_coal_low_mohr15()


_ext_constant_urr_coal_low_mohr15 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C160",
    {},
    _root,
    {},
    "_ext_constant_urr_coal_low_mohr15",
)


@component.add(
    name="URR unconv gas High Mohr15",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_unconv_gas_high_mohr15"},
)
def urr_unconv_gas_high_mohr15():
    return _ext_constant_urr_unconv_gas_high_mohr15()


_ext_constant_urr_unconv_gas_high_mohr15 = ExtConstant(
    "inputs_EU.xlsx",
    "Constants",
    "C151",
    {},
    _root,
    {},
    "_ext_constant_urr_unconv_gas_high_mohr15",
)


@component.add(
    name="URR unconv gas User defined",
    units="EJ",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_urr_unconv_gas_user_defined"},
)
def urr_unconv_gas_user_defined():
    return _ext_constant_urr_unconv_gas_user_defined()


_ext_constant_urr_unconv_gas_user_defined = ExtConstant(
    "inputs_EU.xlsx",
    "User defined",
    "C148",
    {},
    _root,
    {},
    "_ext_constant_urr_unconv_gas_user_defined",
)


@component.add(
    name="table max extraction unconv oil BG Mohr15",
    units="EJ/Year",
    comp_type="Lookup",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_lookup_table_max_extraction_unconv_oil_bg_mohr15",
        "__lookup__": "_ext_lookup_table_max_extraction_unconv_oil_bg_mohr15",
    },
)
def table_max_extraction_unconv_oil_bg_mohr15(x, final_subs=None):
    return _ext_lookup_table_max_extraction_unconv_oil_bg_mohr15(x, final_subs)


_ext_lookup_table_max_extraction_unconv_oil_bg_mohr15 = ExtLookup(
    "inputs_EU.xlsx",
    "Constants",
    "134",
    "E135",
    {},
    _root,
    {},
    "_ext_lookup_table_max_extraction_unconv_oil_bg_mohr15",
)


@component.add(
    name="Selection constraint extraction unconv oil",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_selection_constraint_extraction_unconv_oil"
    },
)
def selection_constraint_extraction_unconv_oil():
    """
    Selection of type of constraint to annual growth extraction of unconventional oil: 1= Constraint annual growth (%) 2= User defined as a function of time
    """
    return _ext_constant_selection_constraint_extraction_unconv_oil()


_ext_constant_selection_constraint_extraction_unconv_oil = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "D80",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_selection_constraint_extraction_unconv_oil",
)

_ext_constant_selection_constraint_extraction_unconv_oil.add(
    "inputs_EU.xlsx", "SCEN1", "D80", {"scenarios": ["SCEN1"]}
)

_ext_constant_selection_constraint_extraction_unconv_oil.add(
    "inputs_EU.xlsx", "SCEN2", "D80", {"scenarios": ["SCEN2"]}
)

_ext_constant_selection_constraint_extraction_unconv_oil.add(
    "inputs_EU.xlsx", "SCEN3", "D80", {"scenarios": ["SCEN3"]}
)

_ext_constant_selection_constraint_extraction_unconv_oil.add(
    "inputs_EU.xlsx", "SCEN4", "D80", {"scenarios": ["SCEN4"]}
)

_ext_constant_selection_constraint_extraction_unconv_oil.add(
    "inputs_EU.xlsx", "User defined", "D80", {"scenarios": ["User defined"]}
)


@component.add(
    name="Abundance electricity",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_fe_elec_generation_twh_eu": 2, "total_fe_elec_demand_twh": 3},
)
def abundance_electricity():
    """
    The parameter abundance varies between (1;0). Abundance=1 while the supply covers the demand; the closest to 0 indicates a higher divergence between supply and demand.
    """
    return if_then_else(
        total_fe_elec_generation_twh_eu() > total_fe_elec_demand_twh(),
        lambda: xr.DataArray(
            1, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
        ),
        lambda: 1
        - zidz(
            total_fe_elec_demand_twh() - total_fe_elec_generation_twh_eu(),
            total_fe_elec_demand_twh(),
        ),
    )


@component.add(
    name="P constraint growth extraction unconv oil",
    units="Dmnl",
    subscripts=["scenarios"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_p_constraint_growth_extraction_unconv_oil"
    },
)
def p_constraint_growth_extraction_unconv_oil():
    """
    Constant constraint to annual extraction of unconventional oil.
    """
    return _ext_constant_p_constraint_growth_extraction_unconv_oil()


_ext_constant_p_constraint_growth_extraction_unconv_oil = ExtConstant(
    "inputs_EU.xlsx",
    "BAU",
    "C80",
    {"scenarios": ["BAU"]},
    _root,
    {"scenarios": _subscript_dict["scenarios"]},
    "_ext_constant_p_constraint_growth_extraction_unconv_oil",
)

_ext_constant_p_constraint_growth_extraction_unconv_oil.add(
    "inputs_EU.xlsx", "SCEN1", "C80", {"scenarios": ["SCEN1"]}
)

_ext_constant_p_constraint_growth_extraction_unconv_oil.add(
    "inputs_EU.xlsx", "SCEN2", "C80", {"scenarios": ["SCEN2"]}
)

_ext_constant_p_constraint_growth_extraction_unconv_oil.add(
    "inputs_EU.xlsx", "SCEN3", "C80", {"scenarios": ["SCEN3"]}
)

_ext_constant_p_constraint_growth_extraction_unconv_oil.add(
    "inputs_EU.xlsx", "SCEN4", "C80", {"scenarios": ["SCEN4"]}
)

_ext_constant_p_constraint_growth_extraction_unconv_oil.add(
    "inputs_EU.xlsx", "User defined", "C80", {"scenarios": ["User defined"]}
)


@component.add(
    name="extraction unconv oil delayed",
    units="EJ/Year",
    subscripts=["scenarios"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_extraction_unconv_oil_delayed": 1},
    other_deps={
        "_delayfixed_extraction_unconv_oil_delayed": {
            "initial": {"time_step": 1},
            "step": {"extraction_unconv_oil_ej": 1},
        }
    },
)
def extraction_unconv_oil_delayed():
    """
    Extraction of unconventional oil delayed 1 year. Data from Mohr et al (2015) for 1989.
    """
    return _delayfixed_extraction_unconv_oil_delayed()


_delayfixed_extraction_unconv_oil_delayed = DelayFixed(
    lambda: extraction_unconv_oil_ej(),
    lambda: time_step(),
    lambda: xr.DataArray(
        1.09, {"scenarios": _subscript_dict["scenarios"]}, ["scenarios"]
    ),
    time_step,
    "_delayfixed_extraction_unconv_oil_delayed",
)
